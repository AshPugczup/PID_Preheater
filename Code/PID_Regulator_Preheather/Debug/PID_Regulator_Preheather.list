
PID_Regulator_Preheather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8f0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d5c  0800b9b0  0800b9b0  0000c9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e70c  0800e70c  000101f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800e70c  0800e70c  000101f4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800e70c  0800e70c  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e70c  0800e70c  0000f70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e710  0800e710  0000f710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e714  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  200001f4  0800e908  000101f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0800e908  00010a60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001364a  00000000  00000000  0001021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b61  00000000  00000000  00023866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  000263c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e90  00000000  00000000  00027650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000128a2  00000000  00000000  000284e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cf3  00000000  00000000  0003ad82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b60f  00000000  00000000  00052a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005698  00000000  00000000  000be0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000c3760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b998 	.word	0x0800b998

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	0800b998 	.word	0x0800b998

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f833 	bl	80024a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff77 	bl	8002340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f825 	bl	80024a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f81b 	bl	80024a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ffa1 	bl	80023c8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff97 	bl	80023c8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbab 	bl	8000c0c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb33 	bl	8000b2c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb9d 	bl	8000c0c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb93 	bl	8000c0c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb41 	bl	8000b7c <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb37 	bl	8000b7c <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fadd>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	024b      	lsls	r3, r1, #9
 8000520:	0a5a      	lsrs	r2, r3, #9
 8000522:	4694      	mov	ip, r2
 8000524:	004a      	lsls	r2, r1, #1
 8000526:	0fc9      	lsrs	r1, r1, #31
 8000528:	46ce      	mov	lr, r9
 800052a:	4647      	mov	r7, r8
 800052c:	4689      	mov	r9, r1
 800052e:	0045      	lsls	r5, r0, #1
 8000530:	0246      	lsls	r6, r0, #9
 8000532:	0e2d      	lsrs	r5, r5, #24
 8000534:	0e12      	lsrs	r2, r2, #24
 8000536:	b580      	push	{r7, lr}
 8000538:	0999      	lsrs	r1, r3, #6
 800053a:	0a77      	lsrs	r7, r6, #9
 800053c:	0fc4      	lsrs	r4, r0, #31
 800053e:	09b6      	lsrs	r6, r6, #6
 8000540:	1aab      	subs	r3, r5, r2
 8000542:	454c      	cmp	r4, r9
 8000544:	d020      	beq.n	8000588 <__aeabi_fadd+0x6c>
 8000546:	2b00      	cmp	r3, #0
 8000548:	dd0c      	ble.n	8000564 <__aeabi_fadd+0x48>
 800054a:	2a00      	cmp	r2, #0
 800054c:	d134      	bne.n	80005b8 <__aeabi_fadd+0x9c>
 800054e:	2900      	cmp	r1, #0
 8000550:	d02a      	beq.n	80005a8 <__aeabi_fadd+0x8c>
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	2b01      	cmp	r3, #1
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0x3e>
 8000558:	e08f      	b.n	800067a <__aeabi_fadd+0x15e>
 800055a:	2bff      	cmp	r3, #255	@ 0xff
 800055c:	d100      	bne.n	8000560 <__aeabi_fadd+0x44>
 800055e:	e0cd      	b.n	80006fc <__aeabi_fadd+0x1e0>
 8000560:	0013      	movs	r3, r2
 8000562:	e02f      	b.n	80005c4 <__aeabi_fadd+0xa8>
 8000564:	2b00      	cmp	r3, #0
 8000566:	d060      	beq.n	800062a <__aeabi_fadd+0x10e>
 8000568:	1b53      	subs	r3, r2, r5
 800056a:	2d00      	cmp	r5, #0
 800056c:	d000      	beq.n	8000570 <__aeabi_fadd+0x54>
 800056e:	e0ee      	b.n	800074e <__aeabi_fadd+0x232>
 8000570:	2e00      	cmp	r6, #0
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x5a>
 8000574:	e13e      	b.n	80007f4 <__aeabi_fadd+0x2d8>
 8000576:	1e5c      	subs	r4, r3, #1
 8000578:	2b01      	cmp	r3, #1
 800057a:	d100      	bne.n	800057e <__aeabi_fadd+0x62>
 800057c:	e16b      	b.n	8000856 <__aeabi_fadd+0x33a>
 800057e:	2bff      	cmp	r3, #255	@ 0xff
 8000580:	d100      	bne.n	8000584 <__aeabi_fadd+0x68>
 8000582:	e0b9      	b.n	80006f8 <__aeabi_fadd+0x1dc>
 8000584:	0023      	movs	r3, r4
 8000586:	e0e7      	b.n	8000758 <__aeabi_fadd+0x23c>
 8000588:	2b00      	cmp	r3, #0
 800058a:	dc00      	bgt.n	800058e <__aeabi_fadd+0x72>
 800058c:	e0a4      	b.n	80006d8 <__aeabi_fadd+0x1bc>
 800058e:	2a00      	cmp	r2, #0
 8000590:	d069      	beq.n	8000666 <__aeabi_fadd+0x14a>
 8000592:	2dff      	cmp	r5, #255	@ 0xff
 8000594:	d100      	bne.n	8000598 <__aeabi_fadd+0x7c>
 8000596:	e0b1      	b.n	80006fc <__aeabi_fadd+0x1e0>
 8000598:	2280      	movs	r2, #128	@ 0x80
 800059a:	04d2      	lsls	r2, r2, #19
 800059c:	4311      	orrs	r1, r2
 800059e:	2b1b      	cmp	r3, #27
 80005a0:	dc00      	bgt.n	80005a4 <__aeabi_fadd+0x88>
 80005a2:	e0e9      	b.n	8000778 <__aeabi_fadd+0x25c>
 80005a4:	002b      	movs	r3, r5
 80005a6:	3605      	adds	r6, #5
 80005a8:	08f7      	lsrs	r7, r6, #3
 80005aa:	2bff      	cmp	r3, #255	@ 0xff
 80005ac:	d100      	bne.n	80005b0 <__aeabi_fadd+0x94>
 80005ae:	e0a5      	b.n	80006fc <__aeabi_fadd+0x1e0>
 80005b0:	027a      	lsls	r2, r7, #9
 80005b2:	0a52      	lsrs	r2, r2, #9
 80005b4:	b2d8      	uxtb	r0, r3
 80005b6:	e030      	b.n	800061a <__aeabi_fadd+0xfe>
 80005b8:	2dff      	cmp	r5, #255	@ 0xff
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0xa2>
 80005bc:	e09e      	b.n	80006fc <__aeabi_fadd+0x1e0>
 80005be:	2280      	movs	r2, #128	@ 0x80
 80005c0:	04d2      	lsls	r2, r2, #19
 80005c2:	4311      	orrs	r1, r2
 80005c4:	2001      	movs	r0, #1
 80005c6:	2b1b      	cmp	r3, #27
 80005c8:	dc08      	bgt.n	80005dc <__aeabi_fadd+0xc0>
 80005ca:	0008      	movs	r0, r1
 80005cc:	2220      	movs	r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	4099      	lsls	r1, r3
 80005d4:	000b      	movs	r3, r1
 80005d6:	1e5a      	subs	r2, r3, #1
 80005d8:	4193      	sbcs	r3, r2
 80005da:	4318      	orrs	r0, r3
 80005dc:	1a36      	subs	r6, r6, r0
 80005de:	0173      	lsls	r3, r6, #5
 80005e0:	d400      	bmi.n	80005e4 <__aeabi_fadd+0xc8>
 80005e2:	e071      	b.n	80006c8 <__aeabi_fadd+0x1ac>
 80005e4:	01b6      	lsls	r6, r6, #6
 80005e6:	09b7      	lsrs	r7, r6, #6
 80005e8:	0038      	movs	r0, r7
 80005ea:	f003 f835 	bl	8003658 <__clzsi2>
 80005ee:	003b      	movs	r3, r7
 80005f0:	3805      	subs	r0, #5
 80005f2:	4083      	lsls	r3, r0
 80005f4:	4285      	cmp	r5, r0
 80005f6:	dd4d      	ble.n	8000694 <__aeabi_fadd+0x178>
 80005f8:	4eb4      	ldr	r6, [pc, #720]	@ (80008cc <__aeabi_fadd+0x3b0>)
 80005fa:	1a2d      	subs	r5, r5, r0
 80005fc:	401e      	ands	r6, r3
 80005fe:	075a      	lsls	r2, r3, #29
 8000600:	d068      	beq.n	80006d4 <__aeabi_fadd+0x1b8>
 8000602:	220f      	movs	r2, #15
 8000604:	4013      	ands	r3, r2
 8000606:	2b04      	cmp	r3, #4
 8000608:	d064      	beq.n	80006d4 <__aeabi_fadd+0x1b8>
 800060a:	3604      	adds	r6, #4
 800060c:	0173      	lsls	r3, r6, #5
 800060e:	d561      	bpl.n	80006d4 <__aeabi_fadd+0x1b8>
 8000610:	1c68      	adds	r0, r5, #1
 8000612:	2dfe      	cmp	r5, #254	@ 0xfe
 8000614:	d154      	bne.n	80006c0 <__aeabi_fadd+0x1a4>
 8000616:	20ff      	movs	r0, #255	@ 0xff
 8000618:	2200      	movs	r2, #0
 800061a:	05c0      	lsls	r0, r0, #23
 800061c:	4310      	orrs	r0, r2
 800061e:	07e4      	lsls	r4, r4, #31
 8000620:	4320      	orrs	r0, r4
 8000622:	bcc0      	pop	{r6, r7}
 8000624:	46b9      	mov	r9, r7
 8000626:	46b0      	mov	r8, r6
 8000628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800062a:	22fe      	movs	r2, #254	@ 0xfe
 800062c:	4690      	mov	r8, r2
 800062e:	1c68      	adds	r0, r5, #1
 8000630:	0002      	movs	r2, r0
 8000632:	4640      	mov	r0, r8
 8000634:	4210      	tst	r0, r2
 8000636:	d16b      	bne.n	8000710 <__aeabi_fadd+0x1f4>
 8000638:	2d00      	cmp	r5, #0
 800063a:	d000      	beq.n	800063e <__aeabi_fadd+0x122>
 800063c:	e0dd      	b.n	80007fa <__aeabi_fadd+0x2de>
 800063e:	2e00      	cmp	r6, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x128>
 8000642:	e102      	b.n	800084a <__aeabi_fadd+0x32e>
 8000644:	2900      	cmp	r1, #0
 8000646:	d0b3      	beq.n	80005b0 <__aeabi_fadd+0x94>
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	1a77      	subs	r7, r6, r1
 800064c:	04d2      	lsls	r2, r2, #19
 800064e:	4217      	tst	r7, r2
 8000650:	d100      	bne.n	8000654 <__aeabi_fadd+0x138>
 8000652:	e136      	b.n	80008c2 <__aeabi_fadd+0x3a6>
 8000654:	464c      	mov	r4, r9
 8000656:	1b8e      	subs	r6, r1, r6
 8000658:	d061      	beq.n	800071e <__aeabi_fadd+0x202>
 800065a:	2001      	movs	r0, #1
 800065c:	4216      	tst	r6, r2
 800065e:	d130      	bne.n	80006c2 <__aeabi_fadd+0x1a6>
 8000660:	2300      	movs	r3, #0
 8000662:	08f7      	lsrs	r7, r6, #3
 8000664:	e7a4      	b.n	80005b0 <__aeabi_fadd+0x94>
 8000666:	2900      	cmp	r1, #0
 8000668:	d09e      	beq.n	80005a8 <__aeabi_fadd+0x8c>
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	2b01      	cmp	r3, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x156>
 8000670:	e0ca      	b.n	8000808 <__aeabi_fadd+0x2ec>
 8000672:	2bff      	cmp	r3, #255	@ 0xff
 8000674:	d042      	beq.n	80006fc <__aeabi_fadd+0x1e0>
 8000676:	0013      	movs	r3, r2
 8000678:	e791      	b.n	800059e <__aeabi_fadd+0x82>
 800067a:	1a71      	subs	r1, r6, r1
 800067c:	014b      	lsls	r3, r1, #5
 800067e:	d400      	bmi.n	8000682 <__aeabi_fadd+0x166>
 8000680:	e0d1      	b.n	8000826 <__aeabi_fadd+0x30a>
 8000682:	018f      	lsls	r7, r1, #6
 8000684:	09bf      	lsrs	r7, r7, #6
 8000686:	0038      	movs	r0, r7
 8000688:	f002 ffe6 	bl	8003658 <__clzsi2>
 800068c:	003b      	movs	r3, r7
 800068e:	3805      	subs	r0, #5
 8000690:	4083      	lsls	r3, r0
 8000692:	2501      	movs	r5, #1
 8000694:	2220      	movs	r2, #32
 8000696:	1b40      	subs	r0, r0, r5
 8000698:	3001      	adds	r0, #1
 800069a:	1a12      	subs	r2, r2, r0
 800069c:	001e      	movs	r6, r3
 800069e:	4093      	lsls	r3, r2
 80006a0:	40c6      	lsrs	r6, r0
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	4193      	sbcs	r3, r2
 80006a6:	431e      	orrs	r6, r3
 80006a8:	d039      	beq.n	800071e <__aeabi_fadd+0x202>
 80006aa:	0773      	lsls	r3, r6, #29
 80006ac:	d100      	bne.n	80006b0 <__aeabi_fadd+0x194>
 80006ae:	e11b      	b.n	80008e8 <__aeabi_fadd+0x3cc>
 80006b0:	230f      	movs	r3, #15
 80006b2:	2500      	movs	r5, #0
 80006b4:	4033      	ands	r3, r6
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	d1a7      	bne.n	800060a <__aeabi_fadd+0xee>
 80006ba:	2001      	movs	r0, #1
 80006bc:	0172      	lsls	r2, r6, #5
 80006be:	d57c      	bpl.n	80007ba <__aeabi_fadd+0x29e>
 80006c0:	b2c0      	uxtb	r0, r0
 80006c2:	01b2      	lsls	r2, r6, #6
 80006c4:	0a52      	lsrs	r2, r2, #9
 80006c6:	e7a8      	b.n	800061a <__aeabi_fadd+0xfe>
 80006c8:	0773      	lsls	r3, r6, #29
 80006ca:	d003      	beq.n	80006d4 <__aeabi_fadd+0x1b8>
 80006cc:	230f      	movs	r3, #15
 80006ce:	4033      	ands	r3, r6
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d19a      	bne.n	800060a <__aeabi_fadd+0xee>
 80006d4:	002b      	movs	r3, r5
 80006d6:	e767      	b.n	80005a8 <__aeabi_fadd+0x8c>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d023      	beq.n	8000724 <__aeabi_fadd+0x208>
 80006dc:	1b53      	subs	r3, r2, r5
 80006de:	2d00      	cmp	r5, #0
 80006e0:	d17b      	bne.n	80007da <__aeabi_fadd+0x2be>
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x1cc>
 80006e6:	e086      	b.n	80007f6 <__aeabi_fadd+0x2da>
 80006e8:	1e5d      	subs	r5, r3, #1
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d100      	bne.n	80006f0 <__aeabi_fadd+0x1d4>
 80006ee:	e08b      	b.n	8000808 <__aeabi_fadd+0x2ec>
 80006f0:	2bff      	cmp	r3, #255	@ 0xff
 80006f2:	d002      	beq.n	80006fa <__aeabi_fadd+0x1de>
 80006f4:	002b      	movs	r3, r5
 80006f6:	e075      	b.n	80007e4 <__aeabi_fadd+0x2c8>
 80006f8:	464c      	mov	r4, r9
 80006fa:	4667      	mov	r7, ip
 80006fc:	2f00      	cmp	r7, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0x1e6>
 8000700:	e789      	b.n	8000616 <__aeabi_fadd+0xfa>
 8000702:	2280      	movs	r2, #128	@ 0x80
 8000704:	03d2      	lsls	r2, r2, #15
 8000706:	433a      	orrs	r2, r7
 8000708:	0252      	lsls	r2, r2, #9
 800070a:	20ff      	movs	r0, #255	@ 0xff
 800070c:	0a52      	lsrs	r2, r2, #9
 800070e:	e784      	b.n	800061a <__aeabi_fadd+0xfe>
 8000710:	1a77      	subs	r7, r6, r1
 8000712:	017b      	lsls	r3, r7, #5
 8000714:	d46b      	bmi.n	80007ee <__aeabi_fadd+0x2d2>
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_fadd+0x200>
 800071a:	e765      	b.n	80005e8 <__aeabi_fadd+0xcc>
 800071c:	2400      	movs	r4, #0
 800071e:	2000      	movs	r0, #0
 8000720:	2200      	movs	r2, #0
 8000722:	e77a      	b.n	800061a <__aeabi_fadd+0xfe>
 8000724:	22fe      	movs	r2, #254	@ 0xfe
 8000726:	1c6b      	adds	r3, r5, #1
 8000728:	421a      	tst	r2, r3
 800072a:	d149      	bne.n	80007c0 <__aeabi_fadd+0x2a4>
 800072c:	2d00      	cmp	r5, #0
 800072e:	d000      	beq.n	8000732 <__aeabi_fadd+0x216>
 8000730:	e09f      	b.n	8000872 <__aeabi_fadd+0x356>
 8000732:	2e00      	cmp	r6, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x21c>
 8000736:	e0ba      	b.n	80008ae <__aeabi_fadd+0x392>
 8000738:	2900      	cmp	r1, #0
 800073a:	d100      	bne.n	800073e <__aeabi_fadd+0x222>
 800073c:	e0cf      	b.n	80008de <__aeabi_fadd+0x3c2>
 800073e:	1872      	adds	r2, r6, r1
 8000740:	0153      	lsls	r3, r2, #5
 8000742:	d400      	bmi.n	8000746 <__aeabi_fadd+0x22a>
 8000744:	e0cd      	b.n	80008e2 <__aeabi_fadd+0x3c6>
 8000746:	0192      	lsls	r2, r2, #6
 8000748:	2001      	movs	r0, #1
 800074a:	0a52      	lsrs	r2, r2, #9
 800074c:	e765      	b.n	800061a <__aeabi_fadd+0xfe>
 800074e:	2aff      	cmp	r2, #255	@ 0xff
 8000750:	d0d2      	beq.n	80006f8 <__aeabi_fadd+0x1dc>
 8000752:	2080      	movs	r0, #128	@ 0x80
 8000754:	04c0      	lsls	r0, r0, #19
 8000756:	4306      	orrs	r6, r0
 8000758:	2001      	movs	r0, #1
 800075a:	2b1b      	cmp	r3, #27
 800075c:	dc08      	bgt.n	8000770 <__aeabi_fadd+0x254>
 800075e:	0030      	movs	r0, r6
 8000760:	2420      	movs	r4, #32
 8000762:	40d8      	lsrs	r0, r3
 8000764:	1ae3      	subs	r3, r4, r3
 8000766:	409e      	lsls	r6, r3
 8000768:	0033      	movs	r3, r6
 800076a:	1e5c      	subs	r4, r3, #1
 800076c:	41a3      	sbcs	r3, r4
 800076e:	4318      	orrs	r0, r3
 8000770:	464c      	mov	r4, r9
 8000772:	0015      	movs	r5, r2
 8000774:	1a0e      	subs	r6, r1, r0
 8000776:	e732      	b.n	80005de <__aeabi_fadd+0xc2>
 8000778:	0008      	movs	r0, r1
 800077a:	2220      	movs	r2, #32
 800077c:	40d8      	lsrs	r0, r3
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	4099      	lsls	r1, r3
 8000782:	000b      	movs	r3, r1
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	4193      	sbcs	r3, r2
 8000788:	4303      	orrs	r3, r0
 800078a:	18f6      	adds	r6, r6, r3
 800078c:	0173      	lsls	r3, r6, #5
 800078e:	d59b      	bpl.n	80006c8 <__aeabi_fadd+0x1ac>
 8000790:	3501      	adds	r5, #1
 8000792:	2dff      	cmp	r5, #255	@ 0xff
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x27c>
 8000796:	e73e      	b.n	8000616 <__aeabi_fadd+0xfa>
 8000798:	2301      	movs	r3, #1
 800079a:	494d      	ldr	r1, [pc, #308]	@ (80008d0 <__aeabi_fadd+0x3b4>)
 800079c:	0872      	lsrs	r2, r6, #1
 800079e:	4033      	ands	r3, r6
 80007a0:	400a      	ands	r2, r1
 80007a2:	431a      	orrs	r2, r3
 80007a4:	0016      	movs	r6, r2
 80007a6:	0753      	lsls	r3, r2, #29
 80007a8:	d004      	beq.n	80007b4 <__aeabi_fadd+0x298>
 80007aa:	230f      	movs	r3, #15
 80007ac:	4013      	ands	r3, r2
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x298>
 80007b2:	e72a      	b.n	800060a <__aeabi_fadd+0xee>
 80007b4:	0173      	lsls	r3, r6, #5
 80007b6:	d500      	bpl.n	80007ba <__aeabi_fadd+0x29e>
 80007b8:	e72a      	b.n	8000610 <__aeabi_fadd+0xf4>
 80007ba:	002b      	movs	r3, r5
 80007bc:	08f7      	lsrs	r7, r6, #3
 80007be:	e6f7      	b.n	80005b0 <__aeabi_fadd+0x94>
 80007c0:	2bff      	cmp	r3, #255	@ 0xff
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0x2aa>
 80007c4:	e727      	b.n	8000616 <__aeabi_fadd+0xfa>
 80007c6:	1871      	adds	r1, r6, r1
 80007c8:	0849      	lsrs	r1, r1, #1
 80007ca:	074a      	lsls	r2, r1, #29
 80007cc:	d02f      	beq.n	800082e <__aeabi_fadd+0x312>
 80007ce:	220f      	movs	r2, #15
 80007d0:	400a      	ands	r2, r1
 80007d2:	2a04      	cmp	r2, #4
 80007d4:	d02b      	beq.n	800082e <__aeabi_fadd+0x312>
 80007d6:	1d0e      	adds	r6, r1, #4
 80007d8:	e6e6      	b.n	80005a8 <__aeabi_fadd+0x8c>
 80007da:	2aff      	cmp	r2, #255	@ 0xff
 80007dc:	d08d      	beq.n	80006fa <__aeabi_fadd+0x1de>
 80007de:	2080      	movs	r0, #128	@ 0x80
 80007e0:	04c0      	lsls	r0, r0, #19
 80007e2:	4306      	orrs	r6, r0
 80007e4:	2b1b      	cmp	r3, #27
 80007e6:	dd24      	ble.n	8000832 <__aeabi_fadd+0x316>
 80007e8:	0013      	movs	r3, r2
 80007ea:	1d4e      	adds	r6, r1, #5
 80007ec:	e6dc      	b.n	80005a8 <__aeabi_fadd+0x8c>
 80007ee:	464c      	mov	r4, r9
 80007f0:	1b8f      	subs	r7, r1, r6
 80007f2:	e6f9      	b.n	80005e8 <__aeabi_fadd+0xcc>
 80007f4:	464c      	mov	r4, r9
 80007f6:	000e      	movs	r6, r1
 80007f8:	e6d6      	b.n	80005a8 <__aeabi_fadd+0x8c>
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d149      	bne.n	8000892 <__aeabi_fadd+0x376>
 80007fe:	2900      	cmp	r1, #0
 8000800:	d068      	beq.n	80008d4 <__aeabi_fadd+0x3b8>
 8000802:	4667      	mov	r7, ip
 8000804:	464c      	mov	r4, r9
 8000806:	e77c      	b.n	8000702 <__aeabi_fadd+0x1e6>
 8000808:	1870      	adds	r0, r6, r1
 800080a:	0143      	lsls	r3, r0, #5
 800080c:	d574      	bpl.n	80008f8 <__aeabi_fadd+0x3dc>
 800080e:	4930      	ldr	r1, [pc, #192]	@ (80008d0 <__aeabi_fadd+0x3b4>)
 8000810:	0840      	lsrs	r0, r0, #1
 8000812:	4001      	ands	r1, r0
 8000814:	0743      	lsls	r3, r0, #29
 8000816:	d009      	beq.n	800082c <__aeabi_fadd+0x310>
 8000818:	230f      	movs	r3, #15
 800081a:	4003      	ands	r3, r0
 800081c:	2b04      	cmp	r3, #4
 800081e:	d005      	beq.n	800082c <__aeabi_fadd+0x310>
 8000820:	2302      	movs	r3, #2
 8000822:	1d0e      	adds	r6, r1, #4
 8000824:	e6c0      	b.n	80005a8 <__aeabi_fadd+0x8c>
 8000826:	2301      	movs	r3, #1
 8000828:	08cf      	lsrs	r7, r1, #3
 800082a:	e6c1      	b.n	80005b0 <__aeabi_fadd+0x94>
 800082c:	2302      	movs	r3, #2
 800082e:	08cf      	lsrs	r7, r1, #3
 8000830:	e6be      	b.n	80005b0 <__aeabi_fadd+0x94>
 8000832:	2520      	movs	r5, #32
 8000834:	0030      	movs	r0, r6
 8000836:	40d8      	lsrs	r0, r3
 8000838:	1aeb      	subs	r3, r5, r3
 800083a:	409e      	lsls	r6, r3
 800083c:	0033      	movs	r3, r6
 800083e:	1e5d      	subs	r5, r3, #1
 8000840:	41ab      	sbcs	r3, r5
 8000842:	4303      	orrs	r3, r0
 8000844:	0015      	movs	r5, r2
 8000846:	185e      	adds	r6, r3, r1
 8000848:	e7a0      	b.n	800078c <__aeabi_fadd+0x270>
 800084a:	2900      	cmp	r1, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x334>
 800084e:	e765      	b.n	800071c <__aeabi_fadd+0x200>
 8000850:	464c      	mov	r4, r9
 8000852:	4667      	mov	r7, ip
 8000854:	e6ac      	b.n	80005b0 <__aeabi_fadd+0x94>
 8000856:	1b8f      	subs	r7, r1, r6
 8000858:	017b      	lsls	r3, r7, #5
 800085a:	d52e      	bpl.n	80008ba <__aeabi_fadd+0x39e>
 800085c:	01bf      	lsls	r7, r7, #6
 800085e:	09bf      	lsrs	r7, r7, #6
 8000860:	0038      	movs	r0, r7
 8000862:	f002 fef9 	bl	8003658 <__clzsi2>
 8000866:	003b      	movs	r3, r7
 8000868:	3805      	subs	r0, #5
 800086a:	4083      	lsls	r3, r0
 800086c:	464c      	mov	r4, r9
 800086e:	3501      	adds	r5, #1
 8000870:	e710      	b.n	8000694 <__aeabi_fadd+0x178>
 8000872:	2e00      	cmp	r6, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x35c>
 8000876:	e740      	b.n	80006fa <__aeabi_fadd+0x1de>
 8000878:	2900      	cmp	r1, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x362>
 800087c:	e741      	b.n	8000702 <__aeabi_fadd+0x1e6>
 800087e:	2380      	movs	r3, #128	@ 0x80
 8000880:	03db      	lsls	r3, r3, #15
 8000882:	429f      	cmp	r7, r3
 8000884:	d200      	bcs.n	8000888 <__aeabi_fadd+0x36c>
 8000886:	e73c      	b.n	8000702 <__aeabi_fadd+0x1e6>
 8000888:	459c      	cmp	ip, r3
 800088a:	d300      	bcc.n	800088e <__aeabi_fadd+0x372>
 800088c:	e739      	b.n	8000702 <__aeabi_fadd+0x1e6>
 800088e:	4667      	mov	r7, ip
 8000890:	e737      	b.n	8000702 <__aeabi_fadd+0x1e6>
 8000892:	2900      	cmp	r1, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_fadd+0x37c>
 8000896:	e734      	b.n	8000702 <__aeabi_fadd+0x1e6>
 8000898:	2380      	movs	r3, #128	@ 0x80
 800089a:	03db      	lsls	r3, r3, #15
 800089c:	429f      	cmp	r7, r3
 800089e:	d200      	bcs.n	80008a2 <__aeabi_fadd+0x386>
 80008a0:	e72f      	b.n	8000702 <__aeabi_fadd+0x1e6>
 80008a2:	459c      	cmp	ip, r3
 80008a4:	d300      	bcc.n	80008a8 <__aeabi_fadd+0x38c>
 80008a6:	e72c      	b.n	8000702 <__aeabi_fadd+0x1e6>
 80008a8:	464c      	mov	r4, r9
 80008aa:	4667      	mov	r7, ip
 80008ac:	e729      	b.n	8000702 <__aeabi_fadd+0x1e6>
 80008ae:	2900      	cmp	r1, #0
 80008b0:	d100      	bne.n	80008b4 <__aeabi_fadd+0x398>
 80008b2:	e734      	b.n	800071e <__aeabi_fadd+0x202>
 80008b4:	2300      	movs	r3, #0
 80008b6:	08cf      	lsrs	r7, r1, #3
 80008b8:	e67a      	b.n	80005b0 <__aeabi_fadd+0x94>
 80008ba:	464c      	mov	r4, r9
 80008bc:	2301      	movs	r3, #1
 80008be:	08ff      	lsrs	r7, r7, #3
 80008c0:	e676      	b.n	80005b0 <__aeabi_fadd+0x94>
 80008c2:	2f00      	cmp	r7, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x3ac>
 80008c6:	e729      	b.n	800071c <__aeabi_fadd+0x200>
 80008c8:	08ff      	lsrs	r7, r7, #3
 80008ca:	e671      	b.n	80005b0 <__aeabi_fadd+0x94>
 80008cc:	fbffffff 	.word	0xfbffffff
 80008d0:	7dffffff 	.word	0x7dffffff
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	2400      	movs	r4, #0
 80008d8:	20ff      	movs	r0, #255	@ 0xff
 80008da:	03d2      	lsls	r2, r2, #15
 80008dc:	e69d      	b.n	800061a <__aeabi_fadd+0xfe>
 80008de:	2300      	movs	r3, #0
 80008e0:	e666      	b.n	80005b0 <__aeabi_fadd+0x94>
 80008e2:	2300      	movs	r3, #0
 80008e4:	08d7      	lsrs	r7, r2, #3
 80008e6:	e663      	b.n	80005b0 <__aeabi_fadd+0x94>
 80008e8:	2001      	movs	r0, #1
 80008ea:	0172      	lsls	r2, r6, #5
 80008ec:	d500      	bpl.n	80008f0 <__aeabi_fadd+0x3d4>
 80008ee:	e6e7      	b.n	80006c0 <__aeabi_fadd+0x1a4>
 80008f0:	0031      	movs	r1, r6
 80008f2:	2300      	movs	r3, #0
 80008f4:	08cf      	lsrs	r7, r1, #3
 80008f6:	e65b      	b.n	80005b0 <__aeabi_fadd+0x94>
 80008f8:	2301      	movs	r3, #1
 80008fa:	08c7      	lsrs	r7, r0, #3
 80008fc:	e658      	b.n	80005b0 <__aeabi_fadd+0x94>
 80008fe:	46c0      	nop			@ (mov r8, r8)

08000900 <__aeabi_fdiv>:
 8000900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000902:	4646      	mov	r6, r8
 8000904:	464f      	mov	r7, r9
 8000906:	46d6      	mov	lr, sl
 8000908:	0245      	lsls	r5, r0, #9
 800090a:	b5c0      	push	{r6, r7, lr}
 800090c:	0fc3      	lsrs	r3, r0, #31
 800090e:	0047      	lsls	r7, r0, #1
 8000910:	4698      	mov	r8, r3
 8000912:	1c0e      	adds	r6, r1, #0
 8000914:	0a6d      	lsrs	r5, r5, #9
 8000916:	0e3f      	lsrs	r7, r7, #24
 8000918:	d05b      	beq.n	80009d2 <__aeabi_fdiv+0xd2>
 800091a:	2fff      	cmp	r7, #255	@ 0xff
 800091c:	d021      	beq.n	8000962 <__aeabi_fdiv+0x62>
 800091e:	2380      	movs	r3, #128	@ 0x80
 8000920:	00ed      	lsls	r5, r5, #3
 8000922:	04db      	lsls	r3, r3, #19
 8000924:	431d      	orrs	r5, r3
 8000926:	2300      	movs	r3, #0
 8000928:	4699      	mov	r9, r3
 800092a:	469a      	mov	sl, r3
 800092c:	3f7f      	subs	r7, #127	@ 0x7f
 800092e:	0274      	lsls	r4, r6, #9
 8000930:	0073      	lsls	r3, r6, #1
 8000932:	0a64      	lsrs	r4, r4, #9
 8000934:	0e1b      	lsrs	r3, r3, #24
 8000936:	0ff6      	lsrs	r6, r6, #31
 8000938:	2b00      	cmp	r3, #0
 800093a:	d020      	beq.n	800097e <__aeabi_fdiv+0x7e>
 800093c:	2bff      	cmp	r3, #255	@ 0xff
 800093e:	d043      	beq.n	80009c8 <__aeabi_fdiv+0xc8>
 8000940:	2280      	movs	r2, #128	@ 0x80
 8000942:	2000      	movs	r0, #0
 8000944:	00e4      	lsls	r4, r4, #3
 8000946:	04d2      	lsls	r2, r2, #19
 8000948:	4314      	orrs	r4, r2
 800094a:	3b7f      	subs	r3, #127	@ 0x7f
 800094c:	4642      	mov	r2, r8
 800094e:	1aff      	subs	r7, r7, r3
 8000950:	464b      	mov	r3, r9
 8000952:	4072      	eors	r2, r6
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d900      	bls.n	800095a <__aeabi_fdiv+0x5a>
 8000958:	e09d      	b.n	8000a96 <__aeabi_fdiv+0x196>
 800095a:	4971      	ldr	r1, [pc, #452]	@ (8000b20 <__aeabi_fdiv+0x220>)
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	58cb      	ldr	r3, [r1, r3]
 8000960:	469f      	mov	pc, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d15a      	bne.n	8000a1c <__aeabi_fdiv+0x11c>
 8000966:	2308      	movs	r3, #8
 8000968:	4699      	mov	r9, r3
 800096a:	3b06      	subs	r3, #6
 800096c:	0274      	lsls	r4, r6, #9
 800096e:	469a      	mov	sl, r3
 8000970:	0073      	lsls	r3, r6, #1
 8000972:	27ff      	movs	r7, #255	@ 0xff
 8000974:	0a64      	lsrs	r4, r4, #9
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0ff6      	lsrs	r6, r6, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1de      	bne.n	800093c <__aeabi_fdiv+0x3c>
 800097e:	2c00      	cmp	r4, #0
 8000980:	d13b      	bne.n	80009fa <__aeabi_fdiv+0xfa>
 8000982:	2301      	movs	r3, #1
 8000984:	4642      	mov	r2, r8
 8000986:	4649      	mov	r1, r9
 8000988:	4072      	eors	r2, r6
 800098a:	4319      	orrs	r1, r3
 800098c:	290e      	cmp	r1, #14
 800098e:	d818      	bhi.n	80009c2 <__aeabi_fdiv+0xc2>
 8000990:	4864      	ldr	r0, [pc, #400]	@ (8000b24 <__aeabi_fdiv+0x224>)
 8000992:	0089      	lsls	r1, r1, #2
 8000994:	5841      	ldr	r1, [r0, r1]
 8000996:	468f      	mov	pc, r1
 8000998:	4653      	mov	r3, sl
 800099a:	2b02      	cmp	r3, #2
 800099c:	d100      	bne.n	80009a0 <__aeabi_fdiv+0xa0>
 800099e:	e0b8      	b.n	8000b12 <__aeabi_fdiv+0x212>
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d06e      	beq.n	8000a82 <__aeabi_fdiv+0x182>
 80009a4:	4642      	mov	r2, r8
 80009a6:	002c      	movs	r4, r5
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d140      	bne.n	8000a2e <__aeabi_fdiv+0x12e>
 80009ac:	2000      	movs	r0, #0
 80009ae:	2400      	movs	r4, #0
 80009b0:	05c0      	lsls	r0, r0, #23
 80009b2:	4320      	orrs	r0, r4
 80009b4:	07d2      	lsls	r2, r2, #31
 80009b6:	4310      	orrs	r0, r2
 80009b8:	bce0      	pop	{r5, r6, r7}
 80009ba:	46ba      	mov	sl, r7
 80009bc:	46b1      	mov	r9, r6
 80009be:	46a8      	mov	r8, r5
 80009c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c2:	20ff      	movs	r0, #255	@ 0xff
 80009c4:	2400      	movs	r4, #0
 80009c6:	e7f3      	b.n	80009b0 <__aeabi_fdiv+0xb0>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d120      	bne.n	8000a0e <__aeabi_fdiv+0x10e>
 80009cc:	2302      	movs	r3, #2
 80009ce:	3fff      	subs	r7, #255	@ 0xff
 80009d0:	e7d8      	b.n	8000984 <__aeabi_fdiv+0x84>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d105      	bne.n	80009e2 <__aeabi_fdiv+0xe2>
 80009d6:	2304      	movs	r3, #4
 80009d8:	4699      	mov	r9, r3
 80009da:	3b03      	subs	r3, #3
 80009dc:	2700      	movs	r7, #0
 80009de:	469a      	mov	sl, r3
 80009e0:	e7a5      	b.n	800092e <__aeabi_fdiv+0x2e>
 80009e2:	0028      	movs	r0, r5
 80009e4:	f002 fe38 	bl	8003658 <__clzsi2>
 80009e8:	2776      	movs	r7, #118	@ 0x76
 80009ea:	1f43      	subs	r3, r0, #5
 80009ec:	409d      	lsls	r5, r3
 80009ee:	2300      	movs	r3, #0
 80009f0:	427f      	negs	r7, r7
 80009f2:	4699      	mov	r9, r3
 80009f4:	469a      	mov	sl, r3
 80009f6:	1a3f      	subs	r7, r7, r0
 80009f8:	e799      	b.n	800092e <__aeabi_fdiv+0x2e>
 80009fa:	0020      	movs	r0, r4
 80009fc:	f002 fe2c 	bl	8003658 <__clzsi2>
 8000a00:	1f43      	subs	r3, r0, #5
 8000a02:	409c      	lsls	r4, r3
 8000a04:	2376      	movs	r3, #118	@ 0x76
 8000a06:	425b      	negs	r3, r3
 8000a08:	1a1b      	subs	r3, r3, r0
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	e79e      	b.n	800094c <__aeabi_fdiv+0x4c>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	464a      	mov	r2, r9
 8000a12:	431a      	orrs	r2, r3
 8000a14:	4691      	mov	r9, r2
 8000a16:	2003      	movs	r0, #3
 8000a18:	33fc      	adds	r3, #252	@ 0xfc
 8000a1a:	e797      	b.n	800094c <__aeabi_fdiv+0x4c>
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	4699      	mov	r9, r3
 8000a20:	3b09      	subs	r3, #9
 8000a22:	27ff      	movs	r7, #255	@ 0xff
 8000a24:	469a      	mov	sl, r3
 8000a26:	e782      	b.n	800092e <__aeabi_fdiv+0x2e>
 8000a28:	2803      	cmp	r0, #3
 8000a2a:	d02c      	beq.n	8000a86 <__aeabi_fdiv+0x186>
 8000a2c:	0032      	movs	r2, r6
 8000a2e:	0038      	movs	r0, r7
 8000a30:	307f      	adds	r0, #127	@ 0x7f
 8000a32:	2800      	cmp	r0, #0
 8000a34:	dd47      	ble.n	8000ac6 <__aeabi_fdiv+0x1c6>
 8000a36:	0763      	lsls	r3, r4, #29
 8000a38:	d004      	beq.n	8000a44 <__aeabi_fdiv+0x144>
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	4023      	ands	r3, r4
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d000      	beq.n	8000a44 <__aeabi_fdiv+0x144>
 8000a42:	3404      	adds	r4, #4
 8000a44:	0123      	lsls	r3, r4, #4
 8000a46:	d503      	bpl.n	8000a50 <__aeabi_fdiv+0x150>
 8000a48:	0038      	movs	r0, r7
 8000a4a:	4b37      	ldr	r3, [pc, #220]	@ (8000b28 <__aeabi_fdiv+0x228>)
 8000a4c:	3080      	adds	r0, #128	@ 0x80
 8000a4e:	401c      	ands	r4, r3
 8000a50:	28fe      	cmp	r0, #254	@ 0xfe
 8000a52:	dcb6      	bgt.n	80009c2 <__aeabi_fdiv+0xc2>
 8000a54:	01a4      	lsls	r4, r4, #6
 8000a56:	0a64      	lsrs	r4, r4, #9
 8000a58:	b2c0      	uxtb	r0, r0
 8000a5a:	e7a9      	b.n	80009b0 <__aeabi_fdiv+0xb0>
 8000a5c:	2480      	movs	r4, #128	@ 0x80
 8000a5e:	2200      	movs	r2, #0
 8000a60:	20ff      	movs	r0, #255	@ 0xff
 8000a62:	03e4      	lsls	r4, r4, #15
 8000a64:	e7a4      	b.n	80009b0 <__aeabi_fdiv+0xb0>
 8000a66:	2380      	movs	r3, #128	@ 0x80
 8000a68:	03db      	lsls	r3, r3, #15
 8000a6a:	421d      	tst	r5, r3
 8000a6c:	d001      	beq.n	8000a72 <__aeabi_fdiv+0x172>
 8000a6e:	421c      	tst	r4, r3
 8000a70:	d00b      	beq.n	8000a8a <__aeabi_fdiv+0x18a>
 8000a72:	2480      	movs	r4, #128	@ 0x80
 8000a74:	03e4      	lsls	r4, r4, #15
 8000a76:	432c      	orrs	r4, r5
 8000a78:	0264      	lsls	r4, r4, #9
 8000a7a:	4642      	mov	r2, r8
 8000a7c:	20ff      	movs	r0, #255	@ 0xff
 8000a7e:	0a64      	lsrs	r4, r4, #9
 8000a80:	e796      	b.n	80009b0 <__aeabi_fdiv+0xb0>
 8000a82:	4646      	mov	r6, r8
 8000a84:	002c      	movs	r4, r5
 8000a86:	2380      	movs	r3, #128	@ 0x80
 8000a88:	03db      	lsls	r3, r3, #15
 8000a8a:	431c      	orrs	r4, r3
 8000a8c:	0264      	lsls	r4, r4, #9
 8000a8e:	0032      	movs	r2, r6
 8000a90:	20ff      	movs	r0, #255	@ 0xff
 8000a92:	0a64      	lsrs	r4, r4, #9
 8000a94:	e78c      	b.n	80009b0 <__aeabi_fdiv+0xb0>
 8000a96:	016d      	lsls	r5, r5, #5
 8000a98:	0160      	lsls	r0, r4, #5
 8000a9a:	4285      	cmp	r5, r0
 8000a9c:	d22d      	bcs.n	8000afa <__aeabi_fdiv+0x1fa>
 8000a9e:	231b      	movs	r3, #27
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	3f01      	subs	r7, #1
 8000aa4:	2601      	movs	r6, #1
 8000aa6:	0029      	movs	r1, r5
 8000aa8:	0064      	lsls	r4, r4, #1
 8000aaa:	006d      	lsls	r5, r5, #1
 8000aac:	2900      	cmp	r1, #0
 8000aae:	db01      	blt.n	8000ab4 <__aeabi_fdiv+0x1b4>
 8000ab0:	4285      	cmp	r5, r0
 8000ab2:	d301      	bcc.n	8000ab8 <__aeabi_fdiv+0x1b8>
 8000ab4:	1a2d      	subs	r5, r5, r0
 8000ab6:	4334      	orrs	r4, r6
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f3      	bne.n	8000aa6 <__aeabi_fdiv+0x1a6>
 8000abe:	1e6b      	subs	r3, r5, #1
 8000ac0:	419d      	sbcs	r5, r3
 8000ac2:	432c      	orrs	r4, r5
 8000ac4:	e7b3      	b.n	8000a2e <__aeabi_fdiv+0x12e>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	1a1b      	subs	r3, r3, r0
 8000aca:	2b1b      	cmp	r3, #27
 8000acc:	dd00      	ble.n	8000ad0 <__aeabi_fdiv+0x1d0>
 8000ace:	e76d      	b.n	80009ac <__aeabi_fdiv+0xac>
 8000ad0:	0021      	movs	r1, r4
 8000ad2:	379e      	adds	r7, #158	@ 0x9e
 8000ad4:	40d9      	lsrs	r1, r3
 8000ad6:	40bc      	lsls	r4, r7
 8000ad8:	000b      	movs	r3, r1
 8000ada:	1e61      	subs	r1, r4, #1
 8000adc:	418c      	sbcs	r4, r1
 8000ade:	4323      	orrs	r3, r4
 8000ae0:	0759      	lsls	r1, r3, #29
 8000ae2:	d004      	beq.n	8000aee <__aeabi_fdiv+0x1ee>
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	4019      	ands	r1, r3
 8000ae8:	2904      	cmp	r1, #4
 8000aea:	d000      	beq.n	8000aee <__aeabi_fdiv+0x1ee>
 8000aec:	3304      	adds	r3, #4
 8000aee:	0159      	lsls	r1, r3, #5
 8000af0:	d413      	bmi.n	8000b1a <__aeabi_fdiv+0x21a>
 8000af2:	019b      	lsls	r3, r3, #6
 8000af4:	2000      	movs	r0, #0
 8000af6:	0a5c      	lsrs	r4, r3, #9
 8000af8:	e75a      	b.n	80009b0 <__aeabi_fdiv+0xb0>
 8000afa:	231a      	movs	r3, #26
 8000afc:	2401      	movs	r4, #1
 8000afe:	1a2d      	subs	r5, r5, r0
 8000b00:	e7d0      	b.n	8000aa4 <__aeabi_fdiv+0x1a4>
 8000b02:	1e98      	subs	r0, r3, #2
 8000b04:	4243      	negs	r3, r0
 8000b06:	4158      	adcs	r0, r3
 8000b08:	4240      	negs	r0, r0
 8000b0a:	0032      	movs	r2, r6
 8000b0c:	2400      	movs	r4, #0
 8000b0e:	b2c0      	uxtb	r0, r0
 8000b10:	e74e      	b.n	80009b0 <__aeabi_fdiv+0xb0>
 8000b12:	4642      	mov	r2, r8
 8000b14:	20ff      	movs	r0, #255	@ 0xff
 8000b16:	2400      	movs	r4, #0
 8000b18:	e74a      	b.n	80009b0 <__aeabi_fdiv+0xb0>
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	2400      	movs	r4, #0
 8000b1e:	e747      	b.n	80009b0 <__aeabi_fdiv+0xb0>
 8000b20:	0800ba68 	.word	0x0800ba68
 8000b24:	0800baa8 	.word	0x0800baa8
 8000b28:	f7ffffff 	.word	0xf7ffffff

08000b2c <__eqsf2>:
 8000b2c:	b570      	push	{r4, r5, r6, lr}
 8000b2e:	0042      	lsls	r2, r0, #1
 8000b30:	024e      	lsls	r6, r1, #9
 8000b32:	004c      	lsls	r4, r1, #1
 8000b34:	0245      	lsls	r5, r0, #9
 8000b36:	0a6d      	lsrs	r5, r5, #9
 8000b38:	0e12      	lsrs	r2, r2, #24
 8000b3a:	0fc3      	lsrs	r3, r0, #31
 8000b3c:	0a76      	lsrs	r6, r6, #9
 8000b3e:	0e24      	lsrs	r4, r4, #24
 8000b40:	0fc9      	lsrs	r1, r1, #31
 8000b42:	2aff      	cmp	r2, #255	@ 0xff
 8000b44:	d010      	beq.n	8000b68 <__eqsf2+0x3c>
 8000b46:	2cff      	cmp	r4, #255	@ 0xff
 8000b48:	d00c      	beq.n	8000b64 <__eqsf2+0x38>
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	42a2      	cmp	r2, r4
 8000b4e:	d10a      	bne.n	8000b66 <__eqsf2+0x3a>
 8000b50:	42b5      	cmp	r5, r6
 8000b52:	d108      	bne.n	8000b66 <__eqsf2+0x3a>
 8000b54:	428b      	cmp	r3, r1
 8000b56:	d00f      	beq.n	8000b78 <__eqsf2+0x4c>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d104      	bne.n	8000b66 <__eqsf2+0x3a>
 8000b5c:	0028      	movs	r0, r5
 8000b5e:	1e43      	subs	r3, r0, #1
 8000b60:	4198      	sbcs	r0, r3
 8000b62:	e000      	b.n	8000b66 <__eqsf2+0x3a>
 8000b64:	2001      	movs	r0, #1
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	2001      	movs	r0, #1
 8000b6a:	2cff      	cmp	r4, #255	@ 0xff
 8000b6c:	d1fb      	bne.n	8000b66 <__eqsf2+0x3a>
 8000b6e:	4335      	orrs	r5, r6
 8000b70:	d1f9      	bne.n	8000b66 <__eqsf2+0x3a>
 8000b72:	404b      	eors	r3, r1
 8000b74:	0018      	movs	r0, r3
 8000b76:	e7f6      	b.n	8000b66 <__eqsf2+0x3a>
 8000b78:	2000      	movs	r0, #0
 8000b7a:	e7f4      	b.n	8000b66 <__eqsf2+0x3a>

08000b7c <__gesf2>:
 8000b7c:	b530      	push	{r4, r5, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0244      	lsls	r4, r0, #9
 8000b82:	024d      	lsls	r5, r1, #9
 8000b84:	0fc3      	lsrs	r3, r0, #31
 8000b86:	0048      	lsls	r0, r1, #1
 8000b88:	0a64      	lsrs	r4, r4, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a6d      	lsrs	r5, r5, #9
 8000b8e:	0e00      	lsrs	r0, r0, #24
 8000b90:	0fc9      	lsrs	r1, r1, #31
 8000b92:	2aff      	cmp	r2, #255	@ 0xff
 8000b94:	d018      	beq.n	8000bc8 <__gesf2+0x4c>
 8000b96:	28ff      	cmp	r0, #255	@ 0xff
 8000b98:	d00a      	beq.n	8000bb0 <__gesf2+0x34>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d11e      	bne.n	8000bdc <__gesf2+0x60>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d10a      	bne.n	8000bb8 <__gesf2+0x3c>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d029      	beq.n	8000bfa <__gesf2+0x7e>
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d12d      	bne.n	8000c06 <__gesf2+0x8a>
 8000baa:	0048      	lsls	r0, r1, #1
 8000bac:	3801      	subs	r0, #1
 8000bae:	bd30      	pop	{r4, r5, pc}
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d125      	bne.n	8000c00 <__gesf2+0x84>
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d101      	bne.n	8000bbc <__gesf2+0x40>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d0f6      	beq.n	8000baa <__gesf2+0x2e>
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d019      	beq.n	8000bf4 <__gesf2+0x78>
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	4318      	orrs	r0, r3
 8000bc6:	e7f2      	b.n	8000bae <__gesf2+0x32>
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	d119      	bne.n	8000c00 <__gesf2+0x84>
 8000bcc:	28ff      	cmp	r0, #255	@ 0xff
 8000bce:	d1f7      	bne.n	8000bc0 <__gesf2+0x44>
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d115      	bne.n	8000c00 <__gesf2+0x84>
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d1f2      	bne.n	8000bc0 <__gesf2+0x44>
 8000bda:	e7e8      	b.n	8000bae <__gesf2+0x32>
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d0ef      	beq.n	8000bc0 <__gesf2+0x44>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d1ed      	bne.n	8000bc0 <__gesf2+0x44>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	dceb      	bgt.n	8000bc0 <__gesf2+0x44>
 8000be8:	db04      	blt.n	8000bf4 <__gesf2+0x78>
 8000bea:	42ac      	cmp	r4, r5
 8000bec:	d8e8      	bhi.n	8000bc0 <__gesf2+0x44>
 8000bee:	2000      	movs	r0, #0
 8000bf0:	42ac      	cmp	r4, r5
 8000bf2:	d2dc      	bcs.n	8000bae <__gesf2+0x32>
 8000bf4:	0058      	lsls	r0, r3, #1
 8000bf6:	3801      	subs	r0, #1
 8000bf8:	e7d9      	b.n	8000bae <__gesf2+0x32>
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d0d7      	beq.n	8000bae <__gesf2+0x32>
 8000bfe:	e7df      	b.n	8000bc0 <__gesf2+0x44>
 8000c00:	2002      	movs	r0, #2
 8000c02:	4240      	negs	r0, r0
 8000c04:	e7d3      	b.n	8000bae <__gesf2+0x32>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d1da      	bne.n	8000bc0 <__gesf2+0x44>
 8000c0a:	e7ee      	b.n	8000bea <__gesf2+0x6e>

08000c0c <__lesf2>:
 8000c0c:	b530      	push	{r4, r5, lr}
 8000c0e:	0042      	lsls	r2, r0, #1
 8000c10:	0244      	lsls	r4, r0, #9
 8000c12:	024d      	lsls	r5, r1, #9
 8000c14:	0fc3      	lsrs	r3, r0, #31
 8000c16:	0048      	lsls	r0, r1, #1
 8000c18:	0a64      	lsrs	r4, r4, #9
 8000c1a:	0e12      	lsrs	r2, r2, #24
 8000c1c:	0a6d      	lsrs	r5, r5, #9
 8000c1e:	0e00      	lsrs	r0, r0, #24
 8000c20:	0fc9      	lsrs	r1, r1, #31
 8000c22:	2aff      	cmp	r2, #255	@ 0xff
 8000c24:	d017      	beq.n	8000c56 <__lesf2+0x4a>
 8000c26:	28ff      	cmp	r0, #255	@ 0xff
 8000c28:	d00a      	beq.n	8000c40 <__lesf2+0x34>
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	d11b      	bne.n	8000c66 <__lesf2+0x5a>
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d10a      	bne.n	8000c48 <__lesf2+0x3c>
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d01d      	beq.n	8000c72 <__lesf2+0x66>
 8000c36:	2c00      	cmp	r4, #0
 8000c38:	d12d      	bne.n	8000c96 <__lesf2+0x8a>
 8000c3a:	0048      	lsls	r0, r1, #1
 8000c3c:	3801      	subs	r0, #1
 8000c3e:	e011      	b.n	8000c64 <__lesf2+0x58>
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	d10e      	bne.n	8000c62 <__lesf2+0x56>
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	d101      	bne.n	8000c4c <__lesf2+0x40>
 8000c48:	2c00      	cmp	r4, #0
 8000c4a:	d0f6      	beq.n	8000c3a <__lesf2+0x2e>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d10c      	bne.n	8000c6a <__lesf2+0x5e>
 8000c50:	0058      	lsls	r0, r3, #1
 8000c52:	3801      	subs	r0, #1
 8000c54:	e006      	b.n	8000c64 <__lesf2+0x58>
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	d103      	bne.n	8000c62 <__lesf2+0x56>
 8000c5a:	28ff      	cmp	r0, #255	@ 0xff
 8000c5c:	d105      	bne.n	8000c6a <__lesf2+0x5e>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d015      	beq.n	8000c8e <__lesf2+0x82>
 8000c62:	2002      	movs	r0, #2
 8000c64:	bd30      	pop	{r4, r5, pc}
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d106      	bne.n	8000c78 <__lesf2+0x6c>
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	4318      	orrs	r0, r3
 8000c70:	e7f8      	b.n	8000c64 <__lesf2+0x58>
 8000c72:	2c00      	cmp	r4, #0
 8000c74:	d0f6      	beq.n	8000c64 <__lesf2+0x58>
 8000c76:	e7f8      	b.n	8000c6a <__lesf2+0x5e>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	d1f6      	bne.n	8000c6a <__lesf2+0x5e>
 8000c7c:	4282      	cmp	r2, r0
 8000c7e:	dcf4      	bgt.n	8000c6a <__lesf2+0x5e>
 8000c80:	dbe6      	blt.n	8000c50 <__lesf2+0x44>
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	d8f1      	bhi.n	8000c6a <__lesf2+0x5e>
 8000c86:	2000      	movs	r0, #0
 8000c88:	42ac      	cmp	r4, r5
 8000c8a:	d2eb      	bcs.n	8000c64 <__lesf2+0x58>
 8000c8c:	e7e0      	b.n	8000c50 <__lesf2+0x44>
 8000c8e:	2000      	movs	r0, #0
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d1ea      	bne.n	8000c6a <__lesf2+0x5e>
 8000c94:	e7e6      	b.n	8000c64 <__lesf2+0x58>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d1e7      	bne.n	8000c6a <__lesf2+0x5e>
 8000c9a:	e7f2      	b.n	8000c82 <__lesf2+0x76>

08000c9c <__aeabi_fmul>:
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9e:	464f      	mov	r7, r9
 8000ca0:	4646      	mov	r6, r8
 8000ca2:	46d6      	mov	lr, sl
 8000ca4:	0044      	lsls	r4, r0, #1
 8000ca6:	b5c0      	push	{r6, r7, lr}
 8000ca8:	0246      	lsls	r6, r0, #9
 8000caa:	1c0f      	adds	r7, r1, #0
 8000cac:	0a76      	lsrs	r6, r6, #9
 8000cae:	0e24      	lsrs	r4, r4, #24
 8000cb0:	0fc5      	lsrs	r5, r0, #31
 8000cb2:	2c00      	cmp	r4, #0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fmul+0x1c>
 8000cb6:	e0da      	b.n	8000e6e <__aeabi_fmul+0x1d2>
 8000cb8:	2cff      	cmp	r4, #255	@ 0xff
 8000cba:	d074      	beq.n	8000da6 <__aeabi_fmul+0x10a>
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	00f6      	lsls	r6, r6, #3
 8000cc0:	04db      	lsls	r3, r3, #19
 8000cc2:	431e      	orrs	r6, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	469a      	mov	sl, r3
 8000cca:	3c7f      	subs	r4, #127	@ 0x7f
 8000ccc:	027b      	lsls	r3, r7, #9
 8000cce:	0a5b      	lsrs	r3, r3, #9
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	007b      	lsls	r3, r7, #1
 8000cd4:	0e1b      	lsrs	r3, r3, #24
 8000cd6:	0fff      	lsrs	r7, r7, #31
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d074      	beq.n	8000dc6 <__aeabi_fmul+0x12a>
 8000cdc:	2bff      	cmp	r3, #255	@ 0xff
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fmul+0x46>
 8000ce0:	e08e      	b.n	8000e00 <__aeabi_fmul+0x164>
 8000ce2:	4642      	mov	r2, r8
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	00d2      	lsls	r2, r2, #3
 8000ce8:	04c9      	lsls	r1, r1, #19
 8000cea:	4311      	orrs	r1, r2
 8000cec:	3b7f      	subs	r3, #127	@ 0x7f
 8000cee:	002a      	movs	r2, r5
 8000cf0:	18e4      	adds	r4, r4, r3
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	407a      	eors	r2, r7
 8000cf6:	4688      	mov	r8, r1
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	2b0a      	cmp	r3, #10
 8000cfc:	dc75      	bgt.n	8000dea <__aeabi_fmul+0x14e>
 8000cfe:	464b      	mov	r3, r9
 8000d00:	2000      	movs	r0, #0
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	dd0f      	ble.n	8000d26 <__aeabi_fmul+0x8a>
 8000d06:	4649      	mov	r1, r9
 8000d08:	2301      	movs	r3, #1
 8000d0a:	408b      	lsls	r3, r1
 8000d0c:	21a6      	movs	r1, #166	@ 0xa6
 8000d0e:	00c9      	lsls	r1, r1, #3
 8000d10:	420b      	tst	r3, r1
 8000d12:	d169      	bne.n	8000de8 <__aeabi_fmul+0x14c>
 8000d14:	2190      	movs	r1, #144	@ 0x90
 8000d16:	0089      	lsls	r1, r1, #2
 8000d18:	420b      	tst	r3, r1
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_fmul+0x82>
 8000d1c:	e100      	b.n	8000f20 <__aeabi_fmul+0x284>
 8000d1e:	2188      	movs	r1, #136	@ 0x88
 8000d20:	4219      	tst	r1, r3
 8000d22:	d000      	beq.n	8000d26 <__aeabi_fmul+0x8a>
 8000d24:	e0f5      	b.n	8000f12 <__aeabi_fmul+0x276>
 8000d26:	4641      	mov	r1, r8
 8000d28:	0409      	lsls	r1, r1, #16
 8000d2a:	0c09      	lsrs	r1, r1, #16
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	0008      	movs	r0, r1
 8000d30:	0c35      	lsrs	r5, r6, #16
 8000d32:	0436      	lsls	r6, r6, #16
 8000d34:	0c1b      	lsrs	r3, r3, #16
 8000d36:	0c36      	lsrs	r6, r6, #16
 8000d38:	4370      	muls	r0, r6
 8000d3a:	4369      	muls	r1, r5
 8000d3c:	435e      	muls	r6, r3
 8000d3e:	435d      	muls	r5, r3
 8000d40:	1876      	adds	r6, r6, r1
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	199b      	adds	r3, r3, r6
 8000d46:	4299      	cmp	r1, r3
 8000d48:	d903      	bls.n	8000d52 <__aeabi_fmul+0xb6>
 8000d4a:	2180      	movs	r1, #128	@ 0x80
 8000d4c:	0249      	lsls	r1, r1, #9
 8000d4e:	468c      	mov	ip, r1
 8000d50:	4465      	add	r5, ip
 8000d52:	0400      	lsls	r0, r0, #16
 8000d54:	0419      	lsls	r1, r3, #16
 8000d56:	0c00      	lsrs	r0, r0, #16
 8000d58:	1809      	adds	r1, r1, r0
 8000d5a:	018e      	lsls	r6, r1, #6
 8000d5c:	1e70      	subs	r0, r6, #1
 8000d5e:	4186      	sbcs	r6, r0
 8000d60:	0c1b      	lsrs	r3, r3, #16
 8000d62:	0e89      	lsrs	r1, r1, #26
 8000d64:	195b      	adds	r3, r3, r5
 8000d66:	430e      	orrs	r6, r1
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	431e      	orrs	r6, r3
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	d46c      	bmi.n	8000e4a <__aeabi_fmul+0x1ae>
 8000d70:	0023      	movs	r3, r4
 8000d72:	337f      	adds	r3, #127	@ 0x7f
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	dc00      	bgt.n	8000d7a <__aeabi_fmul+0xde>
 8000d78:	e0b1      	b.n	8000ede <__aeabi_fmul+0x242>
 8000d7a:	0015      	movs	r5, r2
 8000d7c:	0771      	lsls	r1, r6, #29
 8000d7e:	d00b      	beq.n	8000d98 <__aeabi_fmul+0xfc>
 8000d80:	200f      	movs	r0, #15
 8000d82:	0021      	movs	r1, r4
 8000d84:	4030      	ands	r0, r6
 8000d86:	2804      	cmp	r0, #4
 8000d88:	d006      	beq.n	8000d98 <__aeabi_fmul+0xfc>
 8000d8a:	3604      	adds	r6, #4
 8000d8c:	0132      	lsls	r2, r6, #4
 8000d8e:	d503      	bpl.n	8000d98 <__aeabi_fmul+0xfc>
 8000d90:	4b6e      	ldr	r3, [pc, #440]	@ (8000f4c <__aeabi_fmul+0x2b0>)
 8000d92:	401e      	ands	r6, r3
 8000d94:	000b      	movs	r3, r1
 8000d96:	3380      	adds	r3, #128	@ 0x80
 8000d98:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d9a:	dd00      	ble.n	8000d9e <__aeabi_fmul+0x102>
 8000d9c:	e0bd      	b.n	8000f1a <__aeabi_fmul+0x27e>
 8000d9e:	01b2      	lsls	r2, r6, #6
 8000da0:	0a52      	lsrs	r2, r2, #9
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	e048      	b.n	8000e38 <__aeabi_fmul+0x19c>
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d000      	beq.n	8000dac <__aeabi_fmul+0x110>
 8000daa:	e092      	b.n	8000ed2 <__aeabi_fmul+0x236>
 8000dac:	2308      	movs	r3, #8
 8000dae:	4699      	mov	r9, r3
 8000db0:	3b06      	subs	r3, #6
 8000db2:	469a      	mov	sl, r3
 8000db4:	027b      	lsls	r3, r7, #9
 8000db6:	0a5b      	lsrs	r3, r3, #9
 8000db8:	4698      	mov	r8, r3
 8000dba:	007b      	lsls	r3, r7, #1
 8000dbc:	24ff      	movs	r4, #255	@ 0xff
 8000dbe:	0e1b      	lsrs	r3, r3, #24
 8000dc0:	0fff      	lsrs	r7, r7, #31
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d18a      	bne.n	8000cdc <__aeabi_fmul+0x40>
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d164      	bne.n	8000e96 <__aeabi_fmul+0x1fa>
 8000dcc:	4649      	mov	r1, r9
 8000dce:	3201      	adds	r2, #1
 8000dd0:	4311      	orrs	r1, r2
 8000dd2:	4689      	mov	r9, r1
 8000dd4:	290a      	cmp	r1, #10
 8000dd6:	dc08      	bgt.n	8000dea <__aeabi_fmul+0x14e>
 8000dd8:	407d      	eors	r5, r7
 8000dda:	2001      	movs	r0, #1
 8000ddc:	b2ea      	uxtb	r2, r5
 8000dde:	2902      	cmp	r1, #2
 8000de0:	dc91      	bgt.n	8000d06 <__aeabi_fmul+0x6a>
 8000de2:	0015      	movs	r5, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e027      	b.n	8000e38 <__aeabi_fmul+0x19c>
 8000de8:	0015      	movs	r5, r2
 8000dea:	4653      	mov	r3, sl
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d100      	bne.n	8000df2 <__aeabi_fmul+0x156>
 8000df0:	e093      	b.n	8000f1a <__aeabi_fmul+0x27e>
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d01a      	beq.n	8000e2c <__aeabi_fmul+0x190>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d12c      	bne.n	8000e54 <__aeabi_fmul+0x1b8>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	e01b      	b.n	8000e38 <__aeabi_fmul+0x19c>
 8000e00:	4643      	mov	r3, r8
 8000e02:	34ff      	adds	r4, #255	@ 0xff
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d055      	beq.n	8000eb4 <__aeabi_fmul+0x218>
 8000e08:	2103      	movs	r1, #3
 8000e0a:	464b      	mov	r3, r9
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	0019      	movs	r1, r3
 8000e10:	2b0a      	cmp	r3, #10
 8000e12:	dc00      	bgt.n	8000e16 <__aeabi_fmul+0x17a>
 8000e14:	e092      	b.n	8000f3c <__aeabi_fmul+0x2a0>
 8000e16:	2b0f      	cmp	r3, #15
 8000e18:	d000      	beq.n	8000e1c <__aeabi_fmul+0x180>
 8000e1a:	e08c      	b.n	8000f36 <__aeabi_fmul+0x29a>
 8000e1c:	2280      	movs	r2, #128	@ 0x80
 8000e1e:	03d2      	lsls	r2, r2, #15
 8000e20:	4216      	tst	r6, r2
 8000e22:	d003      	beq.n	8000e2c <__aeabi_fmul+0x190>
 8000e24:	4643      	mov	r3, r8
 8000e26:	4213      	tst	r3, r2
 8000e28:	d100      	bne.n	8000e2c <__aeabi_fmul+0x190>
 8000e2a:	e07d      	b.n	8000f28 <__aeabi_fmul+0x28c>
 8000e2c:	2280      	movs	r2, #128	@ 0x80
 8000e2e:	03d2      	lsls	r2, r2, #15
 8000e30:	4332      	orrs	r2, r6
 8000e32:	0252      	lsls	r2, r2, #9
 8000e34:	0a52      	lsrs	r2, r2, #9
 8000e36:	23ff      	movs	r3, #255	@ 0xff
 8000e38:	05d8      	lsls	r0, r3, #23
 8000e3a:	07ed      	lsls	r5, r5, #31
 8000e3c:	4310      	orrs	r0, r2
 8000e3e:	4328      	orrs	r0, r5
 8000e40:	bce0      	pop	{r5, r6, r7}
 8000e42:	46ba      	mov	sl, r7
 8000e44:	46b1      	mov	r9, r6
 8000e46:	46a8      	mov	r8, r5
 8000e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	0015      	movs	r5, r2
 8000e4e:	0871      	lsrs	r1, r6, #1
 8000e50:	401e      	ands	r6, r3
 8000e52:	430e      	orrs	r6, r1
 8000e54:	0023      	movs	r3, r4
 8000e56:	3380      	adds	r3, #128	@ 0x80
 8000e58:	1c61      	adds	r1, r4, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	dd41      	ble.n	8000ee2 <__aeabi_fmul+0x246>
 8000e5e:	0772      	lsls	r2, r6, #29
 8000e60:	d094      	beq.n	8000d8c <__aeabi_fmul+0xf0>
 8000e62:	220f      	movs	r2, #15
 8000e64:	4032      	ands	r2, r6
 8000e66:	2a04      	cmp	r2, #4
 8000e68:	d000      	beq.n	8000e6c <__aeabi_fmul+0x1d0>
 8000e6a:	e78e      	b.n	8000d8a <__aeabi_fmul+0xee>
 8000e6c:	e78e      	b.n	8000d8c <__aeabi_fmul+0xf0>
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	d105      	bne.n	8000e7e <__aeabi_fmul+0x1e2>
 8000e72:	2304      	movs	r3, #4
 8000e74:	4699      	mov	r9, r3
 8000e76:	3b03      	subs	r3, #3
 8000e78:	2400      	movs	r4, #0
 8000e7a:	469a      	mov	sl, r3
 8000e7c:	e726      	b.n	8000ccc <__aeabi_fmul+0x30>
 8000e7e:	0030      	movs	r0, r6
 8000e80:	f002 fbea 	bl	8003658 <__clzsi2>
 8000e84:	2476      	movs	r4, #118	@ 0x76
 8000e86:	1f43      	subs	r3, r0, #5
 8000e88:	409e      	lsls	r6, r3
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	4264      	negs	r4, r4
 8000e8e:	4699      	mov	r9, r3
 8000e90:	469a      	mov	sl, r3
 8000e92:	1a24      	subs	r4, r4, r0
 8000e94:	e71a      	b.n	8000ccc <__aeabi_fmul+0x30>
 8000e96:	4640      	mov	r0, r8
 8000e98:	f002 fbde 	bl	8003658 <__clzsi2>
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	1a24      	subs	r4, r4, r0
 8000ea0:	3c76      	subs	r4, #118	@ 0x76
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	dca1      	bgt.n	8000dea <__aeabi_fmul+0x14e>
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	3805      	subs	r0, #5
 8000eaa:	4083      	lsls	r3, r0
 8000eac:	407d      	eors	r5, r7
 8000eae:	4698      	mov	r8, r3
 8000eb0:	b2ea      	uxtb	r2, r5
 8000eb2:	e724      	b.n	8000cfe <__aeabi_fmul+0x62>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	002a      	movs	r2, r5
 8000ebc:	407a      	eors	r2, r7
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	2b0a      	cmp	r3, #10
 8000ec2:	dc92      	bgt.n	8000dea <__aeabi_fmul+0x14e>
 8000ec4:	4649      	mov	r1, r9
 8000ec6:	0015      	movs	r5, r2
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	d026      	beq.n	8000f1a <__aeabi_fmul+0x27e>
 8000ecc:	4699      	mov	r9, r3
 8000ece:	2002      	movs	r0, #2
 8000ed0:	e719      	b.n	8000d06 <__aeabi_fmul+0x6a>
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	4699      	mov	r9, r3
 8000ed6:	3b09      	subs	r3, #9
 8000ed8:	24ff      	movs	r4, #255	@ 0xff
 8000eda:	469a      	mov	sl, r3
 8000edc:	e6f6      	b.n	8000ccc <__aeabi_fmul+0x30>
 8000ede:	0015      	movs	r5, r2
 8000ee0:	0021      	movs	r1, r4
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b1b      	cmp	r3, #27
 8000ee8:	dd00      	ble.n	8000eec <__aeabi_fmul+0x250>
 8000eea:	e786      	b.n	8000dfa <__aeabi_fmul+0x15e>
 8000eec:	319e      	adds	r1, #158	@ 0x9e
 8000eee:	0032      	movs	r2, r6
 8000ef0:	408e      	lsls	r6, r1
 8000ef2:	40da      	lsrs	r2, r3
 8000ef4:	1e73      	subs	r3, r6, #1
 8000ef6:	419e      	sbcs	r6, r3
 8000ef8:	4332      	orrs	r2, r6
 8000efa:	0753      	lsls	r3, r2, #29
 8000efc:	d004      	beq.n	8000f08 <__aeabi_fmul+0x26c>
 8000efe:	230f      	movs	r3, #15
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d000      	beq.n	8000f08 <__aeabi_fmul+0x26c>
 8000f06:	3204      	adds	r2, #4
 8000f08:	0153      	lsls	r3, r2, #5
 8000f0a:	d510      	bpl.n	8000f2e <__aeabi_fmul+0x292>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	e792      	b.n	8000e38 <__aeabi_fmul+0x19c>
 8000f12:	003d      	movs	r5, r7
 8000f14:	4646      	mov	r6, r8
 8000f16:	4682      	mov	sl, r0
 8000f18:	e767      	b.n	8000dea <__aeabi_fmul+0x14e>
 8000f1a:	23ff      	movs	r3, #255	@ 0xff
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	e78b      	b.n	8000e38 <__aeabi_fmul+0x19c>
 8000f20:	2280      	movs	r2, #128	@ 0x80
 8000f22:	2500      	movs	r5, #0
 8000f24:	03d2      	lsls	r2, r2, #15
 8000f26:	e786      	b.n	8000e36 <__aeabi_fmul+0x19a>
 8000f28:	003d      	movs	r5, r7
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	e783      	b.n	8000e36 <__aeabi_fmul+0x19a>
 8000f2e:	0192      	lsls	r2, r2, #6
 8000f30:	2300      	movs	r3, #0
 8000f32:	0a52      	lsrs	r2, r2, #9
 8000f34:	e780      	b.n	8000e38 <__aeabi_fmul+0x19c>
 8000f36:	003d      	movs	r5, r7
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e777      	b.n	8000e2c <__aeabi_fmul+0x190>
 8000f3c:	002a      	movs	r2, r5
 8000f3e:	2301      	movs	r3, #1
 8000f40:	407a      	eors	r2, r7
 8000f42:	408b      	lsls	r3, r1
 8000f44:	2003      	movs	r0, #3
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	e6e9      	b.n	8000d1e <__aeabi_fmul+0x82>
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	f7ffffff 	.word	0xf7ffffff

08000f50 <__aeabi_fsub>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	4647      	mov	r7, r8
 8000f54:	46ce      	mov	lr, r9
 8000f56:	0243      	lsls	r3, r0, #9
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	0a5f      	lsrs	r7, r3, #9
 8000f5c:	099b      	lsrs	r3, r3, #6
 8000f5e:	0045      	lsls	r5, r0, #1
 8000f60:	004a      	lsls	r2, r1, #1
 8000f62:	469c      	mov	ip, r3
 8000f64:	024b      	lsls	r3, r1, #9
 8000f66:	0fc4      	lsrs	r4, r0, #31
 8000f68:	0fce      	lsrs	r6, r1, #31
 8000f6a:	0e2d      	lsrs	r5, r5, #24
 8000f6c:	0a58      	lsrs	r0, r3, #9
 8000f6e:	0e12      	lsrs	r2, r2, #24
 8000f70:	0999      	lsrs	r1, r3, #6
 8000f72:	2aff      	cmp	r2, #255	@ 0xff
 8000f74:	d06b      	beq.n	800104e <__aeabi_fsub+0xfe>
 8000f76:	2301      	movs	r3, #1
 8000f78:	405e      	eors	r6, r3
 8000f7a:	1aab      	subs	r3, r5, r2
 8000f7c:	42b4      	cmp	r4, r6
 8000f7e:	d04b      	beq.n	8001018 <__aeabi_fsub+0xc8>
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	dc00      	bgt.n	8000f86 <__aeabi_fsub+0x36>
 8000f84:	e0ff      	b.n	8001186 <__aeabi_fsub+0x236>
 8000f86:	2a00      	cmp	r2, #0
 8000f88:	d100      	bne.n	8000f8c <__aeabi_fsub+0x3c>
 8000f8a:	e088      	b.n	800109e <__aeabi_fsub+0x14e>
 8000f8c:	2dff      	cmp	r5, #255	@ 0xff
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0x42>
 8000f90:	e0ef      	b.n	8001172 <__aeabi_fsub+0x222>
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	04d2      	lsls	r2, r2, #19
 8000f96:	4311      	orrs	r1, r2
 8000f98:	2001      	movs	r0, #1
 8000f9a:	2b1b      	cmp	r3, #27
 8000f9c:	dc08      	bgt.n	8000fb0 <__aeabi_fsub+0x60>
 8000f9e:	0008      	movs	r0, r1
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	4099      	lsls	r1, r3
 8000fa8:	000b      	movs	r3, r1
 8000faa:	1e5a      	subs	r2, r3, #1
 8000fac:	4193      	sbcs	r3, r2
 8000fae:	4318      	orrs	r0, r3
 8000fb0:	4663      	mov	r3, ip
 8000fb2:	1a1b      	subs	r3, r3, r0
 8000fb4:	469c      	mov	ip, r3
 8000fb6:	4663      	mov	r3, ip
 8000fb8:	015b      	lsls	r3, r3, #5
 8000fba:	d400      	bmi.n	8000fbe <__aeabi_fsub+0x6e>
 8000fbc:	e0cd      	b.n	800115a <__aeabi_fsub+0x20a>
 8000fbe:	4663      	mov	r3, ip
 8000fc0:	019f      	lsls	r7, r3, #6
 8000fc2:	09bf      	lsrs	r7, r7, #6
 8000fc4:	0038      	movs	r0, r7
 8000fc6:	f002 fb47 	bl	8003658 <__clzsi2>
 8000fca:	003b      	movs	r3, r7
 8000fcc:	3805      	subs	r0, #5
 8000fce:	4083      	lsls	r3, r0
 8000fd0:	4285      	cmp	r5, r0
 8000fd2:	dc00      	bgt.n	8000fd6 <__aeabi_fsub+0x86>
 8000fd4:	e0a2      	b.n	800111c <__aeabi_fsub+0x1cc>
 8000fd6:	4ab7      	ldr	r2, [pc, #732]	@ (80012b4 <__aeabi_fsub+0x364>)
 8000fd8:	1a2d      	subs	r5, r5, r0
 8000fda:	401a      	ands	r2, r3
 8000fdc:	4694      	mov	ip, r2
 8000fde:	075a      	lsls	r2, r3, #29
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_fsub+0x94>
 8000fe2:	e0c3      	b.n	800116c <__aeabi_fsub+0x21c>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d100      	bne.n	8000fee <__aeabi_fsub+0x9e>
 8000fec:	e0be      	b.n	800116c <__aeabi_fsub+0x21c>
 8000fee:	2304      	movs	r3, #4
 8000ff0:	4698      	mov	r8, r3
 8000ff2:	44c4      	add	ip, r8
 8000ff4:	4663      	mov	r3, ip
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	d400      	bmi.n	8000ffc <__aeabi_fsub+0xac>
 8000ffa:	e0b7      	b.n	800116c <__aeabi_fsub+0x21c>
 8000ffc:	1c68      	adds	r0, r5, #1
 8000ffe:	2dfe      	cmp	r5, #254	@ 0xfe
 8001000:	d000      	beq.n	8001004 <__aeabi_fsub+0xb4>
 8001002:	e0a5      	b.n	8001150 <__aeabi_fsub+0x200>
 8001004:	20ff      	movs	r0, #255	@ 0xff
 8001006:	2200      	movs	r2, #0
 8001008:	05c0      	lsls	r0, r0, #23
 800100a:	4310      	orrs	r0, r2
 800100c:	07e4      	lsls	r4, r4, #31
 800100e:	4320      	orrs	r0, r4
 8001010:	bcc0      	pop	{r6, r7}
 8001012:	46b9      	mov	r9, r7
 8001014:	46b0      	mov	r8, r6
 8001016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001018:	2b00      	cmp	r3, #0
 800101a:	dc00      	bgt.n	800101e <__aeabi_fsub+0xce>
 800101c:	e1eb      	b.n	80013f6 <__aeabi_fsub+0x4a6>
 800101e:	2a00      	cmp	r2, #0
 8001020:	d046      	beq.n	80010b0 <__aeabi_fsub+0x160>
 8001022:	2dff      	cmp	r5, #255	@ 0xff
 8001024:	d100      	bne.n	8001028 <__aeabi_fsub+0xd8>
 8001026:	e0a4      	b.n	8001172 <__aeabi_fsub+0x222>
 8001028:	2280      	movs	r2, #128	@ 0x80
 800102a:	04d2      	lsls	r2, r2, #19
 800102c:	4311      	orrs	r1, r2
 800102e:	2b1b      	cmp	r3, #27
 8001030:	dc00      	bgt.n	8001034 <__aeabi_fsub+0xe4>
 8001032:	e0fb      	b.n	800122c <__aeabi_fsub+0x2dc>
 8001034:	2305      	movs	r3, #5
 8001036:	4698      	mov	r8, r3
 8001038:	002b      	movs	r3, r5
 800103a:	44c4      	add	ip, r8
 800103c:	4662      	mov	r2, ip
 800103e:	08d7      	lsrs	r7, r2, #3
 8001040:	2bff      	cmp	r3, #255	@ 0xff
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0xf6>
 8001044:	e095      	b.n	8001172 <__aeabi_fsub+0x222>
 8001046:	027a      	lsls	r2, r7, #9
 8001048:	0a52      	lsrs	r2, r2, #9
 800104a:	b2d8      	uxtb	r0, r3
 800104c:	e7dc      	b.n	8001008 <__aeabi_fsub+0xb8>
 800104e:	002b      	movs	r3, r5
 8001050:	3bff      	subs	r3, #255	@ 0xff
 8001052:	4699      	mov	r9, r3
 8001054:	2900      	cmp	r1, #0
 8001056:	d118      	bne.n	800108a <__aeabi_fsub+0x13a>
 8001058:	2301      	movs	r3, #1
 800105a:	405e      	eors	r6, r3
 800105c:	42b4      	cmp	r4, r6
 800105e:	d100      	bne.n	8001062 <__aeabi_fsub+0x112>
 8001060:	e0ca      	b.n	80011f8 <__aeabi_fsub+0x2a8>
 8001062:	464b      	mov	r3, r9
 8001064:	2b00      	cmp	r3, #0
 8001066:	d02d      	beq.n	80010c4 <__aeabi_fsub+0x174>
 8001068:	2d00      	cmp	r5, #0
 800106a:	d000      	beq.n	800106e <__aeabi_fsub+0x11e>
 800106c:	e13c      	b.n	80012e8 <__aeabi_fsub+0x398>
 800106e:	23ff      	movs	r3, #255	@ 0xff
 8001070:	4664      	mov	r4, ip
 8001072:	2c00      	cmp	r4, #0
 8001074:	d100      	bne.n	8001078 <__aeabi_fsub+0x128>
 8001076:	e15f      	b.n	8001338 <__aeabi_fsub+0x3e8>
 8001078:	1e5d      	subs	r5, r3, #1
 800107a:	2b01      	cmp	r3, #1
 800107c:	d100      	bne.n	8001080 <__aeabi_fsub+0x130>
 800107e:	e174      	b.n	800136a <__aeabi_fsub+0x41a>
 8001080:	0034      	movs	r4, r6
 8001082:	2bff      	cmp	r3, #255	@ 0xff
 8001084:	d074      	beq.n	8001170 <__aeabi_fsub+0x220>
 8001086:	002b      	movs	r3, r5
 8001088:	e103      	b.n	8001292 <__aeabi_fsub+0x342>
 800108a:	42b4      	cmp	r4, r6
 800108c:	d100      	bne.n	8001090 <__aeabi_fsub+0x140>
 800108e:	e09c      	b.n	80011ca <__aeabi_fsub+0x27a>
 8001090:	2b00      	cmp	r3, #0
 8001092:	d017      	beq.n	80010c4 <__aeabi_fsub+0x174>
 8001094:	2d00      	cmp	r5, #0
 8001096:	d0ea      	beq.n	800106e <__aeabi_fsub+0x11e>
 8001098:	0007      	movs	r7, r0
 800109a:	0034      	movs	r4, r6
 800109c:	e06c      	b.n	8001178 <__aeabi_fsub+0x228>
 800109e:	2900      	cmp	r1, #0
 80010a0:	d0cc      	beq.n	800103c <__aeabi_fsub+0xec>
 80010a2:	1e5a      	subs	r2, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d02b      	beq.n	8001100 <__aeabi_fsub+0x1b0>
 80010a8:	2bff      	cmp	r3, #255	@ 0xff
 80010aa:	d062      	beq.n	8001172 <__aeabi_fsub+0x222>
 80010ac:	0013      	movs	r3, r2
 80010ae:	e773      	b.n	8000f98 <__aeabi_fsub+0x48>
 80010b0:	2900      	cmp	r1, #0
 80010b2:	d0c3      	beq.n	800103c <__aeabi_fsub+0xec>
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d100      	bne.n	80010bc <__aeabi_fsub+0x16c>
 80010ba:	e11e      	b.n	80012fa <__aeabi_fsub+0x3aa>
 80010bc:	2bff      	cmp	r3, #255	@ 0xff
 80010be:	d058      	beq.n	8001172 <__aeabi_fsub+0x222>
 80010c0:	0013      	movs	r3, r2
 80010c2:	e7b4      	b.n	800102e <__aeabi_fsub+0xde>
 80010c4:	22fe      	movs	r2, #254	@ 0xfe
 80010c6:	1c6b      	adds	r3, r5, #1
 80010c8:	421a      	tst	r2, r3
 80010ca:	d10d      	bne.n	80010e8 <__aeabi_fsub+0x198>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d060      	beq.n	8001192 <__aeabi_fsub+0x242>
 80010d0:	4663      	mov	r3, ip
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0x188>
 80010d6:	e120      	b.n	800131a <__aeabi_fsub+0x3ca>
 80010d8:	2900      	cmp	r1, #0
 80010da:	d000      	beq.n	80010de <__aeabi_fsub+0x18e>
 80010dc:	e128      	b.n	8001330 <__aeabi_fsub+0x3e0>
 80010de:	2280      	movs	r2, #128	@ 0x80
 80010e0:	2400      	movs	r4, #0
 80010e2:	20ff      	movs	r0, #255	@ 0xff
 80010e4:	03d2      	lsls	r2, r2, #15
 80010e6:	e78f      	b.n	8001008 <__aeabi_fsub+0xb8>
 80010e8:	4663      	mov	r3, ip
 80010ea:	1a5f      	subs	r7, r3, r1
 80010ec:	017b      	lsls	r3, r7, #5
 80010ee:	d500      	bpl.n	80010f2 <__aeabi_fsub+0x1a2>
 80010f0:	e0fe      	b.n	80012f0 <__aeabi_fsub+0x3a0>
 80010f2:	2f00      	cmp	r7, #0
 80010f4:	d000      	beq.n	80010f8 <__aeabi_fsub+0x1a8>
 80010f6:	e765      	b.n	8000fc4 <__aeabi_fsub+0x74>
 80010f8:	2400      	movs	r4, #0
 80010fa:	2000      	movs	r0, #0
 80010fc:	2200      	movs	r2, #0
 80010fe:	e783      	b.n	8001008 <__aeabi_fsub+0xb8>
 8001100:	4663      	mov	r3, ip
 8001102:	1a59      	subs	r1, r3, r1
 8001104:	014b      	lsls	r3, r1, #5
 8001106:	d400      	bmi.n	800110a <__aeabi_fsub+0x1ba>
 8001108:	e119      	b.n	800133e <__aeabi_fsub+0x3ee>
 800110a:	018f      	lsls	r7, r1, #6
 800110c:	09bf      	lsrs	r7, r7, #6
 800110e:	0038      	movs	r0, r7
 8001110:	f002 faa2 	bl	8003658 <__clzsi2>
 8001114:	003b      	movs	r3, r7
 8001116:	3805      	subs	r0, #5
 8001118:	4083      	lsls	r3, r0
 800111a:	2501      	movs	r5, #1
 800111c:	2220      	movs	r2, #32
 800111e:	1b40      	subs	r0, r0, r5
 8001120:	3001      	adds	r0, #1
 8001122:	1a12      	subs	r2, r2, r0
 8001124:	0019      	movs	r1, r3
 8001126:	4093      	lsls	r3, r2
 8001128:	40c1      	lsrs	r1, r0
 800112a:	1e5a      	subs	r2, r3, #1
 800112c:	4193      	sbcs	r3, r2
 800112e:	4319      	orrs	r1, r3
 8001130:	468c      	mov	ip, r1
 8001132:	1e0b      	subs	r3, r1, #0
 8001134:	d0e1      	beq.n	80010fa <__aeabi_fsub+0x1aa>
 8001136:	075b      	lsls	r3, r3, #29
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x1ec>
 800113a:	e152      	b.n	80013e2 <__aeabi_fsub+0x492>
 800113c:	230f      	movs	r3, #15
 800113e:	2500      	movs	r5, #0
 8001140:	400b      	ands	r3, r1
 8001142:	2b04      	cmp	r3, #4
 8001144:	d000      	beq.n	8001148 <__aeabi_fsub+0x1f8>
 8001146:	e752      	b.n	8000fee <__aeabi_fsub+0x9e>
 8001148:	2001      	movs	r0, #1
 800114a:	014a      	lsls	r2, r1, #5
 800114c:	d400      	bmi.n	8001150 <__aeabi_fsub+0x200>
 800114e:	e092      	b.n	8001276 <__aeabi_fsub+0x326>
 8001150:	b2c0      	uxtb	r0, r0
 8001152:	4663      	mov	r3, ip
 8001154:	019a      	lsls	r2, r3, #6
 8001156:	0a52      	lsrs	r2, r2, #9
 8001158:	e756      	b.n	8001008 <__aeabi_fsub+0xb8>
 800115a:	4663      	mov	r3, ip
 800115c:	075b      	lsls	r3, r3, #29
 800115e:	d005      	beq.n	800116c <__aeabi_fsub+0x21c>
 8001160:	230f      	movs	r3, #15
 8001162:	4662      	mov	r2, ip
 8001164:	4013      	ands	r3, r2
 8001166:	2b04      	cmp	r3, #4
 8001168:	d000      	beq.n	800116c <__aeabi_fsub+0x21c>
 800116a:	e740      	b.n	8000fee <__aeabi_fsub+0x9e>
 800116c:	002b      	movs	r3, r5
 800116e:	e765      	b.n	800103c <__aeabi_fsub+0xec>
 8001170:	0007      	movs	r7, r0
 8001172:	2f00      	cmp	r7, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_fsub+0x228>
 8001176:	e745      	b.n	8001004 <__aeabi_fsub+0xb4>
 8001178:	2280      	movs	r2, #128	@ 0x80
 800117a:	03d2      	lsls	r2, r2, #15
 800117c:	433a      	orrs	r2, r7
 800117e:	0252      	lsls	r2, r2, #9
 8001180:	20ff      	movs	r0, #255	@ 0xff
 8001182:	0a52      	lsrs	r2, r2, #9
 8001184:	e740      	b.n	8001008 <__aeabi_fsub+0xb8>
 8001186:	2b00      	cmp	r3, #0
 8001188:	d179      	bne.n	800127e <__aeabi_fsub+0x32e>
 800118a:	22fe      	movs	r2, #254	@ 0xfe
 800118c:	1c6b      	adds	r3, r5, #1
 800118e:	421a      	tst	r2, r3
 8001190:	d1aa      	bne.n	80010e8 <__aeabi_fsub+0x198>
 8001192:	4663      	mov	r3, ip
 8001194:	2b00      	cmp	r3, #0
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x24a>
 8001198:	e0f5      	b.n	8001386 <__aeabi_fsub+0x436>
 800119a:	2900      	cmp	r1, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_fsub+0x250>
 800119e:	e0d1      	b.n	8001344 <__aeabi_fsub+0x3f4>
 80011a0:	1a5f      	subs	r7, r3, r1
 80011a2:	2380      	movs	r3, #128	@ 0x80
 80011a4:	04db      	lsls	r3, r3, #19
 80011a6:	421f      	tst	r7, r3
 80011a8:	d100      	bne.n	80011ac <__aeabi_fsub+0x25c>
 80011aa:	e10e      	b.n	80013ca <__aeabi_fsub+0x47a>
 80011ac:	4662      	mov	r2, ip
 80011ae:	2401      	movs	r4, #1
 80011b0:	1a8a      	subs	r2, r1, r2
 80011b2:	4694      	mov	ip, r2
 80011b4:	2000      	movs	r0, #0
 80011b6:	4034      	ands	r4, r6
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	d100      	bne.n	80011be <__aeabi_fsub+0x26e>
 80011bc:	e724      	b.n	8001008 <__aeabi_fsub+0xb8>
 80011be:	2001      	movs	r0, #1
 80011c0:	421a      	tst	r2, r3
 80011c2:	d1c6      	bne.n	8001152 <__aeabi_fsub+0x202>
 80011c4:	2300      	movs	r3, #0
 80011c6:	08d7      	lsrs	r7, r2, #3
 80011c8:	e73d      	b.n	8001046 <__aeabi_fsub+0xf6>
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d017      	beq.n	80011fe <__aeabi_fsub+0x2ae>
 80011ce:	2d00      	cmp	r5, #0
 80011d0:	d000      	beq.n	80011d4 <__aeabi_fsub+0x284>
 80011d2:	e0af      	b.n	8001334 <__aeabi_fsub+0x3e4>
 80011d4:	23ff      	movs	r3, #255	@ 0xff
 80011d6:	4665      	mov	r5, ip
 80011d8:	2d00      	cmp	r5, #0
 80011da:	d100      	bne.n	80011de <__aeabi_fsub+0x28e>
 80011dc:	e0ad      	b.n	800133a <__aeabi_fsub+0x3ea>
 80011de:	1e5e      	subs	r6, r3, #1
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x296>
 80011e4:	e089      	b.n	80012fa <__aeabi_fsub+0x3aa>
 80011e6:	2bff      	cmp	r3, #255	@ 0xff
 80011e8:	d0c2      	beq.n	8001170 <__aeabi_fsub+0x220>
 80011ea:	2e1b      	cmp	r6, #27
 80011ec:	dc00      	bgt.n	80011f0 <__aeabi_fsub+0x2a0>
 80011ee:	e0ab      	b.n	8001348 <__aeabi_fsub+0x3f8>
 80011f0:	1d4b      	adds	r3, r1, #5
 80011f2:	469c      	mov	ip, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	e721      	b.n	800103c <__aeabi_fsub+0xec>
 80011f8:	464b      	mov	r3, r9
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d170      	bne.n	80012e0 <__aeabi_fsub+0x390>
 80011fe:	22fe      	movs	r2, #254	@ 0xfe
 8001200:	1c6b      	adds	r3, r5, #1
 8001202:	421a      	tst	r2, r3
 8001204:	d15e      	bne.n	80012c4 <__aeabi_fsub+0x374>
 8001206:	2d00      	cmp	r5, #0
 8001208:	d000      	beq.n	800120c <__aeabi_fsub+0x2bc>
 800120a:	e0c3      	b.n	8001394 <__aeabi_fsub+0x444>
 800120c:	4663      	mov	r3, ip
 800120e:	2b00      	cmp	r3, #0
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x2c4>
 8001212:	e0d0      	b.n	80013b6 <__aeabi_fsub+0x466>
 8001214:	2900      	cmp	r1, #0
 8001216:	d100      	bne.n	800121a <__aeabi_fsub+0x2ca>
 8001218:	e094      	b.n	8001344 <__aeabi_fsub+0x3f4>
 800121a:	000a      	movs	r2, r1
 800121c:	4462      	add	r2, ip
 800121e:	0153      	lsls	r3, r2, #5
 8001220:	d400      	bmi.n	8001224 <__aeabi_fsub+0x2d4>
 8001222:	e0d8      	b.n	80013d6 <__aeabi_fsub+0x486>
 8001224:	0192      	lsls	r2, r2, #6
 8001226:	2001      	movs	r0, #1
 8001228:	0a52      	lsrs	r2, r2, #9
 800122a:	e6ed      	b.n	8001008 <__aeabi_fsub+0xb8>
 800122c:	0008      	movs	r0, r1
 800122e:	2220      	movs	r2, #32
 8001230:	40d8      	lsrs	r0, r3
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	4099      	lsls	r1, r3
 8001236:	000b      	movs	r3, r1
 8001238:	1e5a      	subs	r2, r3, #1
 800123a:	4193      	sbcs	r3, r2
 800123c:	4303      	orrs	r3, r0
 800123e:	449c      	add	ip, r3
 8001240:	4663      	mov	r3, ip
 8001242:	015b      	lsls	r3, r3, #5
 8001244:	d589      	bpl.n	800115a <__aeabi_fsub+0x20a>
 8001246:	3501      	adds	r5, #1
 8001248:	2dff      	cmp	r5, #255	@ 0xff
 800124a:	d100      	bne.n	800124e <__aeabi_fsub+0x2fe>
 800124c:	e6da      	b.n	8001004 <__aeabi_fsub+0xb4>
 800124e:	4662      	mov	r2, ip
 8001250:	2301      	movs	r3, #1
 8001252:	4919      	ldr	r1, [pc, #100]	@ (80012b8 <__aeabi_fsub+0x368>)
 8001254:	4013      	ands	r3, r2
 8001256:	0852      	lsrs	r2, r2, #1
 8001258:	400a      	ands	r2, r1
 800125a:	431a      	orrs	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	4694      	mov	ip, r2
 8001260:	075b      	lsls	r3, r3, #29
 8001262:	d004      	beq.n	800126e <__aeabi_fsub+0x31e>
 8001264:	230f      	movs	r3, #15
 8001266:	4013      	ands	r3, r2
 8001268:	2b04      	cmp	r3, #4
 800126a:	d000      	beq.n	800126e <__aeabi_fsub+0x31e>
 800126c:	e6bf      	b.n	8000fee <__aeabi_fsub+0x9e>
 800126e:	4663      	mov	r3, ip
 8001270:	015b      	lsls	r3, r3, #5
 8001272:	d500      	bpl.n	8001276 <__aeabi_fsub+0x326>
 8001274:	e6c2      	b.n	8000ffc <__aeabi_fsub+0xac>
 8001276:	4663      	mov	r3, ip
 8001278:	08df      	lsrs	r7, r3, #3
 800127a:	002b      	movs	r3, r5
 800127c:	e6e3      	b.n	8001046 <__aeabi_fsub+0xf6>
 800127e:	1b53      	subs	r3, r2, r5
 8001280:	2d00      	cmp	r5, #0
 8001282:	d100      	bne.n	8001286 <__aeabi_fsub+0x336>
 8001284:	e6f4      	b.n	8001070 <__aeabi_fsub+0x120>
 8001286:	2080      	movs	r0, #128	@ 0x80
 8001288:	4664      	mov	r4, ip
 800128a:	04c0      	lsls	r0, r0, #19
 800128c:	4304      	orrs	r4, r0
 800128e:	46a4      	mov	ip, r4
 8001290:	0034      	movs	r4, r6
 8001292:	2001      	movs	r0, #1
 8001294:	2b1b      	cmp	r3, #27
 8001296:	dc09      	bgt.n	80012ac <__aeabi_fsub+0x35c>
 8001298:	2520      	movs	r5, #32
 800129a:	4660      	mov	r0, ip
 800129c:	40d8      	lsrs	r0, r3
 800129e:	1aeb      	subs	r3, r5, r3
 80012a0:	4665      	mov	r5, ip
 80012a2:	409d      	lsls	r5, r3
 80012a4:	002b      	movs	r3, r5
 80012a6:	1e5d      	subs	r5, r3, #1
 80012a8:	41ab      	sbcs	r3, r5
 80012aa:	4318      	orrs	r0, r3
 80012ac:	1a0b      	subs	r3, r1, r0
 80012ae:	469c      	mov	ip, r3
 80012b0:	0015      	movs	r5, r2
 80012b2:	e680      	b.n	8000fb6 <__aeabi_fsub+0x66>
 80012b4:	fbffffff 	.word	0xfbffffff
 80012b8:	7dffffff 	.word	0x7dffffff
 80012bc:	22fe      	movs	r2, #254	@ 0xfe
 80012be:	1c6b      	adds	r3, r5, #1
 80012c0:	4213      	tst	r3, r2
 80012c2:	d0a3      	beq.n	800120c <__aeabi_fsub+0x2bc>
 80012c4:	2bff      	cmp	r3, #255	@ 0xff
 80012c6:	d100      	bne.n	80012ca <__aeabi_fsub+0x37a>
 80012c8:	e69c      	b.n	8001004 <__aeabi_fsub+0xb4>
 80012ca:	4461      	add	r1, ip
 80012cc:	0849      	lsrs	r1, r1, #1
 80012ce:	074a      	lsls	r2, r1, #29
 80012d0:	d049      	beq.n	8001366 <__aeabi_fsub+0x416>
 80012d2:	220f      	movs	r2, #15
 80012d4:	400a      	ands	r2, r1
 80012d6:	2a04      	cmp	r2, #4
 80012d8:	d045      	beq.n	8001366 <__aeabi_fsub+0x416>
 80012da:	1d0a      	adds	r2, r1, #4
 80012dc:	4694      	mov	ip, r2
 80012de:	e6ad      	b.n	800103c <__aeabi_fsub+0xec>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_fsub+0x396>
 80012e4:	e776      	b.n	80011d4 <__aeabi_fsub+0x284>
 80012e6:	e68d      	b.n	8001004 <__aeabi_fsub+0xb4>
 80012e8:	0034      	movs	r4, r6
 80012ea:	20ff      	movs	r0, #255	@ 0xff
 80012ec:	2200      	movs	r2, #0
 80012ee:	e68b      	b.n	8001008 <__aeabi_fsub+0xb8>
 80012f0:	4663      	mov	r3, ip
 80012f2:	2401      	movs	r4, #1
 80012f4:	1acf      	subs	r7, r1, r3
 80012f6:	4034      	ands	r4, r6
 80012f8:	e664      	b.n	8000fc4 <__aeabi_fsub+0x74>
 80012fa:	4461      	add	r1, ip
 80012fc:	014b      	lsls	r3, r1, #5
 80012fe:	d56d      	bpl.n	80013dc <__aeabi_fsub+0x48c>
 8001300:	0848      	lsrs	r0, r1, #1
 8001302:	4944      	ldr	r1, [pc, #272]	@ (8001414 <__aeabi_fsub+0x4c4>)
 8001304:	4001      	ands	r1, r0
 8001306:	0743      	lsls	r3, r0, #29
 8001308:	d02c      	beq.n	8001364 <__aeabi_fsub+0x414>
 800130a:	230f      	movs	r3, #15
 800130c:	4003      	ands	r3, r0
 800130e:	2b04      	cmp	r3, #4
 8001310:	d028      	beq.n	8001364 <__aeabi_fsub+0x414>
 8001312:	1d0b      	adds	r3, r1, #4
 8001314:	469c      	mov	ip, r3
 8001316:	2302      	movs	r3, #2
 8001318:	e690      	b.n	800103c <__aeabi_fsub+0xec>
 800131a:	2900      	cmp	r1, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_fsub+0x3d0>
 800131e:	e72b      	b.n	8001178 <__aeabi_fsub+0x228>
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	03db      	lsls	r3, r3, #15
 8001324:	429f      	cmp	r7, r3
 8001326:	d200      	bcs.n	800132a <__aeabi_fsub+0x3da>
 8001328:	e726      	b.n	8001178 <__aeabi_fsub+0x228>
 800132a:	4298      	cmp	r0, r3
 800132c:	d300      	bcc.n	8001330 <__aeabi_fsub+0x3e0>
 800132e:	e723      	b.n	8001178 <__aeabi_fsub+0x228>
 8001330:	2401      	movs	r4, #1
 8001332:	4034      	ands	r4, r6
 8001334:	0007      	movs	r7, r0
 8001336:	e71f      	b.n	8001178 <__aeabi_fsub+0x228>
 8001338:	0034      	movs	r4, r6
 800133a:	468c      	mov	ip, r1
 800133c:	e67e      	b.n	800103c <__aeabi_fsub+0xec>
 800133e:	2301      	movs	r3, #1
 8001340:	08cf      	lsrs	r7, r1, #3
 8001342:	e680      	b.n	8001046 <__aeabi_fsub+0xf6>
 8001344:	2300      	movs	r3, #0
 8001346:	e67e      	b.n	8001046 <__aeabi_fsub+0xf6>
 8001348:	2020      	movs	r0, #32
 800134a:	4665      	mov	r5, ip
 800134c:	1b80      	subs	r0, r0, r6
 800134e:	4085      	lsls	r5, r0
 8001350:	4663      	mov	r3, ip
 8001352:	0028      	movs	r0, r5
 8001354:	40f3      	lsrs	r3, r6
 8001356:	1e45      	subs	r5, r0, #1
 8001358:	41a8      	sbcs	r0, r5
 800135a:	4303      	orrs	r3, r0
 800135c:	469c      	mov	ip, r3
 800135e:	0015      	movs	r5, r2
 8001360:	448c      	add	ip, r1
 8001362:	e76d      	b.n	8001240 <__aeabi_fsub+0x2f0>
 8001364:	2302      	movs	r3, #2
 8001366:	08cf      	lsrs	r7, r1, #3
 8001368:	e66d      	b.n	8001046 <__aeabi_fsub+0xf6>
 800136a:	1b0f      	subs	r7, r1, r4
 800136c:	017b      	lsls	r3, r7, #5
 800136e:	d528      	bpl.n	80013c2 <__aeabi_fsub+0x472>
 8001370:	01bf      	lsls	r7, r7, #6
 8001372:	09bf      	lsrs	r7, r7, #6
 8001374:	0038      	movs	r0, r7
 8001376:	f002 f96f 	bl	8003658 <__clzsi2>
 800137a:	003b      	movs	r3, r7
 800137c:	3805      	subs	r0, #5
 800137e:	4083      	lsls	r3, r0
 8001380:	0034      	movs	r4, r6
 8001382:	2501      	movs	r5, #1
 8001384:	e6ca      	b.n	800111c <__aeabi_fsub+0x1cc>
 8001386:	2900      	cmp	r1, #0
 8001388:	d100      	bne.n	800138c <__aeabi_fsub+0x43c>
 800138a:	e6b5      	b.n	80010f8 <__aeabi_fsub+0x1a8>
 800138c:	2401      	movs	r4, #1
 800138e:	0007      	movs	r7, r0
 8001390:	4034      	ands	r4, r6
 8001392:	e658      	b.n	8001046 <__aeabi_fsub+0xf6>
 8001394:	4663      	mov	r3, ip
 8001396:	2b00      	cmp	r3, #0
 8001398:	d100      	bne.n	800139c <__aeabi_fsub+0x44c>
 800139a:	e6e9      	b.n	8001170 <__aeabi_fsub+0x220>
 800139c:	2900      	cmp	r1, #0
 800139e:	d100      	bne.n	80013a2 <__aeabi_fsub+0x452>
 80013a0:	e6ea      	b.n	8001178 <__aeabi_fsub+0x228>
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	03db      	lsls	r3, r3, #15
 80013a6:	429f      	cmp	r7, r3
 80013a8:	d200      	bcs.n	80013ac <__aeabi_fsub+0x45c>
 80013aa:	e6e5      	b.n	8001178 <__aeabi_fsub+0x228>
 80013ac:	4298      	cmp	r0, r3
 80013ae:	d300      	bcc.n	80013b2 <__aeabi_fsub+0x462>
 80013b0:	e6e2      	b.n	8001178 <__aeabi_fsub+0x228>
 80013b2:	0007      	movs	r7, r0
 80013b4:	e6e0      	b.n	8001178 <__aeabi_fsub+0x228>
 80013b6:	2900      	cmp	r1, #0
 80013b8:	d100      	bne.n	80013bc <__aeabi_fsub+0x46c>
 80013ba:	e69e      	b.n	80010fa <__aeabi_fsub+0x1aa>
 80013bc:	2300      	movs	r3, #0
 80013be:	08cf      	lsrs	r7, r1, #3
 80013c0:	e641      	b.n	8001046 <__aeabi_fsub+0xf6>
 80013c2:	0034      	movs	r4, r6
 80013c4:	2301      	movs	r3, #1
 80013c6:	08ff      	lsrs	r7, r7, #3
 80013c8:	e63d      	b.n	8001046 <__aeabi_fsub+0xf6>
 80013ca:	2f00      	cmp	r7, #0
 80013cc:	d100      	bne.n	80013d0 <__aeabi_fsub+0x480>
 80013ce:	e693      	b.n	80010f8 <__aeabi_fsub+0x1a8>
 80013d0:	2300      	movs	r3, #0
 80013d2:	08ff      	lsrs	r7, r7, #3
 80013d4:	e637      	b.n	8001046 <__aeabi_fsub+0xf6>
 80013d6:	2300      	movs	r3, #0
 80013d8:	08d7      	lsrs	r7, r2, #3
 80013da:	e634      	b.n	8001046 <__aeabi_fsub+0xf6>
 80013dc:	2301      	movs	r3, #1
 80013de:	08cf      	lsrs	r7, r1, #3
 80013e0:	e631      	b.n	8001046 <__aeabi_fsub+0xf6>
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	000b      	movs	r3, r1
 80013e6:	04d2      	lsls	r2, r2, #19
 80013e8:	2001      	movs	r0, #1
 80013ea:	4013      	ands	r3, r2
 80013ec:	4211      	tst	r1, r2
 80013ee:	d000      	beq.n	80013f2 <__aeabi_fsub+0x4a2>
 80013f0:	e6ae      	b.n	8001150 <__aeabi_fsub+0x200>
 80013f2:	08cf      	lsrs	r7, r1, #3
 80013f4:	e627      	b.n	8001046 <__aeabi_fsub+0xf6>
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d100      	bne.n	80013fc <__aeabi_fsub+0x4ac>
 80013fa:	e75f      	b.n	80012bc <__aeabi_fsub+0x36c>
 80013fc:	1b56      	subs	r6, r2, r5
 80013fe:	2d00      	cmp	r5, #0
 8001400:	d101      	bne.n	8001406 <__aeabi_fsub+0x4b6>
 8001402:	0033      	movs	r3, r6
 8001404:	e6e7      	b.n	80011d6 <__aeabi_fsub+0x286>
 8001406:	2380      	movs	r3, #128	@ 0x80
 8001408:	4660      	mov	r0, ip
 800140a:	04db      	lsls	r3, r3, #19
 800140c:	4318      	orrs	r0, r3
 800140e:	4684      	mov	ip, r0
 8001410:	e6eb      	b.n	80011ea <__aeabi_fsub+0x29a>
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	7dffffff 	.word	0x7dffffff

08001418 <__aeabi_f2iz>:
 8001418:	0241      	lsls	r1, r0, #9
 800141a:	0042      	lsls	r2, r0, #1
 800141c:	0fc3      	lsrs	r3, r0, #31
 800141e:	0a49      	lsrs	r1, r1, #9
 8001420:	2000      	movs	r0, #0
 8001422:	0e12      	lsrs	r2, r2, #24
 8001424:	2a7e      	cmp	r2, #126	@ 0x7e
 8001426:	dd03      	ble.n	8001430 <__aeabi_f2iz+0x18>
 8001428:	2a9d      	cmp	r2, #157	@ 0x9d
 800142a:	dd02      	ble.n	8001432 <__aeabi_f2iz+0x1a>
 800142c:	4a09      	ldr	r2, [pc, #36]	@ (8001454 <__aeabi_f2iz+0x3c>)
 800142e:	1898      	adds	r0, r3, r2
 8001430:	4770      	bx	lr
 8001432:	2080      	movs	r0, #128	@ 0x80
 8001434:	0400      	lsls	r0, r0, #16
 8001436:	4301      	orrs	r1, r0
 8001438:	2a95      	cmp	r2, #149	@ 0x95
 800143a:	dc07      	bgt.n	800144c <__aeabi_f2iz+0x34>
 800143c:	2096      	movs	r0, #150	@ 0x96
 800143e:	1a82      	subs	r2, r0, r2
 8001440:	40d1      	lsrs	r1, r2
 8001442:	4248      	negs	r0, r1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f3      	bne.n	8001430 <__aeabi_f2iz+0x18>
 8001448:	0008      	movs	r0, r1
 800144a:	e7f1      	b.n	8001430 <__aeabi_f2iz+0x18>
 800144c:	3a96      	subs	r2, #150	@ 0x96
 800144e:	4091      	lsls	r1, r2
 8001450:	e7f7      	b.n	8001442 <__aeabi_f2iz+0x2a>
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	7fffffff 	.word	0x7fffffff

08001458 <__aeabi_i2f>:
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	2800      	cmp	r0, #0
 800145c:	d012      	beq.n	8001484 <__aeabi_i2f+0x2c>
 800145e:	17c3      	asrs	r3, r0, #31
 8001460:	18c5      	adds	r5, r0, r3
 8001462:	405d      	eors	r5, r3
 8001464:	0fc4      	lsrs	r4, r0, #31
 8001466:	0028      	movs	r0, r5
 8001468:	f002 f8f6 	bl	8003658 <__clzsi2>
 800146c:	239e      	movs	r3, #158	@ 0x9e
 800146e:	1a1b      	subs	r3, r3, r0
 8001470:	2b96      	cmp	r3, #150	@ 0x96
 8001472:	dc0f      	bgt.n	8001494 <__aeabi_i2f+0x3c>
 8001474:	2808      	cmp	r0, #8
 8001476:	d038      	beq.n	80014ea <__aeabi_i2f+0x92>
 8001478:	3808      	subs	r0, #8
 800147a:	4085      	lsls	r5, r0
 800147c:	026d      	lsls	r5, r5, #9
 800147e:	0a6d      	lsrs	r5, r5, #9
 8001480:	b2d8      	uxtb	r0, r3
 8001482:	e002      	b.n	800148a <__aeabi_i2f+0x32>
 8001484:	2400      	movs	r4, #0
 8001486:	2000      	movs	r0, #0
 8001488:	2500      	movs	r5, #0
 800148a:	05c0      	lsls	r0, r0, #23
 800148c:	4328      	orrs	r0, r5
 800148e:	07e4      	lsls	r4, r4, #31
 8001490:	4320      	orrs	r0, r4
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	2b99      	cmp	r3, #153	@ 0x99
 8001496:	dc14      	bgt.n	80014c2 <__aeabi_i2f+0x6a>
 8001498:	1f42      	subs	r2, r0, #5
 800149a:	4095      	lsls	r5, r2
 800149c:	002a      	movs	r2, r5
 800149e:	4915      	ldr	r1, [pc, #84]	@ (80014f4 <__aeabi_i2f+0x9c>)
 80014a0:	4011      	ands	r1, r2
 80014a2:	0755      	lsls	r5, r2, #29
 80014a4:	d01c      	beq.n	80014e0 <__aeabi_i2f+0x88>
 80014a6:	250f      	movs	r5, #15
 80014a8:	402a      	ands	r2, r5
 80014aa:	2a04      	cmp	r2, #4
 80014ac:	d018      	beq.n	80014e0 <__aeabi_i2f+0x88>
 80014ae:	3104      	adds	r1, #4
 80014b0:	08ca      	lsrs	r2, r1, #3
 80014b2:	0149      	lsls	r1, r1, #5
 80014b4:	d515      	bpl.n	80014e2 <__aeabi_i2f+0x8a>
 80014b6:	239f      	movs	r3, #159	@ 0x9f
 80014b8:	0252      	lsls	r2, r2, #9
 80014ba:	1a18      	subs	r0, r3, r0
 80014bc:	0a55      	lsrs	r5, r2, #9
 80014be:	b2c0      	uxtb	r0, r0
 80014c0:	e7e3      	b.n	800148a <__aeabi_i2f+0x32>
 80014c2:	2205      	movs	r2, #5
 80014c4:	0029      	movs	r1, r5
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	40d1      	lsrs	r1, r2
 80014ca:	0002      	movs	r2, r0
 80014cc:	321b      	adds	r2, #27
 80014ce:	4095      	lsls	r5, r2
 80014d0:	002a      	movs	r2, r5
 80014d2:	1e55      	subs	r5, r2, #1
 80014d4:	41aa      	sbcs	r2, r5
 80014d6:	430a      	orrs	r2, r1
 80014d8:	4906      	ldr	r1, [pc, #24]	@ (80014f4 <__aeabi_i2f+0x9c>)
 80014da:	4011      	ands	r1, r2
 80014dc:	0755      	lsls	r5, r2, #29
 80014de:	d1e2      	bne.n	80014a6 <__aeabi_i2f+0x4e>
 80014e0:	08ca      	lsrs	r2, r1, #3
 80014e2:	0252      	lsls	r2, r2, #9
 80014e4:	0a55      	lsrs	r5, r2, #9
 80014e6:	b2d8      	uxtb	r0, r3
 80014e8:	e7cf      	b.n	800148a <__aeabi_i2f+0x32>
 80014ea:	026d      	lsls	r5, r5, #9
 80014ec:	0a6d      	lsrs	r5, r5, #9
 80014ee:	308e      	adds	r0, #142	@ 0x8e
 80014f0:	e7cb      	b.n	800148a <__aeabi_i2f+0x32>
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	fbffffff 	.word	0xfbffffff

080014f8 <__aeabi_ui2f>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	1e04      	subs	r4, r0, #0
 80014fc:	d00d      	beq.n	800151a <__aeabi_ui2f+0x22>
 80014fe:	f002 f8ab 	bl	8003658 <__clzsi2>
 8001502:	239e      	movs	r3, #158	@ 0x9e
 8001504:	1a1b      	subs	r3, r3, r0
 8001506:	2b96      	cmp	r3, #150	@ 0x96
 8001508:	dc0c      	bgt.n	8001524 <__aeabi_ui2f+0x2c>
 800150a:	2808      	cmp	r0, #8
 800150c:	d034      	beq.n	8001578 <__aeabi_ui2f+0x80>
 800150e:	3808      	subs	r0, #8
 8001510:	4084      	lsls	r4, r0
 8001512:	0264      	lsls	r4, r4, #9
 8001514:	0a64      	lsrs	r4, r4, #9
 8001516:	b2d8      	uxtb	r0, r3
 8001518:	e001      	b.n	800151e <__aeabi_ui2f+0x26>
 800151a:	2000      	movs	r0, #0
 800151c:	2400      	movs	r4, #0
 800151e:	05c0      	lsls	r0, r0, #23
 8001520:	4320      	orrs	r0, r4
 8001522:	bd10      	pop	{r4, pc}
 8001524:	2b99      	cmp	r3, #153	@ 0x99
 8001526:	dc13      	bgt.n	8001550 <__aeabi_ui2f+0x58>
 8001528:	1f42      	subs	r2, r0, #5
 800152a:	4094      	lsls	r4, r2
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <__aeabi_ui2f+0x88>)
 800152e:	4022      	ands	r2, r4
 8001530:	0761      	lsls	r1, r4, #29
 8001532:	d01c      	beq.n	800156e <__aeabi_ui2f+0x76>
 8001534:	210f      	movs	r1, #15
 8001536:	4021      	ands	r1, r4
 8001538:	2904      	cmp	r1, #4
 800153a:	d018      	beq.n	800156e <__aeabi_ui2f+0x76>
 800153c:	3204      	adds	r2, #4
 800153e:	08d4      	lsrs	r4, r2, #3
 8001540:	0152      	lsls	r2, r2, #5
 8001542:	d515      	bpl.n	8001570 <__aeabi_ui2f+0x78>
 8001544:	239f      	movs	r3, #159	@ 0x9f
 8001546:	0264      	lsls	r4, r4, #9
 8001548:	1a18      	subs	r0, r3, r0
 800154a:	0a64      	lsrs	r4, r4, #9
 800154c:	b2c0      	uxtb	r0, r0
 800154e:	e7e6      	b.n	800151e <__aeabi_ui2f+0x26>
 8001550:	0002      	movs	r2, r0
 8001552:	0021      	movs	r1, r4
 8001554:	321b      	adds	r2, #27
 8001556:	4091      	lsls	r1, r2
 8001558:	000a      	movs	r2, r1
 800155a:	1e51      	subs	r1, r2, #1
 800155c:	418a      	sbcs	r2, r1
 800155e:	2105      	movs	r1, #5
 8001560:	1a09      	subs	r1, r1, r0
 8001562:	40cc      	lsrs	r4, r1
 8001564:	4314      	orrs	r4, r2
 8001566:	4a06      	ldr	r2, [pc, #24]	@ (8001580 <__aeabi_ui2f+0x88>)
 8001568:	4022      	ands	r2, r4
 800156a:	0761      	lsls	r1, r4, #29
 800156c:	d1e2      	bne.n	8001534 <__aeabi_ui2f+0x3c>
 800156e:	08d4      	lsrs	r4, r2, #3
 8001570:	0264      	lsls	r4, r4, #9
 8001572:	0a64      	lsrs	r4, r4, #9
 8001574:	b2d8      	uxtb	r0, r3
 8001576:	e7d2      	b.n	800151e <__aeabi_ui2f+0x26>
 8001578:	0264      	lsls	r4, r4, #9
 800157a:	0a64      	lsrs	r4, r4, #9
 800157c:	308e      	adds	r0, #142	@ 0x8e
 800157e:	e7ce      	b.n	800151e <__aeabi_ui2f+0x26>
 8001580:	fbffffff 	.word	0xfbffffff

08001584 <__aeabi_dadd>:
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	464f      	mov	r7, r9
 8001588:	4646      	mov	r6, r8
 800158a:	46d6      	mov	lr, sl
 800158c:	b5c0      	push	{r6, r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	9000      	str	r0, [sp, #0]
 8001592:	9101      	str	r1, [sp, #4]
 8001594:	030e      	lsls	r6, r1, #12
 8001596:	004c      	lsls	r4, r1, #1
 8001598:	0fcd      	lsrs	r5, r1, #31
 800159a:	0a71      	lsrs	r1, r6, #9
 800159c:	9e00      	ldr	r6, [sp, #0]
 800159e:	005f      	lsls	r7, r3, #1
 80015a0:	0f76      	lsrs	r6, r6, #29
 80015a2:	430e      	orrs	r6, r1
 80015a4:	9900      	ldr	r1, [sp, #0]
 80015a6:	9200      	str	r2, [sp, #0]
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	00c9      	lsls	r1, r1, #3
 80015ac:	4689      	mov	r9, r1
 80015ae:	0319      	lsls	r1, r3, #12
 80015b0:	0d7b      	lsrs	r3, r7, #21
 80015b2:	4698      	mov	r8, r3
 80015b4:	9b01      	ldr	r3, [sp, #4]
 80015b6:	0a49      	lsrs	r1, r1, #9
 80015b8:	0fdb      	lsrs	r3, r3, #31
 80015ba:	469c      	mov	ip, r3
 80015bc:	9b00      	ldr	r3, [sp, #0]
 80015be:	9a00      	ldr	r2, [sp, #0]
 80015c0:	0f5b      	lsrs	r3, r3, #29
 80015c2:	430b      	orrs	r3, r1
 80015c4:	4641      	mov	r1, r8
 80015c6:	0d64      	lsrs	r4, r4, #21
 80015c8:	00d2      	lsls	r2, r2, #3
 80015ca:	1a61      	subs	r1, r4, r1
 80015cc:	4565      	cmp	r5, ip
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dadd+0x4e>
 80015d0:	e0a6      	b.n	8001720 <__aeabi_dadd+0x19c>
 80015d2:	2900      	cmp	r1, #0
 80015d4:	dd72      	ble.n	80016bc <__aeabi_dadd+0x138>
 80015d6:	4647      	mov	r7, r8
 80015d8:	2f00      	cmp	r7, #0
 80015da:	d100      	bne.n	80015de <__aeabi_dadd+0x5a>
 80015dc:	e0dd      	b.n	800179a <__aeabi_dadd+0x216>
 80015de:	4fcc      	ldr	r7, [pc, #816]	@ (8001910 <__aeabi_dadd+0x38c>)
 80015e0:	42bc      	cmp	r4, r7
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dadd+0x62>
 80015e4:	e19a      	b.n	800191c <__aeabi_dadd+0x398>
 80015e6:	2701      	movs	r7, #1
 80015e8:	2938      	cmp	r1, #56	@ 0x38
 80015ea:	dc17      	bgt.n	800161c <__aeabi_dadd+0x98>
 80015ec:	2780      	movs	r7, #128	@ 0x80
 80015ee:	043f      	lsls	r7, r7, #16
 80015f0:	433b      	orrs	r3, r7
 80015f2:	291f      	cmp	r1, #31
 80015f4:	dd00      	ble.n	80015f8 <__aeabi_dadd+0x74>
 80015f6:	e1dd      	b.n	80019b4 <__aeabi_dadd+0x430>
 80015f8:	2720      	movs	r7, #32
 80015fa:	1a78      	subs	r0, r7, r1
 80015fc:	001f      	movs	r7, r3
 80015fe:	4087      	lsls	r7, r0
 8001600:	46ba      	mov	sl, r7
 8001602:	0017      	movs	r7, r2
 8001604:	40cf      	lsrs	r7, r1
 8001606:	4684      	mov	ip, r0
 8001608:	0038      	movs	r0, r7
 800160a:	4657      	mov	r7, sl
 800160c:	4307      	orrs	r7, r0
 800160e:	4660      	mov	r0, ip
 8001610:	4082      	lsls	r2, r0
 8001612:	40cb      	lsrs	r3, r1
 8001614:	1e50      	subs	r0, r2, #1
 8001616:	4182      	sbcs	r2, r0
 8001618:	1af6      	subs	r6, r6, r3
 800161a:	4317      	orrs	r7, r2
 800161c:	464b      	mov	r3, r9
 800161e:	1bdf      	subs	r7, r3, r7
 8001620:	45b9      	cmp	r9, r7
 8001622:	4180      	sbcs	r0, r0
 8001624:	4240      	negs	r0, r0
 8001626:	1a36      	subs	r6, r6, r0
 8001628:	0233      	lsls	r3, r6, #8
 800162a:	d400      	bmi.n	800162e <__aeabi_dadd+0xaa>
 800162c:	e0ff      	b.n	800182e <__aeabi_dadd+0x2aa>
 800162e:	0276      	lsls	r6, r6, #9
 8001630:	0a76      	lsrs	r6, r6, #9
 8001632:	2e00      	cmp	r6, #0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0xb4>
 8001636:	e13c      	b.n	80018b2 <__aeabi_dadd+0x32e>
 8001638:	0030      	movs	r0, r6
 800163a:	f002 f80d 	bl	8003658 <__clzsi2>
 800163e:	0003      	movs	r3, r0
 8001640:	3b08      	subs	r3, #8
 8001642:	2120      	movs	r1, #32
 8001644:	0038      	movs	r0, r7
 8001646:	1aca      	subs	r2, r1, r3
 8001648:	40d0      	lsrs	r0, r2
 800164a:	409e      	lsls	r6, r3
 800164c:	0002      	movs	r2, r0
 800164e:	409f      	lsls	r7, r3
 8001650:	4332      	orrs	r2, r6
 8001652:	429c      	cmp	r4, r3
 8001654:	dd00      	ble.n	8001658 <__aeabi_dadd+0xd4>
 8001656:	e1a6      	b.n	80019a6 <__aeabi_dadd+0x422>
 8001658:	1b18      	subs	r0, r3, r4
 800165a:	3001      	adds	r0, #1
 800165c:	1a09      	subs	r1, r1, r0
 800165e:	003e      	movs	r6, r7
 8001660:	408f      	lsls	r7, r1
 8001662:	40c6      	lsrs	r6, r0
 8001664:	1e7b      	subs	r3, r7, #1
 8001666:	419f      	sbcs	r7, r3
 8001668:	0013      	movs	r3, r2
 800166a:	408b      	lsls	r3, r1
 800166c:	4337      	orrs	r7, r6
 800166e:	431f      	orrs	r7, r3
 8001670:	40c2      	lsrs	r2, r0
 8001672:	003b      	movs	r3, r7
 8001674:	0016      	movs	r6, r2
 8001676:	2400      	movs	r4, #0
 8001678:	4313      	orrs	r3, r2
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0xfa>
 800167c:	e1df      	b.n	8001a3e <__aeabi_dadd+0x4ba>
 800167e:	077b      	lsls	r3, r7, #29
 8001680:	d100      	bne.n	8001684 <__aeabi_dadd+0x100>
 8001682:	e332      	b.n	8001cea <__aeabi_dadd+0x766>
 8001684:	230f      	movs	r3, #15
 8001686:	003a      	movs	r2, r7
 8001688:	403b      	ands	r3, r7
 800168a:	2b04      	cmp	r3, #4
 800168c:	d004      	beq.n	8001698 <__aeabi_dadd+0x114>
 800168e:	1d3a      	adds	r2, r7, #4
 8001690:	42ba      	cmp	r2, r7
 8001692:	41bf      	sbcs	r7, r7
 8001694:	427f      	negs	r7, r7
 8001696:	19f6      	adds	r6, r6, r7
 8001698:	0233      	lsls	r3, r6, #8
 800169a:	d400      	bmi.n	800169e <__aeabi_dadd+0x11a>
 800169c:	e323      	b.n	8001ce6 <__aeabi_dadd+0x762>
 800169e:	4b9c      	ldr	r3, [pc, #624]	@ (8001910 <__aeabi_dadd+0x38c>)
 80016a0:	3401      	adds	r4, #1
 80016a2:	429c      	cmp	r4, r3
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dadd+0x124>
 80016a6:	e0b4      	b.n	8001812 <__aeabi_dadd+0x28e>
 80016a8:	4b9a      	ldr	r3, [pc, #616]	@ (8001914 <__aeabi_dadd+0x390>)
 80016aa:	0564      	lsls	r4, r4, #21
 80016ac:	401e      	ands	r6, r3
 80016ae:	0d64      	lsrs	r4, r4, #21
 80016b0:	0777      	lsls	r7, r6, #29
 80016b2:	08d2      	lsrs	r2, r2, #3
 80016b4:	0276      	lsls	r6, r6, #9
 80016b6:	4317      	orrs	r7, r2
 80016b8:	0b36      	lsrs	r6, r6, #12
 80016ba:	e0ac      	b.n	8001816 <__aeabi_dadd+0x292>
 80016bc:	2900      	cmp	r1, #0
 80016be:	d100      	bne.n	80016c2 <__aeabi_dadd+0x13e>
 80016c0:	e07e      	b.n	80017c0 <__aeabi_dadd+0x23c>
 80016c2:	4641      	mov	r1, r8
 80016c4:	1b09      	subs	r1, r1, r4
 80016c6:	2c00      	cmp	r4, #0
 80016c8:	d000      	beq.n	80016cc <__aeabi_dadd+0x148>
 80016ca:	e160      	b.n	800198e <__aeabi_dadd+0x40a>
 80016cc:	0034      	movs	r4, r6
 80016ce:	4648      	mov	r0, r9
 80016d0:	4304      	orrs	r4, r0
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dadd+0x152>
 80016d4:	e1c9      	b.n	8001a6a <__aeabi_dadd+0x4e6>
 80016d6:	1e4c      	subs	r4, r1, #1
 80016d8:	2901      	cmp	r1, #1
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x15a>
 80016dc:	e22e      	b.n	8001b3c <__aeabi_dadd+0x5b8>
 80016de:	4d8c      	ldr	r5, [pc, #560]	@ (8001910 <__aeabi_dadd+0x38c>)
 80016e0:	42a9      	cmp	r1, r5
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x162>
 80016e4:	e224      	b.n	8001b30 <__aeabi_dadd+0x5ac>
 80016e6:	2701      	movs	r7, #1
 80016e8:	2c38      	cmp	r4, #56	@ 0x38
 80016ea:	dc11      	bgt.n	8001710 <__aeabi_dadd+0x18c>
 80016ec:	0021      	movs	r1, r4
 80016ee:	291f      	cmp	r1, #31
 80016f0:	dd00      	ble.n	80016f4 <__aeabi_dadd+0x170>
 80016f2:	e20b      	b.n	8001b0c <__aeabi_dadd+0x588>
 80016f4:	2420      	movs	r4, #32
 80016f6:	0037      	movs	r7, r6
 80016f8:	4648      	mov	r0, r9
 80016fa:	1a64      	subs	r4, r4, r1
 80016fc:	40a7      	lsls	r7, r4
 80016fe:	40c8      	lsrs	r0, r1
 8001700:	4307      	orrs	r7, r0
 8001702:	4648      	mov	r0, r9
 8001704:	40a0      	lsls	r0, r4
 8001706:	40ce      	lsrs	r6, r1
 8001708:	1e44      	subs	r4, r0, #1
 800170a:	41a0      	sbcs	r0, r4
 800170c:	1b9b      	subs	r3, r3, r6
 800170e:	4307      	orrs	r7, r0
 8001710:	1bd7      	subs	r7, r2, r7
 8001712:	42ba      	cmp	r2, r7
 8001714:	4192      	sbcs	r2, r2
 8001716:	4252      	negs	r2, r2
 8001718:	4665      	mov	r5, ip
 800171a:	4644      	mov	r4, r8
 800171c:	1a9e      	subs	r6, r3, r2
 800171e:	e783      	b.n	8001628 <__aeabi_dadd+0xa4>
 8001720:	2900      	cmp	r1, #0
 8001722:	dc00      	bgt.n	8001726 <__aeabi_dadd+0x1a2>
 8001724:	e09c      	b.n	8001860 <__aeabi_dadd+0x2dc>
 8001726:	4647      	mov	r7, r8
 8001728:	2f00      	cmp	r7, #0
 800172a:	d167      	bne.n	80017fc <__aeabi_dadd+0x278>
 800172c:	001f      	movs	r7, r3
 800172e:	4317      	orrs	r7, r2
 8001730:	d100      	bne.n	8001734 <__aeabi_dadd+0x1b0>
 8001732:	e0e4      	b.n	80018fe <__aeabi_dadd+0x37a>
 8001734:	1e48      	subs	r0, r1, #1
 8001736:	2901      	cmp	r1, #1
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x1b8>
 800173a:	e19b      	b.n	8001a74 <__aeabi_dadd+0x4f0>
 800173c:	4f74      	ldr	r7, [pc, #464]	@ (8001910 <__aeabi_dadd+0x38c>)
 800173e:	42b9      	cmp	r1, r7
 8001740:	d100      	bne.n	8001744 <__aeabi_dadd+0x1c0>
 8001742:	e0eb      	b.n	800191c <__aeabi_dadd+0x398>
 8001744:	2701      	movs	r7, #1
 8001746:	0001      	movs	r1, r0
 8001748:	2838      	cmp	r0, #56	@ 0x38
 800174a:	dc11      	bgt.n	8001770 <__aeabi_dadd+0x1ec>
 800174c:	291f      	cmp	r1, #31
 800174e:	dd00      	ble.n	8001752 <__aeabi_dadd+0x1ce>
 8001750:	e1c7      	b.n	8001ae2 <__aeabi_dadd+0x55e>
 8001752:	2720      	movs	r7, #32
 8001754:	1a78      	subs	r0, r7, r1
 8001756:	001f      	movs	r7, r3
 8001758:	4684      	mov	ip, r0
 800175a:	4087      	lsls	r7, r0
 800175c:	0010      	movs	r0, r2
 800175e:	40c8      	lsrs	r0, r1
 8001760:	4307      	orrs	r7, r0
 8001762:	4660      	mov	r0, ip
 8001764:	4082      	lsls	r2, r0
 8001766:	40cb      	lsrs	r3, r1
 8001768:	1e50      	subs	r0, r2, #1
 800176a:	4182      	sbcs	r2, r0
 800176c:	18f6      	adds	r6, r6, r3
 800176e:	4317      	orrs	r7, r2
 8001770:	444f      	add	r7, r9
 8001772:	454f      	cmp	r7, r9
 8001774:	4180      	sbcs	r0, r0
 8001776:	4240      	negs	r0, r0
 8001778:	1836      	adds	r6, r6, r0
 800177a:	0233      	lsls	r3, r6, #8
 800177c:	d557      	bpl.n	800182e <__aeabi_dadd+0x2aa>
 800177e:	4b64      	ldr	r3, [pc, #400]	@ (8001910 <__aeabi_dadd+0x38c>)
 8001780:	3401      	adds	r4, #1
 8001782:	429c      	cmp	r4, r3
 8001784:	d045      	beq.n	8001812 <__aeabi_dadd+0x28e>
 8001786:	2101      	movs	r1, #1
 8001788:	4b62      	ldr	r3, [pc, #392]	@ (8001914 <__aeabi_dadd+0x390>)
 800178a:	087a      	lsrs	r2, r7, #1
 800178c:	401e      	ands	r6, r3
 800178e:	4039      	ands	r1, r7
 8001790:	430a      	orrs	r2, r1
 8001792:	07f7      	lsls	r7, r6, #31
 8001794:	4317      	orrs	r7, r2
 8001796:	0876      	lsrs	r6, r6, #1
 8001798:	e771      	b.n	800167e <__aeabi_dadd+0xfa>
 800179a:	001f      	movs	r7, r3
 800179c:	4317      	orrs	r7, r2
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0x21e>
 80017a0:	e0ad      	b.n	80018fe <__aeabi_dadd+0x37a>
 80017a2:	1e4f      	subs	r7, r1, #1
 80017a4:	46bc      	mov	ip, r7
 80017a6:	2901      	cmp	r1, #1
 80017a8:	d100      	bne.n	80017ac <__aeabi_dadd+0x228>
 80017aa:	e182      	b.n	8001ab2 <__aeabi_dadd+0x52e>
 80017ac:	4f58      	ldr	r7, [pc, #352]	@ (8001910 <__aeabi_dadd+0x38c>)
 80017ae:	42b9      	cmp	r1, r7
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dadd+0x230>
 80017b2:	e190      	b.n	8001ad6 <__aeabi_dadd+0x552>
 80017b4:	4661      	mov	r1, ip
 80017b6:	2701      	movs	r7, #1
 80017b8:	2938      	cmp	r1, #56	@ 0x38
 80017ba:	dd00      	ble.n	80017be <__aeabi_dadd+0x23a>
 80017bc:	e72e      	b.n	800161c <__aeabi_dadd+0x98>
 80017be:	e718      	b.n	80015f2 <__aeabi_dadd+0x6e>
 80017c0:	4f55      	ldr	r7, [pc, #340]	@ (8001918 <__aeabi_dadd+0x394>)
 80017c2:	1c61      	adds	r1, r4, #1
 80017c4:	4239      	tst	r1, r7
 80017c6:	d000      	beq.n	80017ca <__aeabi_dadd+0x246>
 80017c8:	e0d0      	b.n	800196c <__aeabi_dadd+0x3e8>
 80017ca:	0031      	movs	r1, r6
 80017cc:	4648      	mov	r0, r9
 80017ce:	001f      	movs	r7, r3
 80017d0:	4301      	orrs	r1, r0
 80017d2:	4317      	orrs	r7, r2
 80017d4:	2c00      	cmp	r4, #0
 80017d6:	d000      	beq.n	80017da <__aeabi_dadd+0x256>
 80017d8:	e13d      	b.n	8001a56 <__aeabi_dadd+0x4d2>
 80017da:	2900      	cmp	r1, #0
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dadd+0x25c>
 80017de:	e1bc      	b.n	8001b5a <__aeabi_dadd+0x5d6>
 80017e0:	2f00      	cmp	r7, #0
 80017e2:	d000      	beq.n	80017e6 <__aeabi_dadd+0x262>
 80017e4:	e1bf      	b.n	8001b66 <__aeabi_dadd+0x5e2>
 80017e6:	464b      	mov	r3, r9
 80017e8:	2100      	movs	r1, #0
 80017ea:	08d8      	lsrs	r0, r3, #3
 80017ec:	0777      	lsls	r7, r6, #29
 80017ee:	4307      	orrs	r7, r0
 80017f0:	08f0      	lsrs	r0, r6, #3
 80017f2:	0306      	lsls	r6, r0, #12
 80017f4:	054c      	lsls	r4, r1, #21
 80017f6:	0b36      	lsrs	r6, r6, #12
 80017f8:	0d64      	lsrs	r4, r4, #21
 80017fa:	e00c      	b.n	8001816 <__aeabi_dadd+0x292>
 80017fc:	4f44      	ldr	r7, [pc, #272]	@ (8001910 <__aeabi_dadd+0x38c>)
 80017fe:	42bc      	cmp	r4, r7
 8001800:	d100      	bne.n	8001804 <__aeabi_dadd+0x280>
 8001802:	e08b      	b.n	800191c <__aeabi_dadd+0x398>
 8001804:	2701      	movs	r7, #1
 8001806:	2938      	cmp	r1, #56	@ 0x38
 8001808:	dcb2      	bgt.n	8001770 <__aeabi_dadd+0x1ec>
 800180a:	2780      	movs	r7, #128	@ 0x80
 800180c:	043f      	lsls	r7, r7, #16
 800180e:	433b      	orrs	r3, r7
 8001810:	e79c      	b.n	800174c <__aeabi_dadd+0x1c8>
 8001812:	2600      	movs	r6, #0
 8001814:	2700      	movs	r7, #0
 8001816:	0524      	lsls	r4, r4, #20
 8001818:	4334      	orrs	r4, r6
 800181a:	07ed      	lsls	r5, r5, #31
 800181c:	432c      	orrs	r4, r5
 800181e:	0038      	movs	r0, r7
 8001820:	0021      	movs	r1, r4
 8001822:	b002      	add	sp, #8
 8001824:	bce0      	pop	{r5, r6, r7}
 8001826:	46ba      	mov	sl, r7
 8001828:	46b1      	mov	r9, r6
 800182a:	46a8      	mov	r8, r5
 800182c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182e:	077b      	lsls	r3, r7, #29
 8001830:	d004      	beq.n	800183c <__aeabi_dadd+0x2b8>
 8001832:	230f      	movs	r3, #15
 8001834:	403b      	ands	r3, r7
 8001836:	2b04      	cmp	r3, #4
 8001838:	d000      	beq.n	800183c <__aeabi_dadd+0x2b8>
 800183a:	e728      	b.n	800168e <__aeabi_dadd+0x10a>
 800183c:	08f8      	lsrs	r0, r7, #3
 800183e:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <__aeabi_dadd+0x38c>)
 8001840:	0777      	lsls	r7, r6, #29
 8001842:	4307      	orrs	r7, r0
 8001844:	08f0      	lsrs	r0, r6, #3
 8001846:	429c      	cmp	r4, r3
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x2c8>
 800184a:	e24a      	b.n	8001ce2 <__aeabi_dadd+0x75e>
 800184c:	003b      	movs	r3, r7
 800184e:	4303      	orrs	r3, r0
 8001850:	d059      	beq.n	8001906 <__aeabi_dadd+0x382>
 8001852:	2680      	movs	r6, #128	@ 0x80
 8001854:	0336      	lsls	r6, r6, #12
 8001856:	4306      	orrs	r6, r0
 8001858:	0336      	lsls	r6, r6, #12
 800185a:	4c2d      	ldr	r4, [pc, #180]	@ (8001910 <__aeabi_dadd+0x38c>)
 800185c:	0b36      	lsrs	r6, r6, #12
 800185e:	e7da      	b.n	8001816 <__aeabi_dadd+0x292>
 8001860:	2900      	cmp	r1, #0
 8001862:	d061      	beq.n	8001928 <__aeabi_dadd+0x3a4>
 8001864:	4641      	mov	r1, r8
 8001866:	1b09      	subs	r1, r1, r4
 8001868:	2c00      	cmp	r4, #0
 800186a:	d100      	bne.n	800186e <__aeabi_dadd+0x2ea>
 800186c:	e0b9      	b.n	80019e2 <__aeabi_dadd+0x45e>
 800186e:	4c28      	ldr	r4, [pc, #160]	@ (8001910 <__aeabi_dadd+0x38c>)
 8001870:	45a0      	cmp	r8, r4
 8001872:	d100      	bne.n	8001876 <__aeabi_dadd+0x2f2>
 8001874:	e1a5      	b.n	8001bc2 <__aeabi_dadd+0x63e>
 8001876:	2701      	movs	r7, #1
 8001878:	2938      	cmp	r1, #56	@ 0x38
 800187a:	dc13      	bgt.n	80018a4 <__aeabi_dadd+0x320>
 800187c:	2480      	movs	r4, #128	@ 0x80
 800187e:	0424      	lsls	r4, r4, #16
 8001880:	4326      	orrs	r6, r4
 8001882:	291f      	cmp	r1, #31
 8001884:	dd00      	ble.n	8001888 <__aeabi_dadd+0x304>
 8001886:	e1c8      	b.n	8001c1a <__aeabi_dadd+0x696>
 8001888:	2420      	movs	r4, #32
 800188a:	0037      	movs	r7, r6
 800188c:	4648      	mov	r0, r9
 800188e:	1a64      	subs	r4, r4, r1
 8001890:	40a7      	lsls	r7, r4
 8001892:	40c8      	lsrs	r0, r1
 8001894:	4307      	orrs	r7, r0
 8001896:	4648      	mov	r0, r9
 8001898:	40a0      	lsls	r0, r4
 800189a:	40ce      	lsrs	r6, r1
 800189c:	1e44      	subs	r4, r0, #1
 800189e:	41a0      	sbcs	r0, r4
 80018a0:	199b      	adds	r3, r3, r6
 80018a2:	4307      	orrs	r7, r0
 80018a4:	18bf      	adds	r7, r7, r2
 80018a6:	4297      	cmp	r7, r2
 80018a8:	4192      	sbcs	r2, r2
 80018aa:	4252      	negs	r2, r2
 80018ac:	4644      	mov	r4, r8
 80018ae:	18d6      	adds	r6, r2, r3
 80018b0:	e763      	b.n	800177a <__aeabi_dadd+0x1f6>
 80018b2:	0038      	movs	r0, r7
 80018b4:	f001 fed0 	bl	8003658 <__clzsi2>
 80018b8:	0003      	movs	r3, r0
 80018ba:	3318      	adds	r3, #24
 80018bc:	2b1f      	cmp	r3, #31
 80018be:	dc00      	bgt.n	80018c2 <__aeabi_dadd+0x33e>
 80018c0:	e6bf      	b.n	8001642 <__aeabi_dadd+0xbe>
 80018c2:	003a      	movs	r2, r7
 80018c4:	3808      	subs	r0, #8
 80018c6:	4082      	lsls	r2, r0
 80018c8:	429c      	cmp	r4, r3
 80018ca:	dd00      	ble.n	80018ce <__aeabi_dadd+0x34a>
 80018cc:	e083      	b.n	80019d6 <__aeabi_dadd+0x452>
 80018ce:	1b1b      	subs	r3, r3, r4
 80018d0:	1c58      	adds	r0, r3, #1
 80018d2:	281f      	cmp	r0, #31
 80018d4:	dc00      	bgt.n	80018d8 <__aeabi_dadd+0x354>
 80018d6:	e1b4      	b.n	8001c42 <__aeabi_dadd+0x6be>
 80018d8:	0017      	movs	r7, r2
 80018da:	3b1f      	subs	r3, #31
 80018dc:	40df      	lsrs	r7, r3
 80018de:	2820      	cmp	r0, #32
 80018e0:	d005      	beq.n	80018ee <__aeabi_dadd+0x36a>
 80018e2:	2340      	movs	r3, #64	@ 0x40
 80018e4:	1a1b      	subs	r3, r3, r0
 80018e6:	409a      	lsls	r2, r3
 80018e8:	1e53      	subs	r3, r2, #1
 80018ea:	419a      	sbcs	r2, r3
 80018ec:	4317      	orrs	r7, r2
 80018ee:	2400      	movs	r4, #0
 80018f0:	2f00      	cmp	r7, #0
 80018f2:	d00a      	beq.n	800190a <__aeabi_dadd+0x386>
 80018f4:	077b      	lsls	r3, r7, #29
 80018f6:	d000      	beq.n	80018fa <__aeabi_dadd+0x376>
 80018f8:	e6c4      	b.n	8001684 <__aeabi_dadd+0x100>
 80018fa:	0026      	movs	r6, r4
 80018fc:	e79e      	b.n	800183c <__aeabi_dadd+0x2b8>
 80018fe:	464b      	mov	r3, r9
 8001900:	000c      	movs	r4, r1
 8001902:	08d8      	lsrs	r0, r3, #3
 8001904:	e79b      	b.n	800183e <__aeabi_dadd+0x2ba>
 8001906:	2700      	movs	r7, #0
 8001908:	4c01      	ldr	r4, [pc, #4]	@ (8001910 <__aeabi_dadd+0x38c>)
 800190a:	2600      	movs	r6, #0
 800190c:	e783      	b.n	8001816 <__aeabi_dadd+0x292>
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	000007ff 	.word	0x000007ff
 8001914:	ff7fffff 	.word	0xff7fffff
 8001918:	000007fe 	.word	0x000007fe
 800191c:	464b      	mov	r3, r9
 800191e:	0777      	lsls	r7, r6, #29
 8001920:	08d8      	lsrs	r0, r3, #3
 8001922:	4307      	orrs	r7, r0
 8001924:	08f0      	lsrs	r0, r6, #3
 8001926:	e791      	b.n	800184c <__aeabi_dadd+0x2c8>
 8001928:	4fcd      	ldr	r7, [pc, #820]	@ (8001c60 <__aeabi_dadd+0x6dc>)
 800192a:	1c61      	adds	r1, r4, #1
 800192c:	4239      	tst	r1, r7
 800192e:	d16b      	bne.n	8001a08 <__aeabi_dadd+0x484>
 8001930:	0031      	movs	r1, r6
 8001932:	4648      	mov	r0, r9
 8001934:	4301      	orrs	r1, r0
 8001936:	2c00      	cmp	r4, #0
 8001938:	d000      	beq.n	800193c <__aeabi_dadd+0x3b8>
 800193a:	e14b      	b.n	8001bd4 <__aeabi_dadd+0x650>
 800193c:	001f      	movs	r7, r3
 800193e:	4317      	orrs	r7, r2
 8001940:	2900      	cmp	r1, #0
 8001942:	d100      	bne.n	8001946 <__aeabi_dadd+0x3c2>
 8001944:	e181      	b.n	8001c4a <__aeabi_dadd+0x6c6>
 8001946:	2f00      	cmp	r7, #0
 8001948:	d100      	bne.n	800194c <__aeabi_dadd+0x3c8>
 800194a:	e74c      	b.n	80017e6 <__aeabi_dadd+0x262>
 800194c:	444a      	add	r2, r9
 800194e:	454a      	cmp	r2, r9
 8001950:	4180      	sbcs	r0, r0
 8001952:	18f6      	adds	r6, r6, r3
 8001954:	4240      	negs	r0, r0
 8001956:	1836      	adds	r6, r6, r0
 8001958:	0233      	lsls	r3, r6, #8
 800195a:	d500      	bpl.n	800195e <__aeabi_dadd+0x3da>
 800195c:	e1b0      	b.n	8001cc0 <__aeabi_dadd+0x73c>
 800195e:	0017      	movs	r7, r2
 8001960:	4691      	mov	r9, r2
 8001962:	4337      	orrs	r7, r6
 8001964:	d000      	beq.n	8001968 <__aeabi_dadd+0x3e4>
 8001966:	e73e      	b.n	80017e6 <__aeabi_dadd+0x262>
 8001968:	2600      	movs	r6, #0
 800196a:	e754      	b.n	8001816 <__aeabi_dadd+0x292>
 800196c:	4649      	mov	r1, r9
 800196e:	1a89      	subs	r1, r1, r2
 8001970:	4688      	mov	r8, r1
 8001972:	45c1      	cmp	r9, r8
 8001974:	41bf      	sbcs	r7, r7
 8001976:	1af1      	subs	r1, r6, r3
 8001978:	427f      	negs	r7, r7
 800197a:	1bc9      	subs	r1, r1, r7
 800197c:	020f      	lsls	r7, r1, #8
 800197e:	d461      	bmi.n	8001a44 <__aeabi_dadd+0x4c0>
 8001980:	4647      	mov	r7, r8
 8001982:	430f      	orrs	r7, r1
 8001984:	d100      	bne.n	8001988 <__aeabi_dadd+0x404>
 8001986:	e0bd      	b.n	8001b04 <__aeabi_dadd+0x580>
 8001988:	000e      	movs	r6, r1
 800198a:	4647      	mov	r7, r8
 800198c:	e651      	b.n	8001632 <__aeabi_dadd+0xae>
 800198e:	4cb5      	ldr	r4, [pc, #724]	@ (8001c64 <__aeabi_dadd+0x6e0>)
 8001990:	45a0      	cmp	r8, r4
 8001992:	d100      	bne.n	8001996 <__aeabi_dadd+0x412>
 8001994:	e100      	b.n	8001b98 <__aeabi_dadd+0x614>
 8001996:	2701      	movs	r7, #1
 8001998:	2938      	cmp	r1, #56	@ 0x38
 800199a:	dd00      	ble.n	800199e <__aeabi_dadd+0x41a>
 800199c:	e6b8      	b.n	8001710 <__aeabi_dadd+0x18c>
 800199e:	2480      	movs	r4, #128	@ 0x80
 80019a0:	0424      	lsls	r4, r4, #16
 80019a2:	4326      	orrs	r6, r4
 80019a4:	e6a3      	b.n	80016ee <__aeabi_dadd+0x16a>
 80019a6:	4eb0      	ldr	r6, [pc, #704]	@ (8001c68 <__aeabi_dadd+0x6e4>)
 80019a8:	1ae4      	subs	r4, r4, r3
 80019aa:	4016      	ands	r6, r2
 80019ac:	077b      	lsls	r3, r7, #29
 80019ae:	d000      	beq.n	80019b2 <__aeabi_dadd+0x42e>
 80019b0:	e73f      	b.n	8001832 <__aeabi_dadd+0x2ae>
 80019b2:	e743      	b.n	800183c <__aeabi_dadd+0x2b8>
 80019b4:	000f      	movs	r7, r1
 80019b6:	0018      	movs	r0, r3
 80019b8:	3f20      	subs	r7, #32
 80019ba:	40f8      	lsrs	r0, r7
 80019bc:	4684      	mov	ip, r0
 80019be:	2920      	cmp	r1, #32
 80019c0:	d003      	beq.n	80019ca <__aeabi_dadd+0x446>
 80019c2:	2740      	movs	r7, #64	@ 0x40
 80019c4:	1a79      	subs	r1, r7, r1
 80019c6:	408b      	lsls	r3, r1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	1e53      	subs	r3, r2, #1
 80019cc:	419a      	sbcs	r2, r3
 80019ce:	4663      	mov	r3, ip
 80019d0:	0017      	movs	r7, r2
 80019d2:	431f      	orrs	r7, r3
 80019d4:	e622      	b.n	800161c <__aeabi_dadd+0x98>
 80019d6:	48a4      	ldr	r0, [pc, #656]	@ (8001c68 <__aeabi_dadd+0x6e4>)
 80019d8:	1ae1      	subs	r1, r4, r3
 80019da:	4010      	ands	r0, r2
 80019dc:	0747      	lsls	r7, r0, #29
 80019de:	08c0      	lsrs	r0, r0, #3
 80019e0:	e707      	b.n	80017f2 <__aeabi_dadd+0x26e>
 80019e2:	0034      	movs	r4, r6
 80019e4:	4648      	mov	r0, r9
 80019e6:	4304      	orrs	r4, r0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dadd+0x468>
 80019ea:	e0fa      	b.n	8001be2 <__aeabi_dadd+0x65e>
 80019ec:	1e4c      	subs	r4, r1, #1
 80019ee:	2901      	cmp	r1, #1
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dadd+0x470>
 80019f2:	e0d7      	b.n	8001ba4 <__aeabi_dadd+0x620>
 80019f4:	4f9b      	ldr	r7, [pc, #620]	@ (8001c64 <__aeabi_dadd+0x6e0>)
 80019f6:	42b9      	cmp	r1, r7
 80019f8:	d100      	bne.n	80019fc <__aeabi_dadd+0x478>
 80019fa:	e0e2      	b.n	8001bc2 <__aeabi_dadd+0x63e>
 80019fc:	2701      	movs	r7, #1
 80019fe:	2c38      	cmp	r4, #56	@ 0x38
 8001a00:	dd00      	ble.n	8001a04 <__aeabi_dadd+0x480>
 8001a02:	e74f      	b.n	80018a4 <__aeabi_dadd+0x320>
 8001a04:	0021      	movs	r1, r4
 8001a06:	e73c      	b.n	8001882 <__aeabi_dadd+0x2fe>
 8001a08:	4c96      	ldr	r4, [pc, #600]	@ (8001c64 <__aeabi_dadd+0x6e0>)
 8001a0a:	42a1      	cmp	r1, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x48c>
 8001a0e:	e0dd      	b.n	8001bcc <__aeabi_dadd+0x648>
 8001a10:	444a      	add	r2, r9
 8001a12:	454a      	cmp	r2, r9
 8001a14:	4180      	sbcs	r0, r0
 8001a16:	18f3      	adds	r3, r6, r3
 8001a18:	4240      	negs	r0, r0
 8001a1a:	1818      	adds	r0, r3, r0
 8001a1c:	07c7      	lsls	r7, r0, #31
 8001a1e:	0852      	lsrs	r2, r2, #1
 8001a20:	4317      	orrs	r7, r2
 8001a22:	0846      	lsrs	r6, r0, #1
 8001a24:	0752      	lsls	r2, r2, #29
 8001a26:	d005      	beq.n	8001a34 <__aeabi_dadd+0x4b0>
 8001a28:	220f      	movs	r2, #15
 8001a2a:	000c      	movs	r4, r1
 8001a2c:	403a      	ands	r2, r7
 8001a2e:	2a04      	cmp	r2, #4
 8001a30:	d000      	beq.n	8001a34 <__aeabi_dadd+0x4b0>
 8001a32:	e62c      	b.n	800168e <__aeabi_dadd+0x10a>
 8001a34:	0776      	lsls	r6, r6, #29
 8001a36:	08ff      	lsrs	r7, r7, #3
 8001a38:	4337      	orrs	r7, r6
 8001a3a:	0900      	lsrs	r0, r0, #4
 8001a3c:	e6d9      	b.n	80017f2 <__aeabi_dadd+0x26e>
 8001a3e:	2700      	movs	r7, #0
 8001a40:	2600      	movs	r6, #0
 8001a42:	e6e8      	b.n	8001816 <__aeabi_dadd+0x292>
 8001a44:	4649      	mov	r1, r9
 8001a46:	1a57      	subs	r7, r2, r1
 8001a48:	42ba      	cmp	r2, r7
 8001a4a:	4192      	sbcs	r2, r2
 8001a4c:	1b9e      	subs	r6, r3, r6
 8001a4e:	4252      	negs	r2, r2
 8001a50:	4665      	mov	r5, ip
 8001a52:	1ab6      	subs	r6, r6, r2
 8001a54:	e5ed      	b.n	8001632 <__aeabi_dadd+0xae>
 8001a56:	2900      	cmp	r1, #0
 8001a58:	d000      	beq.n	8001a5c <__aeabi_dadd+0x4d8>
 8001a5a:	e0c6      	b.n	8001bea <__aeabi_dadd+0x666>
 8001a5c:	2f00      	cmp	r7, #0
 8001a5e:	d167      	bne.n	8001b30 <__aeabi_dadd+0x5ac>
 8001a60:	2680      	movs	r6, #128	@ 0x80
 8001a62:	2500      	movs	r5, #0
 8001a64:	4c7f      	ldr	r4, [pc, #508]	@ (8001c64 <__aeabi_dadd+0x6e0>)
 8001a66:	0336      	lsls	r6, r6, #12
 8001a68:	e6d5      	b.n	8001816 <__aeabi_dadd+0x292>
 8001a6a:	4665      	mov	r5, ip
 8001a6c:	000c      	movs	r4, r1
 8001a6e:	001e      	movs	r6, r3
 8001a70:	08d0      	lsrs	r0, r2, #3
 8001a72:	e6e4      	b.n	800183e <__aeabi_dadd+0x2ba>
 8001a74:	444a      	add	r2, r9
 8001a76:	454a      	cmp	r2, r9
 8001a78:	4180      	sbcs	r0, r0
 8001a7a:	18f3      	adds	r3, r6, r3
 8001a7c:	4240      	negs	r0, r0
 8001a7e:	1818      	adds	r0, r3, r0
 8001a80:	0011      	movs	r1, r2
 8001a82:	0203      	lsls	r3, r0, #8
 8001a84:	d400      	bmi.n	8001a88 <__aeabi_dadd+0x504>
 8001a86:	e096      	b.n	8001bb6 <__aeabi_dadd+0x632>
 8001a88:	4b77      	ldr	r3, [pc, #476]	@ (8001c68 <__aeabi_dadd+0x6e4>)
 8001a8a:	0849      	lsrs	r1, r1, #1
 8001a8c:	4018      	ands	r0, r3
 8001a8e:	07c3      	lsls	r3, r0, #31
 8001a90:	430b      	orrs	r3, r1
 8001a92:	0844      	lsrs	r4, r0, #1
 8001a94:	0749      	lsls	r1, r1, #29
 8001a96:	d100      	bne.n	8001a9a <__aeabi_dadd+0x516>
 8001a98:	e129      	b.n	8001cee <__aeabi_dadd+0x76a>
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	2a04      	cmp	r2, #4
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dadd+0x520>
 8001aa2:	e0ea      	b.n	8001c7a <__aeabi_dadd+0x6f6>
 8001aa4:	1d1f      	adds	r7, r3, #4
 8001aa6:	429f      	cmp	r7, r3
 8001aa8:	41b6      	sbcs	r6, r6
 8001aaa:	4276      	negs	r6, r6
 8001aac:	1936      	adds	r6, r6, r4
 8001aae:	2402      	movs	r4, #2
 8001ab0:	e6c4      	b.n	800183c <__aeabi_dadd+0x2b8>
 8001ab2:	4649      	mov	r1, r9
 8001ab4:	1a8f      	subs	r7, r1, r2
 8001ab6:	45b9      	cmp	r9, r7
 8001ab8:	4180      	sbcs	r0, r0
 8001aba:	1af6      	subs	r6, r6, r3
 8001abc:	4240      	negs	r0, r0
 8001abe:	1a36      	subs	r6, r6, r0
 8001ac0:	0233      	lsls	r3, r6, #8
 8001ac2:	d406      	bmi.n	8001ad2 <__aeabi_dadd+0x54e>
 8001ac4:	0773      	lsls	r3, r6, #29
 8001ac6:	08ff      	lsrs	r7, r7, #3
 8001ac8:	2101      	movs	r1, #1
 8001aca:	431f      	orrs	r7, r3
 8001acc:	08f0      	lsrs	r0, r6, #3
 8001ace:	e690      	b.n	80017f2 <__aeabi_dadd+0x26e>
 8001ad0:	4665      	mov	r5, ip
 8001ad2:	2401      	movs	r4, #1
 8001ad4:	e5ab      	b.n	800162e <__aeabi_dadd+0xaa>
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	0777      	lsls	r7, r6, #29
 8001ada:	08d8      	lsrs	r0, r3, #3
 8001adc:	4307      	orrs	r7, r0
 8001ade:	08f0      	lsrs	r0, r6, #3
 8001ae0:	e6b4      	b.n	800184c <__aeabi_dadd+0x2c8>
 8001ae2:	000f      	movs	r7, r1
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	3f20      	subs	r7, #32
 8001ae8:	40f8      	lsrs	r0, r7
 8001aea:	4684      	mov	ip, r0
 8001aec:	2920      	cmp	r1, #32
 8001aee:	d003      	beq.n	8001af8 <__aeabi_dadd+0x574>
 8001af0:	2740      	movs	r7, #64	@ 0x40
 8001af2:	1a79      	subs	r1, r7, r1
 8001af4:	408b      	lsls	r3, r1
 8001af6:	431a      	orrs	r2, r3
 8001af8:	1e53      	subs	r3, r2, #1
 8001afa:	419a      	sbcs	r2, r3
 8001afc:	4663      	mov	r3, ip
 8001afe:	0017      	movs	r7, r2
 8001b00:	431f      	orrs	r7, r3
 8001b02:	e635      	b.n	8001770 <__aeabi_dadd+0x1ec>
 8001b04:	2500      	movs	r5, #0
 8001b06:	2400      	movs	r4, #0
 8001b08:	2600      	movs	r6, #0
 8001b0a:	e684      	b.n	8001816 <__aeabi_dadd+0x292>
 8001b0c:	000c      	movs	r4, r1
 8001b0e:	0035      	movs	r5, r6
 8001b10:	3c20      	subs	r4, #32
 8001b12:	40e5      	lsrs	r5, r4
 8001b14:	2920      	cmp	r1, #32
 8001b16:	d005      	beq.n	8001b24 <__aeabi_dadd+0x5a0>
 8001b18:	2440      	movs	r4, #64	@ 0x40
 8001b1a:	1a61      	subs	r1, r4, r1
 8001b1c:	408e      	lsls	r6, r1
 8001b1e:	4649      	mov	r1, r9
 8001b20:	4331      	orrs	r1, r6
 8001b22:	4689      	mov	r9, r1
 8001b24:	4648      	mov	r0, r9
 8001b26:	1e41      	subs	r1, r0, #1
 8001b28:	4188      	sbcs	r0, r1
 8001b2a:	0007      	movs	r7, r0
 8001b2c:	432f      	orrs	r7, r5
 8001b2e:	e5ef      	b.n	8001710 <__aeabi_dadd+0x18c>
 8001b30:	08d2      	lsrs	r2, r2, #3
 8001b32:	075f      	lsls	r7, r3, #29
 8001b34:	4665      	mov	r5, ip
 8001b36:	4317      	orrs	r7, r2
 8001b38:	08d8      	lsrs	r0, r3, #3
 8001b3a:	e687      	b.n	800184c <__aeabi_dadd+0x2c8>
 8001b3c:	1a17      	subs	r7, r2, r0
 8001b3e:	42ba      	cmp	r2, r7
 8001b40:	4192      	sbcs	r2, r2
 8001b42:	1b9e      	subs	r6, r3, r6
 8001b44:	4252      	negs	r2, r2
 8001b46:	1ab6      	subs	r6, r6, r2
 8001b48:	0233      	lsls	r3, r6, #8
 8001b4a:	d4c1      	bmi.n	8001ad0 <__aeabi_dadd+0x54c>
 8001b4c:	0773      	lsls	r3, r6, #29
 8001b4e:	08ff      	lsrs	r7, r7, #3
 8001b50:	4665      	mov	r5, ip
 8001b52:	2101      	movs	r1, #1
 8001b54:	431f      	orrs	r7, r3
 8001b56:	08f0      	lsrs	r0, r6, #3
 8001b58:	e64b      	b.n	80017f2 <__aeabi_dadd+0x26e>
 8001b5a:	2f00      	cmp	r7, #0
 8001b5c:	d07b      	beq.n	8001c56 <__aeabi_dadd+0x6d2>
 8001b5e:	4665      	mov	r5, ip
 8001b60:	001e      	movs	r6, r3
 8001b62:	4691      	mov	r9, r2
 8001b64:	e63f      	b.n	80017e6 <__aeabi_dadd+0x262>
 8001b66:	1a81      	subs	r1, r0, r2
 8001b68:	4688      	mov	r8, r1
 8001b6a:	45c1      	cmp	r9, r8
 8001b6c:	41a4      	sbcs	r4, r4
 8001b6e:	1af1      	subs	r1, r6, r3
 8001b70:	4264      	negs	r4, r4
 8001b72:	1b09      	subs	r1, r1, r4
 8001b74:	2480      	movs	r4, #128	@ 0x80
 8001b76:	0424      	lsls	r4, r4, #16
 8001b78:	4221      	tst	r1, r4
 8001b7a:	d077      	beq.n	8001c6c <__aeabi_dadd+0x6e8>
 8001b7c:	1a10      	subs	r0, r2, r0
 8001b7e:	4282      	cmp	r2, r0
 8001b80:	4192      	sbcs	r2, r2
 8001b82:	0007      	movs	r7, r0
 8001b84:	1b9e      	subs	r6, r3, r6
 8001b86:	4252      	negs	r2, r2
 8001b88:	1ab6      	subs	r6, r6, r2
 8001b8a:	4337      	orrs	r7, r6
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dadd+0x60c>
 8001b8e:	e0a0      	b.n	8001cd2 <__aeabi_dadd+0x74e>
 8001b90:	4665      	mov	r5, ip
 8001b92:	2400      	movs	r4, #0
 8001b94:	2600      	movs	r6, #0
 8001b96:	e63e      	b.n	8001816 <__aeabi_dadd+0x292>
 8001b98:	075f      	lsls	r7, r3, #29
 8001b9a:	08d2      	lsrs	r2, r2, #3
 8001b9c:	4665      	mov	r5, ip
 8001b9e:	4317      	orrs	r7, r2
 8001ba0:	08d8      	lsrs	r0, r3, #3
 8001ba2:	e653      	b.n	800184c <__aeabi_dadd+0x2c8>
 8001ba4:	1881      	adds	r1, r0, r2
 8001ba6:	4291      	cmp	r1, r2
 8001ba8:	4192      	sbcs	r2, r2
 8001baa:	18f0      	adds	r0, r6, r3
 8001bac:	4252      	negs	r2, r2
 8001bae:	1880      	adds	r0, r0, r2
 8001bb0:	0203      	lsls	r3, r0, #8
 8001bb2:	d500      	bpl.n	8001bb6 <__aeabi_dadd+0x632>
 8001bb4:	e768      	b.n	8001a88 <__aeabi_dadd+0x504>
 8001bb6:	0747      	lsls	r7, r0, #29
 8001bb8:	08c9      	lsrs	r1, r1, #3
 8001bba:	430f      	orrs	r7, r1
 8001bbc:	08c0      	lsrs	r0, r0, #3
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	e617      	b.n	80017f2 <__aeabi_dadd+0x26e>
 8001bc2:	08d2      	lsrs	r2, r2, #3
 8001bc4:	075f      	lsls	r7, r3, #29
 8001bc6:	4317      	orrs	r7, r2
 8001bc8:	08d8      	lsrs	r0, r3, #3
 8001bca:	e63f      	b.n	800184c <__aeabi_dadd+0x2c8>
 8001bcc:	000c      	movs	r4, r1
 8001bce:	2600      	movs	r6, #0
 8001bd0:	2700      	movs	r7, #0
 8001bd2:	e620      	b.n	8001816 <__aeabi_dadd+0x292>
 8001bd4:	2900      	cmp	r1, #0
 8001bd6:	d156      	bne.n	8001c86 <__aeabi_dadd+0x702>
 8001bd8:	075f      	lsls	r7, r3, #29
 8001bda:	08d2      	lsrs	r2, r2, #3
 8001bdc:	4317      	orrs	r7, r2
 8001bde:	08d8      	lsrs	r0, r3, #3
 8001be0:	e634      	b.n	800184c <__aeabi_dadd+0x2c8>
 8001be2:	000c      	movs	r4, r1
 8001be4:	001e      	movs	r6, r3
 8001be6:	08d0      	lsrs	r0, r2, #3
 8001be8:	e629      	b.n	800183e <__aeabi_dadd+0x2ba>
 8001bea:	08c1      	lsrs	r1, r0, #3
 8001bec:	0770      	lsls	r0, r6, #29
 8001bee:	4301      	orrs	r1, r0
 8001bf0:	08f0      	lsrs	r0, r6, #3
 8001bf2:	2f00      	cmp	r7, #0
 8001bf4:	d062      	beq.n	8001cbc <__aeabi_dadd+0x738>
 8001bf6:	2480      	movs	r4, #128	@ 0x80
 8001bf8:	0324      	lsls	r4, r4, #12
 8001bfa:	4220      	tst	r0, r4
 8001bfc:	d007      	beq.n	8001c0e <__aeabi_dadd+0x68a>
 8001bfe:	08de      	lsrs	r6, r3, #3
 8001c00:	4226      	tst	r6, r4
 8001c02:	d104      	bne.n	8001c0e <__aeabi_dadd+0x68a>
 8001c04:	4665      	mov	r5, ip
 8001c06:	0030      	movs	r0, r6
 8001c08:	08d1      	lsrs	r1, r2, #3
 8001c0a:	075b      	lsls	r3, r3, #29
 8001c0c:	4319      	orrs	r1, r3
 8001c0e:	0f4f      	lsrs	r7, r1, #29
 8001c10:	00c9      	lsls	r1, r1, #3
 8001c12:	08c9      	lsrs	r1, r1, #3
 8001c14:	077f      	lsls	r7, r7, #29
 8001c16:	430f      	orrs	r7, r1
 8001c18:	e618      	b.n	800184c <__aeabi_dadd+0x2c8>
 8001c1a:	000c      	movs	r4, r1
 8001c1c:	0030      	movs	r0, r6
 8001c1e:	3c20      	subs	r4, #32
 8001c20:	40e0      	lsrs	r0, r4
 8001c22:	4684      	mov	ip, r0
 8001c24:	2920      	cmp	r1, #32
 8001c26:	d005      	beq.n	8001c34 <__aeabi_dadd+0x6b0>
 8001c28:	2440      	movs	r4, #64	@ 0x40
 8001c2a:	1a61      	subs	r1, r4, r1
 8001c2c:	408e      	lsls	r6, r1
 8001c2e:	4649      	mov	r1, r9
 8001c30:	4331      	orrs	r1, r6
 8001c32:	4689      	mov	r9, r1
 8001c34:	4648      	mov	r0, r9
 8001c36:	1e41      	subs	r1, r0, #1
 8001c38:	4188      	sbcs	r0, r1
 8001c3a:	4661      	mov	r1, ip
 8001c3c:	0007      	movs	r7, r0
 8001c3e:	430f      	orrs	r7, r1
 8001c40:	e630      	b.n	80018a4 <__aeabi_dadd+0x320>
 8001c42:	2120      	movs	r1, #32
 8001c44:	2700      	movs	r7, #0
 8001c46:	1a09      	subs	r1, r1, r0
 8001c48:	e50e      	b.n	8001668 <__aeabi_dadd+0xe4>
 8001c4a:	001e      	movs	r6, r3
 8001c4c:	2f00      	cmp	r7, #0
 8001c4e:	d000      	beq.n	8001c52 <__aeabi_dadd+0x6ce>
 8001c50:	e522      	b.n	8001698 <__aeabi_dadd+0x114>
 8001c52:	2400      	movs	r4, #0
 8001c54:	e758      	b.n	8001b08 <__aeabi_dadd+0x584>
 8001c56:	2500      	movs	r5, #0
 8001c58:	2400      	movs	r4, #0
 8001c5a:	2600      	movs	r6, #0
 8001c5c:	e5db      	b.n	8001816 <__aeabi_dadd+0x292>
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	000007fe 	.word	0x000007fe
 8001c64:	000007ff 	.word	0x000007ff
 8001c68:	ff7fffff 	.word	0xff7fffff
 8001c6c:	4647      	mov	r7, r8
 8001c6e:	430f      	orrs	r7, r1
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dadd+0x6f0>
 8001c72:	e747      	b.n	8001b04 <__aeabi_dadd+0x580>
 8001c74:	000e      	movs	r6, r1
 8001c76:	46c1      	mov	r9, r8
 8001c78:	e5b5      	b.n	80017e6 <__aeabi_dadd+0x262>
 8001c7a:	08df      	lsrs	r7, r3, #3
 8001c7c:	0764      	lsls	r4, r4, #29
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4327      	orrs	r7, r4
 8001c82:	0900      	lsrs	r0, r0, #4
 8001c84:	e5b5      	b.n	80017f2 <__aeabi_dadd+0x26e>
 8001c86:	0019      	movs	r1, r3
 8001c88:	08c0      	lsrs	r0, r0, #3
 8001c8a:	0777      	lsls	r7, r6, #29
 8001c8c:	4307      	orrs	r7, r0
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	08f0      	lsrs	r0, r6, #3
 8001c92:	2900      	cmp	r1, #0
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dadd+0x714>
 8001c96:	e5d9      	b.n	800184c <__aeabi_dadd+0x2c8>
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	0309      	lsls	r1, r1, #12
 8001c9c:	4208      	tst	r0, r1
 8001c9e:	d007      	beq.n	8001cb0 <__aeabi_dadd+0x72c>
 8001ca0:	08dc      	lsrs	r4, r3, #3
 8001ca2:	420c      	tst	r4, r1
 8001ca4:	d104      	bne.n	8001cb0 <__aeabi_dadd+0x72c>
 8001ca6:	08d2      	lsrs	r2, r2, #3
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	431a      	orrs	r2, r3
 8001cac:	0017      	movs	r7, r2
 8001cae:	0020      	movs	r0, r4
 8001cb0:	0f7b      	lsrs	r3, r7, #29
 8001cb2:	00ff      	lsls	r7, r7, #3
 8001cb4:	08ff      	lsrs	r7, r7, #3
 8001cb6:	075b      	lsls	r3, r3, #29
 8001cb8:	431f      	orrs	r7, r3
 8001cba:	e5c7      	b.n	800184c <__aeabi_dadd+0x2c8>
 8001cbc:	000f      	movs	r7, r1
 8001cbe:	e5c5      	b.n	800184c <__aeabi_dadd+0x2c8>
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <__aeabi_dadd+0x788>)
 8001cc2:	08d2      	lsrs	r2, r2, #3
 8001cc4:	4033      	ands	r3, r6
 8001cc6:	075f      	lsls	r7, r3, #29
 8001cc8:	025b      	lsls	r3, r3, #9
 8001cca:	2401      	movs	r4, #1
 8001ccc:	4317      	orrs	r7, r2
 8001cce:	0b1e      	lsrs	r6, r3, #12
 8001cd0:	e5a1      	b.n	8001816 <__aeabi_dadd+0x292>
 8001cd2:	4226      	tst	r6, r4
 8001cd4:	d012      	beq.n	8001cfc <__aeabi_dadd+0x778>
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <__aeabi_dadd+0x788>)
 8001cd8:	4665      	mov	r5, ip
 8001cda:	0002      	movs	r2, r0
 8001cdc:	2401      	movs	r4, #1
 8001cde:	401e      	ands	r6, r3
 8001ce0:	e4e6      	b.n	80016b0 <__aeabi_dadd+0x12c>
 8001ce2:	0021      	movs	r1, r4
 8001ce4:	e585      	b.n	80017f2 <__aeabi_dadd+0x26e>
 8001ce6:	0017      	movs	r7, r2
 8001ce8:	e5a8      	b.n	800183c <__aeabi_dadd+0x2b8>
 8001cea:	003a      	movs	r2, r7
 8001cec:	e4d4      	b.n	8001698 <__aeabi_dadd+0x114>
 8001cee:	08db      	lsrs	r3, r3, #3
 8001cf0:	0764      	lsls	r4, r4, #29
 8001cf2:	431c      	orrs	r4, r3
 8001cf4:	0027      	movs	r7, r4
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	0900      	lsrs	r0, r0, #4
 8001cfa:	e57a      	b.n	80017f2 <__aeabi_dadd+0x26e>
 8001cfc:	08c0      	lsrs	r0, r0, #3
 8001cfe:	0777      	lsls	r7, r6, #29
 8001d00:	4307      	orrs	r7, r0
 8001d02:	4665      	mov	r5, ip
 8001d04:	2100      	movs	r1, #0
 8001d06:	08f0      	lsrs	r0, r6, #3
 8001d08:	e573      	b.n	80017f2 <__aeabi_dadd+0x26e>
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	ff7fffff 	.word	0xff7fffff

08001d10 <__aeabi_ddiv>:
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	46de      	mov	lr, fp
 8001d14:	4645      	mov	r5, r8
 8001d16:	4657      	mov	r7, sl
 8001d18:	464e      	mov	r6, r9
 8001d1a:	b5e0      	push	{r5, r6, r7, lr}
 8001d1c:	b087      	sub	sp, #28
 8001d1e:	9200      	str	r2, [sp, #0]
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	030b      	lsls	r3, r1, #12
 8001d24:	0b1b      	lsrs	r3, r3, #12
 8001d26:	469b      	mov	fp, r3
 8001d28:	0fca      	lsrs	r2, r1, #31
 8001d2a:	004b      	lsls	r3, r1, #1
 8001d2c:	0004      	movs	r4, r0
 8001d2e:	4680      	mov	r8, r0
 8001d30:	0d5b      	lsrs	r3, r3, #21
 8001d32:	9202      	str	r2, [sp, #8]
 8001d34:	d100      	bne.n	8001d38 <__aeabi_ddiv+0x28>
 8001d36:	e098      	b.n	8001e6a <__aeabi_ddiv+0x15a>
 8001d38:	4a7c      	ldr	r2, [pc, #496]	@ (8001f2c <__aeabi_ddiv+0x21c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d037      	beq.n	8001dae <__aeabi_ddiv+0x9e>
 8001d3e:	4659      	mov	r1, fp
 8001d40:	0f42      	lsrs	r2, r0, #29
 8001d42:	00c9      	lsls	r1, r1, #3
 8001d44:	430a      	orrs	r2, r1
 8001d46:	2180      	movs	r1, #128	@ 0x80
 8001d48:	0409      	lsls	r1, r1, #16
 8001d4a:	4311      	orrs	r1, r2
 8001d4c:	00c2      	lsls	r2, r0, #3
 8001d4e:	4690      	mov	r8, r2
 8001d50:	4a77      	ldr	r2, [pc, #476]	@ (8001f30 <__aeabi_ddiv+0x220>)
 8001d52:	4689      	mov	r9, r1
 8001d54:	4692      	mov	sl, r2
 8001d56:	449a      	add	sl, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2400      	movs	r4, #0
 8001d5c:	9303      	str	r3, [sp, #12]
 8001d5e:	9e00      	ldr	r6, [sp, #0]
 8001d60:	9f01      	ldr	r7, [sp, #4]
 8001d62:	033b      	lsls	r3, r7, #12
 8001d64:	0b1b      	lsrs	r3, r3, #12
 8001d66:	469b      	mov	fp, r3
 8001d68:	007b      	lsls	r3, r7, #1
 8001d6a:	0030      	movs	r0, r6
 8001d6c:	0d5b      	lsrs	r3, r3, #21
 8001d6e:	0ffd      	lsrs	r5, r7, #31
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d059      	beq.n	8001e28 <__aeabi_ddiv+0x118>
 8001d74:	4a6d      	ldr	r2, [pc, #436]	@ (8001f2c <__aeabi_ddiv+0x21c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d048      	beq.n	8001e0c <__aeabi_ddiv+0xfc>
 8001d7a:	4659      	mov	r1, fp
 8001d7c:	0f72      	lsrs	r2, r6, #29
 8001d7e:	00c9      	lsls	r1, r1, #3
 8001d80:	430a      	orrs	r2, r1
 8001d82:	2180      	movs	r1, #128	@ 0x80
 8001d84:	0409      	lsls	r1, r1, #16
 8001d86:	4311      	orrs	r1, r2
 8001d88:	468b      	mov	fp, r1
 8001d8a:	4969      	ldr	r1, [pc, #420]	@ (8001f30 <__aeabi_ddiv+0x220>)
 8001d8c:	00f2      	lsls	r2, r6, #3
 8001d8e:	468c      	mov	ip, r1
 8001d90:	4651      	mov	r1, sl
 8001d92:	4463      	add	r3, ip
 8001d94:	1acb      	subs	r3, r1, r3
 8001d96:	469a      	mov	sl, r3
 8001d98:	2100      	movs	r1, #0
 8001d9a:	9e02      	ldr	r6, [sp, #8]
 8001d9c:	406e      	eors	r6, r5
 8001d9e:	b2f6      	uxtb	r6, r6
 8001da0:	2c0f      	cmp	r4, #15
 8001da2:	d900      	bls.n	8001da6 <__aeabi_ddiv+0x96>
 8001da4:	e0ce      	b.n	8001f44 <__aeabi_ddiv+0x234>
 8001da6:	4b63      	ldr	r3, [pc, #396]	@ (8001f34 <__aeabi_ddiv+0x224>)
 8001da8:	00a4      	lsls	r4, r4, #2
 8001daa:	591b      	ldr	r3, [r3, r4]
 8001dac:	469f      	mov	pc, r3
 8001dae:	465a      	mov	r2, fp
 8001db0:	4302      	orrs	r2, r0
 8001db2:	4691      	mov	r9, r2
 8001db4:	d000      	beq.n	8001db8 <__aeabi_ddiv+0xa8>
 8001db6:	e090      	b.n	8001eda <__aeabi_ddiv+0x1ca>
 8001db8:	469a      	mov	sl, r3
 8001dba:	2302      	movs	r3, #2
 8001dbc:	4690      	mov	r8, r2
 8001dbe:	2408      	movs	r4, #8
 8001dc0:	9303      	str	r3, [sp, #12]
 8001dc2:	e7cc      	b.n	8001d5e <__aeabi_ddiv+0x4e>
 8001dc4:	46cb      	mov	fp, r9
 8001dc6:	4642      	mov	r2, r8
 8001dc8:	9d02      	ldr	r5, [sp, #8]
 8001dca:	9903      	ldr	r1, [sp, #12]
 8001dcc:	2902      	cmp	r1, #2
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_ddiv+0xc2>
 8001dd0:	e1de      	b.n	8002190 <__aeabi_ddiv+0x480>
 8001dd2:	2903      	cmp	r1, #3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_ddiv+0xc8>
 8001dd6:	e08d      	b.n	8001ef4 <__aeabi_ddiv+0x1e4>
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d000      	beq.n	8001dde <__aeabi_ddiv+0xce>
 8001ddc:	e179      	b.n	80020d2 <__aeabi_ddiv+0x3c2>
 8001dde:	002e      	movs	r6, r5
 8001de0:	2200      	movs	r2, #0
 8001de2:	2300      	movs	r3, #0
 8001de4:	2400      	movs	r4, #0
 8001de6:	4690      	mov	r8, r2
 8001de8:	051b      	lsls	r3, r3, #20
 8001dea:	4323      	orrs	r3, r4
 8001dec:	07f6      	lsls	r6, r6, #31
 8001dee:	4333      	orrs	r3, r6
 8001df0:	4640      	mov	r0, r8
 8001df2:	0019      	movs	r1, r3
 8001df4:	b007      	add	sp, #28
 8001df6:	bcf0      	pop	{r4, r5, r6, r7}
 8001df8:	46bb      	mov	fp, r7
 8001dfa:	46b2      	mov	sl, r6
 8001dfc:	46a9      	mov	r9, r5
 8001dfe:	46a0      	mov	r8, r4
 8001e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e02:	2200      	movs	r2, #0
 8001e04:	2400      	movs	r4, #0
 8001e06:	4690      	mov	r8, r2
 8001e08:	4b48      	ldr	r3, [pc, #288]	@ (8001f2c <__aeabi_ddiv+0x21c>)
 8001e0a:	e7ed      	b.n	8001de8 <__aeabi_ddiv+0xd8>
 8001e0c:	465a      	mov	r2, fp
 8001e0e:	9b00      	ldr	r3, [sp, #0]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	4b49      	ldr	r3, [pc, #292]	@ (8001f38 <__aeabi_ddiv+0x228>)
 8001e14:	469c      	mov	ip, r3
 8001e16:	44e2      	add	sl, ip
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d159      	bne.n	8001ed0 <__aeabi_ddiv+0x1c0>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	431c      	orrs	r4, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	2102      	movs	r1, #2
 8001e24:	469b      	mov	fp, r3
 8001e26:	e7b8      	b.n	8001d9a <__aeabi_ddiv+0x8a>
 8001e28:	465a      	mov	r2, fp
 8001e2a:	9b00      	ldr	r3, [sp, #0]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	d049      	beq.n	8001ec4 <__aeabi_ddiv+0x1b4>
 8001e30:	465b      	mov	r3, fp
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d100      	bne.n	8001e38 <__aeabi_ddiv+0x128>
 8001e36:	e19c      	b.n	8002172 <__aeabi_ddiv+0x462>
 8001e38:	4658      	mov	r0, fp
 8001e3a:	f001 fc0d 	bl	8003658 <__clzsi2>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	0003      	movs	r3, r0
 8001e42:	3a0b      	subs	r2, #11
 8001e44:	271d      	movs	r7, #29
 8001e46:	9e00      	ldr	r6, [sp, #0]
 8001e48:	1aba      	subs	r2, r7, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	4658      	mov	r0, fp
 8001e4e:	40d6      	lsrs	r6, r2
 8001e50:	3908      	subs	r1, #8
 8001e52:	4088      	lsls	r0, r1
 8001e54:	0032      	movs	r2, r6
 8001e56:	4302      	orrs	r2, r0
 8001e58:	4693      	mov	fp, r2
 8001e5a:	9a00      	ldr	r2, [sp, #0]
 8001e5c:	408a      	lsls	r2, r1
 8001e5e:	4937      	ldr	r1, [pc, #220]	@ (8001f3c <__aeabi_ddiv+0x22c>)
 8001e60:	4453      	add	r3, sl
 8001e62:	468a      	mov	sl, r1
 8001e64:	2100      	movs	r1, #0
 8001e66:	449a      	add	sl, r3
 8001e68:	e797      	b.n	8001d9a <__aeabi_ddiv+0x8a>
 8001e6a:	465b      	mov	r3, fp
 8001e6c:	4303      	orrs	r3, r0
 8001e6e:	4699      	mov	r9, r3
 8001e70:	d021      	beq.n	8001eb6 <__aeabi_ddiv+0x1a6>
 8001e72:	465b      	mov	r3, fp
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d100      	bne.n	8001e7a <__aeabi_ddiv+0x16a>
 8001e78:	e169      	b.n	800214e <__aeabi_ddiv+0x43e>
 8001e7a:	4658      	mov	r0, fp
 8001e7c:	f001 fbec 	bl	8003658 <__clzsi2>
 8001e80:	230b      	movs	r3, #11
 8001e82:	425b      	negs	r3, r3
 8001e84:	469c      	mov	ip, r3
 8001e86:	0002      	movs	r2, r0
 8001e88:	4484      	add	ip, r0
 8001e8a:	4666      	mov	r6, ip
 8001e8c:	231d      	movs	r3, #29
 8001e8e:	1b9b      	subs	r3, r3, r6
 8001e90:	0026      	movs	r6, r4
 8001e92:	0011      	movs	r1, r2
 8001e94:	4658      	mov	r0, fp
 8001e96:	40de      	lsrs	r6, r3
 8001e98:	3908      	subs	r1, #8
 8001e9a:	4088      	lsls	r0, r1
 8001e9c:	0033      	movs	r3, r6
 8001e9e:	4303      	orrs	r3, r0
 8001ea0:	4699      	mov	r9, r3
 8001ea2:	0023      	movs	r3, r4
 8001ea4:	408b      	lsls	r3, r1
 8001ea6:	4698      	mov	r8, r3
 8001ea8:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <__aeabi_ddiv+0x230>)
 8001eaa:	2400      	movs	r4, #0
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	469a      	mov	sl, r3
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9303      	str	r3, [sp, #12]
 8001eb4:	e753      	b.n	8001d5e <__aeabi_ddiv+0x4e>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	4698      	mov	r8, r3
 8001eba:	469a      	mov	sl, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	2404      	movs	r4, #4
 8001ec0:	9303      	str	r3, [sp, #12]
 8001ec2:	e74c      	b.n	8001d5e <__aeabi_ddiv+0x4e>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	431c      	orrs	r4, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2101      	movs	r1, #1
 8001ecc:	469b      	mov	fp, r3
 8001ece:	e764      	b.n	8001d9a <__aeabi_ddiv+0x8a>
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	0032      	movs	r2, r6
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	431c      	orrs	r4, r3
 8001ed8:	e75f      	b.n	8001d9a <__aeabi_ddiv+0x8a>
 8001eda:	469a      	mov	sl, r3
 8001edc:	2303      	movs	r3, #3
 8001ede:	46d9      	mov	r9, fp
 8001ee0:	240c      	movs	r4, #12
 8001ee2:	9303      	str	r3, [sp, #12]
 8001ee4:	e73b      	b.n	8001d5e <__aeabi_ddiv+0x4e>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2480      	movs	r4, #128	@ 0x80
 8001eea:	4698      	mov	r8, r3
 8001eec:	2600      	movs	r6, #0
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <__aeabi_ddiv+0x21c>)
 8001ef0:	0324      	lsls	r4, r4, #12
 8001ef2:	e779      	b.n	8001de8 <__aeabi_ddiv+0xd8>
 8001ef4:	2480      	movs	r4, #128	@ 0x80
 8001ef6:	465b      	mov	r3, fp
 8001ef8:	0324      	lsls	r4, r4, #12
 8001efa:	431c      	orrs	r4, r3
 8001efc:	0324      	lsls	r4, r4, #12
 8001efe:	002e      	movs	r6, r5
 8001f00:	4690      	mov	r8, r2
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <__aeabi_ddiv+0x21c>)
 8001f04:	0b24      	lsrs	r4, r4, #12
 8001f06:	e76f      	b.n	8001de8 <__aeabi_ddiv+0xd8>
 8001f08:	2480      	movs	r4, #128	@ 0x80
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	0324      	lsls	r4, r4, #12
 8001f0e:	4223      	tst	r3, r4
 8001f10:	d002      	beq.n	8001f18 <__aeabi_ddiv+0x208>
 8001f12:	465b      	mov	r3, fp
 8001f14:	4223      	tst	r3, r4
 8001f16:	d0f0      	beq.n	8001efa <__aeabi_ddiv+0x1ea>
 8001f18:	2480      	movs	r4, #128	@ 0x80
 8001f1a:	464b      	mov	r3, r9
 8001f1c:	0324      	lsls	r4, r4, #12
 8001f1e:	431c      	orrs	r4, r3
 8001f20:	0324      	lsls	r4, r4, #12
 8001f22:	9e02      	ldr	r6, [sp, #8]
 8001f24:	4b01      	ldr	r3, [pc, #4]	@ (8001f2c <__aeabi_ddiv+0x21c>)
 8001f26:	0b24      	lsrs	r4, r4, #12
 8001f28:	e75e      	b.n	8001de8 <__aeabi_ddiv+0xd8>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	000007ff 	.word	0x000007ff
 8001f30:	fffffc01 	.word	0xfffffc01
 8001f34:	0800bae4 	.word	0x0800bae4
 8001f38:	fffff801 	.word	0xfffff801
 8001f3c:	000003f3 	.word	0x000003f3
 8001f40:	fffffc0d 	.word	0xfffffc0d
 8001f44:	45cb      	cmp	fp, r9
 8001f46:	d200      	bcs.n	8001f4a <__aeabi_ddiv+0x23a>
 8001f48:	e0f8      	b.n	800213c <__aeabi_ddiv+0x42c>
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_ddiv+0x23e>
 8001f4c:	e0f3      	b.n	8002136 <__aeabi_ddiv+0x426>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	425b      	negs	r3, r3
 8001f52:	469c      	mov	ip, r3
 8001f54:	4644      	mov	r4, r8
 8001f56:	4648      	mov	r0, r9
 8001f58:	2500      	movs	r5, #0
 8001f5a:	44e2      	add	sl, ip
 8001f5c:	465b      	mov	r3, fp
 8001f5e:	0e17      	lsrs	r7, r2, #24
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	431f      	orrs	r7, r3
 8001f64:	0c19      	lsrs	r1, r3, #16
 8001f66:	043b      	lsls	r3, r7, #16
 8001f68:	0212      	lsls	r2, r2, #8
 8001f6a:	9700      	str	r7, [sp, #0]
 8001f6c:	0c1f      	lsrs	r7, r3, #16
 8001f6e:	4691      	mov	r9, r2
 8001f70:	9102      	str	r1, [sp, #8]
 8001f72:	9703      	str	r7, [sp, #12]
 8001f74:	f7fe f96a 	bl	800024c <__aeabi_uidivmod>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	437a      	muls	r2, r7
 8001f7c:	040b      	lsls	r3, r1, #16
 8001f7e:	0c21      	lsrs	r1, r4, #16
 8001f80:	4680      	mov	r8, r0
 8001f82:	4319      	orrs	r1, r3
 8001f84:	428a      	cmp	r2, r1
 8001f86:	d909      	bls.n	8001f9c <__aeabi_ddiv+0x28c>
 8001f88:	9f00      	ldr	r7, [sp, #0]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	46bc      	mov	ip, r7
 8001f8e:	425b      	negs	r3, r3
 8001f90:	4461      	add	r1, ip
 8001f92:	469c      	mov	ip, r3
 8001f94:	44e0      	add	r8, ip
 8001f96:	428f      	cmp	r7, r1
 8001f98:	d800      	bhi.n	8001f9c <__aeabi_ddiv+0x28c>
 8001f9a:	e15c      	b.n	8002256 <__aeabi_ddiv+0x546>
 8001f9c:	1a88      	subs	r0, r1, r2
 8001f9e:	9902      	ldr	r1, [sp, #8]
 8001fa0:	f7fe f954 	bl	800024c <__aeabi_uidivmod>
 8001fa4:	9a03      	ldr	r2, [sp, #12]
 8001fa6:	0424      	lsls	r4, r4, #16
 8001fa8:	4342      	muls	r2, r0
 8001faa:	0409      	lsls	r1, r1, #16
 8001fac:	0c24      	lsrs	r4, r4, #16
 8001fae:	0003      	movs	r3, r0
 8001fb0:	430c      	orrs	r4, r1
 8001fb2:	42a2      	cmp	r2, r4
 8001fb4:	d906      	bls.n	8001fc4 <__aeabi_ddiv+0x2b4>
 8001fb6:	9900      	ldr	r1, [sp, #0]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	468c      	mov	ip, r1
 8001fbc:	4464      	add	r4, ip
 8001fbe:	42a1      	cmp	r1, r4
 8001fc0:	d800      	bhi.n	8001fc4 <__aeabi_ddiv+0x2b4>
 8001fc2:	e142      	b.n	800224a <__aeabi_ddiv+0x53a>
 8001fc4:	1aa0      	subs	r0, r4, r2
 8001fc6:	4642      	mov	r2, r8
 8001fc8:	0412      	lsls	r2, r2, #16
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	4693      	mov	fp, r2
 8001fce:	464b      	mov	r3, r9
 8001fd0:	4659      	mov	r1, fp
 8001fd2:	0c1b      	lsrs	r3, r3, #16
 8001fd4:	001f      	movs	r7, r3
 8001fd6:	9304      	str	r3, [sp, #16]
 8001fd8:	040b      	lsls	r3, r1, #16
 8001fda:	4649      	mov	r1, r9
 8001fdc:	0409      	lsls	r1, r1, #16
 8001fde:	0c09      	lsrs	r1, r1, #16
 8001fe0:	000c      	movs	r4, r1
 8001fe2:	0c1b      	lsrs	r3, r3, #16
 8001fe4:	435c      	muls	r4, r3
 8001fe6:	0c12      	lsrs	r2, r2, #16
 8001fe8:	437b      	muls	r3, r7
 8001fea:	4688      	mov	r8, r1
 8001fec:	4351      	muls	r1, r2
 8001fee:	437a      	muls	r2, r7
 8001ff0:	0c27      	lsrs	r7, r4, #16
 8001ff2:	46bc      	mov	ip, r7
 8001ff4:	185b      	adds	r3, r3, r1
 8001ff6:	4463      	add	r3, ip
 8001ff8:	4299      	cmp	r1, r3
 8001ffa:	d903      	bls.n	8002004 <__aeabi_ddiv+0x2f4>
 8001ffc:	2180      	movs	r1, #128	@ 0x80
 8001ffe:	0249      	lsls	r1, r1, #9
 8002000:	468c      	mov	ip, r1
 8002002:	4462      	add	r2, ip
 8002004:	0c19      	lsrs	r1, r3, #16
 8002006:	0424      	lsls	r4, r4, #16
 8002008:	041b      	lsls	r3, r3, #16
 800200a:	0c24      	lsrs	r4, r4, #16
 800200c:	188a      	adds	r2, r1, r2
 800200e:	191c      	adds	r4, r3, r4
 8002010:	4290      	cmp	r0, r2
 8002012:	d302      	bcc.n	800201a <__aeabi_ddiv+0x30a>
 8002014:	d116      	bne.n	8002044 <__aeabi_ddiv+0x334>
 8002016:	42a5      	cmp	r5, r4
 8002018:	d214      	bcs.n	8002044 <__aeabi_ddiv+0x334>
 800201a:	465b      	mov	r3, fp
 800201c:	9f00      	ldr	r7, [sp, #0]
 800201e:	3b01      	subs	r3, #1
 8002020:	444d      	add	r5, r9
 8002022:	9305      	str	r3, [sp, #20]
 8002024:	454d      	cmp	r5, r9
 8002026:	419b      	sbcs	r3, r3
 8002028:	46bc      	mov	ip, r7
 800202a:	425b      	negs	r3, r3
 800202c:	4463      	add	r3, ip
 800202e:	18c0      	adds	r0, r0, r3
 8002030:	4287      	cmp	r7, r0
 8002032:	d300      	bcc.n	8002036 <__aeabi_ddiv+0x326>
 8002034:	e102      	b.n	800223c <__aeabi_ddiv+0x52c>
 8002036:	4282      	cmp	r2, r0
 8002038:	d900      	bls.n	800203c <__aeabi_ddiv+0x32c>
 800203a:	e129      	b.n	8002290 <__aeabi_ddiv+0x580>
 800203c:	d100      	bne.n	8002040 <__aeabi_ddiv+0x330>
 800203e:	e124      	b.n	800228a <__aeabi_ddiv+0x57a>
 8002040:	9b05      	ldr	r3, [sp, #20]
 8002042:	469b      	mov	fp, r3
 8002044:	1b2c      	subs	r4, r5, r4
 8002046:	42a5      	cmp	r5, r4
 8002048:	41ad      	sbcs	r5, r5
 800204a:	9b00      	ldr	r3, [sp, #0]
 800204c:	1a80      	subs	r0, r0, r2
 800204e:	426d      	negs	r5, r5
 8002050:	1b40      	subs	r0, r0, r5
 8002052:	4283      	cmp	r3, r0
 8002054:	d100      	bne.n	8002058 <__aeabi_ddiv+0x348>
 8002056:	e10f      	b.n	8002278 <__aeabi_ddiv+0x568>
 8002058:	9902      	ldr	r1, [sp, #8]
 800205a:	f7fe f8f7 	bl	800024c <__aeabi_uidivmod>
 800205e:	9a03      	ldr	r2, [sp, #12]
 8002060:	040b      	lsls	r3, r1, #16
 8002062:	4342      	muls	r2, r0
 8002064:	0c21      	lsrs	r1, r4, #16
 8002066:	0005      	movs	r5, r0
 8002068:	4319      	orrs	r1, r3
 800206a:	428a      	cmp	r2, r1
 800206c:	d900      	bls.n	8002070 <__aeabi_ddiv+0x360>
 800206e:	e0cb      	b.n	8002208 <__aeabi_ddiv+0x4f8>
 8002070:	1a88      	subs	r0, r1, r2
 8002072:	9902      	ldr	r1, [sp, #8]
 8002074:	f7fe f8ea 	bl	800024c <__aeabi_uidivmod>
 8002078:	9a03      	ldr	r2, [sp, #12]
 800207a:	0424      	lsls	r4, r4, #16
 800207c:	4342      	muls	r2, r0
 800207e:	0409      	lsls	r1, r1, #16
 8002080:	0c24      	lsrs	r4, r4, #16
 8002082:	0003      	movs	r3, r0
 8002084:	430c      	orrs	r4, r1
 8002086:	42a2      	cmp	r2, r4
 8002088:	d900      	bls.n	800208c <__aeabi_ddiv+0x37c>
 800208a:	e0ca      	b.n	8002222 <__aeabi_ddiv+0x512>
 800208c:	4641      	mov	r1, r8
 800208e:	1aa4      	subs	r4, r4, r2
 8002090:	042a      	lsls	r2, r5, #16
 8002092:	431a      	orrs	r2, r3
 8002094:	9f04      	ldr	r7, [sp, #16]
 8002096:	0413      	lsls	r3, r2, #16
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	4359      	muls	r1, r3
 800209c:	4640      	mov	r0, r8
 800209e:	437b      	muls	r3, r7
 80020a0:	469c      	mov	ip, r3
 80020a2:	0c15      	lsrs	r5, r2, #16
 80020a4:	4368      	muls	r0, r5
 80020a6:	0c0b      	lsrs	r3, r1, #16
 80020a8:	4484      	add	ip, r0
 80020aa:	4463      	add	r3, ip
 80020ac:	437d      	muls	r5, r7
 80020ae:	4298      	cmp	r0, r3
 80020b0:	d903      	bls.n	80020ba <__aeabi_ddiv+0x3aa>
 80020b2:	2080      	movs	r0, #128	@ 0x80
 80020b4:	0240      	lsls	r0, r0, #9
 80020b6:	4684      	mov	ip, r0
 80020b8:	4465      	add	r5, ip
 80020ba:	0c18      	lsrs	r0, r3, #16
 80020bc:	0409      	lsls	r1, r1, #16
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	0c09      	lsrs	r1, r1, #16
 80020c2:	1940      	adds	r0, r0, r5
 80020c4:	185b      	adds	r3, r3, r1
 80020c6:	4284      	cmp	r4, r0
 80020c8:	d327      	bcc.n	800211a <__aeabi_ddiv+0x40a>
 80020ca:	d023      	beq.n	8002114 <__aeabi_ddiv+0x404>
 80020cc:	2301      	movs	r3, #1
 80020ce:	0035      	movs	r5, r6
 80020d0:	431a      	orrs	r2, r3
 80020d2:	4b94      	ldr	r3, [pc, #592]	@ (8002324 <__aeabi_ddiv+0x614>)
 80020d4:	4453      	add	r3, sl
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	dd60      	ble.n	800219c <__aeabi_ddiv+0x48c>
 80020da:	0751      	lsls	r1, r2, #29
 80020dc:	d000      	beq.n	80020e0 <__aeabi_ddiv+0x3d0>
 80020de:	e086      	b.n	80021ee <__aeabi_ddiv+0x4de>
 80020e0:	002e      	movs	r6, r5
 80020e2:	08d1      	lsrs	r1, r2, #3
 80020e4:	465a      	mov	r2, fp
 80020e6:	01d2      	lsls	r2, r2, #7
 80020e8:	d506      	bpl.n	80020f8 <__aeabi_ddiv+0x3e8>
 80020ea:	465a      	mov	r2, fp
 80020ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002328 <__aeabi_ddiv+0x618>)
 80020ee:	401a      	ands	r2, r3
 80020f0:	2380      	movs	r3, #128	@ 0x80
 80020f2:	4693      	mov	fp, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4453      	add	r3, sl
 80020f8:	4a8c      	ldr	r2, [pc, #560]	@ (800232c <__aeabi_ddiv+0x61c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	dd00      	ble.n	8002100 <__aeabi_ddiv+0x3f0>
 80020fe:	e680      	b.n	8001e02 <__aeabi_ddiv+0xf2>
 8002100:	465a      	mov	r2, fp
 8002102:	0752      	lsls	r2, r2, #29
 8002104:	430a      	orrs	r2, r1
 8002106:	4690      	mov	r8, r2
 8002108:	465a      	mov	r2, fp
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	0254      	lsls	r4, r2, #9
 800210e:	0b24      	lsrs	r4, r4, #12
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	e669      	b.n	8001de8 <__aeabi_ddiv+0xd8>
 8002114:	0035      	movs	r5, r6
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0db      	beq.n	80020d2 <__aeabi_ddiv+0x3c2>
 800211a:	9d00      	ldr	r5, [sp, #0]
 800211c:	1e51      	subs	r1, r2, #1
 800211e:	46ac      	mov	ip, r5
 8002120:	4464      	add	r4, ip
 8002122:	42ac      	cmp	r4, r5
 8002124:	d200      	bcs.n	8002128 <__aeabi_ddiv+0x418>
 8002126:	e09e      	b.n	8002266 <__aeabi_ddiv+0x556>
 8002128:	4284      	cmp	r4, r0
 800212a:	d200      	bcs.n	800212e <__aeabi_ddiv+0x41e>
 800212c:	e0e1      	b.n	80022f2 <__aeabi_ddiv+0x5e2>
 800212e:	d100      	bne.n	8002132 <__aeabi_ddiv+0x422>
 8002130:	e0ee      	b.n	8002310 <__aeabi_ddiv+0x600>
 8002132:	000a      	movs	r2, r1
 8002134:	e7ca      	b.n	80020cc <__aeabi_ddiv+0x3bc>
 8002136:	4542      	cmp	r2, r8
 8002138:	d900      	bls.n	800213c <__aeabi_ddiv+0x42c>
 800213a:	e708      	b.n	8001f4e <__aeabi_ddiv+0x23e>
 800213c:	464b      	mov	r3, r9
 800213e:	07dc      	lsls	r4, r3, #31
 8002140:	0858      	lsrs	r0, r3, #1
 8002142:	4643      	mov	r3, r8
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	431c      	orrs	r4, r3
 8002148:	4643      	mov	r3, r8
 800214a:	07dd      	lsls	r5, r3, #31
 800214c:	e706      	b.n	8001f5c <__aeabi_ddiv+0x24c>
 800214e:	f001 fa83 	bl	8003658 <__clzsi2>
 8002152:	2315      	movs	r3, #21
 8002154:	469c      	mov	ip, r3
 8002156:	4484      	add	ip, r0
 8002158:	0002      	movs	r2, r0
 800215a:	4663      	mov	r3, ip
 800215c:	3220      	adds	r2, #32
 800215e:	2b1c      	cmp	r3, #28
 8002160:	dc00      	bgt.n	8002164 <__aeabi_ddiv+0x454>
 8002162:	e692      	b.n	8001e8a <__aeabi_ddiv+0x17a>
 8002164:	0023      	movs	r3, r4
 8002166:	3808      	subs	r0, #8
 8002168:	4083      	lsls	r3, r0
 800216a:	4699      	mov	r9, r3
 800216c:	2300      	movs	r3, #0
 800216e:	4698      	mov	r8, r3
 8002170:	e69a      	b.n	8001ea8 <__aeabi_ddiv+0x198>
 8002172:	f001 fa71 	bl	8003658 <__clzsi2>
 8002176:	0002      	movs	r2, r0
 8002178:	0003      	movs	r3, r0
 800217a:	3215      	adds	r2, #21
 800217c:	3320      	adds	r3, #32
 800217e:	2a1c      	cmp	r2, #28
 8002180:	dc00      	bgt.n	8002184 <__aeabi_ddiv+0x474>
 8002182:	e65f      	b.n	8001e44 <__aeabi_ddiv+0x134>
 8002184:	9900      	ldr	r1, [sp, #0]
 8002186:	3808      	subs	r0, #8
 8002188:	4081      	lsls	r1, r0
 800218a:	2200      	movs	r2, #0
 800218c:	468b      	mov	fp, r1
 800218e:	e666      	b.n	8001e5e <__aeabi_ddiv+0x14e>
 8002190:	2200      	movs	r2, #0
 8002192:	002e      	movs	r6, r5
 8002194:	2400      	movs	r4, #0
 8002196:	4690      	mov	r8, r2
 8002198:	4b65      	ldr	r3, [pc, #404]	@ (8002330 <__aeabi_ddiv+0x620>)
 800219a:	e625      	b.n	8001de8 <__aeabi_ddiv+0xd8>
 800219c:	002e      	movs	r6, r5
 800219e:	2101      	movs	r1, #1
 80021a0:	1ac9      	subs	r1, r1, r3
 80021a2:	2938      	cmp	r1, #56	@ 0x38
 80021a4:	dd00      	ble.n	80021a8 <__aeabi_ddiv+0x498>
 80021a6:	e61b      	b.n	8001de0 <__aeabi_ddiv+0xd0>
 80021a8:	291f      	cmp	r1, #31
 80021aa:	dc7e      	bgt.n	80022aa <__aeabi_ddiv+0x59a>
 80021ac:	4861      	ldr	r0, [pc, #388]	@ (8002334 <__aeabi_ddiv+0x624>)
 80021ae:	0014      	movs	r4, r2
 80021b0:	4450      	add	r0, sl
 80021b2:	465b      	mov	r3, fp
 80021b4:	4082      	lsls	r2, r0
 80021b6:	4083      	lsls	r3, r0
 80021b8:	40cc      	lsrs	r4, r1
 80021ba:	1e50      	subs	r0, r2, #1
 80021bc:	4182      	sbcs	r2, r0
 80021be:	4323      	orrs	r3, r4
 80021c0:	431a      	orrs	r2, r3
 80021c2:	465b      	mov	r3, fp
 80021c4:	40cb      	lsrs	r3, r1
 80021c6:	0751      	lsls	r1, r2, #29
 80021c8:	d009      	beq.n	80021de <__aeabi_ddiv+0x4ce>
 80021ca:	210f      	movs	r1, #15
 80021cc:	4011      	ands	r1, r2
 80021ce:	2904      	cmp	r1, #4
 80021d0:	d005      	beq.n	80021de <__aeabi_ddiv+0x4ce>
 80021d2:	1d11      	adds	r1, r2, #4
 80021d4:	4291      	cmp	r1, r2
 80021d6:	4192      	sbcs	r2, r2
 80021d8:	4252      	negs	r2, r2
 80021da:	189b      	adds	r3, r3, r2
 80021dc:	000a      	movs	r2, r1
 80021de:	0219      	lsls	r1, r3, #8
 80021e0:	d400      	bmi.n	80021e4 <__aeabi_ddiv+0x4d4>
 80021e2:	e09b      	b.n	800231c <__aeabi_ddiv+0x60c>
 80021e4:	2200      	movs	r2, #0
 80021e6:	2301      	movs	r3, #1
 80021e8:	2400      	movs	r4, #0
 80021ea:	4690      	mov	r8, r2
 80021ec:	e5fc      	b.n	8001de8 <__aeabi_ddiv+0xd8>
 80021ee:	210f      	movs	r1, #15
 80021f0:	4011      	ands	r1, r2
 80021f2:	2904      	cmp	r1, #4
 80021f4:	d100      	bne.n	80021f8 <__aeabi_ddiv+0x4e8>
 80021f6:	e773      	b.n	80020e0 <__aeabi_ddiv+0x3d0>
 80021f8:	1d11      	adds	r1, r2, #4
 80021fa:	4291      	cmp	r1, r2
 80021fc:	4192      	sbcs	r2, r2
 80021fe:	4252      	negs	r2, r2
 8002200:	002e      	movs	r6, r5
 8002202:	08c9      	lsrs	r1, r1, #3
 8002204:	4493      	add	fp, r2
 8002206:	e76d      	b.n	80020e4 <__aeabi_ddiv+0x3d4>
 8002208:	9b00      	ldr	r3, [sp, #0]
 800220a:	3d01      	subs	r5, #1
 800220c:	469c      	mov	ip, r3
 800220e:	4461      	add	r1, ip
 8002210:	428b      	cmp	r3, r1
 8002212:	d900      	bls.n	8002216 <__aeabi_ddiv+0x506>
 8002214:	e72c      	b.n	8002070 <__aeabi_ddiv+0x360>
 8002216:	428a      	cmp	r2, r1
 8002218:	d800      	bhi.n	800221c <__aeabi_ddiv+0x50c>
 800221a:	e729      	b.n	8002070 <__aeabi_ddiv+0x360>
 800221c:	1e85      	subs	r5, r0, #2
 800221e:	4461      	add	r1, ip
 8002220:	e726      	b.n	8002070 <__aeabi_ddiv+0x360>
 8002222:	9900      	ldr	r1, [sp, #0]
 8002224:	3b01      	subs	r3, #1
 8002226:	468c      	mov	ip, r1
 8002228:	4464      	add	r4, ip
 800222a:	42a1      	cmp	r1, r4
 800222c:	d900      	bls.n	8002230 <__aeabi_ddiv+0x520>
 800222e:	e72d      	b.n	800208c <__aeabi_ddiv+0x37c>
 8002230:	42a2      	cmp	r2, r4
 8002232:	d800      	bhi.n	8002236 <__aeabi_ddiv+0x526>
 8002234:	e72a      	b.n	800208c <__aeabi_ddiv+0x37c>
 8002236:	1e83      	subs	r3, r0, #2
 8002238:	4464      	add	r4, ip
 800223a:	e727      	b.n	800208c <__aeabi_ddiv+0x37c>
 800223c:	4287      	cmp	r7, r0
 800223e:	d000      	beq.n	8002242 <__aeabi_ddiv+0x532>
 8002240:	e6fe      	b.n	8002040 <__aeabi_ddiv+0x330>
 8002242:	45a9      	cmp	r9, r5
 8002244:	d900      	bls.n	8002248 <__aeabi_ddiv+0x538>
 8002246:	e6fb      	b.n	8002040 <__aeabi_ddiv+0x330>
 8002248:	e6f5      	b.n	8002036 <__aeabi_ddiv+0x326>
 800224a:	42a2      	cmp	r2, r4
 800224c:	d800      	bhi.n	8002250 <__aeabi_ddiv+0x540>
 800224e:	e6b9      	b.n	8001fc4 <__aeabi_ddiv+0x2b4>
 8002250:	1e83      	subs	r3, r0, #2
 8002252:	4464      	add	r4, ip
 8002254:	e6b6      	b.n	8001fc4 <__aeabi_ddiv+0x2b4>
 8002256:	428a      	cmp	r2, r1
 8002258:	d800      	bhi.n	800225c <__aeabi_ddiv+0x54c>
 800225a:	e69f      	b.n	8001f9c <__aeabi_ddiv+0x28c>
 800225c:	46bc      	mov	ip, r7
 800225e:	1e83      	subs	r3, r0, #2
 8002260:	4698      	mov	r8, r3
 8002262:	4461      	add	r1, ip
 8002264:	e69a      	b.n	8001f9c <__aeabi_ddiv+0x28c>
 8002266:	000a      	movs	r2, r1
 8002268:	4284      	cmp	r4, r0
 800226a:	d000      	beq.n	800226e <__aeabi_ddiv+0x55e>
 800226c:	e72e      	b.n	80020cc <__aeabi_ddiv+0x3bc>
 800226e:	454b      	cmp	r3, r9
 8002270:	d000      	beq.n	8002274 <__aeabi_ddiv+0x564>
 8002272:	e72b      	b.n	80020cc <__aeabi_ddiv+0x3bc>
 8002274:	0035      	movs	r5, r6
 8002276:	e72c      	b.n	80020d2 <__aeabi_ddiv+0x3c2>
 8002278:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <__aeabi_ddiv+0x614>)
 800227a:	4a2f      	ldr	r2, [pc, #188]	@ (8002338 <__aeabi_ddiv+0x628>)
 800227c:	4453      	add	r3, sl
 800227e:	4592      	cmp	sl, r2
 8002280:	db43      	blt.n	800230a <__aeabi_ddiv+0x5fa>
 8002282:	2201      	movs	r2, #1
 8002284:	2100      	movs	r1, #0
 8002286:	4493      	add	fp, r2
 8002288:	e72c      	b.n	80020e4 <__aeabi_ddiv+0x3d4>
 800228a:	42ac      	cmp	r4, r5
 800228c:	d800      	bhi.n	8002290 <__aeabi_ddiv+0x580>
 800228e:	e6d7      	b.n	8002040 <__aeabi_ddiv+0x330>
 8002290:	2302      	movs	r3, #2
 8002292:	425b      	negs	r3, r3
 8002294:	469c      	mov	ip, r3
 8002296:	9900      	ldr	r1, [sp, #0]
 8002298:	444d      	add	r5, r9
 800229a:	454d      	cmp	r5, r9
 800229c:	419b      	sbcs	r3, r3
 800229e:	44e3      	add	fp, ip
 80022a0:	468c      	mov	ip, r1
 80022a2:	425b      	negs	r3, r3
 80022a4:	4463      	add	r3, ip
 80022a6:	18c0      	adds	r0, r0, r3
 80022a8:	e6cc      	b.n	8002044 <__aeabi_ddiv+0x334>
 80022aa:	201f      	movs	r0, #31
 80022ac:	4240      	negs	r0, r0
 80022ae:	1ac3      	subs	r3, r0, r3
 80022b0:	4658      	mov	r0, fp
 80022b2:	40d8      	lsrs	r0, r3
 80022b4:	2920      	cmp	r1, #32
 80022b6:	d004      	beq.n	80022c2 <__aeabi_ddiv+0x5b2>
 80022b8:	4659      	mov	r1, fp
 80022ba:	4b20      	ldr	r3, [pc, #128]	@ (800233c <__aeabi_ddiv+0x62c>)
 80022bc:	4453      	add	r3, sl
 80022be:	4099      	lsls	r1, r3
 80022c0:	430a      	orrs	r2, r1
 80022c2:	1e53      	subs	r3, r2, #1
 80022c4:	419a      	sbcs	r2, r3
 80022c6:	2307      	movs	r3, #7
 80022c8:	0019      	movs	r1, r3
 80022ca:	4302      	orrs	r2, r0
 80022cc:	2400      	movs	r4, #0
 80022ce:	4011      	ands	r1, r2
 80022d0:	4213      	tst	r3, r2
 80022d2:	d009      	beq.n	80022e8 <__aeabi_ddiv+0x5d8>
 80022d4:	3308      	adds	r3, #8
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d01d      	beq.n	8002318 <__aeabi_ddiv+0x608>
 80022dc:	1d13      	adds	r3, r2, #4
 80022de:	4293      	cmp	r3, r2
 80022e0:	4189      	sbcs	r1, r1
 80022e2:	001a      	movs	r2, r3
 80022e4:	4249      	negs	r1, r1
 80022e6:	0749      	lsls	r1, r1, #29
 80022e8:	08d2      	lsrs	r2, r2, #3
 80022ea:	430a      	orrs	r2, r1
 80022ec:	4690      	mov	r8, r2
 80022ee:	2300      	movs	r3, #0
 80022f0:	e57a      	b.n	8001de8 <__aeabi_ddiv+0xd8>
 80022f2:	4649      	mov	r1, r9
 80022f4:	9f00      	ldr	r7, [sp, #0]
 80022f6:	004d      	lsls	r5, r1, #1
 80022f8:	454d      	cmp	r5, r9
 80022fa:	4189      	sbcs	r1, r1
 80022fc:	46bc      	mov	ip, r7
 80022fe:	4249      	negs	r1, r1
 8002300:	4461      	add	r1, ip
 8002302:	46a9      	mov	r9, r5
 8002304:	3a02      	subs	r2, #2
 8002306:	1864      	adds	r4, r4, r1
 8002308:	e7ae      	b.n	8002268 <__aeabi_ddiv+0x558>
 800230a:	2201      	movs	r2, #1
 800230c:	4252      	negs	r2, r2
 800230e:	e746      	b.n	800219e <__aeabi_ddiv+0x48e>
 8002310:	4599      	cmp	r9, r3
 8002312:	d3ee      	bcc.n	80022f2 <__aeabi_ddiv+0x5e2>
 8002314:	000a      	movs	r2, r1
 8002316:	e7aa      	b.n	800226e <__aeabi_ddiv+0x55e>
 8002318:	2100      	movs	r1, #0
 800231a:	e7e5      	b.n	80022e8 <__aeabi_ddiv+0x5d8>
 800231c:	0759      	lsls	r1, r3, #29
 800231e:	025b      	lsls	r3, r3, #9
 8002320:	0b1c      	lsrs	r4, r3, #12
 8002322:	e7e1      	b.n	80022e8 <__aeabi_ddiv+0x5d8>
 8002324:	000003ff 	.word	0x000003ff
 8002328:	feffffff 	.word	0xfeffffff
 800232c:	000007fe 	.word	0x000007fe
 8002330:	000007ff 	.word	0x000007ff
 8002334:	0000041e 	.word	0x0000041e
 8002338:	fffffc02 	.word	0xfffffc02
 800233c:	0000043e 	.word	0x0000043e

08002340 <__eqdf2>:
 8002340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002342:	4657      	mov	r7, sl
 8002344:	46de      	mov	lr, fp
 8002346:	464e      	mov	r6, r9
 8002348:	4645      	mov	r5, r8
 800234a:	b5e0      	push	{r5, r6, r7, lr}
 800234c:	000d      	movs	r5, r1
 800234e:	0004      	movs	r4, r0
 8002350:	0fe8      	lsrs	r0, r5, #31
 8002352:	4683      	mov	fp, r0
 8002354:	0309      	lsls	r1, r1, #12
 8002356:	0fd8      	lsrs	r0, r3, #31
 8002358:	0b09      	lsrs	r1, r1, #12
 800235a:	4682      	mov	sl, r0
 800235c:	4819      	ldr	r0, [pc, #100]	@ (80023c4 <__eqdf2+0x84>)
 800235e:	468c      	mov	ip, r1
 8002360:	031f      	lsls	r7, r3, #12
 8002362:	0069      	lsls	r1, r5, #1
 8002364:	005e      	lsls	r6, r3, #1
 8002366:	0d49      	lsrs	r1, r1, #21
 8002368:	0b3f      	lsrs	r7, r7, #12
 800236a:	0d76      	lsrs	r6, r6, #21
 800236c:	4281      	cmp	r1, r0
 800236e:	d018      	beq.n	80023a2 <__eqdf2+0x62>
 8002370:	4286      	cmp	r6, r0
 8002372:	d00f      	beq.n	8002394 <__eqdf2+0x54>
 8002374:	2001      	movs	r0, #1
 8002376:	42b1      	cmp	r1, r6
 8002378:	d10d      	bne.n	8002396 <__eqdf2+0x56>
 800237a:	45bc      	cmp	ip, r7
 800237c:	d10b      	bne.n	8002396 <__eqdf2+0x56>
 800237e:	4294      	cmp	r4, r2
 8002380:	d109      	bne.n	8002396 <__eqdf2+0x56>
 8002382:	45d3      	cmp	fp, sl
 8002384:	d01c      	beq.n	80023c0 <__eqdf2+0x80>
 8002386:	2900      	cmp	r1, #0
 8002388:	d105      	bne.n	8002396 <__eqdf2+0x56>
 800238a:	4660      	mov	r0, ip
 800238c:	4320      	orrs	r0, r4
 800238e:	1e43      	subs	r3, r0, #1
 8002390:	4198      	sbcs	r0, r3
 8002392:	e000      	b.n	8002396 <__eqdf2+0x56>
 8002394:	2001      	movs	r0, #1
 8002396:	bcf0      	pop	{r4, r5, r6, r7}
 8002398:	46bb      	mov	fp, r7
 800239a:	46b2      	mov	sl, r6
 800239c:	46a9      	mov	r9, r5
 800239e:	46a0      	mov	r8, r4
 80023a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a2:	2001      	movs	r0, #1
 80023a4:	428e      	cmp	r6, r1
 80023a6:	d1f6      	bne.n	8002396 <__eqdf2+0x56>
 80023a8:	4661      	mov	r1, ip
 80023aa:	4339      	orrs	r1, r7
 80023ac:	000f      	movs	r7, r1
 80023ae:	4317      	orrs	r7, r2
 80023b0:	4327      	orrs	r7, r4
 80023b2:	d1f0      	bne.n	8002396 <__eqdf2+0x56>
 80023b4:	465b      	mov	r3, fp
 80023b6:	4652      	mov	r2, sl
 80023b8:	1a98      	subs	r0, r3, r2
 80023ba:	1e43      	subs	r3, r0, #1
 80023bc:	4198      	sbcs	r0, r3
 80023be:	e7ea      	b.n	8002396 <__eqdf2+0x56>
 80023c0:	2000      	movs	r0, #0
 80023c2:	e7e8      	b.n	8002396 <__eqdf2+0x56>
 80023c4:	000007ff 	.word	0x000007ff

080023c8 <__gedf2>:
 80023c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ca:	4657      	mov	r7, sl
 80023cc:	464e      	mov	r6, r9
 80023ce:	4645      	mov	r5, r8
 80023d0:	46de      	mov	lr, fp
 80023d2:	b5e0      	push	{r5, r6, r7, lr}
 80023d4:	000d      	movs	r5, r1
 80023d6:	030e      	lsls	r6, r1, #12
 80023d8:	0049      	lsls	r1, r1, #1
 80023da:	0d49      	lsrs	r1, r1, #21
 80023dc:	468a      	mov	sl, r1
 80023de:	0fdf      	lsrs	r7, r3, #31
 80023e0:	0fe9      	lsrs	r1, r5, #31
 80023e2:	46bc      	mov	ip, r7
 80023e4:	b083      	sub	sp, #12
 80023e6:	4f2f      	ldr	r7, [pc, #188]	@ (80024a4 <__gedf2+0xdc>)
 80023e8:	0004      	movs	r4, r0
 80023ea:	4680      	mov	r8, r0
 80023ec:	9101      	str	r1, [sp, #4]
 80023ee:	0058      	lsls	r0, r3, #1
 80023f0:	0319      	lsls	r1, r3, #12
 80023f2:	4691      	mov	r9, r2
 80023f4:	0b36      	lsrs	r6, r6, #12
 80023f6:	0b09      	lsrs	r1, r1, #12
 80023f8:	0d40      	lsrs	r0, r0, #21
 80023fa:	45ba      	cmp	sl, r7
 80023fc:	d01d      	beq.n	800243a <__gedf2+0x72>
 80023fe:	42b8      	cmp	r0, r7
 8002400:	d00d      	beq.n	800241e <__gedf2+0x56>
 8002402:	4657      	mov	r7, sl
 8002404:	2f00      	cmp	r7, #0
 8002406:	d12a      	bne.n	800245e <__gedf2+0x96>
 8002408:	4334      	orrs	r4, r6
 800240a:	2800      	cmp	r0, #0
 800240c:	d124      	bne.n	8002458 <__gedf2+0x90>
 800240e:	430a      	orrs	r2, r1
 8002410:	d036      	beq.n	8002480 <__gedf2+0xb8>
 8002412:	2c00      	cmp	r4, #0
 8002414:	d141      	bne.n	800249a <__gedf2+0xd2>
 8002416:	4663      	mov	r3, ip
 8002418:	0058      	lsls	r0, r3, #1
 800241a:	3801      	subs	r0, #1
 800241c:	e015      	b.n	800244a <__gedf2+0x82>
 800241e:	4311      	orrs	r1, r2
 8002420:	d138      	bne.n	8002494 <__gedf2+0xcc>
 8002422:	4653      	mov	r3, sl
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <__gedf2+0x64>
 8002428:	4326      	orrs	r6, r4
 800242a:	d0f4      	beq.n	8002416 <__gedf2+0x4e>
 800242c:	9b01      	ldr	r3, [sp, #4]
 800242e:	4563      	cmp	r3, ip
 8002430:	d107      	bne.n	8002442 <__gedf2+0x7a>
 8002432:	9b01      	ldr	r3, [sp, #4]
 8002434:	0058      	lsls	r0, r3, #1
 8002436:	3801      	subs	r0, #1
 8002438:	e007      	b.n	800244a <__gedf2+0x82>
 800243a:	4326      	orrs	r6, r4
 800243c:	d12a      	bne.n	8002494 <__gedf2+0xcc>
 800243e:	4550      	cmp	r0, sl
 8002440:	d021      	beq.n	8002486 <__gedf2+0xbe>
 8002442:	2001      	movs	r0, #1
 8002444:	9b01      	ldr	r3, [sp, #4]
 8002446:	425f      	negs	r7, r3
 8002448:	4338      	orrs	r0, r7
 800244a:	b003      	add	sp, #12
 800244c:	bcf0      	pop	{r4, r5, r6, r7}
 800244e:	46bb      	mov	fp, r7
 8002450:	46b2      	mov	sl, r6
 8002452:	46a9      	mov	r9, r5
 8002454:	46a0      	mov	r8, r4
 8002456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002458:	2c00      	cmp	r4, #0
 800245a:	d0dc      	beq.n	8002416 <__gedf2+0x4e>
 800245c:	e7e6      	b.n	800242c <__gedf2+0x64>
 800245e:	2800      	cmp	r0, #0
 8002460:	d0ef      	beq.n	8002442 <__gedf2+0x7a>
 8002462:	9b01      	ldr	r3, [sp, #4]
 8002464:	4563      	cmp	r3, ip
 8002466:	d1ec      	bne.n	8002442 <__gedf2+0x7a>
 8002468:	4582      	cmp	sl, r0
 800246a:	dcea      	bgt.n	8002442 <__gedf2+0x7a>
 800246c:	dbe1      	blt.n	8002432 <__gedf2+0x6a>
 800246e:	428e      	cmp	r6, r1
 8002470:	d8e7      	bhi.n	8002442 <__gedf2+0x7a>
 8002472:	d1de      	bne.n	8002432 <__gedf2+0x6a>
 8002474:	45c8      	cmp	r8, r9
 8002476:	d8e4      	bhi.n	8002442 <__gedf2+0x7a>
 8002478:	2000      	movs	r0, #0
 800247a:	45c8      	cmp	r8, r9
 800247c:	d2e5      	bcs.n	800244a <__gedf2+0x82>
 800247e:	e7d8      	b.n	8002432 <__gedf2+0x6a>
 8002480:	2c00      	cmp	r4, #0
 8002482:	d0e2      	beq.n	800244a <__gedf2+0x82>
 8002484:	e7dd      	b.n	8002442 <__gedf2+0x7a>
 8002486:	4311      	orrs	r1, r2
 8002488:	d104      	bne.n	8002494 <__gedf2+0xcc>
 800248a:	9b01      	ldr	r3, [sp, #4]
 800248c:	4563      	cmp	r3, ip
 800248e:	d1d8      	bne.n	8002442 <__gedf2+0x7a>
 8002490:	2000      	movs	r0, #0
 8002492:	e7da      	b.n	800244a <__gedf2+0x82>
 8002494:	2002      	movs	r0, #2
 8002496:	4240      	negs	r0, r0
 8002498:	e7d7      	b.n	800244a <__gedf2+0x82>
 800249a:	9b01      	ldr	r3, [sp, #4]
 800249c:	4563      	cmp	r3, ip
 800249e:	d0e6      	beq.n	800246e <__gedf2+0xa6>
 80024a0:	e7cf      	b.n	8002442 <__gedf2+0x7a>
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	000007ff 	.word	0x000007ff

080024a8 <__ledf2>:
 80024a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024aa:	4657      	mov	r7, sl
 80024ac:	464e      	mov	r6, r9
 80024ae:	4645      	mov	r5, r8
 80024b0:	46de      	mov	lr, fp
 80024b2:	b5e0      	push	{r5, r6, r7, lr}
 80024b4:	000d      	movs	r5, r1
 80024b6:	030e      	lsls	r6, r1, #12
 80024b8:	0049      	lsls	r1, r1, #1
 80024ba:	0d49      	lsrs	r1, r1, #21
 80024bc:	468a      	mov	sl, r1
 80024be:	0fdf      	lsrs	r7, r3, #31
 80024c0:	0fe9      	lsrs	r1, r5, #31
 80024c2:	46bc      	mov	ip, r7
 80024c4:	b083      	sub	sp, #12
 80024c6:	4f2e      	ldr	r7, [pc, #184]	@ (8002580 <__ledf2+0xd8>)
 80024c8:	0004      	movs	r4, r0
 80024ca:	4680      	mov	r8, r0
 80024cc:	9101      	str	r1, [sp, #4]
 80024ce:	0058      	lsls	r0, r3, #1
 80024d0:	0319      	lsls	r1, r3, #12
 80024d2:	4691      	mov	r9, r2
 80024d4:	0b36      	lsrs	r6, r6, #12
 80024d6:	0b09      	lsrs	r1, r1, #12
 80024d8:	0d40      	lsrs	r0, r0, #21
 80024da:	45ba      	cmp	sl, r7
 80024dc:	d01e      	beq.n	800251c <__ledf2+0x74>
 80024de:	42b8      	cmp	r0, r7
 80024e0:	d00d      	beq.n	80024fe <__ledf2+0x56>
 80024e2:	4657      	mov	r7, sl
 80024e4:	2f00      	cmp	r7, #0
 80024e6:	d127      	bne.n	8002538 <__ledf2+0x90>
 80024e8:	4334      	orrs	r4, r6
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d133      	bne.n	8002556 <__ledf2+0xae>
 80024ee:	430a      	orrs	r2, r1
 80024f0:	d034      	beq.n	800255c <__ledf2+0xb4>
 80024f2:	2c00      	cmp	r4, #0
 80024f4:	d140      	bne.n	8002578 <__ledf2+0xd0>
 80024f6:	4663      	mov	r3, ip
 80024f8:	0058      	lsls	r0, r3, #1
 80024fa:	3801      	subs	r0, #1
 80024fc:	e015      	b.n	800252a <__ledf2+0x82>
 80024fe:	4311      	orrs	r1, r2
 8002500:	d112      	bne.n	8002528 <__ledf2+0x80>
 8002502:	4653      	mov	r3, sl
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <__ledf2+0x64>
 8002508:	4326      	orrs	r6, r4
 800250a:	d0f4      	beq.n	80024f6 <__ledf2+0x4e>
 800250c:	9b01      	ldr	r3, [sp, #4]
 800250e:	4563      	cmp	r3, ip
 8002510:	d01d      	beq.n	800254e <__ledf2+0xa6>
 8002512:	2001      	movs	r0, #1
 8002514:	9b01      	ldr	r3, [sp, #4]
 8002516:	425f      	negs	r7, r3
 8002518:	4338      	orrs	r0, r7
 800251a:	e006      	b.n	800252a <__ledf2+0x82>
 800251c:	4326      	orrs	r6, r4
 800251e:	d103      	bne.n	8002528 <__ledf2+0x80>
 8002520:	4550      	cmp	r0, sl
 8002522:	d1f6      	bne.n	8002512 <__ledf2+0x6a>
 8002524:	4311      	orrs	r1, r2
 8002526:	d01c      	beq.n	8002562 <__ledf2+0xba>
 8002528:	2002      	movs	r0, #2
 800252a:	b003      	add	sp, #12
 800252c:	bcf0      	pop	{r4, r5, r6, r7}
 800252e:	46bb      	mov	fp, r7
 8002530:	46b2      	mov	sl, r6
 8002532:	46a9      	mov	r9, r5
 8002534:	46a0      	mov	r8, r4
 8002536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002538:	2800      	cmp	r0, #0
 800253a:	d0ea      	beq.n	8002512 <__ledf2+0x6a>
 800253c:	9b01      	ldr	r3, [sp, #4]
 800253e:	4563      	cmp	r3, ip
 8002540:	d1e7      	bne.n	8002512 <__ledf2+0x6a>
 8002542:	4582      	cmp	sl, r0
 8002544:	dce5      	bgt.n	8002512 <__ledf2+0x6a>
 8002546:	db02      	blt.n	800254e <__ledf2+0xa6>
 8002548:	428e      	cmp	r6, r1
 800254a:	d8e2      	bhi.n	8002512 <__ledf2+0x6a>
 800254c:	d00e      	beq.n	800256c <__ledf2+0xc4>
 800254e:	9b01      	ldr	r3, [sp, #4]
 8002550:	0058      	lsls	r0, r3, #1
 8002552:	3801      	subs	r0, #1
 8002554:	e7e9      	b.n	800252a <__ledf2+0x82>
 8002556:	2c00      	cmp	r4, #0
 8002558:	d0cd      	beq.n	80024f6 <__ledf2+0x4e>
 800255a:	e7d7      	b.n	800250c <__ledf2+0x64>
 800255c:	2c00      	cmp	r4, #0
 800255e:	d0e4      	beq.n	800252a <__ledf2+0x82>
 8002560:	e7d7      	b.n	8002512 <__ledf2+0x6a>
 8002562:	9b01      	ldr	r3, [sp, #4]
 8002564:	2000      	movs	r0, #0
 8002566:	4563      	cmp	r3, ip
 8002568:	d0df      	beq.n	800252a <__ledf2+0x82>
 800256a:	e7d2      	b.n	8002512 <__ledf2+0x6a>
 800256c:	45c8      	cmp	r8, r9
 800256e:	d8d0      	bhi.n	8002512 <__ledf2+0x6a>
 8002570:	2000      	movs	r0, #0
 8002572:	45c8      	cmp	r8, r9
 8002574:	d2d9      	bcs.n	800252a <__ledf2+0x82>
 8002576:	e7ea      	b.n	800254e <__ledf2+0xa6>
 8002578:	9b01      	ldr	r3, [sp, #4]
 800257a:	4563      	cmp	r3, ip
 800257c:	d0e4      	beq.n	8002548 <__ledf2+0xa0>
 800257e:	e7c8      	b.n	8002512 <__ledf2+0x6a>
 8002580:	000007ff 	.word	0x000007ff

08002584 <__aeabi_dmul>:
 8002584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002586:	4657      	mov	r7, sl
 8002588:	464e      	mov	r6, r9
 800258a:	46de      	mov	lr, fp
 800258c:	4645      	mov	r5, r8
 800258e:	b5e0      	push	{r5, r6, r7, lr}
 8002590:	001f      	movs	r7, r3
 8002592:	030b      	lsls	r3, r1, #12
 8002594:	0b1b      	lsrs	r3, r3, #12
 8002596:	0016      	movs	r6, r2
 8002598:	469a      	mov	sl, r3
 800259a:	0fca      	lsrs	r2, r1, #31
 800259c:	004b      	lsls	r3, r1, #1
 800259e:	0004      	movs	r4, r0
 80025a0:	4691      	mov	r9, r2
 80025a2:	b085      	sub	sp, #20
 80025a4:	0d5b      	lsrs	r3, r3, #21
 80025a6:	d100      	bne.n	80025aa <__aeabi_dmul+0x26>
 80025a8:	e1cf      	b.n	800294a <__aeabi_dmul+0x3c6>
 80025aa:	4acd      	ldr	r2, [pc, #820]	@ (80028e0 <__aeabi_dmul+0x35c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d055      	beq.n	800265c <__aeabi_dmul+0xd8>
 80025b0:	4651      	mov	r1, sl
 80025b2:	0f42      	lsrs	r2, r0, #29
 80025b4:	00c9      	lsls	r1, r1, #3
 80025b6:	430a      	orrs	r2, r1
 80025b8:	2180      	movs	r1, #128	@ 0x80
 80025ba:	0409      	lsls	r1, r1, #16
 80025bc:	4311      	orrs	r1, r2
 80025be:	00c2      	lsls	r2, r0, #3
 80025c0:	4690      	mov	r8, r2
 80025c2:	4ac8      	ldr	r2, [pc, #800]	@ (80028e4 <__aeabi_dmul+0x360>)
 80025c4:	468a      	mov	sl, r1
 80025c6:	4693      	mov	fp, r2
 80025c8:	449b      	add	fp, r3
 80025ca:	2300      	movs	r3, #0
 80025cc:	2500      	movs	r5, #0
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	033c      	lsls	r4, r7, #12
 80025d2:	007b      	lsls	r3, r7, #1
 80025d4:	0ffa      	lsrs	r2, r7, #31
 80025d6:	9601      	str	r6, [sp, #4]
 80025d8:	0b24      	lsrs	r4, r4, #12
 80025da:	0d5b      	lsrs	r3, r3, #21
 80025dc:	9200      	str	r2, [sp, #0]
 80025de:	d100      	bne.n	80025e2 <__aeabi_dmul+0x5e>
 80025e0:	e188      	b.n	80028f4 <__aeabi_dmul+0x370>
 80025e2:	4abf      	ldr	r2, [pc, #764]	@ (80028e0 <__aeabi_dmul+0x35c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d100      	bne.n	80025ea <__aeabi_dmul+0x66>
 80025e8:	e092      	b.n	8002710 <__aeabi_dmul+0x18c>
 80025ea:	4abe      	ldr	r2, [pc, #760]	@ (80028e4 <__aeabi_dmul+0x360>)
 80025ec:	4694      	mov	ip, r2
 80025ee:	4463      	add	r3, ip
 80025f0:	449b      	add	fp, r3
 80025f2:	2d0a      	cmp	r5, #10
 80025f4:	dc42      	bgt.n	800267c <__aeabi_dmul+0xf8>
 80025f6:	00e4      	lsls	r4, r4, #3
 80025f8:	0f73      	lsrs	r3, r6, #29
 80025fa:	4323      	orrs	r3, r4
 80025fc:	2480      	movs	r4, #128	@ 0x80
 80025fe:	4649      	mov	r1, r9
 8002600:	0424      	lsls	r4, r4, #16
 8002602:	431c      	orrs	r4, r3
 8002604:	00f3      	lsls	r3, r6, #3
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	9b00      	ldr	r3, [sp, #0]
 800260a:	2000      	movs	r0, #0
 800260c:	4059      	eors	r1, r3
 800260e:	b2cb      	uxtb	r3, r1
 8002610:	9303      	str	r3, [sp, #12]
 8002612:	2d02      	cmp	r5, #2
 8002614:	dc00      	bgt.n	8002618 <__aeabi_dmul+0x94>
 8002616:	e094      	b.n	8002742 <__aeabi_dmul+0x1be>
 8002618:	2301      	movs	r3, #1
 800261a:	40ab      	lsls	r3, r5
 800261c:	001d      	movs	r5, r3
 800261e:	23a6      	movs	r3, #166	@ 0xa6
 8002620:	002a      	movs	r2, r5
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	401a      	ands	r2, r3
 8002626:	421d      	tst	r5, r3
 8002628:	d000      	beq.n	800262c <__aeabi_dmul+0xa8>
 800262a:	e229      	b.n	8002a80 <__aeabi_dmul+0x4fc>
 800262c:	2390      	movs	r3, #144	@ 0x90
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	421d      	tst	r5, r3
 8002632:	d100      	bne.n	8002636 <__aeabi_dmul+0xb2>
 8002634:	e24d      	b.n	8002ad2 <__aeabi_dmul+0x54e>
 8002636:	2300      	movs	r3, #0
 8002638:	2480      	movs	r4, #128	@ 0x80
 800263a:	4699      	mov	r9, r3
 800263c:	0324      	lsls	r4, r4, #12
 800263e:	4ba8      	ldr	r3, [pc, #672]	@ (80028e0 <__aeabi_dmul+0x35c>)
 8002640:	0010      	movs	r0, r2
 8002642:	464a      	mov	r2, r9
 8002644:	051b      	lsls	r3, r3, #20
 8002646:	4323      	orrs	r3, r4
 8002648:	07d2      	lsls	r2, r2, #31
 800264a:	4313      	orrs	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	b005      	add	sp, #20
 8002650:	bcf0      	pop	{r4, r5, r6, r7}
 8002652:	46bb      	mov	fp, r7
 8002654:	46b2      	mov	sl, r6
 8002656:	46a9      	mov	r9, r5
 8002658:	46a0      	mov	r8, r4
 800265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800265c:	4652      	mov	r2, sl
 800265e:	4302      	orrs	r2, r0
 8002660:	4690      	mov	r8, r2
 8002662:	d000      	beq.n	8002666 <__aeabi_dmul+0xe2>
 8002664:	e1ac      	b.n	80029c0 <__aeabi_dmul+0x43c>
 8002666:	469b      	mov	fp, r3
 8002668:	2302      	movs	r3, #2
 800266a:	4692      	mov	sl, r2
 800266c:	2508      	movs	r5, #8
 800266e:	9302      	str	r3, [sp, #8]
 8002670:	e7ae      	b.n	80025d0 <__aeabi_dmul+0x4c>
 8002672:	9b00      	ldr	r3, [sp, #0]
 8002674:	46a2      	mov	sl, r4
 8002676:	4699      	mov	r9, r3
 8002678:	9b01      	ldr	r3, [sp, #4]
 800267a:	4698      	mov	r8, r3
 800267c:	9b02      	ldr	r3, [sp, #8]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d100      	bne.n	8002684 <__aeabi_dmul+0x100>
 8002682:	e1ca      	b.n	8002a1a <__aeabi_dmul+0x496>
 8002684:	2b03      	cmp	r3, #3
 8002686:	d100      	bne.n	800268a <__aeabi_dmul+0x106>
 8002688:	e192      	b.n	80029b0 <__aeabi_dmul+0x42c>
 800268a:	2b01      	cmp	r3, #1
 800268c:	d110      	bne.n	80026b0 <__aeabi_dmul+0x12c>
 800268e:	2300      	movs	r3, #0
 8002690:	2400      	movs	r4, #0
 8002692:	2200      	movs	r2, #0
 8002694:	e7d4      	b.n	8002640 <__aeabi_dmul+0xbc>
 8002696:	2201      	movs	r2, #1
 8002698:	087b      	lsrs	r3, r7, #1
 800269a:	403a      	ands	r2, r7
 800269c:	4313      	orrs	r3, r2
 800269e:	4652      	mov	r2, sl
 80026a0:	07d2      	lsls	r2, r2, #31
 80026a2:	4313      	orrs	r3, r2
 80026a4:	4698      	mov	r8, r3
 80026a6:	4653      	mov	r3, sl
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	469a      	mov	sl, r3
 80026ac:	9b03      	ldr	r3, [sp, #12]
 80026ae:	4699      	mov	r9, r3
 80026b0:	465b      	mov	r3, fp
 80026b2:	1c58      	adds	r0, r3, #1
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	445b      	add	r3, fp
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	dc00      	bgt.n	80026c0 <__aeabi_dmul+0x13c>
 80026be:	e1b1      	b.n	8002a24 <__aeabi_dmul+0x4a0>
 80026c0:	4642      	mov	r2, r8
 80026c2:	0752      	lsls	r2, r2, #29
 80026c4:	d00b      	beq.n	80026de <__aeabi_dmul+0x15a>
 80026c6:	220f      	movs	r2, #15
 80026c8:	4641      	mov	r1, r8
 80026ca:	400a      	ands	r2, r1
 80026cc:	2a04      	cmp	r2, #4
 80026ce:	d006      	beq.n	80026de <__aeabi_dmul+0x15a>
 80026d0:	4642      	mov	r2, r8
 80026d2:	1d11      	adds	r1, r2, #4
 80026d4:	4541      	cmp	r1, r8
 80026d6:	4192      	sbcs	r2, r2
 80026d8:	4688      	mov	r8, r1
 80026da:	4252      	negs	r2, r2
 80026dc:	4492      	add	sl, r2
 80026de:	4652      	mov	r2, sl
 80026e0:	01d2      	lsls	r2, r2, #7
 80026e2:	d506      	bpl.n	80026f2 <__aeabi_dmul+0x16e>
 80026e4:	4652      	mov	r2, sl
 80026e6:	4b80      	ldr	r3, [pc, #512]	@ (80028e8 <__aeabi_dmul+0x364>)
 80026e8:	401a      	ands	r2, r3
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	4692      	mov	sl, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	18c3      	adds	r3, r0, r3
 80026f2:	4a7e      	ldr	r2, [pc, #504]	@ (80028ec <__aeabi_dmul+0x368>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	dd00      	ble.n	80026fa <__aeabi_dmul+0x176>
 80026f8:	e18f      	b.n	8002a1a <__aeabi_dmul+0x496>
 80026fa:	4642      	mov	r2, r8
 80026fc:	08d1      	lsrs	r1, r2, #3
 80026fe:	4652      	mov	r2, sl
 8002700:	0752      	lsls	r2, r2, #29
 8002702:	430a      	orrs	r2, r1
 8002704:	4651      	mov	r1, sl
 8002706:	055b      	lsls	r3, r3, #21
 8002708:	024c      	lsls	r4, r1, #9
 800270a:	0b24      	lsrs	r4, r4, #12
 800270c:	0d5b      	lsrs	r3, r3, #21
 800270e:	e797      	b.n	8002640 <__aeabi_dmul+0xbc>
 8002710:	4b73      	ldr	r3, [pc, #460]	@ (80028e0 <__aeabi_dmul+0x35c>)
 8002712:	4326      	orrs	r6, r4
 8002714:	469c      	mov	ip, r3
 8002716:	44e3      	add	fp, ip
 8002718:	2e00      	cmp	r6, #0
 800271a:	d100      	bne.n	800271e <__aeabi_dmul+0x19a>
 800271c:	e16f      	b.n	80029fe <__aeabi_dmul+0x47a>
 800271e:	2303      	movs	r3, #3
 8002720:	4649      	mov	r1, r9
 8002722:	431d      	orrs	r5, r3
 8002724:	9b00      	ldr	r3, [sp, #0]
 8002726:	4059      	eors	r1, r3
 8002728:	b2cb      	uxtb	r3, r1
 800272a:	9303      	str	r3, [sp, #12]
 800272c:	2d0a      	cmp	r5, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0x1ae>
 8002730:	e133      	b.n	800299a <__aeabi_dmul+0x416>
 8002732:	2301      	movs	r3, #1
 8002734:	40ab      	lsls	r3, r5
 8002736:	001d      	movs	r5, r3
 8002738:	2303      	movs	r3, #3
 800273a:	9302      	str	r3, [sp, #8]
 800273c:	2288      	movs	r2, #136	@ 0x88
 800273e:	422a      	tst	r2, r5
 8002740:	d197      	bne.n	8002672 <__aeabi_dmul+0xee>
 8002742:	4642      	mov	r2, r8
 8002744:	4643      	mov	r3, r8
 8002746:	0412      	lsls	r2, r2, #16
 8002748:	0c12      	lsrs	r2, r2, #16
 800274a:	0016      	movs	r6, r2
 800274c:	9801      	ldr	r0, [sp, #4]
 800274e:	0c1d      	lsrs	r5, r3, #16
 8002750:	0c03      	lsrs	r3, r0, #16
 8002752:	0400      	lsls	r0, r0, #16
 8002754:	0c00      	lsrs	r0, r0, #16
 8002756:	4346      	muls	r6, r0
 8002758:	46b4      	mov	ip, r6
 800275a:	001e      	movs	r6, r3
 800275c:	436e      	muls	r6, r5
 800275e:	9600      	str	r6, [sp, #0]
 8002760:	0016      	movs	r6, r2
 8002762:	0007      	movs	r7, r0
 8002764:	435e      	muls	r6, r3
 8002766:	4661      	mov	r1, ip
 8002768:	46b0      	mov	r8, r6
 800276a:	436f      	muls	r7, r5
 800276c:	0c0e      	lsrs	r6, r1, #16
 800276e:	44b8      	add	r8, r7
 8002770:	4446      	add	r6, r8
 8002772:	42b7      	cmp	r7, r6
 8002774:	d905      	bls.n	8002782 <__aeabi_dmul+0x1fe>
 8002776:	2180      	movs	r1, #128	@ 0x80
 8002778:	0249      	lsls	r1, r1, #9
 800277a:	4688      	mov	r8, r1
 800277c:	9f00      	ldr	r7, [sp, #0]
 800277e:	4447      	add	r7, r8
 8002780:	9700      	str	r7, [sp, #0]
 8002782:	4661      	mov	r1, ip
 8002784:	0409      	lsls	r1, r1, #16
 8002786:	0c09      	lsrs	r1, r1, #16
 8002788:	0c37      	lsrs	r7, r6, #16
 800278a:	0436      	lsls	r6, r6, #16
 800278c:	468c      	mov	ip, r1
 800278e:	0031      	movs	r1, r6
 8002790:	4461      	add	r1, ip
 8002792:	9101      	str	r1, [sp, #4]
 8002794:	0011      	movs	r1, r2
 8002796:	0c26      	lsrs	r6, r4, #16
 8002798:	0424      	lsls	r4, r4, #16
 800279a:	0c24      	lsrs	r4, r4, #16
 800279c:	4361      	muls	r1, r4
 800279e:	468c      	mov	ip, r1
 80027a0:	0021      	movs	r1, r4
 80027a2:	4369      	muls	r1, r5
 80027a4:	4689      	mov	r9, r1
 80027a6:	4661      	mov	r1, ip
 80027a8:	0c09      	lsrs	r1, r1, #16
 80027aa:	4688      	mov	r8, r1
 80027ac:	4372      	muls	r2, r6
 80027ae:	444a      	add	r2, r9
 80027b0:	4442      	add	r2, r8
 80027b2:	4375      	muls	r5, r6
 80027b4:	4591      	cmp	r9, r2
 80027b6:	d903      	bls.n	80027c0 <__aeabi_dmul+0x23c>
 80027b8:	2180      	movs	r1, #128	@ 0x80
 80027ba:	0249      	lsls	r1, r1, #9
 80027bc:	4688      	mov	r8, r1
 80027be:	4445      	add	r5, r8
 80027c0:	0c11      	lsrs	r1, r2, #16
 80027c2:	4688      	mov	r8, r1
 80027c4:	4661      	mov	r1, ip
 80027c6:	0409      	lsls	r1, r1, #16
 80027c8:	0c09      	lsrs	r1, r1, #16
 80027ca:	468c      	mov	ip, r1
 80027cc:	0412      	lsls	r2, r2, #16
 80027ce:	4462      	add	r2, ip
 80027d0:	18b9      	adds	r1, r7, r2
 80027d2:	9102      	str	r1, [sp, #8]
 80027d4:	4651      	mov	r1, sl
 80027d6:	0c09      	lsrs	r1, r1, #16
 80027d8:	468c      	mov	ip, r1
 80027da:	4651      	mov	r1, sl
 80027dc:	040f      	lsls	r7, r1, #16
 80027de:	0c3f      	lsrs	r7, r7, #16
 80027e0:	0039      	movs	r1, r7
 80027e2:	4341      	muls	r1, r0
 80027e4:	4445      	add	r5, r8
 80027e6:	4688      	mov	r8, r1
 80027e8:	4661      	mov	r1, ip
 80027ea:	4341      	muls	r1, r0
 80027ec:	468a      	mov	sl, r1
 80027ee:	4641      	mov	r1, r8
 80027f0:	4660      	mov	r0, ip
 80027f2:	0c09      	lsrs	r1, r1, #16
 80027f4:	4689      	mov	r9, r1
 80027f6:	4358      	muls	r0, r3
 80027f8:	437b      	muls	r3, r7
 80027fa:	4453      	add	r3, sl
 80027fc:	444b      	add	r3, r9
 80027fe:	459a      	cmp	sl, r3
 8002800:	d903      	bls.n	800280a <__aeabi_dmul+0x286>
 8002802:	2180      	movs	r1, #128	@ 0x80
 8002804:	0249      	lsls	r1, r1, #9
 8002806:	4689      	mov	r9, r1
 8002808:	4448      	add	r0, r9
 800280a:	0c19      	lsrs	r1, r3, #16
 800280c:	4689      	mov	r9, r1
 800280e:	4641      	mov	r1, r8
 8002810:	0409      	lsls	r1, r1, #16
 8002812:	0c09      	lsrs	r1, r1, #16
 8002814:	4688      	mov	r8, r1
 8002816:	0039      	movs	r1, r7
 8002818:	4361      	muls	r1, r4
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	4443      	add	r3, r8
 800281e:	4688      	mov	r8, r1
 8002820:	4661      	mov	r1, ip
 8002822:	434c      	muls	r4, r1
 8002824:	4371      	muls	r1, r6
 8002826:	468c      	mov	ip, r1
 8002828:	4641      	mov	r1, r8
 800282a:	4377      	muls	r7, r6
 800282c:	0c0e      	lsrs	r6, r1, #16
 800282e:	193f      	adds	r7, r7, r4
 8002830:	19f6      	adds	r6, r6, r7
 8002832:	4448      	add	r0, r9
 8002834:	42b4      	cmp	r4, r6
 8002836:	d903      	bls.n	8002840 <__aeabi_dmul+0x2bc>
 8002838:	2180      	movs	r1, #128	@ 0x80
 800283a:	0249      	lsls	r1, r1, #9
 800283c:	4689      	mov	r9, r1
 800283e:	44cc      	add	ip, r9
 8002840:	9902      	ldr	r1, [sp, #8]
 8002842:	9f00      	ldr	r7, [sp, #0]
 8002844:	4689      	mov	r9, r1
 8002846:	0431      	lsls	r1, r6, #16
 8002848:	444f      	add	r7, r9
 800284a:	4689      	mov	r9, r1
 800284c:	4641      	mov	r1, r8
 800284e:	4297      	cmp	r7, r2
 8002850:	4192      	sbcs	r2, r2
 8002852:	040c      	lsls	r4, r1, #16
 8002854:	0c24      	lsrs	r4, r4, #16
 8002856:	444c      	add	r4, r9
 8002858:	18ff      	adds	r7, r7, r3
 800285a:	4252      	negs	r2, r2
 800285c:	1964      	adds	r4, r4, r5
 800285e:	18a1      	adds	r1, r4, r2
 8002860:	429f      	cmp	r7, r3
 8002862:	419b      	sbcs	r3, r3
 8002864:	4688      	mov	r8, r1
 8002866:	4682      	mov	sl, r0
 8002868:	425b      	negs	r3, r3
 800286a:	4699      	mov	r9, r3
 800286c:	4590      	cmp	r8, r2
 800286e:	4192      	sbcs	r2, r2
 8002870:	42ac      	cmp	r4, r5
 8002872:	41a4      	sbcs	r4, r4
 8002874:	44c2      	add	sl, r8
 8002876:	44d1      	add	r9, sl
 8002878:	4252      	negs	r2, r2
 800287a:	4264      	negs	r4, r4
 800287c:	4314      	orrs	r4, r2
 800287e:	4599      	cmp	r9, r3
 8002880:	419b      	sbcs	r3, r3
 8002882:	4582      	cmp	sl, r0
 8002884:	4192      	sbcs	r2, r2
 8002886:	425b      	negs	r3, r3
 8002888:	4252      	negs	r2, r2
 800288a:	4313      	orrs	r3, r2
 800288c:	464a      	mov	r2, r9
 800288e:	0c36      	lsrs	r6, r6, #16
 8002890:	19a4      	adds	r4, r4, r6
 8002892:	18e3      	adds	r3, r4, r3
 8002894:	4463      	add	r3, ip
 8002896:	025b      	lsls	r3, r3, #9
 8002898:	0dd2      	lsrs	r2, r2, #23
 800289a:	431a      	orrs	r2, r3
 800289c:	9901      	ldr	r1, [sp, #4]
 800289e:	4692      	mov	sl, r2
 80028a0:	027a      	lsls	r2, r7, #9
 80028a2:	430a      	orrs	r2, r1
 80028a4:	1e50      	subs	r0, r2, #1
 80028a6:	4182      	sbcs	r2, r0
 80028a8:	0dff      	lsrs	r7, r7, #23
 80028aa:	4317      	orrs	r7, r2
 80028ac:	464a      	mov	r2, r9
 80028ae:	0252      	lsls	r2, r2, #9
 80028b0:	4317      	orrs	r7, r2
 80028b2:	46b8      	mov	r8, r7
 80028b4:	01db      	lsls	r3, r3, #7
 80028b6:	d500      	bpl.n	80028ba <__aeabi_dmul+0x336>
 80028b8:	e6ed      	b.n	8002696 <__aeabi_dmul+0x112>
 80028ba:	4b0d      	ldr	r3, [pc, #52]	@ (80028f0 <__aeabi_dmul+0x36c>)
 80028bc:	9a03      	ldr	r2, [sp, #12]
 80028be:	445b      	add	r3, fp
 80028c0:	4691      	mov	r9, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	dc00      	bgt.n	80028c8 <__aeabi_dmul+0x344>
 80028c6:	e0ac      	b.n	8002a22 <__aeabi_dmul+0x49e>
 80028c8:	003a      	movs	r2, r7
 80028ca:	0752      	lsls	r2, r2, #29
 80028cc:	d100      	bne.n	80028d0 <__aeabi_dmul+0x34c>
 80028ce:	e710      	b.n	80026f2 <__aeabi_dmul+0x16e>
 80028d0:	220f      	movs	r2, #15
 80028d2:	4658      	mov	r0, fp
 80028d4:	403a      	ands	r2, r7
 80028d6:	2a04      	cmp	r2, #4
 80028d8:	d000      	beq.n	80028dc <__aeabi_dmul+0x358>
 80028da:	e6f9      	b.n	80026d0 <__aeabi_dmul+0x14c>
 80028dc:	e709      	b.n	80026f2 <__aeabi_dmul+0x16e>
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	000007ff 	.word	0x000007ff
 80028e4:	fffffc01 	.word	0xfffffc01
 80028e8:	feffffff 	.word	0xfeffffff
 80028ec:	000007fe 	.word	0x000007fe
 80028f0:	000003ff 	.word	0x000003ff
 80028f4:	0022      	movs	r2, r4
 80028f6:	4332      	orrs	r2, r6
 80028f8:	d06f      	beq.n	80029da <__aeabi_dmul+0x456>
 80028fa:	2c00      	cmp	r4, #0
 80028fc:	d100      	bne.n	8002900 <__aeabi_dmul+0x37c>
 80028fe:	e0c2      	b.n	8002a86 <__aeabi_dmul+0x502>
 8002900:	0020      	movs	r0, r4
 8002902:	f000 fea9 	bl	8003658 <__clzsi2>
 8002906:	0002      	movs	r2, r0
 8002908:	0003      	movs	r3, r0
 800290a:	3a0b      	subs	r2, #11
 800290c:	201d      	movs	r0, #29
 800290e:	1a82      	subs	r2, r0, r2
 8002910:	0030      	movs	r0, r6
 8002912:	0019      	movs	r1, r3
 8002914:	40d0      	lsrs	r0, r2
 8002916:	3908      	subs	r1, #8
 8002918:	408c      	lsls	r4, r1
 800291a:	0002      	movs	r2, r0
 800291c:	4322      	orrs	r2, r4
 800291e:	0034      	movs	r4, r6
 8002920:	408c      	lsls	r4, r1
 8002922:	4659      	mov	r1, fp
 8002924:	1acb      	subs	r3, r1, r3
 8002926:	4986      	ldr	r1, [pc, #536]	@ (8002b40 <__aeabi_dmul+0x5bc>)
 8002928:	468b      	mov	fp, r1
 800292a:	449b      	add	fp, r3
 800292c:	2d0a      	cmp	r5, #10
 800292e:	dd00      	ble.n	8002932 <__aeabi_dmul+0x3ae>
 8002930:	e6a4      	b.n	800267c <__aeabi_dmul+0xf8>
 8002932:	4649      	mov	r1, r9
 8002934:	9b00      	ldr	r3, [sp, #0]
 8002936:	9401      	str	r4, [sp, #4]
 8002938:	4059      	eors	r1, r3
 800293a:	b2cb      	uxtb	r3, r1
 800293c:	0014      	movs	r4, r2
 800293e:	2000      	movs	r0, #0
 8002940:	9303      	str	r3, [sp, #12]
 8002942:	2d02      	cmp	r5, #2
 8002944:	dd00      	ble.n	8002948 <__aeabi_dmul+0x3c4>
 8002946:	e667      	b.n	8002618 <__aeabi_dmul+0x94>
 8002948:	e6fb      	b.n	8002742 <__aeabi_dmul+0x1be>
 800294a:	4653      	mov	r3, sl
 800294c:	4303      	orrs	r3, r0
 800294e:	4698      	mov	r8, r3
 8002950:	d03c      	beq.n	80029cc <__aeabi_dmul+0x448>
 8002952:	4653      	mov	r3, sl
 8002954:	2b00      	cmp	r3, #0
 8002956:	d100      	bne.n	800295a <__aeabi_dmul+0x3d6>
 8002958:	e0a3      	b.n	8002aa2 <__aeabi_dmul+0x51e>
 800295a:	4650      	mov	r0, sl
 800295c:	f000 fe7c 	bl	8003658 <__clzsi2>
 8002960:	230b      	movs	r3, #11
 8002962:	425b      	negs	r3, r3
 8002964:	469c      	mov	ip, r3
 8002966:	0002      	movs	r2, r0
 8002968:	4484      	add	ip, r0
 800296a:	0011      	movs	r1, r2
 800296c:	4650      	mov	r0, sl
 800296e:	3908      	subs	r1, #8
 8002970:	4088      	lsls	r0, r1
 8002972:	231d      	movs	r3, #29
 8002974:	4680      	mov	r8, r0
 8002976:	4660      	mov	r0, ip
 8002978:	1a1b      	subs	r3, r3, r0
 800297a:	0020      	movs	r0, r4
 800297c:	40d8      	lsrs	r0, r3
 800297e:	0003      	movs	r3, r0
 8002980:	4640      	mov	r0, r8
 8002982:	4303      	orrs	r3, r0
 8002984:	469a      	mov	sl, r3
 8002986:	0023      	movs	r3, r4
 8002988:	408b      	lsls	r3, r1
 800298a:	4698      	mov	r8, r3
 800298c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b40 <__aeabi_dmul+0x5bc>)
 800298e:	2500      	movs	r5, #0
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	469b      	mov	fp, r3
 8002994:	2300      	movs	r3, #0
 8002996:	9302      	str	r3, [sp, #8]
 8002998:	e61a      	b.n	80025d0 <__aeabi_dmul+0x4c>
 800299a:	2d0f      	cmp	r5, #15
 800299c:	d000      	beq.n	80029a0 <__aeabi_dmul+0x41c>
 800299e:	e0c9      	b.n	8002b34 <__aeabi_dmul+0x5b0>
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	4652      	mov	r2, sl
 80029a4:	031b      	lsls	r3, r3, #12
 80029a6:	421a      	tst	r2, r3
 80029a8:	d002      	beq.n	80029b0 <__aeabi_dmul+0x42c>
 80029aa:	421c      	tst	r4, r3
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dmul+0x42c>
 80029ae:	e092      	b.n	8002ad6 <__aeabi_dmul+0x552>
 80029b0:	2480      	movs	r4, #128	@ 0x80
 80029b2:	4653      	mov	r3, sl
 80029b4:	0324      	lsls	r4, r4, #12
 80029b6:	431c      	orrs	r4, r3
 80029b8:	0324      	lsls	r4, r4, #12
 80029ba:	4642      	mov	r2, r8
 80029bc:	0b24      	lsrs	r4, r4, #12
 80029be:	e63e      	b.n	800263e <__aeabi_dmul+0xba>
 80029c0:	469b      	mov	fp, r3
 80029c2:	2303      	movs	r3, #3
 80029c4:	4680      	mov	r8, r0
 80029c6:	250c      	movs	r5, #12
 80029c8:	9302      	str	r3, [sp, #8]
 80029ca:	e601      	b.n	80025d0 <__aeabi_dmul+0x4c>
 80029cc:	2300      	movs	r3, #0
 80029ce:	469a      	mov	sl, r3
 80029d0:	469b      	mov	fp, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	2504      	movs	r5, #4
 80029d6:	9302      	str	r3, [sp, #8]
 80029d8:	e5fa      	b.n	80025d0 <__aeabi_dmul+0x4c>
 80029da:	2101      	movs	r1, #1
 80029dc:	430d      	orrs	r5, r1
 80029de:	2d0a      	cmp	r5, #10
 80029e0:	dd00      	ble.n	80029e4 <__aeabi_dmul+0x460>
 80029e2:	e64b      	b.n	800267c <__aeabi_dmul+0xf8>
 80029e4:	4649      	mov	r1, r9
 80029e6:	9800      	ldr	r0, [sp, #0]
 80029e8:	4041      	eors	r1, r0
 80029ea:	b2c9      	uxtb	r1, r1
 80029ec:	9103      	str	r1, [sp, #12]
 80029ee:	2d02      	cmp	r5, #2
 80029f0:	dc00      	bgt.n	80029f4 <__aeabi_dmul+0x470>
 80029f2:	e096      	b.n	8002b22 <__aeabi_dmul+0x59e>
 80029f4:	2300      	movs	r3, #0
 80029f6:	2400      	movs	r4, #0
 80029f8:	2001      	movs	r0, #1
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	e60c      	b.n	8002618 <__aeabi_dmul+0x94>
 80029fe:	4649      	mov	r1, r9
 8002a00:	2302      	movs	r3, #2
 8002a02:	9a00      	ldr	r2, [sp, #0]
 8002a04:	432b      	orrs	r3, r5
 8002a06:	4051      	eors	r1, r2
 8002a08:	b2ca      	uxtb	r2, r1
 8002a0a:	9203      	str	r2, [sp, #12]
 8002a0c:	2b0a      	cmp	r3, #10
 8002a0e:	dd00      	ble.n	8002a12 <__aeabi_dmul+0x48e>
 8002a10:	e634      	b.n	800267c <__aeabi_dmul+0xf8>
 8002a12:	2d00      	cmp	r5, #0
 8002a14:	d157      	bne.n	8002ac6 <__aeabi_dmul+0x542>
 8002a16:	9b03      	ldr	r3, [sp, #12]
 8002a18:	4699      	mov	r9, r3
 8002a1a:	2400      	movs	r4, #0
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	4b49      	ldr	r3, [pc, #292]	@ (8002b44 <__aeabi_dmul+0x5c0>)
 8002a20:	e60e      	b.n	8002640 <__aeabi_dmul+0xbc>
 8002a22:	4658      	mov	r0, fp
 8002a24:	2101      	movs	r1, #1
 8002a26:	1ac9      	subs	r1, r1, r3
 8002a28:	2938      	cmp	r1, #56	@ 0x38
 8002a2a:	dd00      	ble.n	8002a2e <__aeabi_dmul+0x4aa>
 8002a2c:	e62f      	b.n	800268e <__aeabi_dmul+0x10a>
 8002a2e:	291f      	cmp	r1, #31
 8002a30:	dd56      	ble.n	8002ae0 <__aeabi_dmul+0x55c>
 8002a32:	221f      	movs	r2, #31
 8002a34:	4654      	mov	r4, sl
 8002a36:	4252      	negs	r2, r2
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	40dc      	lsrs	r4, r3
 8002a3c:	2920      	cmp	r1, #32
 8002a3e:	d007      	beq.n	8002a50 <__aeabi_dmul+0x4cc>
 8002a40:	4b41      	ldr	r3, [pc, #260]	@ (8002b48 <__aeabi_dmul+0x5c4>)
 8002a42:	4642      	mov	r2, r8
 8002a44:	469c      	mov	ip, r3
 8002a46:	4653      	mov	r3, sl
 8002a48:	4460      	add	r0, ip
 8002a4a:	4083      	lsls	r3, r0
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4642      	mov	r2, r8
 8002a52:	2107      	movs	r1, #7
 8002a54:	1e53      	subs	r3, r2, #1
 8002a56:	419a      	sbcs	r2, r3
 8002a58:	000b      	movs	r3, r1
 8002a5a:	4322      	orrs	r2, r4
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2400      	movs	r4, #0
 8002a60:	4211      	tst	r1, r2
 8002a62:	d009      	beq.n	8002a78 <__aeabi_dmul+0x4f4>
 8002a64:	230f      	movs	r3, #15
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d05d      	beq.n	8002b28 <__aeabi_dmul+0x5a4>
 8002a6c:	1d11      	adds	r1, r2, #4
 8002a6e:	4291      	cmp	r1, r2
 8002a70:	419b      	sbcs	r3, r3
 8002a72:	000a      	movs	r2, r1
 8002a74:	425b      	negs	r3, r3
 8002a76:	075b      	lsls	r3, r3, #29
 8002a78:	08d2      	lsrs	r2, r2, #3
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e5df      	b.n	8002640 <__aeabi_dmul+0xbc>
 8002a80:	9b03      	ldr	r3, [sp, #12]
 8002a82:	4699      	mov	r9, r3
 8002a84:	e5fa      	b.n	800267c <__aeabi_dmul+0xf8>
 8002a86:	9801      	ldr	r0, [sp, #4]
 8002a88:	f000 fde6 	bl	8003658 <__clzsi2>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	0003      	movs	r3, r0
 8002a90:	3215      	adds	r2, #21
 8002a92:	3320      	adds	r3, #32
 8002a94:	2a1c      	cmp	r2, #28
 8002a96:	dc00      	bgt.n	8002a9a <__aeabi_dmul+0x516>
 8002a98:	e738      	b.n	800290c <__aeabi_dmul+0x388>
 8002a9a:	9a01      	ldr	r2, [sp, #4]
 8002a9c:	3808      	subs	r0, #8
 8002a9e:	4082      	lsls	r2, r0
 8002aa0:	e73f      	b.n	8002922 <__aeabi_dmul+0x39e>
 8002aa2:	f000 fdd9 	bl	8003658 <__clzsi2>
 8002aa6:	2315      	movs	r3, #21
 8002aa8:	469c      	mov	ip, r3
 8002aaa:	4484      	add	ip, r0
 8002aac:	0002      	movs	r2, r0
 8002aae:	4663      	mov	r3, ip
 8002ab0:	3220      	adds	r2, #32
 8002ab2:	2b1c      	cmp	r3, #28
 8002ab4:	dc00      	bgt.n	8002ab8 <__aeabi_dmul+0x534>
 8002ab6:	e758      	b.n	800296a <__aeabi_dmul+0x3e6>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	4698      	mov	r8, r3
 8002abc:	0023      	movs	r3, r4
 8002abe:	3808      	subs	r0, #8
 8002ac0:	4083      	lsls	r3, r0
 8002ac2:	469a      	mov	sl, r3
 8002ac4:	e762      	b.n	800298c <__aeabi_dmul+0x408>
 8002ac6:	001d      	movs	r5, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2400      	movs	r4, #0
 8002acc:	2002      	movs	r0, #2
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	e5a2      	b.n	8002618 <__aeabi_dmul+0x94>
 8002ad2:	9002      	str	r0, [sp, #8]
 8002ad4:	e632      	b.n	800273c <__aeabi_dmul+0x1b8>
 8002ad6:	431c      	orrs	r4, r3
 8002ad8:	9b00      	ldr	r3, [sp, #0]
 8002ada:	9a01      	ldr	r2, [sp, #4]
 8002adc:	4699      	mov	r9, r3
 8002ade:	e5ae      	b.n	800263e <__aeabi_dmul+0xba>
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <__aeabi_dmul+0x5c8>)
 8002ae2:	4652      	mov	r2, sl
 8002ae4:	18c3      	adds	r3, r0, r3
 8002ae6:	4640      	mov	r0, r8
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	40c8      	lsrs	r0, r1
 8002aec:	4302      	orrs	r2, r0
 8002aee:	4640      	mov	r0, r8
 8002af0:	4098      	lsls	r0, r3
 8002af2:	0003      	movs	r3, r0
 8002af4:	1e58      	subs	r0, r3, #1
 8002af6:	4183      	sbcs	r3, r0
 8002af8:	4654      	mov	r4, sl
 8002afa:	431a      	orrs	r2, r3
 8002afc:	40cc      	lsrs	r4, r1
 8002afe:	0753      	lsls	r3, r2, #29
 8002b00:	d009      	beq.n	8002b16 <__aeabi_dmul+0x592>
 8002b02:	230f      	movs	r3, #15
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d005      	beq.n	8002b16 <__aeabi_dmul+0x592>
 8002b0a:	1d13      	adds	r3, r2, #4
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	4192      	sbcs	r2, r2
 8002b10:	4252      	negs	r2, r2
 8002b12:	18a4      	adds	r4, r4, r2
 8002b14:	001a      	movs	r2, r3
 8002b16:	0223      	lsls	r3, r4, #8
 8002b18:	d508      	bpl.n	8002b2c <__aeabi_dmul+0x5a8>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	2400      	movs	r4, #0
 8002b1e:	2200      	movs	r2, #0
 8002b20:	e58e      	b.n	8002640 <__aeabi_dmul+0xbc>
 8002b22:	4689      	mov	r9, r1
 8002b24:	2400      	movs	r4, #0
 8002b26:	e58b      	b.n	8002640 <__aeabi_dmul+0xbc>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e7a5      	b.n	8002a78 <__aeabi_dmul+0x4f4>
 8002b2c:	0763      	lsls	r3, r4, #29
 8002b2e:	0264      	lsls	r4, r4, #9
 8002b30:	0b24      	lsrs	r4, r4, #12
 8002b32:	e7a1      	b.n	8002a78 <__aeabi_dmul+0x4f4>
 8002b34:	9b00      	ldr	r3, [sp, #0]
 8002b36:	46a2      	mov	sl, r4
 8002b38:	4699      	mov	r9, r3
 8002b3a:	9b01      	ldr	r3, [sp, #4]
 8002b3c:	4698      	mov	r8, r3
 8002b3e:	e737      	b.n	80029b0 <__aeabi_dmul+0x42c>
 8002b40:	fffffc0d 	.word	0xfffffc0d
 8002b44:	000007ff 	.word	0x000007ff
 8002b48:	0000043e 	.word	0x0000043e
 8002b4c:	0000041e 	.word	0x0000041e

08002b50 <__aeabi_dsub>:
 8002b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b52:	4657      	mov	r7, sl
 8002b54:	464e      	mov	r6, r9
 8002b56:	4645      	mov	r5, r8
 8002b58:	46de      	mov	lr, fp
 8002b5a:	b5e0      	push	{r5, r6, r7, lr}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	9000      	str	r0, [sp, #0]
 8002b60:	9101      	str	r1, [sp, #4]
 8002b62:	030c      	lsls	r4, r1, #12
 8002b64:	004d      	lsls	r5, r1, #1
 8002b66:	0fce      	lsrs	r6, r1, #31
 8002b68:	0a61      	lsrs	r1, r4, #9
 8002b6a:	9c00      	ldr	r4, [sp, #0]
 8002b6c:	005f      	lsls	r7, r3, #1
 8002b6e:	0f64      	lsrs	r4, r4, #29
 8002b70:	430c      	orrs	r4, r1
 8002b72:	9900      	ldr	r1, [sp, #0]
 8002b74:	9200      	str	r2, [sp, #0]
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	00c8      	lsls	r0, r1, #3
 8002b7a:	0319      	lsls	r1, r3, #12
 8002b7c:	0d7b      	lsrs	r3, r7, #21
 8002b7e:	4699      	mov	r9, r3
 8002b80:	9b01      	ldr	r3, [sp, #4]
 8002b82:	4fcc      	ldr	r7, [pc, #816]	@ (8002eb4 <__aeabi_dsub+0x364>)
 8002b84:	0fdb      	lsrs	r3, r3, #31
 8002b86:	469c      	mov	ip, r3
 8002b88:	0a4b      	lsrs	r3, r1, #9
 8002b8a:	9900      	ldr	r1, [sp, #0]
 8002b8c:	4680      	mov	r8, r0
 8002b8e:	0f49      	lsrs	r1, r1, #29
 8002b90:	4319      	orrs	r1, r3
 8002b92:	9b00      	ldr	r3, [sp, #0]
 8002b94:	468b      	mov	fp, r1
 8002b96:	00da      	lsls	r2, r3, #3
 8002b98:	4692      	mov	sl, r2
 8002b9a:	0d6d      	lsrs	r5, r5, #21
 8002b9c:	45b9      	cmp	r9, r7
 8002b9e:	d100      	bne.n	8002ba2 <__aeabi_dsub+0x52>
 8002ba0:	e0bf      	b.n	8002d22 <__aeabi_dsub+0x1d2>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	4661      	mov	r1, ip
 8002ba6:	4059      	eors	r1, r3
 8002ba8:	464b      	mov	r3, r9
 8002baa:	468c      	mov	ip, r1
 8002bac:	1aeb      	subs	r3, r5, r3
 8002bae:	428e      	cmp	r6, r1
 8002bb0:	d075      	beq.n	8002c9e <__aeabi_dsub+0x14e>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	dc00      	bgt.n	8002bb8 <__aeabi_dsub+0x68>
 8002bb6:	e2a3      	b.n	8003100 <__aeabi_dsub+0x5b0>
 8002bb8:	4649      	mov	r1, r9
 8002bba:	2900      	cmp	r1, #0
 8002bbc:	d100      	bne.n	8002bc0 <__aeabi_dsub+0x70>
 8002bbe:	e0ce      	b.n	8002d5e <__aeabi_dsub+0x20e>
 8002bc0:	42bd      	cmp	r5, r7
 8002bc2:	d100      	bne.n	8002bc6 <__aeabi_dsub+0x76>
 8002bc4:	e200      	b.n	8002fc8 <__aeabi_dsub+0x478>
 8002bc6:	2701      	movs	r7, #1
 8002bc8:	2b38      	cmp	r3, #56	@ 0x38
 8002bca:	dc19      	bgt.n	8002c00 <__aeabi_dsub+0xb0>
 8002bcc:	2780      	movs	r7, #128	@ 0x80
 8002bce:	4659      	mov	r1, fp
 8002bd0:	043f      	lsls	r7, r7, #16
 8002bd2:	4339      	orrs	r1, r7
 8002bd4:	468b      	mov	fp, r1
 8002bd6:	2b1f      	cmp	r3, #31
 8002bd8:	dd00      	ble.n	8002bdc <__aeabi_dsub+0x8c>
 8002bda:	e1fa      	b.n	8002fd2 <__aeabi_dsub+0x482>
 8002bdc:	2720      	movs	r7, #32
 8002bde:	1af9      	subs	r1, r7, r3
 8002be0:	468c      	mov	ip, r1
 8002be2:	4659      	mov	r1, fp
 8002be4:	4667      	mov	r7, ip
 8002be6:	40b9      	lsls	r1, r7
 8002be8:	000f      	movs	r7, r1
 8002bea:	0011      	movs	r1, r2
 8002bec:	40d9      	lsrs	r1, r3
 8002bee:	430f      	orrs	r7, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	408a      	lsls	r2, r1
 8002bf4:	1e51      	subs	r1, r2, #1
 8002bf6:	418a      	sbcs	r2, r1
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	40d9      	lsrs	r1, r3
 8002bfc:	4317      	orrs	r7, r2
 8002bfe:	1a64      	subs	r4, r4, r1
 8002c00:	1bc7      	subs	r7, r0, r7
 8002c02:	42b8      	cmp	r0, r7
 8002c04:	4180      	sbcs	r0, r0
 8002c06:	4240      	negs	r0, r0
 8002c08:	1a24      	subs	r4, r4, r0
 8002c0a:	0223      	lsls	r3, r4, #8
 8002c0c:	d400      	bmi.n	8002c10 <__aeabi_dsub+0xc0>
 8002c0e:	e140      	b.n	8002e92 <__aeabi_dsub+0x342>
 8002c10:	0264      	lsls	r4, r4, #9
 8002c12:	0a64      	lsrs	r4, r4, #9
 8002c14:	2c00      	cmp	r4, #0
 8002c16:	d100      	bne.n	8002c1a <__aeabi_dsub+0xca>
 8002c18:	e154      	b.n	8002ec4 <__aeabi_dsub+0x374>
 8002c1a:	0020      	movs	r0, r4
 8002c1c:	f000 fd1c 	bl	8003658 <__clzsi2>
 8002c20:	0003      	movs	r3, r0
 8002c22:	3b08      	subs	r3, #8
 8002c24:	2120      	movs	r1, #32
 8002c26:	0038      	movs	r0, r7
 8002c28:	1aca      	subs	r2, r1, r3
 8002c2a:	40d0      	lsrs	r0, r2
 8002c2c:	409c      	lsls	r4, r3
 8002c2e:	0002      	movs	r2, r0
 8002c30:	409f      	lsls	r7, r3
 8002c32:	4322      	orrs	r2, r4
 8002c34:	429d      	cmp	r5, r3
 8002c36:	dd00      	ble.n	8002c3a <__aeabi_dsub+0xea>
 8002c38:	e1a6      	b.n	8002f88 <__aeabi_dsub+0x438>
 8002c3a:	1b58      	subs	r0, r3, r5
 8002c3c:	3001      	adds	r0, #1
 8002c3e:	1a09      	subs	r1, r1, r0
 8002c40:	003c      	movs	r4, r7
 8002c42:	408f      	lsls	r7, r1
 8002c44:	40c4      	lsrs	r4, r0
 8002c46:	1e7b      	subs	r3, r7, #1
 8002c48:	419f      	sbcs	r7, r3
 8002c4a:	0013      	movs	r3, r2
 8002c4c:	408b      	lsls	r3, r1
 8002c4e:	4327      	orrs	r7, r4
 8002c50:	431f      	orrs	r7, r3
 8002c52:	40c2      	lsrs	r2, r0
 8002c54:	003b      	movs	r3, r7
 8002c56:	0014      	movs	r4, r2
 8002c58:	2500      	movs	r5, #0
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	d100      	bne.n	8002c60 <__aeabi_dsub+0x110>
 8002c5e:	e1f7      	b.n	8003050 <__aeabi_dsub+0x500>
 8002c60:	077b      	lsls	r3, r7, #29
 8002c62:	d100      	bne.n	8002c66 <__aeabi_dsub+0x116>
 8002c64:	e377      	b.n	8003356 <__aeabi_dsub+0x806>
 8002c66:	230f      	movs	r3, #15
 8002c68:	0038      	movs	r0, r7
 8002c6a:	403b      	ands	r3, r7
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d004      	beq.n	8002c7a <__aeabi_dsub+0x12a>
 8002c70:	1d38      	adds	r0, r7, #4
 8002c72:	42b8      	cmp	r0, r7
 8002c74:	41bf      	sbcs	r7, r7
 8002c76:	427f      	negs	r7, r7
 8002c78:	19e4      	adds	r4, r4, r7
 8002c7a:	0223      	lsls	r3, r4, #8
 8002c7c:	d400      	bmi.n	8002c80 <__aeabi_dsub+0x130>
 8002c7e:	e368      	b.n	8003352 <__aeabi_dsub+0x802>
 8002c80:	4b8c      	ldr	r3, [pc, #560]	@ (8002eb4 <__aeabi_dsub+0x364>)
 8002c82:	3501      	adds	r5, #1
 8002c84:	429d      	cmp	r5, r3
 8002c86:	d100      	bne.n	8002c8a <__aeabi_dsub+0x13a>
 8002c88:	e0f4      	b.n	8002e74 <__aeabi_dsub+0x324>
 8002c8a:	4b8b      	ldr	r3, [pc, #556]	@ (8002eb8 <__aeabi_dsub+0x368>)
 8002c8c:	056d      	lsls	r5, r5, #21
 8002c8e:	401c      	ands	r4, r3
 8002c90:	0d6d      	lsrs	r5, r5, #21
 8002c92:	0767      	lsls	r7, r4, #29
 8002c94:	08c0      	lsrs	r0, r0, #3
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	4307      	orrs	r7, r0
 8002c9a:	0b24      	lsrs	r4, r4, #12
 8002c9c:	e0ec      	b.n	8002e78 <__aeabi_dsub+0x328>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	dc00      	bgt.n	8002ca4 <__aeabi_dsub+0x154>
 8002ca2:	e329      	b.n	80032f8 <__aeabi_dsub+0x7a8>
 8002ca4:	4649      	mov	r1, r9
 8002ca6:	2900      	cmp	r1, #0
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dsub+0x15c>
 8002caa:	e0d6      	b.n	8002e5a <__aeabi_dsub+0x30a>
 8002cac:	4659      	mov	r1, fp
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	d100      	bne.n	8002cb4 <__aeabi_dsub+0x164>
 8002cb2:	e12e      	b.n	8002f12 <__aeabi_dsub+0x3c2>
 8002cb4:	1e59      	subs	r1, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d100      	bne.n	8002cbc <__aeabi_dsub+0x16c>
 8002cba:	e1e6      	b.n	800308a <__aeabi_dsub+0x53a>
 8002cbc:	42bb      	cmp	r3, r7
 8002cbe:	d100      	bne.n	8002cc2 <__aeabi_dsub+0x172>
 8002cc0:	e182      	b.n	8002fc8 <__aeabi_dsub+0x478>
 8002cc2:	2701      	movs	r7, #1
 8002cc4:	000b      	movs	r3, r1
 8002cc6:	2938      	cmp	r1, #56	@ 0x38
 8002cc8:	dc14      	bgt.n	8002cf4 <__aeabi_dsub+0x1a4>
 8002cca:	2b1f      	cmp	r3, #31
 8002ccc:	dd00      	ble.n	8002cd0 <__aeabi_dsub+0x180>
 8002cce:	e23c      	b.n	800314a <__aeabi_dsub+0x5fa>
 8002cd0:	2720      	movs	r7, #32
 8002cd2:	1af9      	subs	r1, r7, r3
 8002cd4:	468c      	mov	ip, r1
 8002cd6:	4659      	mov	r1, fp
 8002cd8:	4667      	mov	r7, ip
 8002cda:	40b9      	lsls	r1, r7
 8002cdc:	000f      	movs	r7, r1
 8002cde:	0011      	movs	r1, r2
 8002ce0:	40d9      	lsrs	r1, r3
 8002ce2:	430f      	orrs	r7, r1
 8002ce4:	4661      	mov	r1, ip
 8002ce6:	408a      	lsls	r2, r1
 8002ce8:	1e51      	subs	r1, r2, #1
 8002cea:	418a      	sbcs	r2, r1
 8002cec:	4659      	mov	r1, fp
 8002cee:	40d9      	lsrs	r1, r3
 8002cf0:	4317      	orrs	r7, r2
 8002cf2:	1864      	adds	r4, r4, r1
 8002cf4:	183f      	adds	r7, r7, r0
 8002cf6:	4287      	cmp	r7, r0
 8002cf8:	4180      	sbcs	r0, r0
 8002cfa:	4240      	negs	r0, r0
 8002cfc:	1824      	adds	r4, r4, r0
 8002cfe:	0223      	lsls	r3, r4, #8
 8002d00:	d400      	bmi.n	8002d04 <__aeabi_dsub+0x1b4>
 8002d02:	e0c6      	b.n	8002e92 <__aeabi_dsub+0x342>
 8002d04:	4b6b      	ldr	r3, [pc, #428]	@ (8002eb4 <__aeabi_dsub+0x364>)
 8002d06:	3501      	adds	r5, #1
 8002d08:	429d      	cmp	r5, r3
 8002d0a:	d100      	bne.n	8002d0e <__aeabi_dsub+0x1be>
 8002d0c:	e0b2      	b.n	8002e74 <__aeabi_dsub+0x324>
 8002d0e:	2101      	movs	r1, #1
 8002d10:	4b69      	ldr	r3, [pc, #420]	@ (8002eb8 <__aeabi_dsub+0x368>)
 8002d12:	087a      	lsrs	r2, r7, #1
 8002d14:	401c      	ands	r4, r3
 8002d16:	4039      	ands	r1, r7
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	07e7      	lsls	r7, r4, #31
 8002d1c:	4317      	orrs	r7, r2
 8002d1e:	0864      	lsrs	r4, r4, #1
 8002d20:	e79e      	b.n	8002c60 <__aeabi_dsub+0x110>
 8002d22:	4b66      	ldr	r3, [pc, #408]	@ (8002ebc <__aeabi_dsub+0x36c>)
 8002d24:	4311      	orrs	r1, r2
 8002d26:	468a      	mov	sl, r1
 8002d28:	18eb      	adds	r3, r5, r3
 8002d2a:	2900      	cmp	r1, #0
 8002d2c:	d028      	beq.n	8002d80 <__aeabi_dsub+0x230>
 8002d2e:	4566      	cmp	r6, ip
 8002d30:	d02c      	beq.n	8002d8c <__aeabi_dsub+0x23c>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d05b      	beq.n	8002dee <__aeabi_dsub+0x29e>
 8002d36:	2d00      	cmp	r5, #0
 8002d38:	d100      	bne.n	8002d3c <__aeabi_dsub+0x1ec>
 8002d3a:	e12c      	b.n	8002f96 <__aeabi_dsub+0x446>
 8002d3c:	465b      	mov	r3, fp
 8002d3e:	4666      	mov	r6, ip
 8002d40:	075f      	lsls	r7, r3, #29
 8002d42:	08d2      	lsrs	r2, r2, #3
 8002d44:	4317      	orrs	r7, r2
 8002d46:	08dd      	lsrs	r5, r3, #3
 8002d48:	003b      	movs	r3, r7
 8002d4a:	432b      	orrs	r3, r5
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x200>
 8002d4e:	e0e2      	b.n	8002f16 <__aeabi_dsub+0x3c6>
 8002d50:	2480      	movs	r4, #128	@ 0x80
 8002d52:	0324      	lsls	r4, r4, #12
 8002d54:	432c      	orrs	r4, r5
 8002d56:	0324      	lsls	r4, r4, #12
 8002d58:	4d56      	ldr	r5, [pc, #344]	@ (8002eb4 <__aeabi_dsub+0x364>)
 8002d5a:	0b24      	lsrs	r4, r4, #12
 8002d5c:	e08c      	b.n	8002e78 <__aeabi_dsub+0x328>
 8002d5e:	4659      	mov	r1, fp
 8002d60:	4311      	orrs	r1, r2
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x216>
 8002d64:	e0d5      	b.n	8002f12 <__aeabi_dsub+0x3c2>
 8002d66:	1e59      	subs	r1, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d100      	bne.n	8002d6e <__aeabi_dsub+0x21e>
 8002d6c:	e1b9      	b.n	80030e2 <__aeabi_dsub+0x592>
 8002d6e:	42bb      	cmp	r3, r7
 8002d70:	d100      	bne.n	8002d74 <__aeabi_dsub+0x224>
 8002d72:	e1b1      	b.n	80030d8 <__aeabi_dsub+0x588>
 8002d74:	2701      	movs	r7, #1
 8002d76:	000b      	movs	r3, r1
 8002d78:	2938      	cmp	r1, #56	@ 0x38
 8002d7a:	dd00      	ble.n	8002d7e <__aeabi_dsub+0x22e>
 8002d7c:	e740      	b.n	8002c00 <__aeabi_dsub+0xb0>
 8002d7e:	e72a      	b.n	8002bd6 <__aeabi_dsub+0x86>
 8002d80:	4661      	mov	r1, ip
 8002d82:	2701      	movs	r7, #1
 8002d84:	4079      	eors	r1, r7
 8002d86:	468c      	mov	ip, r1
 8002d88:	4566      	cmp	r6, ip
 8002d8a:	d1d2      	bne.n	8002d32 <__aeabi_dsub+0x1e2>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d100      	bne.n	8002d92 <__aeabi_dsub+0x242>
 8002d90:	e0c5      	b.n	8002f1e <__aeabi_dsub+0x3ce>
 8002d92:	2d00      	cmp	r5, #0
 8002d94:	d000      	beq.n	8002d98 <__aeabi_dsub+0x248>
 8002d96:	e155      	b.n	8003044 <__aeabi_dsub+0x4f4>
 8002d98:	464b      	mov	r3, r9
 8002d9a:	0025      	movs	r5, r4
 8002d9c:	4305      	orrs	r5, r0
 8002d9e:	d100      	bne.n	8002da2 <__aeabi_dsub+0x252>
 8002da0:	e212      	b.n	80031c8 <__aeabi_dsub+0x678>
 8002da2:	1e59      	subs	r1, r3, #1
 8002da4:	468c      	mov	ip, r1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d100      	bne.n	8002dac <__aeabi_dsub+0x25c>
 8002daa:	e249      	b.n	8003240 <__aeabi_dsub+0x6f0>
 8002dac:	4d41      	ldr	r5, [pc, #260]	@ (8002eb4 <__aeabi_dsub+0x364>)
 8002dae:	42ab      	cmp	r3, r5
 8002db0:	d100      	bne.n	8002db4 <__aeabi_dsub+0x264>
 8002db2:	e28f      	b.n	80032d4 <__aeabi_dsub+0x784>
 8002db4:	2701      	movs	r7, #1
 8002db6:	2938      	cmp	r1, #56	@ 0x38
 8002db8:	dc11      	bgt.n	8002dde <__aeabi_dsub+0x28e>
 8002dba:	4663      	mov	r3, ip
 8002dbc:	2b1f      	cmp	r3, #31
 8002dbe:	dd00      	ble.n	8002dc2 <__aeabi_dsub+0x272>
 8002dc0:	e25b      	b.n	800327a <__aeabi_dsub+0x72a>
 8002dc2:	4661      	mov	r1, ip
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	0027      	movs	r7, r4
 8002dc8:	1a5b      	subs	r3, r3, r1
 8002dca:	0005      	movs	r5, r0
 8002dcc:	4098      	lsls	r0, r3
 8002dce:	409f      	lsls	r7, r3
 8002dd0:	40cd      	lsrs	r5, r1
 8002dd2:	1e43      	subs	r3, r0, #1
 8002dd4:	4198      	sbcs	r0, r3
 8002dd6:	40cc      	lsrs	r4, r1
 8002dd8:	432f      	orrs	r7, r5
 8002dda:	4307      	orrs	r7, r0
 8002ddc:	44a3      	add	fp, r4
 8002dde:	18bf      	adds	r7, r7, r2
 8002de0:	4297      	cmp	r7, r2
 8002de2:	4192      	sbcs	r2, r2
 8002de4:	4252      	negs	r2, r2
 8002de6:	445a      	add	r2, fp
 8002de8:	0014      	movs	r4, r2
 8002dea:	464d      	mov	r5, r9
 8002dec:	e787      	b.n	8002cfe <__aeabi_dsub+0x1ae>
 8002dee:	4f34      	ldr	r7, [pc, #208]	@ (8002ec0 <__aeabi_dsub+0x370>)
 8002df0:	1c6b      	adds	r3, r5, #1
 8002df2:	423b      	tst	r3, r7
 8002df4:	d000      	beq.n	8002df8 <__aeabi_dsub+0x2a8>
 8002df6:	e0b6      	b.n	8002f66 <__aeabi_dsub+0x416>
 8002df8:	4659      	mov	r1, fp
 8002dfa:	0023      	movs	r3, r4
 8002dfc:	4311      	orrs	r1, r2
 8002dfe:	000f      	movs	r7, r1
 8002e00:	4303      	orrs	r3, r0
 8002e02:	2d00      	cmp	r5, #0
 8002e04:	d000      	beq.n	8002e08 <__aeabi_dsub+0x2b8>
 8002e06:	e126      	b.n	8003056 <__aeabi_dsub+0x506>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x2be>
 8002e0c:	e1c0      	b.n	8003190 <__aeabi_dsub+0x640>
 8002e0e:	2900      	cmp	r1, #0
 8002e10:	d100      	bne.n	8002e14 <__aeabi_dsub+0x2c4>
 8002e12:	e0a1      	b.n	8002f58 <__aeabi_dsub+0x408>
 8002e14:	1a83      	subs	r3, r0, r2
 8002e16:	4698      	mov	r8, r3
 8002e18:	465b      	mov	r3, fp
 8002e1a:	4540      	cmp	r0, r8
 8002e1c:	41ad      	sbcs	r5, r5
 8002e1e:	1ae3      	subs	r3, r4, r3
 8002e20:	426d      	negs	r5, r5
 8002e22:	1b5b      	subs	r3, r3, r5
 8002e24:	2580      	movs	r5, #128	@ 0x80
 8002e26:	042d      	lsls	r5, r5, #16
 8002e28:	422b      	tst	r3, r5
 8002e2a:	d100      	bne.n	8002e2e <__aeabi_dsub+0x2de>
 8002e2c:	e14b      	b.n	80030c6 <__aeabi_dsub+0x576>
 8002e2e:	465b      	mov	r3, fp
 8002e30:	1a10      	subs	r0, r2, r0
 8002e32:	4282      	cmp	r2, r0
 8002e34:	4192      	sbcs	r2, r2
 8002e36:	1b1c      	subs	r4, r3, r4
 8002e38:	0007      	movs	r7, r0
 8002e3a:	2601      	movs	r6, #1
 8002e3c:	4663      	mov	r3, ip
 8002e3e:	4252      	negs	r2, r2
 8002e40:	1aa4      	subs	r4, r4, r2
 8002e42:	4327      	orrs	r7, r4
 8002e44:	401e      	ands	r6, r3
 8002e46:	2f00      	cmp	r7, #0
 8002e48:	d100      	bne.n	8002e4c <__aeabi_dsub+0x2fc>
 8002e4a:	e142      	b.n	80030d2 <__aeabi_dsub+0x582>
 8002e4c:	422c      	tst	r4, r5
 8002e4e:	d100      	bne.n	8002e52 <__aeabi_dsub+0x302>
 8002e50:	e26d      	b.n	800332e <__aeabi_dsub+0x7de>
 8002e52:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <__aeabi_dsub+0x368>)
 8002e54:	2501      	movs	r5, #1
 8002e56:	401c      	ands	r4, r3
 8002e58:	e71b      	b.n	8002c92 <__aeabi_dsub+0x142>
 8002e5a:	42bd      	cmp	r5, r7
 8002e5c:	d100      	bne.n	8002e60 <__aeabi_dsub+0x310>
 8002e5e:	e13b      	b.n	80030d8 <__aeabi_dsub+0x588>
 8002e60:	2701      	movs	r7, #1
 8002e62:	2b38      	cmp	r3, #56	@ 0x38
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x318>
 8002e66:	e745      	b.n	8002cf4 <__aeabi_dsub+0x1a4>
 8002e68:	2780      	movs	r7, #128	@ 0x80
 8002e6a:	4659      	mov	r1, fp
 8002e6c:	043f      	lsls	r7, r7, #16
 8002e6e:	4339      	orrs	r1, r7
 8002e70:	468b      	mov	fp, r1
 8002e72:	e72a      	b.n	8002cca <__aeabi_dsub+0x17a>
 8002e74:	2400      	movs	r4, #0
 8002e76:	2700      	movs	r7, #0
 8002e78:	052d      	lsls	r5, r5, #20
 8002e7a:	4325      	orrs	r5, r4
 8002e7c:	07f6      	lsls	r6, r6, #31
 8002e7e:	4335      	orrs	r5, r6
 8002e80:	0038      	movs	r0, r7
 8002e82:	0029      	movs	r1, r5
 8002e84:	b003      	add	sp, #12
 8002e86:	bcf0      	pop	{r4, r5, r6, r7}
 8002e88:	46bb      	mov	fp, r7
 8002e8a:	46b2      	mov	sl, r6
 8002e8c:	46a9      	mov	r9, r5
 8002e8e:	46a0      	mov	r8, r4
 8002e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e92:	077b      	lsls	r3, r7, #29
 8002e94:	d004      	beq.n	8002ea0 <__aeabi_dsub+0x350>
 8002e96:	230f      	movs	r3, #15
 8002e98:	403b      	ands	r3, r7
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d000      	beq.n	8002ea0 <__aeabi_dsub+0x350>
 8002e9e:	e6e7      	b.n	8002c70 <__aeabi_dsub+0x120>
 8002ea0:	002b      	movs	r3, r5
 8002ea2:	08f8      	lsrs	r0, r7, #3
 8002ea4:	4a03      	ldr	r2, [pc, #12]	@ (8002eb4 <__aeabi_dsub+0x364>)
 8002ea6:	0767      	lsls	r7, r4, #29
 8002ea8:	4307      	orrs	r7, r0
 8002eaa:	08e5      	lsrs	r5, r4, #3
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <__aeabi_dsub+0x362>
 8002eb0:	e74a      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 8002eb2:	e0a5      	b.n	8003000 <__aeabi_dsub+0x4b0>
 8002eb4:	000007ff 	.word	0x000007ff
 8002eb8:	ff7fffff 	.word	0xff7fffff
 8002ebc:	fffff801 	.word	0xfffff801
 8002ec0:	000007fe 	.word	0x000007fe
 8002ec4:	0038      	movs	r0, r7
 8002ec6:	f000 fbc7 	bl	8003658 <__clzsi2>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	3318      	adds	r3, #24
 8002ece:	2b1f      	cmp	r3, #31
 8002ed0:	dc00      	bgt.n	8002ed4 <__aeabi_dsub+0x384>
 8002ed2:	e6a7      	b.n	8002c24 <__aeabi_dsub+0xd4>
 8002ed4:	003a      	movs	r2, r7
 8002ed6:	3808      	subs	r0, #8
 8002ed8:	4082      	lsls	r2, r0
 8002eda:	429d      	cmp	r5, r3
 8002edc:	dd00      	ble.n	8002ee0 <__aeabi_dsub+0x390>
 8002ede:	e08a      	b.n	8002ff6 <__aeabi_dsub+0x4a6>
 8002ee0:	1b5b      	subs	r3, r3, r5
 8002ee2:	1c58      	adds	r0, r3, #1
 8002ee4:	281f      	cmp	r0, #31
 8002ee6:	dc00      	bgt.n	8002eea <__aeabi_dsub+0x39a>
 8002ee8:	e1d8      	b.n	800329c <__aeabi_dsub+0x74c>
 8002eea:	0017      	movs	r7, r2
 8002eec:	3b1f      	subs	r3, #31
 8002eee:	40df      	lsrs	r7, r3
 8002ef0:	2820      	cmp	r0, #32
 8002ef2:	d005      	beq.n	8002f00 <__aeabi_dsub+0x3b0>
 8002ef4:	2340      	movs	r3, #64	@ 0x40
 8002ef6:	1a1b      	subs	r3, r3, r0
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	1e53      	subs	r3, r2, #1
 8002efc:	419a      	sbcs	r2, r3
 8002efe:	4317      	orrs	r7, r2
 8002f00:	2500      	movs	r5, #0
 8002f02:	2f00      	cmp	r7, #0
 8002f04:	d100      	bne.n	8002f08 <__aeabi_dsub+0x3b8>
 8002f06:	e0e5      	b.n	80030d4 <__aeabi_dsub+0x584>
 8002f08:	077b      	lsls	r3, r7, #29
 8002f0a:	d000      	beq.n	8002f0e <__aeabi_dsub+0x3be>
 8002f0c:	e6ab      	b.n	8002c66 <__aeabi_dsub+0x116>
 8002f0e:	002c      	movs	r4, r5
 8002f10:	e7c6      	b.n	8002ea0 <__aeabi_dsub+0x350>
 8002f12:	08c0      	lsrs	r0, r0, #3
 8002f14:	e7c6      	b.n	8002ea4 <__aeabi_dsub+0x354>
 8002f16:	2700      	movs	r7, #0
 8002f18:	2400      	movs	r4, #0
 8002f1a:	4dd1      	ldr	r5, [pc, #836]	@ (8003260 <__aeabi_dsub+0x710>)
 8002f1c:	e7ac      	b.n	8002e78 <__aeabi_dsub+0x328>
 8002f1e:	4fd1      	ldr	r7, [pc, #836]	@ (8003264 <__aeabi_dsub+0x714>)
 8002f20:	1c6b      	adds	r3, r5, #1
 8002f22:	423b      	tst	r3, r7
 8002f24:	d171      	bne.n	800300a <__aeabi_dsub+0x4ba>
 8002f26:	0023      	movs	r3, r4
 8002f28:	4303      	orrs	r3, r0
 8002f2a:	2d00      	cmp	r5, #0
 8002f2c:	d000      	beq.n	8002f30 <__aeabi_dsub+0x3e0>
 8002f2e:	e14e      	b.n	80031ce <__aeabi_dsub+0x67e>
 8002f30:	4657      	mov	r7, sl
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d100      	bne.n	8002f38 <__aeabi_dsub+0x3e8>
 8002f36:	e1b5      	b.n	80032a4 <__aeabi_dsub+0x754>
 8002f38:	2f00      	cmp	r7, #0
 8002f3a:	d00d      	beq.n	8002f58 <__aeabi_dsub+0x408>
 8002f3c:	1883      	adds	r3, r0, r2
 8002f3e:	4283      	cmp	r3, r0
 8002f40:	4180      	sbcs	r0, r0
 8002f42:	445c      	add	r4, fp
 8002f44:	4240      	negs	r0, r0
 8002f46:	1824      	adds	r4, r4, r0
 8002f48:	0222      	lsls	r2, r4, #8
 8002f4a:	d500      	bpl.n	8002f4e <__aeabi_dsub+0x3fe>
 8002f4c:	e1c8      	b.n	80032e0 <__aeabi_dsub+0x790>
 8002f4e:	001f      	movs	r7, r3
 8002f50:	4698      	mov	r8, r3
 8002f52:	4327      	orrs	r7, r4
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x408>
 8002f56:	e0bc      	b.n	80030d2 <__aeabi_dsub+0x582>
 8002f58:	4643      	mov	r3, r8
 8002f5a:	0767      	lsls	r7, r4, #29
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	431f      	orrs	r7, r3
 8002f60:	08e5      	lsrs	r5, r4, #3
 8002f62:	2300      	movs	r3, #0
 8002f64:	e04c      	b.n	8003000 <__aeabi_dsub+0x4b0>
 8002f66:	1a83      	subs	r3, r0, r2
 8002f68:	4698      	mov	r8, r3
 8002f6a:	465b      	mov	r3, fp
 8002f6c:	4540      	cmp	r0, r8
 8002f6e:	41bf      	sbcs	r7, r7
 8002f70:	1ae3      	subs	r3, r4, r3
 8002f72:	427f      	negs	r7, r7
 8002f74:	1bdb      	subs	r3, r3, r7
 8002f76:	021f      	lsls	r7, r3, #8
 8002f78:	d47c      	bmi.n	8003074 <__aeabi_dsub+0x524>
 8002f7a:	4647      	mov	r7, r8
 8002f7c:	431f      	orrs	r7, r3
 8002f7e:	d100      	bne.n	8002f82 <__aeabi_dsub+0x432>
 8002f80:	e0a6      	b.n	80030d0 <__aeabi_dsub+0x580>
 8002f82:	001c      	movs	r4, r3
 8002f84:	4647      	mov	r7, r8
 8002f86:	e645      	b.n	8002c14 <__aeabi_dsub+0xc4>
 8002f88:	4cb7      	ldr	r4, [pc, #732]	@ (8003268 <__aeabi_dsub+0x718>)
 8002f8a:	1aed      	subs	r5, r5, r3
 8002f8c:	4014      	ands	r4, r2
 8002f8e:	077b      	lsls	r3, r7, #29
 8002f90:	d000      	beq.n	8002f94 <__aeabi_dsub+0x444>
 8002f92:	e780      	b.n	8002e96 <__aeabi_dsub+0x346>
 8002f94:	e784      	b.n	8002ea0 <__aeabi_dsub+0x350>
 8002f96:	464b      	mov	r3, r9
 8002f98:	0025      	movs	r5, r4
 8002f9a:	4305      	orrs	r5, r0
 8002f9c:	d066      	beq.n	800306c <__aeabi_dsub+0x51c>
 8002f9e:	1e5f      	subs	r7, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d100      	bne.n	8002fa6 <__aeabi_dsub+0x456>
 8002fa4:	e0fc      	b.n	80031a0 <__aeabi_dsub+0x650>
 8002fa6:	4dae      	ldr	r5, [pc, #696]	@ (8003260 <__aeabi_dsub+0x710>)
 8002fa8:	42ab      	cmp	r3, r5
 8002faa:	d100      	bne.n	8002fae <__aeabi_dsub+0x45e>
 8002fac:	e15e      	b.n	800326c <__aeabi_dsub+0x71c>
 8002fae:	4666      	mov	r6, ip
 8002fb0:	2f38      	cmp	r7, #56	@ 0x38
 8002fb2:	dc00      	bgt.n	8002fb6 <__aeabi_dsub+0x466>
 8002fb4:	e0b4      	b.n	8003120 <__aeabi_dsub+0x5d0>
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	1a17      	subs	r7, r2, r0
 8002fba:	42ba      	cmp	r2, r7
 8002fbc:	4192      	sbcs	r2, r2
 8002fbe:	465b      	mov	r3, fp
 8002fc0:	4252      	negs	r2, r2
 8002fc2:	464d      	mov	r5, r9
 8002fc4:	1a9c      	subs	r4, r3, r2
 8002fc6:	e620      	b.n	8002c0a <__aeabi_dsub+0xba>
 8002fc8:	0767      	lsls	r7, r4, #29
 8002fca:	08c0      	lsrs	r0, r0, #3
 8002fcc:	4307      	orrs	r7, r0
 8002fce:	08e5      	lsrs	r5, r4, #3
 8002fd0:	e6ba      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 8002fd2:	001f      	movs	r7, r3
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	3f20      	subs	r7, #32
 8002fd8:	40f9      	lsrs	r1, r7
 8002fda:	000f      	movs	r7, r1
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d005      	beq.n	8002fec <__aeabi_dsub+0x49c>
 8002fe0:	2140      	movs	r1, #64	@ 0x40
 8002fe2:	1acb      	subs	r3, r1, r3
 8002fe4:	4659      	mov	r1, fp
 8002fe6:	4099      	lsls	r1, r3
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	4692      	mov	sl, r2
 8002fec:	4653      	mov	r3, sl
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	4193      	sbcs	r3, r2
 8002ff2:	431f      	orrs	r7, r3
 8002ff4:	e604      	b.n	8002c00 <__aeabi_dsub+0xb0>
 8002ff6:	1aeb      	subs	r3, r5, r3
 8002ff8:	4d9b      	ldr	r5, [pc, #620]	@ (8003268 <__aeabi_dsub+0x718>)
 8002ffa:	4015      	ands	r5, r2
 8002ffc:	076f      	lsls	r7, r5, #29
 8002ffe:	08ed      	lsrs	r5, r5, #3
 8003000:	032c      	lsls	r4, r5, #12
 8003002:	055d      	lsls	r5, r3, #21
 8003004:	0b24      	lsrs	r4, r4, #12
 8003006:	0d6d      	lsrs	r5, r5, #21
 8003008:	e736      	b.n	8002e78 <__aeabi_dsub+0x328>
 800300a:	4d95      	ldr	r5, [pc, #596]	@ (8003260 <__aeabi_dsub+0x710>)
 800300c:	42ab      	cmp	r3, r5
 800300e:	d100      	bne.n	8003012 <__aeabi_dsub+0x4c2>
 8003010:	e0d6      	b.n	80031c0 <__aeabi_dsub+0x670>
 8003012:	1882      	adds	r2, r0, r2
 8003014:	0021      	movs	r1, r4
 8003016:	4282      	cmp	r2, r0
 8003018:	4180      	sbcs	r0, r0
 800301a:	4459      	add	r1, fp
 800301c:	4240      	negs	r0, r0
 800301e:	1808      	adds	r0, r1, r0
 8003020:	07c7      	lsls	r7, r0, #31
 8003022:	0852      	lsrs	r2, r2, #1
 8003024:	4317      	orrs	r7, r2
 8003026:	0844      	lsrs	r4, r0, #1
 8003028:	0752      	lsls	r2, r2, #29
 800302a:	d400      	bmi.n	800302e <__aeabi_dsub+0x4de>
 800302c:	e185      	b.n	800333a <__aeabi_dsub+0x7ea>
 800302e:	220f      	movs	r2, #15
 8003030:	001d      	movs	r5, r3
 8003032:	403a      	ands	r2, r7
 8003034:	2a04      	cmp	r2, #4
 8003036:	d000      	beq.n	800303a <__aeabi_dsub+0x4ea>
 8003038:	e61a      	b.n	8002c70 <__aeabi_dsub+0x120>
 800303a:	08ff      	lsrs	r7, r7, #3
 800303c:	0764      	lsls	r4, r4, #29
 800303e:	4327      	orrs	r7, r4
 8003040:	0905      	lsrs	r5, r0, #4
 8003042:	e7dd      	b.n	8003000 <__aeabi_dsub+0x4b0>
 8003044:	465b      	mov	r3, fp
 8003046:	08d2      	lsrs	r2, r2, #3
 8003048:	075f      	lsls	r7, r3, #29
 800304a:	4317      	orrs	r7, r2
 800304c:	08dd      	lsrs	r5, r3, #3
 800304e:	e67b      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 8003050:	2700      	movs	r7, #0
 8003052:	2400      	movs	r4, #0
 8003054:	e710      	b.n	8002e78 <__aeabi_dsub+0x328>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d000      	beq.n	800305c <__aeabi_dsub+0x50c>
 800305a:	e0d6      	b.n	800320a <__aeabi_dsub+0x6ba>
 800305c:	2900      	cmp	r1, #0
 800305e:	d000      	beq.n	8003062 <__aeabi_dsub+0x512>
 8003060:	e12f      	b.n	80032c2 <__aeabi_dsub+0x772>
 8003062:	2480      	movs	r4, #128	@ 0x80
 8003064:	2600      	movs	r6, #0
 8003066:	4d7e      	ldr	r5, [pc, #504]	@ (8003260 <__aeabi_dsub+0x710>)
 8003068:	0324      	lsls	r4, r4, #12
 800306a:	e705      	b.n	8002e78 <__aeabi_dsub+0x328>
 800306c:	4666      	mov	r6, ip
 800306e:	465c      	mov	r4, fp
 8003070:	08d0      	lsrs	r0, r2, #3
 8003072:	e717      	b.n	8002ea4 <__aeabi_dsub+0x354>
 8003074:	465b      	mov	r3, fp
 8003076:	1a17      	subs	r7, r2, r0
 8003078:	42ba      	cmp	r2, r7
 800307a:	4192      	sbcs	r2, r2
 800307c:	1b1c      	subs	r4, r3, r4
 800307e:	2601      	movs	r6, #1
 8003080:	4663      	mov	r3, ip
 8003082:	4252      	negs	r2, r2
 8003084:	1aa4      	subs	r4, r4, r2
 8003086:	401e      	ands	r6, r3
 8003088:	e5c4      	b.n	8002c14 <__aeabi_dsub+0xc4>
 800308a:	1883      	adds	r3, r0, r2
 800308c:	4283      	cmp	r3, r0
 800308e:	4180      	sbcs	r0, r0
 8003090:	445c      	add	r4, fp
 8003092:	4240      	negs	r0, r0
 8003094:	1825      	adds	r5, r4, r0
 8003096:	022a      	lsls	r2, r5, #8
 8003098:	d400      	bmi.n	800309c <__aeabi_dsub+0x54c>
 800309a:	e0da      	b.n	8003252 <__aeabi_dsub+0x702>
 800309c:	4a72      	ldr	r2, [pc, #456]	@ (8003268 <__aeabi_dsub+0x718>)
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	4015      	ands	r5, r2
 80030a2:	07ea      	lsls	r2, r5, #31
 80030a4:	431a      	orrs	r2, r3
 80030a6:	0869      	lsrs	r1, r5, #1
 80030a8:	075b      	lsls	r3, r3, #29
 80030aa:	d400      	bmi.n	80030ae <__aeabi_dsub+0x55e>
 80030ac:	e14a      	b.n	8003344 <__aeabi_dsub+0x7f4>
 80030ae:	230f      	movs	r3, #15
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x568>
 80030b6:	e0fc      	b.n	80032b2 <__aeabi_dsub+0x762>
 80030b8:	1d17      	adds	r7, r2, #4
 80030ba:	4297      	cmp	r7, r2
 80030bc:	41a4      	sbcs	r4, r4
 80030be:	4264      	negs	r4, r4
 80030c0:	2502      	movs	r5, #2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	e6ec      	b.n	8002ea0 <__aeabi_dsub+0x350>
 80030c6:	4647      	mov	r7, r8
 80030c8:	001c      	movs	r4, r3
 80030ca:	431f      	orrs	r7, r3
 80030cc:	d000      	beq.n	80030d0 <__aeabi_dsub+0x580>
 80030ce:	e743      	b.n	8002f58 <__aeabi_dsub+0x408>
 80030d0:	2600      	movs	r6, #0
 80030d2:	2500      	movs	r5, #0
 80030d4:	2400      	movs	r4, #0
 80030d6:	e6cf      	b.n	8002e78 <__aeabi_dsub+0x328>
 80030d8:	08c0      	lsrs	r0, r0, #3
 80030da:	0767      	lsls	r7, r4, #29
 80030dc:	4307      	orrs	r7, r0
 80030de:	08e5      	lsrs	r5, r4, #3
 80030e0:	e632      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 80030e2:	1a87      	subs	r7, r0, r2
 80030e4:	465b      	mov	r3, fp
 80030e6:	42b8      	cmp	r0, r7
 80030e8:	4180      	sbcs	r0, r0
 80030ea:	1ae4      	subs	r4, r4, r3
 80030ec:	4240      	negs	r0, r0
 80030ee:	1a24      	subs	r4, r4, r0
 80030f0:	0223      	lsls	r3, r4, #8
 80030f2:	d428      	bmi.n	8003146 <__aeabi_dsub+0x5f6>
 80030f4:	0763      	lsls	r3, r4, #29
 80030f6:	08ff      	lsrs	r7, r7, #3
 80030f8:	431f      	orrs	r7, r3
 80030fa:	08e5      	lsrs	r5, r4, #3
 80030fc:	2301      	movs	r3, #1
 80030fe:	e77f      	b.n	8003000 <__aeabi_dsub+0x4b0>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d100      	bne.n	8003106 <__aeabi_dsub+0x5b6>
 8003104:	e673      	b.n	8002dee <__aeabi_dsub+0x29e>
 8003106:	464b      	mov	r3, r9
 8003108:	1b5f      	subs	r7, r3, r5
 800310a:	003b      	movs	r3, r7
 800310c:	2d00      	cmp	r5, #0
 800310e:	d100      	bne.n	8003112 <__aeabi_dsub+0x5c2>
 8003110:	e742      	b.n	8002f98 <__aeabi_dsub+0x448>
 8003112:	2f38      	cmp	r7, #56	@ 0x38
 8003114:	dd00      	ble.n	8003118 <__aeabi_dsub+0x5c8>
 8003116:	e0ec      	b.n	80032f2 <__aeabi_dsub+0x7a2>
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	000e      	movs	r6, r1
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	431c      	orrs	r4, r3
 8003120:	2f1f      	cmp	r7, #31
 8003122:	dc25      	bgt.n	8003170 <__aeabi_dsub+0x620>
 8003124:	2520      	movs	r5, #32
 8003126:	0023      	movs	r3, r4
 8003128:	1bed      	subs	r5, r5, r7
 800312a:	0001      	movs	r1, r0
 800312c:	40a8      	lsls	r0, r5
 800312e:	40ab      	lsls	r3, r5
 8003130:	40f9      	lsrs	r1, r7
 8003132:	1e45      	subs	r5, r0, #1
 8003134:	41a8      	sbcs	r0, r5
 8003136:	430b      	orrs	r3, r1
 8003138:	40fc      	lsrs	r4, r7
 800313a:	4318      	orrs	r0, r3
 800313c:	465b      	mov	r3, fp
 800313e:	1b1b      	subs	r3, r3, r4
 8003140:	469b      	mov	fp, r3
 8003142:	e739      	b.n	8002fb8 <__aeabi_dsub+0x468>
 8003144:	4666      	mov	r6, ip
 8003146:	2501      	movs	r5, #1
 8003148:	e562      	b.n	8002c10 <__aeabi_dsub+0xc0>
 800314a:	001f      	movs	r7, r3
 800314c:	4659      	mov	r1, fp
 800314e:	3f20      	subs	r7, #32
 8003150:	40f9      	lsrs	r1, r7
 8003152:	468c      	mov	ip, r1
 8003154:	2b20      	cmp	r3, #32
 8003156:	d005      	beq.n	8003164 <__aeabi_dsub+0x614>
 8003158:	2740      	movs	r7, #64	@ 0x40
 800315a:	4659      	mov	r1, fp
 800315c:	1afb      	subs	r3, r7, r3
 800315e:	4099      	lsls	r1, r3
 8003160:	430a      	orrs	r2, r1
 8003162:	4692      	mov	sl, r2
 8003164:	4657      	mov	r7, sl
 8003166:	1e7b      	subs	r3, r7, #1
 8003168:	419f      	sbcs	r7, r3
 800316a:	4663      	mov	r3, ip
 800316c:	431f      	orrs	r7, r3
 800316e:	e5c1      	b.n	8002cf4 <__aeabi_dsub+0x1a4>
 8003170:	003b      	movs	r3, r7
 8003172:	0025      	movs	r5, r4
 8003174:	3b20      	subs	r3, #32
 8003176:	40dd      	lsrs	r5, r3
 8003178:	2f20      	cmp	r7, #32
 800317a:	d004      	beq.n	8003186 <__aeabi_dsub+0x636>
 800317c:	2340      	movs	r3, #64	@ 0x40
 800317e:	1bdb      	subs	r3, r3, r7
 8003180:	409c      	lsls	r4, r3
 8003182:	4320      	orrs	r0, r4
 8003184:	4680      	mov	r8, r0
 8003186:	4640      	mov	r0, r8
 8003188:	1e43      	subs	r3, r0, #1
 800318a:	4198      	sbcs	r0, r3
 800318c:	4328      	orrs	r0, r5
 800318e:	e713      	b.n	8002fb8 <__aeabi_dsub+0x468>
 8003190:	2900      	cmp	r1, #0
 8003192:	d09d      	beq.n	80030d0 <__aeabi_dsub+0x580>
 8003194:	2601      	movs	r6, #1
 8003196:	4663      	mov	r3, ip
 8003198:	465c      	mov	r4, fp
 800319a:	4690      	mov	r8, r2
 800319c:	401e      	ands	r6, r3
 800319e:	e6db      	b.n	8002f58 <__aeabi_dsub+0x408>
 80031a0:	1a17      	subs	r7, r2, r0
 80031a2:	465b      	mov	r3, fp
 80031a4:	42ba      	cmp	r2, r7
 80031a6:	4192      	sbcs	r2, r2
 80031a8:	1b1c      	subs	r4, r3, r4
 80031aa:	4252      	negs	r2, r2
 80031ac:	1aa4      	subs	r4, r4, r2
 80031ae:	0223      	lsls	r3, r4, #8
 80031b0:	d4c8      	bmi.n	8003144 <__aeabi_dsub+0x5f4>
 80031b2:	0763      	lsls	r3, r4, #29
 80031b4:	08ff      	lsrs	r7, r7, #3
 80031b6:	431f      	orrs	r7, r3
 80031b8:	4666      	mov	r6, ip
 80031ba:	2301      	movs	r3, #1
 80031bc:	08e5      	lsrs	r5, r4, #3
 80031be:	e71f      	b.n	8003000 <__aeabi_dsub+0x4b0>
 80031c0:	001d      	movs	r5, r3
 80031c2:	2400      	movs	r4, #0
 80031c4:	2700      	movs	r7, #0
 80031c6:	e657      	b.n	8002e78 <__aeabi_dsub+0x328>
 80031c8:	465c      	mov	r4, fp
 80031ca:	08d0      	lsrs	r0, r2, #3
 80031cc:	e66a      	b.n	8002ea4 <__aeabi_dsub+0x354>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d100      	bne.n	80031d4 <__aeabi_dsub+0x684>
 80031d2:	e737      	b.n	8003044 <__aeabi_dsub+0x4f4>
 80031d4:	4653      	mov	r3, sl
 80031d6:	08c0      	lsrs	r0, r0, #3
 80031d8:	0767      	lsls	r7, r4, #29
 80031da:	4307      	orrs	r7, r0
 80031dc:	08e5      	lsrs	r5, r4, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x694>
 80031e2:	e5b1      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	031b      	lsls	r3, r3, #12
 80031e8:	421d      	tst	r5, r3
 80031ea:	d008      	beq.n	80031fe <__aeabi_dsub+0x6ae>
 80031ec:	4659      	mov	r1, fp
 80031ee:	08c8      	lsrs	r0, r1, #3
 80031f0:	4218      	tst	r0, r3
 80031f2:	d104      	bne.n	80031fe <__aeabi_dsub+0x6ae>
 80031f4:	08d2      	lsrs	r2, r2, #3
 80031f6:	0749      	lsls	r1, r1, #29
 80031f8:	430a      	orrs	r2, r1
 80031fa:	0017      	movs	r7, r2
 80031fc:	0005      	movs	r5, r0
 80031fe:	0f7b      	lsrs	r3, r7, #29
 8003200:	00ff      	lsls	r7, r7, #3
 8003202:	08ff      	lsrs	r7, r7, #3
 8003204:	075b      	lsls	r3, r3, #29
 8003206:	431f      	orrs	r7, r3
 8003208:	e59e      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 800320a:	08c0      	lsrs	r0, r0, #3
 800320c:	0763      	lsls	r3, r4, #29
 800320e:	4318      	orrs	r0, r3
 8003210:	08e5      	lsrs	r5, r4, #3
 8003212:	2900      	cmp	r1, #0
 8003214:	d053      	beq.n	80032be <__aeabi_dsub+0x76e>
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	031b      	lsls	r3, r3, #12
 800321a:	421d      	tst	r5, r3
 800321c:	d00a      	beq.n	8003234 <__aeabi_dsub+0x6e4>
 800321e:	4659      	mov	r1, fp
 8003220:	08cc      	lsrs	r4, r1, #3
 8003222:	421c      	tst	r4, r3
 8003224:	d106      	bne.n	8003234 <__aeabi_dsub+0x6e4>
 8003226:	2601      	movs	r6, #1
 8003228:	4663      	mov	r3, ip
 800322a:	0025      	movs	r5, r4
 800322c:	08d0      	lsrs	r0, r2, #3
 800322e:	0749      	lsls	r1, r1, #29
 8003230:	4308      	orrs	r0, r1
 8003232:	401e      	ands	r6, r3
 8003234:	0f47      	lsrs	r7, r0, #29
 8003236:	00c0      	lsls	r0, r0, #3
 8003238:	08c0      	lsrs	r0, r0, #3
 800323a:	077f      	lsls	r7, r7, #29
 800323c:	4307      	orrs	r7, r0
 800323e:	e583      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 8003240:	1883      	adds	r3, r0, r2
 8003242:	4293      	cmp	r3, r2
 8003244:	4192      	sbcs	r2, r2
 8003246:	445c      	add	r4, fp
 8003248:	4252      	negs	r2, r2
 800324a:	18a5      	adds	r5, r4, r2
 800324c:	022a      	lsls	r2, r5, #8
 800324e:	d500      	bpl.n	8003252 <__aeabi_dsub+0x702>
 8003250:	e724      	b.n	800309c <__aeabi_dsub+0x54c>
 8003252:	076f      	lsls	r7, r5, #29
 8003254:	08db      	lsrs	r3, r3, #3
 8003256:	431f      	orrs	r7, r3
 8003258:	08ed      	lsrs	r5, r5, #3
 800325a:	2301      	movs	r3, #1
 800325c:	e6d0      	b.n	8003000 <__aeabi_dsub+0x4b0>
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	000007ff 	.word	0x000007ff
 8003264:	000007fe 	.word	0x000007fe
 8003268:	ff7fffff 	.word	0xff7fffff
 800326c:	465b      	mov	r3, fp
 800326e:	08d2      	lsrs	r2, r2, #3
 8003270:	075f      	lsls	r7, r3, #29
 8003272:	4666      	mov	r6, ip
 8003274:	4317      	orrs	r7, r2
 8003276:	08dd      	lsrs	r5, r3, #3
 8003278:	e566      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 800327a:	0025      	movs	r5, r4
 800327c:	3b20      	subs	r3, #32
 800327e:	40dd      	lsrs	r5, r3
 8003280:	4663      	mov	r3, ip
 8003282:	2b20      	cmp	r3, #32
 8003284:	d005      	beq.n	8003292 <__aeabi_dsub+0x742>
 8003286:	2340      	movs	r3, #64	@ 0x40
 8003288:	4661      	mov	r1, ip
 800328a:	1a5b      	subs	r3, r3, r1
 800328c:	409c      	lsls	r4, r3
 800328e:	4320      	orrs	r0, r4
 8003290:	4680      	mov	r8, r0
 8003292:	4647      	mov	r7, r8
 8003294:	1e7b      	subs	r3, r7, #1
 8003296:	419f      	sbcs	r7, r3
 8003298:	432f      	orrs	r7, r5
 800329a:	e5a0      	b.n	8002dde <__aeabi_dsub+0x28e>
 800329c:	2120      	movs	r1, #32
 800329e:	2700      	movs	r7, #0
 80032a0:	1a09      	subs	r1, r1, r0
 80032a2:	e4d2      	b.n	8002c4a <__aeabi_dsub+0xfa>
 80032a4:	2f00      	cmp	r7, #0
 80032a6:	d100      	bne.n	80032aa <__aeabi_dsub+0x75a>
 80032a8:	e713      	b.n	80030d2 <__aeabi_dsub+0x582>
 80032aa:	465c      	mov	r4, fp
 80032ac:	0017      	movs	r7, r2
 80032ae:	2500      	movs	r5, #0
 80032b0:	e5f6      	b.n	8002ea0 <__aeabi_dsub+0x350>
 80032b2:	08d7      	lsrs	r7, r2, #3
 80032b4:	0749      	lsls	r1, r1, #29
 80032b6:	2302      	movs	r3, #2
 80032b8:	430f      	orrs	r7, r1
 80032ba:	092d      	lsrs	r5, r5, #4
 80032bc:	e6a0      	b.n	8003000 <__aeabi_dsub+0x4b0>
 80032be:	0007      	movs	r7, r0
 80032c0:	e542      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 80032c2:	465b      	mov	r3, fp
 80032c4:	2601      	movs	r6, #1
 80032c6:	075f      	lsls	r7, r3, #29
 80032c8:	08dd      	lsrs	r5, r3, #3
 80032ca:	4663      	mov	r3, ip
 80032cc:	08d2      	lsrs	r2, r2, #3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	401e      	ands	r6, r3
 80032d2:	e539      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 80032d4:	465b      	mov	r3, fp
 80032d6:	08d2      	lsrs	r2, r2, #3
 80032d8:	075f      	lsls	r7, r3, #29
 80032da:	4317      	orrs	r7, r2
 80032dc:	08dd      	lsrs	r5, r3, #3
 80032de:	e533      	b.n	8002d48 <__aeabi_dsub+0x1f8>
 80032e0:	4a1e      	ldr	r2, [pc, #120]	@ (800335c <__aeabi_dsub+0x80c>)
 80032e2:	08db      	lsrs	r3, r3, #3
 80032e4:	4022      	ands	r2, r4
 80032e6:	0757      	lsls	r7, r2, #29
 80032e8:	0252      	lsls	r2, r2, #9
 80032ea:	2501      	movs	r5, #1
 80032ec:	431f      	orrs	r7, r3
 80032ee:	0b14      	lsrs	r4, r2, #12
 80032f0:	e5c2      	b.n	8002e78 <__aeabi_dsub+0x328>
 80032f2:	000e      	movs	r6, r1
 80032f4:	2001      	movs	r0, #1
 80032f6:	e65f      	b.n	8002fb8 <__aeabi_dsub+0x468>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <__aeabi_dsub+0x7c8>
 80032fc:	464b      	mov	r3, r9
 80032fe:	1b5b      	subs	r3, r3, r5
 8003300:	469c      	mov	ip, r3
 8003302:	2d00      	cmp	r5, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x7b8>
 8003306:	e548      	b.n	8002d9a <__aeabi_dsub+0x24a>
 8003308:	2701      	movs	r7, #1
 800330a:	2b38      	cmp	r3, #56	@ 0x38
 800330c:	dd00      	ble.n	8003310 <__aeabi_dsub+0x7c0>
 800330e:	e566      	b.n	8002dde <__aeabi_dsub+0x28e>
 8003310:	2380      	movs	r3, #128	@ 0x80
 8003312:	041b      	lsls	r3, r3, #16
 8003314:	431c      	orrs	r4, r3
 8003316:	e550      	b.n	8002dba <__aeabi_dsub+0x26a>
 8003318:	1c6b      	adds	r3, r5, #1
 800331a:	4d11      	ldr	r5, [pc, #68]	@ (8003360 <__aeabi_dsub+0x810>)
 800331c:	422b      	tst	r3, r5
 800331e:	d000      	beq.n	8003322 <__aeabi_dsub+0x7d2>
 8003320:	e673      	b.n	800300a <__aeabi_dsub+0x4ba>
 8003322:	4659      	mov	r1, fp
 8003324:	0023      	movs	r3, r4
 8003326:	4311      	orrs	r1, r2
 8003328:	468a      	mov	sl, r1
 800332a:	4303      	orrs	r3, r0
 800332c:	e600      	b.n	8002f30 <__aeabi_dsub+0x3e0>
 800332e:	0767      	lsls	r7, r4, #29
 8003330:	08c0      	lsrs	r0, r0, #3
 8003332:	2300      	movs	r3, #0
 8003334:	4307      	orrs	r7, r0
 8003336:	08e5      	lsrs	r5, r4, #3
 8003338:	e662      	b.n	8003000 <__aeabi_dsub+0x4b0>
 800333a:	0764      	lsls	r4, r4, #29
 800333c:	08ff      	lsrs	r7, r7, #3
 800333e:	4327      	orrs	r7, r4
 8003340:	0905      	lsrs	r5, r0, #4
 8003342:	e65d      	b.n	8003000 <__aeabi_dsub+0x4b0>
 8003344:	08d2      	lsrs	r2, r2, #3
 8003346:	0749      	lsls	r1, r1, #29
 8003348:	4311      	orrs	r1, r2
 800334a:	000f      	movs	r7, r1
 800334c:	2302      	movs	r3, #2
 800334e:	092d      	lsrs	r5, r5, #4
 8003350:	e656      	b.n	8003000 <__aeabi_dsub+0x4b0>
 8003352:	0007      	movs	r7, r0
 8003354:	e5a4      	b.n	8002ea0 <__aeabi_dsub+0x350>
 8003356:	0038      	movs	r0, r7
 8003358:	e48f      	b.n	8002c7a <__aeabi_dsub+0x12a>
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	ff7fffff 	.word	0xff7fffff
 8003360:	000007fe 	.word	0x000007fe

08003364 <__aeabi_dcmpun>:
 8003364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003366:	46c6      	mov	lr, r8
 8003368:	031e      	lsls	r6, r3, #12
 800336a:	0b36      	lsrs	r6, r6, #12
 800336c:	46b0      	mov	r8, r6
 800336e:	4e0d      	ldr	r6, [pc, #52]	@ (80033a4 <__aeabi_dcmpun+0x40>)
 8003370:	030c      	lsls	r4, r1, #12
 8003372:	004d      	lsls	r5, r1, #1
 8003374:	005f      	lsls	r7, r3, #1
 8003376:	b500      	push	{lr}
 8003378:	0b24      	lsrs	r4, r4, #12
 800337a:	0d6d      	lsrs	r5, r5, #21
 800337c:	0d7f      	lsrs	r7, r7, #21
 800337e:	42b5      	cmp	r5, r6
 8003380:	d00b      	beq.n	800339a <__aeabi_dcmpun+0x36>
 8003382:	4908      	ldr	r1, [pc, #32]	@ (80033a4 <__aeabi_dcmpun+0x40>)
 8003384:	2000      	movs	r0, #0
 8003386:	428f      	cmp	r7, r1
 8003388:	d104      	bne.n	8003394 <__aeabi_dcmpun+0x30>
 800338a:	4646      	mov	r6, r8
 800338c:	4316      	orrs	r6, r2
 800338e:	0030      	movs	r0, r6
 8003390:	1e43      	subs	r3, r0, #1
 8003392:	4198      	sbcs	r0, r3
 8003394:	bc80      	pop	{r7}
 8003396:	46b8      	mov	r8, r7
 8003398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800339a:	4304      	orrs	r4, r0
 800339c:	2001      	movs	r0, #1
 800339e:	2c00      	cmp	r4, #0
 80033a0:	d1f8      	bne.n	8003394 <__aeabi_dcmpun+0x30>
 80033a2:	e7ee      	b.n	8003382 <__aeabi_dcmpun+0x1e>
 80033a4:	000007ff 	.word	0x000007ff

080033a8 <__aeabi_d2iz>:
 80033a8:	000b      	movs	r3, r1
 80033aa:	0002      	movs	r2, r0
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d16      	ldr	r5, [pc, #88]	@ (8003408 <__aeabi_d2iz+0x60>)
 80033b0:	030c      	lsls	r4, r1, #12
 80033b2:	b082      	sub	sp, #8
 80033b4:	0049      	lsls	r1, r1, #1
 80033b6:	2000      	movs	r0, #0
 80033b8:	9200      	str	r2, [sp, #0]
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	0b24      	lsrs	r4, r4, #12
 80033be:	0d49      	lsrs	r1, r1, #21
 80033c0:	0fde      	lsrs	r6, r3, #31
 80033c2:	42a9      	cmp	r1, r5
 80033c4:	dd04      	ble.n	80033d0 <__aeabi_d2iz+0x28>
 80033c6:	4811      	ldr	r0, [pc, #68]	@ (800340c <__aeabi_d2iz+0x64>)
 80033c8:	4281      	cmp	r1, r0
 80033ca:	dd03      	ble.n	80033d4 <__aeabi_d2iz+0x2c>
 80033cc:	4b10      	ldr	r3, [pc, #64]	@ (8003410 <__aeabi_d2iz+0x68>)
 80033ce:	18f0      	adds	r0, r6, r3
 80033d0:	b002      	add	sp, #8
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	2080      	movs	r0, #128	@ 0x80
 80033d6:	0340      	lsls	r0, r0, #13
 80033d8:	4320      	orrs	r0, r4
 80033da:	4c0e      	ldr	r4, [pc, #56]	@ (8003414 <__aeabi_d2iz+0x6c>)
 80033dc:	1a64      	subs	r4, r4, r1
 80033de:	2c1f      	cmp	r4, #31
 80033e0:	dd08      	ble.n	80033f4 <__aeabi_d2iz+0x4c>
 80033e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <__aeabi_d2iz+0x70>)
 80033e4:	1a5b      	subs	r3, r3, r1
 80033e6:	40d8      	lsrs	r0, r3
 80033e8:	0003      	movs	r3, r0
 80033ea:	4258      	negs	r0, r3
 80033ec:	2e00      	cmp	r6, #0
 80033ee:	d1ef      	bne.n	80033d0 <__aeabi_d2iz+0x28>
 80033f0:	0018      	movs	r0, r3
 80033f2:	e7ed      	b.n	80033d0 <__aeabi_d2iz+0x28>
 80033f4:	4b09      	ldr	r3, [pc, #36]	@ (800341c <__aeabi_d2iz+0x74>)
 80033f6:	9a00      	ldr	r2, [sp, #0]
 80033f8:	469c      	mov	ip, r3
 80033fa:	0003      	movs	r3, r0
 80033fc:	4461      	add	r1, ip
 80033fe:	408b      	lsls	r3, r1
 8003400:	40e2      	lsrs	r2, r4
 8003402:	4313      	orrs	r3, r2
 8003404:	e7f1      	b.n	80033ea <__aeabi_d2iz+0x42>
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	000003fe 	.word	0x000003fe
 800340c:	0000041d 	.word	0x0000041d
 8003410:	7fffffff 	.word	0x7fffffff
 8003414:	00000433 	.word	0x00000433
 8003418:	00000413 	.word	0x00000413
 800341c:	fffffbed 	.word	0xfffffbed

08003420 <__aeabi_i2d>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	2800      	cmp	r0, #0
 8003424:	d016      	beq.n	8003454 <__aeabi_i2d+0x34>
 8003426:	17c3      	asrs	r3, r0, #31
 8003428:	18c5      	adds	r5, r0, r3
 800342a:	405d      	eors	r5, r3
 800342c:	0fc4      	lsrs	r4, r0, #31
 800342e:	0028      	movs	r0, r5
 8003430:	f000 f912 	bl	8003658 <__clzsi2>
 8003434:	4b10      	ldr	r3, [pc, #64]	@ (8003478 <__aeabi_i2d+0x58>)
 8003436:	1a1b      	subs	r3, r3, r0
 8003438:	055b      	lsls	r3, r3, #21
 800343a:	0d5b      	lsrs	r3, r3, #21
 800343c:	280a      	cmp	r0, #10
 800343e:	dc14      	bgt.n	800346a <__aeabi_i2d+0x4a>
 8003440:	0002      	movs	r2, r0
 8003442:	002e      	movs	r6, r5
 8003444:	3215      	adds	r2, #21
 8003446:	4096      	lsls	r6, r2
 8003448:	220b      	movs	r2, #11
 800344a:	1a12      	subs	r2, r2, r0
 800344c:	40d5      	lsrs	r5, r2
 800344e:	032d      	lsls	r5, r5, #12
 8003450:	0b2d      	lsrs	r5, r5, #12
 8003452:	e003      	b.n	800345c <__aeabi_i2d+0x3c>
 8003454:	2400      	movs	r4, #0
 8003456:	2300      	movs	r3, #0
 8003458:	2500      	movs	r5, #0
 800345a:	2600      	movs	r6, #0
 800345c:	051b      	lsls	r3, r3, #20
 800345e:	432b      	orrs	r3, r5
 8003460:	07e4      	lsls	r4, r4, #31
 8003462:	4323      	orrs	r3, r4
 8003464:	0030      	movs	r0, r6
 8003466:	0019      	movs	r1, r3
 8003468:	bd70      	pop	{r4, r5, r6, pc}
 800346a:	380b      	subs	r0, #11
 800346c:	4085      	lsls	r5, r0
 800346e:	032d      	lsls	r5, r5, #12
 8003470:	2600      	movs	r6, #0
 8003472:	0b2d      	lsrs	r5, r5, #12
 8003474:	e7f2      	b.n	800345c <__aeabi_i2d+0x3c>
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	0000041e 	.word	0x0000041e

0800347c <__aeabi_ui2d>:
 800347c:	b510      	push	{r4, lr}
 800347e:	1e04      	subs	r4, r0, #0
 8003480:	d010      	beq.n	80034a4 <__aeabi_ui2d+0x28>
 8003482:	f000 f8e9 	bl	8003658 <__clzsi2>
 8003486:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <__aeabi_ui2d+0x44>)
 8003488:	1a1b      	subs	r3, r3, r0
 800348a:	055b      	lsls	r3, r3, #21
 800348c:	0d5b      	lsrs	r3, r3, #21
 800348e:	280a      	cmp	r0, #10
 8003490:	dc0f      	bgt.n	80034b2 <__aeabi_ui2d+0x36>
 8003492:	220b      	movs	r2, #11
 8003494:	0021      	movs	r1, r4
 8003496:	1a12      	subs	r2, r2, r0
 8003498:	40d1      	lsrs	r1, r2
 800349a:	3015      	adds	r0, #21
 800349c:	030a      	lsls	r2, r1, #12
 800349e:	4084      	lsls	r4, r0
 80034a0:	0b12      	lsrs	r2, r2, #12
 80034a2:	e001      	b.n	80034a8 <__aeabi_ui2d+0x2c>
 80034a4:	2300      	movs	r3, #0
 80034a6:	2200      	movs	r2, #0
 80034a8:	051b      	lsls	r3, r3, #20
 80034aa:	4313      	orrs	r3, r2
 80034ac:	0020      	movs	r0, r4
 80034ae:	0019      	movs	r1, r3
 80034b0:	bd10      	pop	{r4, pc}
 80034b2:	0022      	movs	r2, r4
 80034b4:	380b      	subs	r0, #11
 80034b6:	4082      	lsls	r2, r0
 80034b8:	0312      	lsls	r2, r2, #12
 80034ba:	2400      	movs	r4, #0
 80034bc:	0b12      	lsrs	r2, r2, #12
 80034be:	e7f3      	b.n	80034a8 <__aeabi_ui2d+0x2c>
 80034c0:	0000041e 	.word	0x0000041e

080034c4 <__aeabi_f2d>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	0242      	lsls	r2, r0, #9
 80034c8:	0043      	lsls	r3, r0, #1
 80034ca:	0fc4      	lsrs	r4, r0, #31
 80034cc:	20fe      	movs	r0, #254	@ 0xfe
 80034ce:	0e1b      	lsrs	r3, r3, #24
 80034d0:	1c59      	adds	r1, r3, #1
 80034d2:	0a55      	lsrs	r5, r2, #9
 80034d4:	4208      	tst	r0, r1
 80034d6:	d00c      	beq.n	80034f2 <__aeabi_f2d+0x2e>
 80034d8:	21e0      	movs	r1, #224	@ 0xe0
 80034da:	0089      	lsls	r1, r1, #2
 80034dc:	468c      	mov	ip, r1
 80034de:	076d      	lsls	r5, r5, #29
 80034e0:	0b12      	lsrs	r2, r2, #12
 80034e2:	4463      	add	r3, ip
 80034e4:	051b      	lsls	r3, r3, #20
 80034e6:	4313      	orrs	r3, r2
 80034e8:	07e4      	lsls	r4, r4, #31
 80034ea:	4323      	orrs	r3, r4
 80034ec:	0028      	movs	r0, r5
 80034ee:	0019      	movs	r1, r3
 80034f0:	bd70      	pop	{r4, r5, r6, pc}
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d114      	bne.n	8003520 <__aeabi_f2d+0x5c>
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	d01b      	beq.n	8003532 <__aeabi_f2d+0x6e>
 80034fa:	0028      	movs	r0, r5
 80034fc:	f000 f8ac 	bl	8003658 <__clzsi2>
 8003500:	280a      	cmp	r0, #10
 8003502:	dc1c      	bgt.n	800353e <__aeabi_f2d+0x7a>
 8003504:	230b      	movs	r3, #11
 8003506:	002a      	movs	r2, r5
 8003508:	1a1b      	subs	r3, r3, r0
 800350a:	40da      	lsrs	r2, r3
 800350c:	0003      	movs	r3, r0
 800350e:	3315      	adds	r3, #21
 8003510:	409d      	lsls	r5, r3
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <__aeabi_f2d+0x88>)
 8003514:	0312      	lsls	r2, r2, #12
 8003516:	1a1b      	subs	r3, r3, r0
 8003518:	055b      	lsls	r3, r3, #21
 800351a:	0b12      	lsrs	r2, r2, #12
 800351c:	0d5b      	lsrs	r3, r3, #21
 800351e:	e7e1      	b.n	80034e4 <__aeabi_f2d+0x20>
 8003520:	2d00      	cmp	r5, #0
 8003522:	d009      	beq.n	8003538 <__aeabi_f2d+0x74>
 8003524:	0b13      	lsrs	r3, r2, #12
 8003526:	2280      	movs	r2, #128	@ 0x80
 8003528:	0312      	lsls	r2, r2, #12
 800352a:	431a      	orrs	r2, r3
 800352c:	076d      	lsls	r5, r5, #29
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <__aeabi_f2d+0x8c>)
 8003530:	e7d8      	b.n	80034e4 <__aeabi_f2d+0x20>
 8003532:	2300      	movs	r3, #0
 8003534:	2200      	movs	r2, #0
 8003536:	e7d5      	b.n	80034e4 <__aeabi_f2d+0x20>
 8003538:	2200      	movs	r2, #0
 800353a:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <__aeabi_f2d+0x8c>)
 800353c:	e7d2      	b.n	80034e4 <__aeabi_f2d+0x20>
 800353e:	0003      	movs	r3, r0
 8003540:	002a      	movs	r2, r5
 8003542:	3b0b      	subs	r3, #11
 8003544:	409a      	lsls	r2, r3
 8003546:	2500      	movs	r5, #0
 8003548:	e7e3      	b.n	8003512 <__aeabi_f2d+0x4e>
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	00000389 	.word	0x00000389
 8003550:	000007ff 	.word	0x000007ff

08003554 <__aeabi_d2f>:
 8003554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003556:	004b      	lsls	r3, r1, #1
 8003558:	030f      	lsls	r7, r1, #12
 800355a:	0d5b      	lsrs	r3, r3, #21
 800355c:	4c3a      	ldr	r4, [pc, #232]	@ (8003648 <__aeabi_d2f+0xf4>)
 800355e:	0f45      	lsrs	r5, r0, #29
 8003560:	b083      	sub	sp, #12
 8003562:	0a7f      	lsrs	r7, r7, #9
 8003564:	1c5e      	adds	r6, r3, #1
 8003566:	432f      	orrs	r7, r5
 8003568:	9000      	str	r0, [sp, #0]
 800356a:	9101      	str	r1, [sp, #4]
 800356c:	0fca      	lsrs	r2, r1, #31
 800356e:	00c5      	lsls	r5, r0, #3
 8003570:	4226      	tst	r6, r4
 8003572:	d00b      	beq.n	800358c <__aeabi_d2f+0x38>
 8003574:	4935      	ldr	r1, [pc, #212]	@ (800364c <__aeabi_d2f+0xf8>)
 8003576:	185c      	adds	r4, r3, r1
 8003578:	2cfe      	cmp	r4, #254	@ 0xfe
 800357a:	dd13      	ble.n	80035a4 <__aeabi_d2f+0x50>
 800357c:	20ff      	movs	r0, #255	@ 0xff
 800357e:	2300      	movs	r3, #0
 8003580:	05c0      	lsls	r0, r0, #23
 8003582:	4318      	orrs	r0, r3
 8003584:	07d2      	lsls	r2, r2, #31
 8003586:	4310      	orrs	r0, r2
 8003588:	b003      	add	sp, #12
 800358a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358c:	433d      	orrs	r5, r7
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <__aeabi_d2f+0x42>
 8003592:	2000      	movs	r0, #0
 8003594:	e7f4      	b.n	8003580 <__aeabi_d2f+0x2c>
 8003596:	2d00      	cmp	r5, #0
 8003598:	d0f0      	beq.n	800357c <__aeabi_d2f+0x28>
 800359a:	2380      	movs	r3, #128	@ 0x80
 800359c:	03db      	lsls	r3, r3, #15
 800359e:	20ff      	movs	r0, #255	@ 0xff
 80035a0:	433b      	orrs	r3, r7
 80035a2:	e7ed      	b.n	8003580 <__aeabi_d2f+0x2c>
 80035a4:	2c00      	cmp	r4, #0
 80035a6:	dd0c      	ble.n	80035c2 <__aeabi_d2f+0x6e>
 80035a8:	9b00      	ldr	r3, [sp, #0]
 80035aa:	00ff      	lsls	r7, r7, #3
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	4183      	sbcs	r3, r0
 80035b2:	0f69      	lsrs	r1, r5, #29
 80035b4:	433b      	orrs	r3, r7
 80035b6:	430b      	orrs	r3, r1
 80035b8:	0759      	lsls	r1, r3, #29
 80035ba:	d127      	bne.n	800360c <__aeabi_d2f+0xb8>
 80035bc:	08db      	lsrs	r3, r3, #3
 80035be:	b2e0      	uxtb	r0, r4
 80035c0:	e7de      	b.n	8003580 <__aeabi_d2f+0x2c>
 80035c2:	0021      	movs	r1, r4
 80035c4:	3117      	adds	r1, #23
 80035c6:	db31      	blt.n	800362c <__aeabi_d2f+0xd8>
 80035c8:	2180      	movs	r1, #128	@ 0x80
 80035ca:	201e      	movs	r0, #30
 80035cc:	0409      	lsls	r1, r1, #16
 80035ce:	4339      	orrs	r1, r7
 80035d0:	1b00      	subs	r0, r0, r4
 80035d2:	281f      	cmp	r0, #31
 80035d4:	dd2d      	ble.n	8003632 <__aeabi_d2f+0xde>
 80035d6:	2602      	movs	r6, #2
 80035d8:	4276      	negs	r6, r6
 80035da:	1b34      	subs	r4, r6, r4
 80035dc:	000e      	movs	r6, r1
 80035de:	40e6      	lsrs	r6, r4
 80035e0:	0034      	movs	r4, r6
 80035e2:	2820      	cmp	r0, #32
 80035e4:	d004      	beq.n	80035f0 <__aeabi_d2f+0x9c>
 80035e6:	481a      	ldr	r0, [pc, #104]	@ (8003650 <__aeabi_d2f+0xfc>)
 80035e8:	4684      	mov	ip, r0
 80035ea:	4463      	add	r3, ip
 80035ec:	4099      	lsls	r1, r3
 80035ee:	430d      	orrs	r5, r1
 80035f0:	002b      	movs	r3, r5
 80035f2:	1e59      	subs	r1, r3, #1
 80035f4:	418b      	sbcs	r3, r1
 80035f6:	4323      	orrs	r3, r4
 80035f8:	0759      	lsls	r1, r3, #29
 80035fa:	d003      	beq.n	8003604 <__aeabi_d2f+0xb0>
 80035fc:	210f      	movs	r1, #15
 80035fe:	4019      	ands	r1, r3
 8003600:	2904      	cmp	r1, #4
 8003602:	d10b      	bne.n	800361c <__aeabi_d2f+0xc8>
 8003604:	019b      	lsls	r3, r3, #6
 8003606:	2000      	movs	r0, #0
 8003608:	0a5b      	lsrs	r3, r3, #9
 800360a:	e7b9      	b.n	8003580 <__aeabi_d2f+0x2c>
 800360c:	210f      	movs	r1, #15
 800360e:	4019      	ands	r1, r3
 8003610:	2904      	cmp	r1, #4
 8003612:	d104      	bne.n	800361e <__aeabi_d2f+0xca>
 8003614:	019b      	lsls	r3, r3, #6
 8003616:	0a5b      	lsrs	r3, r3, #9
 8003618:	b2e0      	uxtb	r0, r4
 800361a:	e7b1      	b.n	8003580 <__aeabi_d2f+0x2c>
 800361c:	2400      	movs	r4, #0
 800361e:	3304      	adds	r3, #4
 8003620:	0159      	lsls	r1, r3, #5
 8003622:	d5f7      	bpl.n	8003614 <__aeabi_d2f+0xc0>
 8003624:	3401      	adds	r4, #1
 8003626:	2300      	movs	r3, #0
 8003628:	b2e0      	uxtb	r0, r4
 800362a:	e7a9      	b.n	8003580 <__aeabi_d2f+0x2c>
 800362c:	2000      	movs	r0, #0
 800362e:	2300      	movs	r3, #0
 8003630:	e7a6      	b.n	8003580 <__aeabi_d2f+0x2c>
 8003632:	4c08      	ldr	r4, [pc, #32]	@ (8003654 <__aeabi_d2f+0x100>)
 8003634:	191c      	adds	r4, r3, r4
 8003636:	002b      	movs	r3, r5
 8003638:	40a5      	lsls	r5, r4
 800363a:	40c3      	lsrs	r3, r0
 800363c:	40a1      	lsls	r1, r4
 800363e:	1e68      	subs	r0, r5, #1
 8003640:	4185      	sbcs	r5, r0
 8003642:	4329      	orrs	r1, r5
 8003644:	430b      	orrs	r3, r1
 8003646:	e7d7      	b.n	80035f8 <__aeabi_d2f+0xa4>
 8003648:	000007fe 	.word	0x000007fe
 800364c:	fffffc80 	.word	0xfffffc80
 8003650:	fffffca2 	.word	0xfffffca2
 8003654:	fffffc82 	.word	0xfffffc82

08003658 <__clzsi2>:
 8003658:	211c      	movs	r1, #28
 800365a:	2301      	movs	r3, #1
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	4298      	cmp	r0, r3
 8003660:	d301      	bcc.n	8003666 <__clzsi2+0xe>
 8003662:	0c00      	lsrs	r0, r0, #16
 8003664:	3910      	subs	r1, #16
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	4298      	cmp	r0, r3
 800366a:	d301      	bcc.n	8003670 <__clzsi2+0x18>
 800366c:	0a00      	lsrs	r0, r0, #8
 800366e:	3908      	subs	r1, #8
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	4298      	cmp	r0, r3
 8003674:	d301      	bcc.n	800367a <__clzsi2+0x22>
 8003676:	0900      	lsrs	r0, r0, #4
 8003678:	3904      	subs	r1, #4
 800367a:	a202      	add	r2, pc, #8	@ (adr r2, 8003684 <__clzsi2+0x2c>)
 800367c:	5c10      	ldrb	r0, [r2, r0]
 800367e:	1840      	adds	r0, r0, r1
 8003680:	4770      	bx	lr
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	02020304 	.word	0x02020304
 8003688:	01010101 	.word	0x01010101
	...

08003694 <Max31855_Read_Temp>:

uint8_t Error=0;                                      // Thermocouple Connection acknowledge Flag
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
// ------------------- Functions ----------------
float Max31855_Read_Temp(int sensor){
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
int Temp=0;                                           // Temperature Variable
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
if(sensor == 1 )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d115      	bne.n	80036d2 <Max31855_Read_Temp+0x3e>
{
	HAL_GPIO_WritePin(SSPORT1,SSPIN1,GPIO_PIN_RESET);// Low State for SPI Communication
 80036a6:	2390      	movs	r3, #144	@ 0x90
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	2200      	movs	r2, #0
 80036ac:	2110      	movs	r1, #16
 80036ae:	0018      	movs	r0, r3
 80036b0:	f002 fbad 	bl	8005e0e <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,4,1000);                // DATA Transfer
 80036b4:	23fa      	movs	r3, #250	@ 0xfa
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4943      	ldr	r1, [pc, #268]	@ (80037c8 <Max31855_Read_Temp+0x134>)
 80036ba:	4844      	ldr	r0, [pc, #272]	@ (80037cc <Max31855_Read_Temp+0x138>)
 80036bc:	2204      	movs	r2, #4
 80036be:	f003 fecb 	bl	8007458 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT1,SSPIN1,GPIO_PIN_SET);		  // High State for SPI Communication
 80036c2:	2390      	movs	r3, #144	@ 0x90
 80036c4:	05db      	lsls	r3, r3, #23
 80036c6:	2201      	movs	r2, #1
 80036c8:	2110      	movs	r1, #16
 80036ca:	0018      	movs	r0, r3
 80036cc:	f002 fb9f 	bl	8005e0e <HAL_GPIO_WritePin>
 80036d0:	e019      	b.n	8003706 <Max31855_Read_Temp+0x72>
}
else if(sensor==2 ){
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d116      	bne.n	8003706 <Max31855_Read_Temp+0x72>
	HAL_GPIO_WritePin(SSPORT2,SSPIN2,GPIO_PIN_RESET);// Low State for SPI Communication
 80036d8:	2380      	movs	r3, #128	@ 0x80
 80036da:	0219      	lsls	r1, r3, #8
 80036dc:	2390      	movs	r3, #144	@ 0x90
 80036de:	05db      	lsls	r3, r3, #23
 80036e0:	2200      	movs	r2, #0
 80036e2:	0018      	movs	r0, r3
 80036e4:	f002 fb93 	bl	8005e0e <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,4,1000);                // DATA Transfer
 80036e8:	23fa      	movs	r3, #250	@ 0xfa
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4936      	ldr	r1, [pc, #216]	@ (80037c8 <Max31855_Read_Temp+0x134>)
 80036ee:	4837      	ldr	r0, [pc, #220]	@ (80037cc <Max31855_Read_Temp+0x138>)
 80036f0:	2204      	movs	r2, #4
 80036f2:	f003 feb1 	bl	8007458 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT2,SSPIN2,GPIO_PIN_SET);
 80036f6:	2380      	movs	r3, #128	@ 0x80
 80036f8:	0219      	lsls	r1, r3, #8
 80036fa:	2390      	movs	r3, #144	@ 0x90
 80036fc:	05db      	lsls	r3, r3, #23
 80036fe:	2201      	movs	r2, #1
 8003700:	0018      	movs	r0, r3
 8003702:	f002 fb84 	bl	8005e0e <HAL_GPIO_WritePin>
}
Error=DATARX[3]&0x07;								  // Error Detection
 8003706:	4b30      	ldr	r3, [pc, #192]	@ (80037c8 <Max31855_Read_Temp+0x134>)
 8003708:	78db      	ldrb	r3, [r3, #3]
 800370a:	2207      	movs	r2, #7
 800370c:	4013      	ands	r3, r2
 800370e:	b2da      	uxtb	r2, r3
 8003710:	4b2f      	ldr	r3, [pc, #188]	@ (80037d0 <Max31855_Read_Temp+0x13c>)
 8003712:	701a      	strb	r2, [r3, #0]
sign=(DATARX[0]&(0x80))>>7;							  // Sign Bit calculation
 8003714:	4b2c      	ldr	r3, [pc, #176]	@ (80037c8 <Max31855_Read_Temp+0x134>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	09db      	lsrs	r3, r3, #7
 800371a:	b2db      	uxtb	r3, r3
 800371c:	001a      	movs	r2, r3
 800371e:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <Max31855_Read_Temp+0x140>)
 8003720:	601a      	str	r2, [r3, #0]

if(DATARX[3] & 0x07)								  // Returns Error Number
 8003722:	4b29      	ldr	r3, [pc, #164]	@ (80037c8 <Max31855_Read_Temp+0x134>)
 8003724:	78db      	ldrb	r3, [r3, #3]
 8003726:	001a      	movs	r2, r3
 8003728:	2307      	movs	r3, #7
 800372a:	4013      	ands	r3, r2
 800372c:	d00a      	beq.n	8003744 <Max31855_Read_Temp+0xb0>
return(-1*(DATARX[3] & 0x07));
 800372e:	4b26      	ldr	r3, [pc, #152]	@ (80037c8 <Max31855_Read_Temp+0x134>)
 8003730:	78db      	ldrb	r3, [r3, #3]
 8003732:	001a      	movs	r2, r3
 8003734:	2307      	movs	r3, #7
 8003736:	4013      	ands	r3, r2
 8003738:	425b      	negs	r3, r3
 800373a:	0018      	movs	r0, r3
 800373c:	f7fd fe8c 	bl	8001458 <__aeabi_i2f>
 8003740:	1c03      	adds	r3, r0, #0
 8003742:	e03c      	b.n	80037be <Max31855_Read_Temp+0x12a>

else if(sign==1){									  // Negative Temperature
 8003744:	4b23      	ldr	r3, [pc, #140]	@ (80037d4 <Max31855_Read_Temp+0x140>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d121      	bne.n	8003790 <Max31855_Read_Temp+0xfc>
Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 800374c:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <Max31855_Read_Temp+0x134>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	4a1d      	ldr	r2, [pc, #116]	@ (80037c8 <Max31855_Read_Temp+0x134>)
 8003754:	7852      	ldrb	r2, [r2, #1]
 8003756:	0892      	lsrs	r2, r2, #2
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
Temp&=0b01111111111111;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	04db      	lsls	r3, r3, #19
 8003762:	0cdb      	lsrs	r3, r3, #19
 8003764:	60fb      	str	r3, [r7, #12]
Temp^=0b01111111111111;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a1b      	ldr	r2, [pc, #108]	@ (80037d8 <Max31855_Read_Temp+0x144>)
 800376a:	4053      	eors	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
return((double)-Temp/4);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	425b      	negs	r3, r3
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff fe54 	bl	8003420 <__aeabi_i2d>
 8003778:	2200      	movs	r2, #0
 800377a:	4b18      	ldr	r3, [pc, #96]	@ (80037dc <Max31855_Read_Temp+0x148>)
 800377c:	f7fe fac8 	bl	8001d10 <__aeabi_ddiv>
 8003780:	0002      	movs	r2, r0
 8003782:	000b      	movs	r3, r1
 8003784:	0010      	movs	r0, r2
 8003786:	0019      	movs	r1, r3
 8003788:	f7ff fee4 	bl	8003554 <__aeabi_d2f>
 800378c:	1c03      	adds	r3, r0, #0
 800378e:	e016      	b.n	80037be <Max31855_Read_Temp+0x12a>
	}

else												  // Positive Temperature
{
		Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8003790:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <Max31855_Read_Temp+0x134>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	4a0c      	ldr	r2, [pc, #48]	@ (80037c8 <Max31855_Read_Temp+0x134>)
 8003798:	7852      	ldrb	r2, [r2, #1]
 800379a:	0892      	lsrs	r2, r2, #2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
		return((double)Temp / 4);
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff fe3c 	bl	8003420 <__aeabi_i2d>
 80037a8:	2200      	movs	r2, #0
 80037aa:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <Max31855_Read_Temp+0x148>)
 80037ac:	f7fe fab0 	bl	8001d10 <__aeabi_ddiv>
 80037b0:	0002      	movs	r2, r0
 80037b2:	000b      	movs	r3, r1
 80037b4:	0010      	movs	r0, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	f7ff fecc 	bl	8003554 <__aeabi_d2f>
 80037bc:	1c03      	adds	r3, r0, #0
}
}
 80037be:	1c18      	adds	r0, r3, #0
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000218 	.word	0x20000218
 80037cc:	20000270 	.word	0x20000270
 80037d0:	20000210 	.word	0x20000210
 80037d4:	20000214 	.word	0x20000214
 80037d8:	00001fff 	.word	0x00001fff
 80037dc:	40100000 	.word	0x40100000

080037e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037e6:	f001 ff19 	bl	800561c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037ea:	f000 fe77 	bl	80044dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037ee:	f001 f835 	bl	800485c <MX_GPIO_Init>
  MX_DMA_Init();
 80037f2:	f001 f815 	bl	8004820 <MX_DMA_Init>
  MX_I2C2_Init();
 80037f6:	f000 fed1 	bl	800459c <MX_I2C2_Init>
  MX_SPI1_Init();
 80037fa:	f000 ff0f 	bl	800461c <MX_SPI1_Init>
  MX_SPI2_Init();
 80037fe:	f000 ff4d 	bl	800469c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003802:	f000 ffdd 	bl	80047c0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8003806:	f000 ff83 	bl	8004710 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800380a:	f001 f945 	bl	8004a98 <ssd1306_Init>
  ssd1306_SetCursor(30, 20);
 800380e:	2114      	movs	r1, #20
 8003810:	201e      	movs	r0, #30
 8003812:	f001 fb2d 	bl	8004e70 <ssd1306_SetCursor>
  ssd1306_WriteString("LOGO", Font_16x26, White);
 8003816:	4b99      	ldr	r3, [pc, #612]	@ (8003a7c <main+0x29c>)
 8003818:	4899      	ldr	r0, [pc, #612]	@ (8003a80 <main+0x2a0>)
 800381a:	2201      	movs	r2, #1
 800381c:	9200      	str	r2, [sp, #0]
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f001 faf8 	bl	8004e18 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8003828:	f001 f9bc 	bl	8004ba4 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 800382c:	23fa      	movs	r3, #250	@ 0xfa
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	0018      	movs	r0, r3
 8003832:	f001 ff57 	bl	80056e4 <HAL_Delay>
  ssd1306_Fill(Black);
 8003836:	2000      	movs	r0, #0
 8003838:	f001 f99a 	bl	8004b70 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800383c:	f001 f9b2 	bl	8004ba4 <ssd1306_UpdateScreen>
  HAL_TIM_Base_Start_IT(&htim1);
 8003840:	4b90      	ldr	r3, [pc, #576]	@ (8003a84 <main+0x2a4>)
 8003842:	0018      	movs	r0, r3
 8003844:	f004 fb60 	bl	8007f08 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sens_error=0;
 8003848:	4b8f      	ldr	r3, [pc, #572]	@ (8003a88 <main+0x2a8>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
	  //real_temperature_heater = Max31855_Read_Temp(1);
	  if(Error!=0){
 800384e:	4b8f      	ldr	r3, [pc, #572]	@ (8003a8c <main+0x2ac>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <main+0x82>
		  sens_error_HT = Error;
 8003856:	4b8d      	ldr	r3, [pc, #564]	@ (8003a8c <main+0x2ac>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	001a      	movs	r2, r3
 800385c:	4b8c      	ldr	r3, [pc, #560]	@ (8003a90 <main+0x2b0>)
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e006      	b.n	8003870 <main+0x90>
	  }
	  else if(Error==0){
 8003862:	4b8a      	ldr	r3, [pc, #552]	@ (8003a8c <main+0x2ac>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <main+0x90>
	  		  sens_error_HT =0;
 800386a:	4b89      	ldr	r3, [pc, #548]	@ (8003a90 <main+0x2b0>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
	  	  }
	  real_temperature_element = Max31855_Read_Temp(2);//dodac obsluge bledu
 8003870:	2002      	movs	r0, #2
 8003872:	f7ff ff0f 	bl	8003694 <Max31855_Read_Temp>
 8003876:	1c02      	adds	r2, r0, #0
 8003878:	4b86      	ldr	r3, [pc, #536]	@ (8003a94 <main+0x2b4>)
 800387a:	601a      	str	r2, [r3, #0]
	  if(Error!=0){
 800387c:	4b83      	ldr	r3, [pc, #524]	@ (8003a8c <main+0x2ac>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <main+0xb0>
	  		  sens_error_IC = Error;
 8003884:	4b81      	ldr	r3, [pc, #516]	@ (8003a8c <main+0x2ac>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	001a      	movs	r2, r3
 800388a:	4b83      	ldr	r3, [pc, #524]	@ (8003a98 <main+0x2b8>)
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e006      	b.n	800389e <main+0xbe>
	  	  }
	  else if(Error==0){
 8003890:	4b7e      	ldr	r3, [pc, #504]	@ (8003a8c <main+0x2ac>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <main+0xbe>
		  sens_error_IC =0;
 8003898:	4b7f      	ldr	r3, [pc, #508]	@ (8003a98 <main+0x2b8>)
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
	  }
	  if(sens_error_HT!=0){
 800389e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a90 <main+0x2b0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <main+0xd0>
		  sens_error=sens_error_HT;
 80038a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003a90 <main+0x2b0>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b77      	ldr	r3, [pc, #476]	@ (8003a88 <main+0x2a8>)
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e007      	b.n	80038c0 <main+0xe0>
	  }
	  else if(sens_error_IC!=0){
 80038b0:	4b79      	ldr	r3, [pc, #484]	@ (8003a98 <main+0x2b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <main+0xe0>
		  sens_error=sens_error_IC;
 80038b8:	4b77      	ldr	r3, [pc, #476]	@ (8003a98 <main+0x2b8>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b72      	ldr	r3, [pc, #456]	@ (8003a88 <main+0x2a8>)
 80038be:	601a      	str	r2, [r3, #0]
	  }
	  if(last_Error != sens_error){
 80038c0:	4b76      	ldr	r3, [pc, #472]	@ (8003a9c <main+0x2bc>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b70      	ldr	r3, [pc, #448]	@ (8003a88 <main+0x2a8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d100      	bne.n	80038ce <main+0xee>
 80038cc:	e0fd      	b.n	8003aca <main+0x2ea>
		  switch(sens_error){
 80038ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003a88 <main+0x2a8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d100      	bne.n	80038d8 <main+0xf8>
 80038d6:	e08d      	b.n	80039f4 <main+0x214>
 80038d8:	dd00      	ble.n	80038dc <main+0xfc>
 80038da:	e0cc      	b.n	8003a76 <main+0x296>
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d048      	beq.n	8003972 <main+0x192>
 80038e0:	dd00      	ble.n	80038e4 <main+0x104>
 80038e2:	e0c8      	b.n	8003a76 <main+0x296>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d100      	bne.n	80038ea <main+0x10a>
 80038e8:	e0ea      	b.n	8003ac0 <main+0x2e0>
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d000      	beq.n	80038f0 <main+0x110>
		  	  		ssd1306_SetCursor(15, 48);
		  	  		ssd1306_WriteString("SHORT TO VCC", Font_7x10, White);
		  	  		ssd1306_UpdateScreen();
		  	  		  break;
		  	  	  default:
		  	  		  break;
 80038ee:	e0c2      	b.n	8003a76 <main+0x296>
		  	  		ssd1306_Fill(Black);
 80038f0:	2000      	movs	r0, #0
 80038f2:	f001 f93d 	bl	8004b70 <ssd1306_Fill>
		  	  		ssd1306_UpdateScreen();
 80038f6:	f001 f955 	bl	8004ba4 <ssd1306_UpdateScreen>
		  	  		ssd1306_SetCursor(20, 5);
 80038fa:	2105      	movs	r1, #5
 80038fc:	2014      	movs	r0, #20
 80038fe:	f001 fab7 	bl	8004e70 <ssd1306_SetCursor>
		  	  		ssd1306_WriteString("Error", Font_16x26, White);
 8003902:	4b5e      	ldr	r3, [pc, #376]	@ (8003a7c <main+0x29c>)
 8003904:	4866      	ldr	r0, [pc, #408]	@ (8003aa0 <main+0x2c0>)
 8003906:	2201      	movs	r2, #1
 8003908:	9200      	str	r2, [sp, #0]
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f001 fa82 	bl	8004e18 <ssd1306_WriteString>
		  	  		ssd1306_SetCursor(5, 28);
 8003914:	211c      	movs	r1, #28
 8003916:	2005      	movs	r0, #5
 8003918:	f001 faaa 	bl	8004e70 <ssd1306_SetCursor>
		  	  		if(sens_error_IC!=0){
 800391c:	4b5e      	ldr	r3, [pc, #376]	@ (8003a98 <main+0x2b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <main+0x158>
		  	  		ssd1306_WriteString("Sensor IC", Font_11x18, White);
 8003924:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa4 <main+0x2c4>)
 8003926:	4860      	ldr	r0, [pc, #384]	@ (8003aa8 <main+0x2c8>)
 8003928:	2201      	movs	r2, #1
 800392a:	9200      	str	r2, [sp, #0]
 800392c:	6819      	ldr	r1, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f001 fa71 	bl	8004e18 <ssd1306_WriteString>
 8003936:	e00c      	b.n	8003952 <main+0x172>
		  	  		else if(sens_error_HT!=0){
 8003938:	4b55      	ldr	r3, [pc, #340]	@ (8003a90 <main+0x2b0>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <main+0x172>
		  	  			ssd1306_WriteString("Sensor HEAT", Font_11x18, White);
 8003940:	4b58      	ldr	r3, [pc, #352]	@ (8003aa4 <main+0x2c4>)
 8003942:	485a      	ldr	r0, [pc, #360]	@ (8003aac <main+0x2cc>)
 8003944:	2201      	movs	r2, #1
 8003946:	9200      	str	r2, [sp, #0]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f001 fa63 	bl	8004e18 <ssd1306_WriteString>
		  	  		ssd1306_SetCursor(15, 48);
 8003952:	2130      	movs	r1, #48	@ 0x30
 8003954:	200f      	movs	r0, #15
 8003956:	f001 fa8b 	bl	8004e70 <ssd1306_SetCursor>
		  	  		ssd1306_WriteString("NOT CONNECTED", Font_7x10, White);
 800395a:	4b55      	ldr	r3, [pc, #340]	@ (8003ab0 <main+0x2d0>)
 800395c:	4855      	ldr	r0, [pc, #340]	@ (8003ab4 <main+0x2d4>)
 800395e:	2201      	movs	r2, #1
 8003960:	9200      	str	r2, [sp, #0]
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f001 fa56 	bl	8004e18 <ssd1306_WriteString>
		  	  		ssd1306_UpdateScreen();
 800396c:	f001 f91a 	bl	8004ba4 <ssd1306_UpdateScreen>
		  	  		break;
 8003970:	e0a7      	b.n	8003ac2 <main+0x2e2>
		  	  		ssd1306_Fill(Black);
 8003972:	2000      	movs	r0, #0
 8003974:	f001 f8fc 	bl	8004b70 <ssd1306_Fill>
		  	  		ssd1306_UpdateScreen();
 8003978:	f001 f914 	bl	8004ba4 <ssd1306_UpdateScreen>
		  	  		ssd1306_SetCursor(20, 5);
 800397c:	2105      	movs	r1, #5
 800397e:	2014      	movs	r0, #20
 8003980:	f001 fa76 	bl	8004e70 <ssd1306_SetCursor>
		  	  		ssd1306_WriteString("Error", Font_16x26, White);
 8003984:	4b3d      	ldr	r3, [pc, #244]	@ (8003a7c <main+0x29c>)
 8003986:	4846      	ldr	r0, [pc, #280]	@ (8003aa0 <main+0x2c0>)
 8003988:	2201      	movs	r2, #1
 800398a:	9200      	str	r2, [sp, #0]
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f001 fa41 	bl	8004e18 <ssd1306_WriteString>
		  	  		ssd1306_SetCursor(5, 28);
 8003996:	211c      	movs	r1, #28
 8003998:	2005      	movs	r0, #5
 800399a:	f001 fa69 	bl	8004e70 <ssd1306_SetCursor>
		  	  		if(sens_error_IC!=0){
 800399e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a98 <main+0x2b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <main+0x1da>
		  	  			ssd1306_WriteString("Sensor IC", Font_11x18, White);
 80039a6:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa4 <main+0x2c4>)
 80039a8:	483f      	ldr	r0, [pc, #252]	@ (8003aa8 <main+0x2c8>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f001 fa30 	bl	8004e18 <ssd1306_WriteString>
 80039b8:	e00c      	b.n	80039d4 <main+0x1f4>
		  	  		else if(sens_error_HT!=0){
 80039ba:	4b35      	ldr	r3, [pc, #212]	@ (8003a90 <main+0x2b0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <main+0x1f4>
		  	  			ssd1306_WriteString("Sensor HEAT", Font_11x18, White);
 80039c2:	4b38      	ldr	r3, [pc, #224]	@ (8003aa4 <main+0x2c4>)
 80039c4:	4839      	ldr	r0, [pc, #228]	@ (8003aac <main+0x2cc>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	9200      	str	r2, [sp, #0]
 80039ca:	6819      	ldr	r1, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f001 fa22 	bl	8004e18 <ssd1306_WriteString>
		  	  		ssd1306_SetCursor(15, 48);
 80039d4:	2130      	movs	r1, #48	@ 0x30
 80039d6:	200f      	movs	r0, #15
 80039d8:	f001 fa4a 	bl	8004e70 <ssd1306_SetCursor>
		  	  		ssd1306_WriteString("SHORT TO GND", Font_7x10, White);
 80039dc:	4b34      	ldr	r3, [pc, #208]	@ (8003ab0 <main+0x2d0>)
 80039de:	4836      	ldr	r0, [pc, #216]	@ (8003ab8 <main+0x2d8>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	9200      	str	r2, [sp, #0]
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f001 fa15 	bl	8004e18 <ssd1306_WriteString>
		  	  		ssd1306_UpdateScreen();
 80039ee:	f001 f8d9 	bl	8004ba4 <ssd1306_UpdateScreen>
		  	  		break;
 80039f2:	e066      	b.n	8003ac2 <main+0x2e2>
		  	  		ssd1306_Fill(Black);
 80039f4:	2000      	movs	r0, #0
 80039f6:	f001 f8bb 	bl	8004b70 <ssd1306_Fill>
		  	  		ssd1306_UpdateScreen();
 80039fa:	f001 f8d3 	bl	8004ba4 <ssd1306_UpdateScreen>
		  	  		ssd1306_SetCursor(20, 5);
 80039fe:	2105      	movs	r1, #5
 8003a00:	2014      	movs	r0, #20
 8003a02:	f001 fa35 	bl	8004e70 <ssd1306_SetCursor>
		  	  		ssd1306_WriteString("Error", Font_16x26, White);
 8003a06:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <main+0x29c>)
 8003a08:	4825      	ldr	r0, [pc, #148]	@ (8003aa0 <main+0x2c0>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	9200      	str	r2, [sp, #0]
 8003a0e:	6819      	ldr	r1, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f001 fa00 	bl	8004e18 <ssd1306_WriteString>
		  	  		ssd1306_SetCursor(15, 28);
 8003a18:	211c      	movs	r1, #28
 8003a1a:	200f      	movs	r0, #15
 8003a1c:	f001 fa28 	bl	8004e70 <ssd1306_SetCursor>
		  	  		if(sens_error_IC!=0){
 8003a20:	4b1d      	ldr	r3, [pc, #116]	@ (8003a98 <main+0x2b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d009      	beq.n	8003a3c <main+0x25c>
		  	  			ssd1306_WriteString("Sensor IC", Font_11x18, White);
 8003a28:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa4 <main+0x2c4>)
 8003a2a:	481f      	ldr	r0, [pc, #124]	@ (8003aa8 <main+0x2c8>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	9200      	str	r2, [sp, #0]
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f001 f9ef 	bl	8004e18 <ssd1306_WriteString>
 8003a3a:	e00c      	b.n	8003a56 <main+0x276>
		  	  		else if(sens_error_HT!=0){
 8003a3c:	4b14      	ldr	r3, [pc, #80]	@ (8003a90 <main+0x2b0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <main+0x276>
		  	  			ssd1306_WriteString("Sensor HEAT", Font_11x18, White);
 8003a44:	4b17      	ldr	r3, [pc, #92]	@ (8003aa4 <main+0x2c4>)
 8003a46:	4819      	ldr	r0, [pc, #100]	@ (8003aac <main+0x2cc>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	9200      	str	r2, [sp, #0]
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f001 f9e1 	bl	8004e18 <ssd1306_WriteString>
		  	  		ssd1306_SetCursor(15, 48);
 8003a56:	2130      	movs	r1, #48	@ 0x30
 8003a58:	200f      	movs	r0, #15
 8003a5a:	f001 fa09 	bl	8004e70 <ssd1306_SetCursor>
		  	  		ssd1306_WriteString("SHORT TO VCC", Font_7x10, White);
 8003a5e:	4b14      	ldr	r3, [pc, #80]	@ (8003ab0 <main+0x2d0>)
 8003a60:	4816      	ldr	r0, [pc, #88]	@ (8003abc <main+0x2dc>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	9200      	str	r2, [sp, #0]
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f001 f9d4 	bl	8004e18 <ssd1306_WriteString>
		  	  		ssd1306_UpdateScreen();
 8003a70:	f001 f898 	bl	8004ba4 <ssd1306_UpdateScreen>
		  	  		  break;
 8003a74:	e025      	b.n	8003ac2 <main+0x2e2>
		  	  		  break;
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	e023      	b.n	8003ac2 <main+0x2e2>
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	0800e350 	.word	0x0800e350
 8003a80:	0800b9b0 	.word	0x0800b9b0
 8003a84:	200003c0 	.word	0x200003c0
 8003a88:	200004cc 	.word	0x200004cc
 8003a8c:	20000210 	.word	0x20000210
 8003a90:	200004c4 	.word	0x200004c4
 8003a94:	2000049c 	.word	0x2000049c
 8003a98:	200004c8 	.word	0x200004c8
 8003a9c:	20000490 	.word	0x20000490
 8003aa0:	0800b9b8 	.word	0x0800b9b8
 8003aa4:	0800e344 	.word	0x0800e344
 8003aa8:	0800b9c0 	.word	0x0800b9c0
 8003aac:	0800b9cc 	.word	0x0800b9cc
 8003ab0:	0800e338 	.word	0x0800e338
 8003ab4:	0800b9d8 	.word	0x0800b9d8
 8003ab8:	0800b9e8 	.word	0x0800b9e8
 8003abc:	0800b9f8 	.word	0x0800b9f8
		  	  		  break;
 8003ac0:	46c0      	nop			@ (mov r8, r8)
		  	  	  }
		  last_Error = sens_error;
 8003ac2:	4bd7      	ldr	r3, [pc, #860]	@ (8003e20 <main+0x640>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4bd7      	ldr	r3, [pc, #860]	@ (8003e24 <main+0x644>)
 8003ac8:	601a      	str	r2, [r3, #0]
	  }


	  if(sens_error == 0){
 8003aca:	4bd5      	ldr	r3, [pc, #852]	@ (8003e20 <main+0x640>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <main+0x2f6>
 8003ad2:	f000 fbed 	bl	80042b0 <main+0xad0>
		  if(real_temperature_element_last!=real_temperature_element||real_temperature_heater_last!=real_temperature_heater){
 8003ad6:	4bd4      	ldr	r3, [pc, #848]	@ (8003e28 <main+0x648>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4bd4      	ldr	r3, [pc, #848]	@ (8003e2c <main+0x64c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	1c19      	adds	r1, r3, #0
 8003ae0:	1c10      	adds	r0, r2, #0
 8003ae2:	f7fc fced 	bl	80004c0 <__aeabi_fcmpeq>
 8003ae6:	1e03      	subs	r3, r0, #0
 8003ae8:	d009      	beq.n	8003afe <main+0x31e>
 8003aea:	4bd1      	ldr	r3, [pc, #836]	@ (8003e30 <main+0x650>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4bd1      	ldr	r3, [pc, #836]	@ (8003e34 <main+0x654>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	1c19      	adds	r1, r3, #0
 8003af4:	1c10      	adds	r0, r2, #0
 8003af6:	f7fc fce3 	bl	80004c0 <__aeabi_fcmpeq>
 8003afa:	1e03      	subs	r3, r0, #0
 8003afc:	d15d      	bne.n	8003bba <main+0x3da>
			  ssd1306_FillRectangle(5, 5, 102, 14, Black);
 8003afe:	2300      	movs	r3, #0
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	230e      	movs	r3, #14
 8003b04:	2266      	movs	r2, #102	@ 0x66
 8003b06:	2105      	movs	r1, #5
 8003b08:	2005      	movs	r0, #5
 8003b0a:	f001 f9cb 	bl	8004ea4 <ssd1306_FillRectangle>
			  ssd1306_UpdateScreen();
 8003b0e:	f001 f849 	bl	8004ba4 <ssd1306_UpdateScreen>
			  ssd1306_SetCursor(5, 5);
 8003b12:	2105      	movs	r1, #5
 8003b14:	2005      	movs	r0, #5
 8003b16:	f001 f9ab 	bl	8004e70 <ssd1306_SetCursor>
			  ssd1306_WriteString("IC:", Font_7x10, White);
 8003b1a:	4bc7      	ldr	r3, [pc, #796]	@ (8003e38 <main+0x658>)
 8003b1c:	48c7      	ldr	r0, [pc, #796]	@ (8003e3c <main+0x65c>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	9200      	str	r2, [sp, #0]
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f001 f976 	bl	8004e18 <ssd1306_WriteString>
			  sprintf(temp, "%.1f", real_temperature_element);
 8003b2c:	4bbf      	ldr	r3, [pc, #764]	@ (8003e2c <main+0x64c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	1c18      	adds	r0, r3, #0
 8003b32:	f7ff fcc7 	bl	80034c4 <__aeabi_f2d>
 8003b36:	0002      	movs	r2, r0
 8003b38:	000b      	movs	r3, r1
 8003b3a:	49c1      	ldr	r1, [pc, #772]	@ (8003e40 <main+0x660>)
 8003b3c:	48c1      	ldr	r0, [pc, #772]	@ (8003e44 <main+0x664>)
 8003b3e:	f005 fd61 	bl	8009604 <siprintf>
			  ssd1306_SetCursor(27, 5);
 8003b42:	2105      	movs	r1, #5
 8003b44:	201b      	movs	r0, #27
 8003b46:	f001 f993 	bl	8004e70 <ssd1306_SetCursor>
			  ssd1306_WriteString(temp, Font_7x10, White);
 8003b4a:	4bbb      	ldr	r3, [pc, #748]	@ (8003e38 <main+0x658>)
 8003b4c:	48bd      	ldr	r0, [pc, #756]	@ (8003e44 <main+0x664>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	9200      	str	r2, [sp, #0]
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f001 f95e 	bl	8004e18 <ssd1306_WriteString>
			  ssd1306_SetCursor(70, 5);
 8003b5c:	2105      	movs	r1, #5
 8003b5e:	2046      	movs	r0, #70	@ 0x46
 8003b60:	f001 f986 	bl	8004e70 <ssd1306_SetCursor>
			  ssd1306_WriteString("HT:", Font_7x10, White);
 8003b64:	4bb4      	ldr	r3, [pc, #720]	@ (8003e38 <main+0x658>)
 8003b66:	48b8      	ldr	r0, [pc, #736]	@ (8003e48 <main+0x668>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	9200      	str	r2, [sp, #0]
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f001 f951 	bl	8004e18 <ssd1306_WriteString>
			  sprintf(temp, "%.1f", real_temperature_heater);
 8003b76:	4baf      	ldr	r3, [pc, #700]	@ (8003e34 <main+0x654>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	1c18      	adds	r0, r3, #0
 8003b7c:	f7ff fca2 	bl	80034c4 <__aeabi_f2d>
 8003b80:	0002      	movs	r2, r0
 8003b82:	000b      	movs	r3, r1
 8003b84:	49ae      	ldr	r1, [pc, #696]	@ (8003e40 <main+0x660>)
 8003b86:	48af      	ldr	r0, [pc, #700]	@ (8003e44 <main+0x664>)
 8003b88:	f005 fd3c 	bl	8009604 <siprintf>
			  ssd1306_SetCursor(92, 5);
 8003b8c:	2105      	movs	r1, #5
 8003b8e:	205c      	movs	r0, #92	@ 0x5c
 8003b90:	f001 f96e 	bl	8004e70 <ssd1306_SetCursor>
			  ssd1306_WriteString(temp, Font_7x10, White);
 8003b94:	4ba8      	ldr	r3, [pc, #672]	@ (8003e38 <main+0x658>)
 8003b96:	48ab      	ldr	r0, [pc, #684]	@ (8003e44 <main+0x664>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	9200      	str	r2, [sp, #0]
 8003b9c:	6819      	ldr	r1, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f001 f939 	bl	8004e18 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8003ba6:	f000 fffd 	bl	8004ba4 <ssd1306_UpdateScreen>
			  real_temperature_element_last=real_temperature_element;
 8003baa:	4ba0      	ldr	r3, [pc, #640]	@ (8003e2c <main+0x64c>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b9e      	ldr	r3, [pc, #632]	@ (8003e28 <main+0x648>)
 8003bb0:	601a      	str	r2, [r3, #0]
			  real_temperature_heater_last=real_temperature_heater;
 8003bb2:	4ba0      	ldr	r3, [pc, #640]	@ (8003e34 <main+0x654>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b9e      	ldr	r3, [pc, #632]	@ (8003e30 <main+0x650>)
 8003bb8:	601a      	str	r2, [r3, #0]
		  }
		  if(set_temperature!=set_temperature_last){
 8003bba:	4ba4      	ldr	r3, [pc, #656]	@ (8003e4c <main+0x66c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f7fd fc4a 	bl	8001458 <__aeabi_i2f>
 8003bc4:	1c02      	adds	r2, r0, #0
 8003bc6:	4ba2      	ldr	r3, [pc, #648]	@ (8003e50 <main+0x670>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c19      	adds	r1, r3, #0
 8003bcc:	1c10      	adds	r0, r2, #0
 8003bce:	f7fc fc77 	bl	80004c0 <__aeabi_fcmpeq>
 8003bd2:	1e03      	subs	r3, r0, #0
 8003bd4:	d130      	bne.n	8003c38 <main+0x458>
			  	  	  ssd1306_FillRectangle(5, 15, 44, 15, Black);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	230f      	movs	r3, #15
 8003bdc:	222c      	movs	r2, #44	@ 0x2c
 8003bde:	210f      	movs	r1, #15
 8003be0:	2005      	movs	r0, #5
 8003be2:	f001 f95f 	bl	8004ea4 <ssd1306_FillRectangle>
			  	  	  ssd1306_UpdateScreen();
 8003be6:	f000 ffdd 	bl	8004ba4 <ssd1306_UpdateScreen>
		  			  ssd1306_SetCursor(5, 15);
 8003bea:	210f      	movs	r1, #15
 8003bec:	2005      	movs	r0, #5
 8003bee:	f001 f93f 	bl	8004e70 <ssd1306_SetCursor>
		  			  ssd1306_WriteString("Set:", Font_7x10, White);
 8003bf2:	4b91      	ldr	r3, [pc, #580]	@ (8003e38 <main+0x658>)
 8003bf4:	4897      	ldr	r0, [pc, #604]	@ (8003e54 <main+0x674>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	9200      	str	r2, [sp, #0]
 8003bfa:	6819      	ldr	r1, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f001 f90a 	bl	8004e18 <ssd1306_WriteString>
		  			  sprintf(temp, "%.1f", set_temperature);
 8003c04:	4b92      	ldr	r3, [pc, #584]	@ (8003e50 <main+0x670>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	1c18      	adds	r0, r3, #0
 8003c0a:	f7ff fc5b 	bl	80034c4 <__aeabi_f2d>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	000b      	movs	r3, r1
 8003c12:	498b      	ldr	r1, [pc, #556]	@ (8003e40 <main+0x660>)
 8003c14:	488b      	ldr	r0, [pc, #556]	@ (8003e44 <main+0x664>)
 8003c16:	f005 fcf5 	bl	8009604 <siprintf>
		  			  ssd1306_SetCursor(34, 15);
 8003c1a:	210f      	movs	r1, #15
 8003c1c:	2022      	movs	r0, #34	@ 0x22
 8003c1e:	f001 f927 	bl	8004e70 <ssd1306_SetCursor>
		  			  ssd1306_WriteString(temp, Font_7x10, White);
 8003c22:	4b85      	ldr	r3, [pc, #532]	@ (8003e38 <main+0x658>)
 8003c24:	4887      	ldr	r0, [pc, #540]	@ (8003e44 <main+0x664>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	9200      	str	r2, [sp, #0]
 8003c2a:	6819      	ldr	r1, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f001 f8f2 	bl	8004e18 <ssd1306_WriteString>
		  			  ssd1306_UpdateScreen();
 8003c34:	f000 ffb6 	bl	8004ba4 <ssd1306_UpdateScreen>
		  }
		  if(!sub_menu){
 8003c38:	4b87      	ldr	r3, [pc, #540]	@ (8003e58 <main+0x678>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4053      	eors	r3, r2
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d100      	bne.n	8003c48 <main+0x468>
 8003c46:	e0d1      	b.n	8003dec <main+0x60c>
			  if(turn_CW_CCW==2){
 8003c48:	4b84      	ldr	r3, [pc, #528]	@ (8003e5c <main+0x67c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d10c      	bne.n	8003c6a <main+0x48a>
			  			  menu++;
 8003c50:	4b83      	ldr	r3, [pc, #524]	@ (8003e60 <main+0x680>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	4b82      	ldr	r3, [pc, #520]	@ (8003e60 <main+0x680>)
 8003c58:	601a      	str	r2, [r3, #0]
			  			  if(menu>2){
 8003c5a:	4b81      	ldr	r3, [pc, #516]	@ (8003e60 <main+0x680>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	dd13      	ble.n	8003c8a <main+0x4aa>
			  			  	menu=0;
 8003c62:	4b7f      	ldr	r3, [pc, #508]	@ (8003e60 <main+0x680>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e00f      	b.n	8003c8a <main+0x4aa>
			  			  }
			  		  }
			  		  else if(turn_CW_CCW==1){
 8003c6a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e5c <main+0x67c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d10b      	bne.n	8003c8a <main+0x4aa>
			  			  menu--;
 8003c72:	4b7b      	ldr	r3, [pc, #492]	@ (8003e60 <main+0x680>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	1e5a      	subs	r2, r3, #1
 8003c78:	4b79      	ldr	r3, [pc, #484]	@ (8003e60 <main+0x680>)
 8003c7a:	601a      	str	r2, [r3, #0]
			  			  if(menu<0){
 8003c7c:	4b78      	ldr	r3, [pc, #480]	@ (8003e60 <main+0x680>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	da02      	bge.n	8003c8a <main+0x4aa>
			  				  menu=2;
 8003c84:	4b76      	ldr	r3, [pc, #472]	@ (8003e60 <main+0x680>)
 8003c86:	2202      	movs	r2, #2
 8003c88:	601a      	str	r2, [r3, #0]
			  			  }
			  		  }
			  		  turn_CW_CCW=0;
 8003c8a:	4b74      	ldr	r3, [pc, #464]	@ (8003e5c <main+0x67c>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
			  if(menu_last!=menu){
 8003c90:	4b74      	ldr	r3, [pc, #464]	@ (8003e64 <main+0x684>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b72      	ldr	r3, [pc, #456]	@ (8003e60 <main+0x680>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d100      	bne.n	8003c9e <main+0x4be>
 8003c9c:	e09c      	b.n	8003dd8 <main+0x5f8>
				  switch(menu){
 8003c9e:	4b70      	ldr	r3, [pc, #448]	@ (8003e60 <main+0x680>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d064      	beq.n	8003d70 <main+0x590>
 8003ca6:	dd00      	ble.n	8003caa <main+0x4ca>
 8003ca8:	e091      	b.n	8003dce <main+0x5ee>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <main+0x4d4>
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d02f      	beq.n	8003d12 <main+0x532>
						  ssd1306_WriteString("Source", Font_11x18, White);
						  ssd1306_UpdateScreen();
						  break;
					  default:

						  break;
 8003cb2:	e08c      	b.n	8003dce <main+0x5ee>
						  ssd1306_FillRectangle(5, 25, 128, 64, Black);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2340      	movs	r3, #64	@ 0x40
 8003cba:	2280      	movs	r2, #128	@ 0x80
 8003cbc:	2119      	movs	r1, #25
 8003cbe:	2005      	movs	r0, #5
 8003cc0:	f001 f8f0 	bl	8004ea4 <ssd1306_FillRectangle>
						  ssd1306_UpdateScreen();
 8003cc4:	f000 ff6e 	bl	8004ba4 <ssd1306_UpdateScreen>
						  ssd1306_FillRectangle(5, 25, 17, 42, White);
 8003cc8:	2301      	movs	r3, #1
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	232a      	movs	r3, #42	@ 0x2a
 8003cce:	2211      	movs	r2, #17
 8003cd0:	2119      	movs	r1, #25
 8003cd2:	2005      	movs	r0, #5
 8003cd4:	f001 f8e6 	bl	8004ea4 <ssd1306_FillRectangle>
						  ssd1306_SetCursor(5, 25);
 8003cd8:	2119      	movs	r1, #25
 8003cda:	2005      	movs	r0, #5
 8003cdc:	f001 f8c8 	bl	8004e70 <ssd1306_SetCursor>
						  ssd1306_WriteString("Source", Font_11x18, Black);
 8003ce0:	4b61      	ldr	r3, [pc, #388]	@ (8003e68 <main+0x688>)
 8003ce2:	4862      	ldr	r0, [pc, #392]	@ (8003e6c <main+0x68c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	9200      	str	r2, [sp, #0]
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f001 f893 	bl	8004e18 <ssd1306_WriteString>
						  ssd1306_SetCursor(5, 45);
 8003cf2:	212d      	movs	r1, #45	@ 0x2d
 8003cf4:	2005      	movs	r0, #5
 8003cf6:	f001 f8bb 	bl	8004e70 <ssd1306_SetCursor>
						  ssd1306_WriteString("Temp", Font_11x18, White);
 8003cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8003e68 <main+0x688>)
 8003cfc:	485c      	ldr	r0, [pc, #368]	@ (8003e70 <main+0x690>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	9200      	str	r2, [sp, #0]
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f001 f886 	bl	8004e18 <ssd1306_WriteString>
						  ssd1306_UpdateScreen();
 8003d0c:	f000 ff4a 	bl	8004ba4 <ssd1306_UpdateScreen>
						  break;
 8003d10:	e05e      	b.n	8003dd0 <main+0x5f0>
						  ssd1306_FillRectangle(5, 25, 128, 64, Black);
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2340      	movs	r3, #64	@ 0x40
 8003d18:	2280      	movs	r2, #128	@ 0x80
 8003d1a:	2119      	movs	r1, #25
 8003d1c:	2005      	movs	r0, #5
 8003d1e:	f001 f8c1 	bl	8004ea4 <ssd1306_FillRectangle>
						  ssd1306_UpdateScreen();
 8003d22:	f000 ff3f 	bl	8004ba4 <ssd1306_UpdateScreen>
						  ssd1306_FillRectangle(5, 25, 17, 42, White);
 8003d26:	2301      	movs	r3, #1
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	232a      	movs	r3, #42	@ 0x2a
 8003d2c:	2211      	movs	r2, #17
 8003d2e:	2119      	movs	r1, #25
 8003d30:	2005      	movs	r0, #5
 8003d32:	f001 f8b7 	bl	8004ea4 <ssd1306_FillRectangle>
						  ssd1306_SetCursor(5, 25);
 8003d36:	2119      	movs	r1, #25
 8003d38:	2005      	movs	r0, #5
 8003d3a:	f001 f899 	bl	8004e70 <ssd1306_SetCursor>
						  ssd1306_WriteString("Temp", Font_11x18, Black);
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e68 <main+0x688>)
 8003d40:	484b      	ldr	r0, [pc, #300]	@ (8003e70 <main+0x690>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	9200      	str	r2, [sp, #0]
 8003d46:	6819      	ldr	r1, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f001 f864 	bl	8004e18 <ssd1306_WriteString>
						  ssd1306_SetCursor(5, 45);
 8003d50:	212d      	movs	r1, #45	@ 0x2d
 8003d52:	2005      	movs	r0, #5
 8003d54:	f001 f88c 	bl	8004e70 <ssd1306_SetCursor>
						  ssd1306_WriteString("Heater OFF", Font_11x18, White);
 8003d58:	4b43      	ldr	r3, [pc, #268]	@ (8003e68 <main+0x688>)
 8003d5a:	4846      	ldr	r0, [pc, #280]	@ (8003e74 <main+0x694>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	9200      	str	r2, [sp, #0]
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f001 f857 	bl	8004e18 <ssd1306_WriteString>
						  ssd1306_UpdateScreen();
 8003d6a:	f000 ff1b 	bl	8004ba4 <ssd1306_UpdateScreen>
						  break;
 8003d6e:	e02f      	b.n	8003dd0 <main+0x5f0>
						  ssd1306_FillRectangle(5, 25, 128, 64, Black);
 8003d70:	2300      	movs	r3, #0
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2340      	movs	r3, #64	@ 0x40
 8003d76:	2280      	movs	r2, #128	@ 0x80
 8003d78:	2119      	movs	r1, #25
 8003d7a:	2005      	movs	r0, #5
 8003d7c:	f001 f892 	bl	8004ea4 <ssd1306_FillRectangle>
						  ssd1306_UpdateScreen();
 8003d80:	f000 ff10 	bl	8004ba4 <ssd1306_UpdateScreen>
						  ssd1306_FillRectangle(5, 25, 17, 42, White);
 8003d84:	2301      	movs	r3, #1
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	232a      	movs	r3, #42	@ 0x2a
 8003d8a:	2211      	movs	r2, #17
 8003d8c:	2119      	movs	r1, #25
 8003d8e:	2005      	movs	r0, #5
 8003d90:	f001 f888 	bl	8004ea4 <ssd1306_FillRectangle>
						  ssd1306_SetCursor(5, 25);
 8003d94:	2119      	movs	r1, #25
 8003d96:	2005      	movs	r0, #5
 8003d98:	f001 f86a 	bl	8004e70 <ssd1306_SetCursor>
						  ssd1306_WriteString("Heater OFF", Font_11x18, Black);
 8003d9c:	4b32      	ldr	r3, [pc, #200]	@ (8003e68 <main+0x688>)
 8003d9e:	4835      	ldr	r0, [pc, #212]	@ (8003e74 <main+0x694>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	9200      	str	r2, [sp, #0]
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f001 f835 	bl	8004e18 <ssd1306_WriteString>
						  ssd1306_SetCursor(5, 45);
 8003dae:	212d      	movs	r1, #45	@ 0x2d
 8003db0:	2005      	movs	r0, #5
 8003db2:	f001 f85d 	bl	8004e70 <ssd1306_SetCursor>
						  ssd1306_WriteString("Source", Font_11x18, White);
 8003db6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e68 <main+0x688>)
 8003db8:	482c      	ldr	r0, [pc, #176]	@ (8003e6c <main+0x68c>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	9200      	str	r2, [sp, #0]
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f001 f828 	bl	8004e18 <ssd1306_WriteString>
						  ssd1306_UpdateScreen();
 8003dc8:	f000 feec 	bl	8004ba4 <ssd1306_UpdateScreen>
						  break;
 8003dcc:	e000      	b.n	8003dd0 <main+0x5f0>
						  break;
 8003dce:	46c0      	nop			@ (mov r8, r8)

								  }
				  menu_last=menu;
 8003dd0:	4b23      	ldr	r3, [pc, #140]	@ (8003e60 <main+0x680>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b23      	ldr	r3, [pc, #140]	@ (8003e64 <main+0x684>)
 8003dd6:	601a      	str	r2, [r3, #0]
			  }
			  if(button==true){
 8003dd8:	4b27      	ldr	r3, [pc, #156]	@ (8003e78 <main+0x698>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <main+0x60c>
			  	sub_menu=true;
 8003de0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e58 <main+0x678>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
			  	button = false;
 8003de6:	4b24      	ldr	r3, [pc, #144]	@ (8003e78 <main+0x698>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  if(sub_menu){
 8003dec:	4b1a      	ldr	r3, [pc, #104]	@ (8003e58 <main+0x678>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d100      	bne.n	8003df6 <main+0x616>
 8003df4:	e25c      	b.n	80042b0 <main+0xad0>
			  if(menu!=1){
 8003df6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e60 <main+0x680>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d053      	beq.n	8003ea6 <main+0x6c6>
				  if(turn_CW_CCW==2){
 8003dfe:	4b17      	ldr	r3, [pc, #92]	@ (8003e5c <main+0x67c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d13c      	bne.n	8003e80 <main+0x6a0>
							  sub_menu_pos++;
 8003e06:	4b1d      	ldr	r3, [pc, #116]	@ (8003e7c <main+0x69c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e7c <main+0x69c>)
 8003e0e:	601a      	str	r2, [r3, #0]
							  if(sub_menu_pos>1){
 8003e10:	4b1a      	ldr	r3, [pc, #104]	@ (8003e7c <main+0x69c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	dd43      	ble.n	8003ea0 <main+0x6c0>
								sub_menu_pos=0;
 8003e18:	4b18      	ldr	r3, [pc, #96]	@ (8003e7c <main+0x69c>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	e03f      	b.n	8003ea0 <main+0x6c0>
 8003e20:	200004cc 	.word	0x200004cc
 8003e24:	20000490 	.word	0x20000490
 8003e28:	200004a4 	.word	0x200004a4
 8003e2c:	2000049c 	.word	0x2000049c
 8003e30:	200004a0 	.word	0x200004a0
 8003e34:	20000498 	.word	0x20000498
 8003e38:	0800e338 	.word	0x0800e338
 8003e3c:	0800ba08 	.word	0x0800ba08
 8003e40:	0800ba0c 	.word	0x0800ba0c
 8003e44:	200004b8 	.word	0x200004b8
 8003e48:	0800ba14 	.word	0x0800ba14
 8003e4c:	20000010 	.word	0x20000010
 8003e50:	200004a8 	.word	0x200004a8
 8003e54:	0800ba18 	.word	0x0800ba18
 8003e58:	200004d4 	.word	0x200004d4
 8003e5c:	200004d0 	.word	0x200004d0
 8003e60:	200004b0 	.word	0x200004b0
 8003e64:	20000008 	.word	0x20000008
 8003e68:	0800e344 	.word	0x0800e344
 8003e6c:	0800ba20 	.word	0x0800ba20
 8003e70:	0800ba28 	.word	0x0800ba28
 8003e74:	0800ba30 	.word	0x0800ba30
 8003e78:	200004b4 	.word	0x200004b4
 8003e7c:	200004d8 	.word	0x200004d8
							  }
						  }
						  else if(turn_CW_CCW==1){
 8003e80:	4bda      	ldr	r3, [pc, #872]	@ (80041ec <main+0xa0c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d10b      	bne.n	8003ea0 <main+0x6c0>
							sub_menu_pos--;
 8003e88:	4bd9      	ldr	r3, [pc, #868]	@ (80041f0 <main+0xa10>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	4bd8      	ldr	r3, [pc, #864]	@ (80041f0 <main+0xa10>)
 8003e90:	601a      	str	r2, [r3, #0]
							  if(sub_menu_pos<0){
 8003e92:	4bd7      	ldr	r3, [pc, #860]	@ (80041f0 <main+0xa10>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	da02      	bge.n	8003ea0 <main+0x6c0>
								sub_menu_pos=1;
 8003e9a:	4bd5      	ldr	r3, [pc, #852]	@ (80041f0 <main+0xa10>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
							  }
						  }
						  turn_CW_CCW=0;
 8003ea0:	4bd2      	ldr	r3, [pc, #840]	@ (80041ec <main+0xa0c>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
			  }
			  	if(sub_menu_pos_last!=sub_menu_pos||set_temperature!=set_temperature_last){
 8003ea6:	4bd3      	ldr	r3, [pc, #844]	@ (80041f4 <main+0xa14>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4bd1      	ldr	r3, [pc, #836]	@ (80041f0 <main+0xa10>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10e      	bne.n	8003ed0 <main+0x6f0>
 8003eb2:	4bd1      	ldr	r3, [pc, #836]	@ (80041f8 <main+0xa18>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7fd face 	bl	8001458 <__aeabi_i2f>
 8003ebc:	1c02      	adds	r2, r0, #0
 8003ebe:	4bcf      	ldr	r3, [pc, #828]	@ (80041fc <main+0xa1c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	1c19      	adds	r1, r3, #0
 8003ec4:	1c10      	adds	r0, r2, #0
 8003ec6:	f7fc fafb 	bl	80004c0 <__aeabi_fcmpeq>
 8003eca:	1e03      	subs	r3, r0, #0
 8003ecc:	d000      	beq.n	8003ed0 <main+0x6f0>
 8003ece:	e11e      	b.n	800410e <main+0x92e>
		  		  switch(menu){
 8003ed0:	4bcb      	ldr	r3, [pc, #812]	@ (8004200 <main+0xa20>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d100      	bne.n	8003eda <main+0x6fa>
 8003ed8:	e0a6      	b.n	8004028 <main+0x848>
 8003eda:	dd00      	ble.n	8003ede <main+0x6fe>
 8003edc:	e10a      	b.n	80040f4 <main+0x914>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <main+0x708>
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d066      	beq.n	8003fb4 <main+0x7d4>
		  		  			  	break;
		  		  			  		  		  }
		  		  		  break;
		  		  	default:

		  		  		break;
 8003ee6:	e105      	b.n	80040f4 <main+0x914>
		  		  		  switch(sub_menu_pos){
 8003ee8:	4bc1      	ldr	r3, [pc, #772]	@ (80041f0 <main+0xa10>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <main+0x716>
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d02f      	beq.n	8003f54 <main+0x774>
		  		  		  		  break;
 8003ef4:	e05d      	b.n	8003fb2 <main+0x7d2>
		  		  		  		ssd1306_FillRectangle(5, 25, 128, 64, Black);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	2340      	movs	r3, #64	@ 0x40
 8003efc:	2280      	movs	r2, #128	@ 0x80
 8003efe:	2119      	movs	r1, #25
 8003f00:	2005      	movs	r0, #5
 8003f02:	f000 ffcf 	bl	8004ea4 <ssd1306_FillRectangle>
		  		  		  		ssd1306_UpdateScreen();
 8003f06:	f000 fe4d 	bl	8004ba4 <ssd1306_UpdateScreen>
								ssd1306_FillRectangle(5, 25, 17, 42, White);
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	232a      	movs	r3, #42	@ 0x2a
 8003f10:	2211      	movs	r2, #17
 8003f12:	2119      	movs	r1, #25
 8003f14:	2005      	movs	r0, #5
 8003f16:	f000 ffc5 	bl	8004ea4 <ssd1306_FillRectangle>
								ssd1306_SetCursor(5, 25);
 8003f1a:	2119      	movs	r1, #25
 8003f1c:	2005      	movs	r0, #5
 8003f1e:	f000 ffa7 	bl	8004e70 <ssd1306_SetCursor>
								ssd1306_WriteString("Element", Font_11x18, Black);
 8003f22:	4bb8      	ldr	r3, [pc, #736]	@ (8004204 <main+0xa24>)
 8003f24:	48b8      	ldr	r0, [pc, #736]	@ (8004208 <main+0xa28>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	9200      	str	r2, [sp, #0]
 8003f2a:	6819      	ldr	r1, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f000 ff72 	bl	8004e18 <ssd1306_WriteString>
								ssd1306_SetCursor(5, 45);
 8003f34:	212d      	movs	r1, #45	@ 0x2d
 8003f36:	2005      	movs	r0, #5
 8003f38:	f000 ff9a 	bl	8004e70 <ssd1306_SetCursor>
								ssd1306_WriteString("Heater", Font_11x18, White);
 8003f3c:	4bb1      	ldr	r3, [pc, #708]	@ (8004204 <main+0xa24>)
 8003f3e:	48b3      	ldr	r0, [pc, #716]	@ (800420c <main+0xa2c>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	9200      	str	r2, [sp, #0]
 8003f44:	6819      	ldr	r1, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f000 ff65 	bl	8004e18 <ssd1306_WriteString>
								ssd1306_UpdateScreen();
 8003f4e:	f000 fe29 	bl	8004ba4 <ssd1306_UpdateScreen>
								break;
 8003f52:	e02e      	b.n	8003fb2 <main+0x7d2>
		  		  		  		ssd1306_FillRectangle(5, 25, 128, 64, Black);
 8003f54:	2300      	movs	r3, #0
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2340      	movs	r3, #64	@ 0x40
 8003f5a:	2280      	movs	r2, #128	@ 0x80
 8003f5c:	2119      	movs	r1, #25
 8003f5e:	2005      	movs	r0, #5
 8003f60:	f000 ffa0 	bl	8004ea4 <ssd1306_FillRectangle>
		  		  		  		ssd1306_UpdateScreen();
 8003f64:	f000 fe1e 	bl	8004ba4 <ssd1306_UpdateScreen>
		  		  		  		ssd1306_FillRectangle(5, 25, 17, 42, White);
 8003f68:	2301      	movs	r3, #1
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	232a      	movs	r3, #42	@ 0x2a
 8003f6e:	2211      	movs	r2, #17
 8003f70:	2119      	movs	r1, #25
 8003f72:	2005      	movs	r0, #5
 8003f74:	f000 ff96 	bl	8004ea4 <ssd1306_FillRectangle>
		  		  		  		ssd1306_SetCursor(5, 25);
 8003f78:	2119      	movs	r1, #25
 8003f7a:	2005      	movs	r0, #5
 8003f7c:	f000 ff78 	bl	8004e70 <ssd1306_SetCursor>
		  		  		  		ssd1306_WriteString("Heater", Font_11x18, Black);
 8003f80:	4ba0      	ldr	r3, [pc, #640]	@ (8004204 <main+0xa24>)
 8003f82:	48a2      	ldr	r0, [pc, #648]	@ (800420c <main+0xa2c>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	9200      	str	r2, [sp, #0]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f000 ff43 	bl	8004e18 <ssd1306_WriteString>
		  		  		  		ssd1306_SetCursor(5, 45);
 8003f92:	212d      	movs	r1, #45	@ 0x2d
 8003f94:	2005      	movs	r0, #5
 8003f96:	f000 ff6b 	bl	8004e70 <ssd1306_SetCursor>
		  		  		  		ssd1306_WriteString("Element", Font_11x18, White);
 8003f9a:	4b9a      	ldr	r3, [pc, #616]	@ (8004204 <main+0xa24>)
 8003f9c:	489a      	ldr	r0, [pc, #616]	@ (8004208 <main+0xa28>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	9200      	str	r2, [sp, #0]
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f000 ff36 	bl	8004e18 <ssd1306_WriteString>
		  		  		  		ssd1306_UpdateScreen();
 8003fac:	f000 fdfa 	bl	8004ba4 <ssd1306_UpdateScreen>
		  		  		  		  break;
 8003fb0:	46c0      	nop			@ (mov r8, r8)
		  		  		  break;
 8003fb2:	e0a0      	b.n	80040f6 <main+0x916>
		  		  		  	  	ssd1306_FillRectangle(5, 25, 128, 64, Black);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2340      	movs	r3, #64	@ 0x40
 8003fba:	2280      	movs	r2, #128	@ 0x80
 8003fbc:	2119      	movs	r1, #25
 8003fbe:	2005      	movs	r0, #5
 8003fc0:	f000 ff70 	bl	8004ea4 <ssd1306_FillRectangle>
								ssd1306_UpdateScreen();
 8003fc4:	f000 fdee 	bl	8004ba4 <ssd1306_UpdateScreen>
								sprintf(temp, "%.2f", set_temperature);
 8003fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80041fc <main+0xa1c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	1c18      	adds	r0, r3, #0
 8003fce:	f7ff fa79 	bl	80034c4 <__aeabi_f2d>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	000b      	movs	r3, r1
 8003fd6:	498e      	ldr	r1, [pc, #568]	@ (8004210 <main+0xa30>)
 8003fd8:	488e      	ldr	r0, [pc, #568]	@ (8004214 <main+0xa34>)
 8003fda:	f005 fb13 	bl	8009604 <siprintf>
								ssd1306_SetCursor(5, 25);
 8003fde:	2119      	movs	r1, #25
 8003fe0:	2005      	movs	r0, #5
 8003fe2:	f000 ff45 	bl	8004e70 <ssd1306_SetCursor>
								ssd1306_WriteString("Temp", Font_11x18, White);
 8003fe6:	4b87      	ldr	r3, [pc, #540]	@ (8004204 <main+0xa24>)
 8003fe8:	488b      	ldr	r0, [pc, #556]	@ (8004218 <main+0xa38>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	9200      	str	r2, [sp, #0]
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f000 ff10 	bl	8004e18 <ssd1306_WriteString>
								ssd1306_FillRectangle(5, 35, 17, 63, White);
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	233f      	movs	r3, #63	@ 0x3f
 8003ffe:	2211      	movs	r2, #17
 8004000:	2123      	movs	r1, #35	@ 0x23
 8004002:	2005      	movs	r0, #5
 8004004:	f000 ff4e 	bl	8004ea4 <ssd1306_FillRectangle>
								ssd1306_SetCursor(5, 45);
 8004008:	212d      	movs	r1, #45	@ 0x2d
 800400a:	2005      	movs	r0, #5
 800400c:	f000 ff30 	bl	8004e70 <ssd1306_SetCursor>
								ssd1306_WriteString(temp, Font_11x18, Black);
 8004010:	4b7c      	ldr	r3, [pc, #496]	@ (8004204 <main+0xa24>)
 8004012:	4880      	ldr	r0, [pc, #512]	@ (8004214 <main+0xa34>)
 8004014:	2200      	movs	r2, #0
 8004016:	9200      	str	r2, [sp, #0]
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f000 fefb 	bl	8004e18 <ssd1306_WriteString>
								ssd1306_UpdateScreen();
 8004022:	f000 fdbf 	bl	8004ba4 <ssd1306_UpdateScreen>
		  		  		  break;
 8004026:	e066      	b.n	80040f6 <main+0x916>
		  		  		switch(sub_menu_pos){
 8004028:	4b71      	ldr	r3, [pc, #452]	@ (80041f0 <main+0xa10>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <main+0x856>
 8004030:	2b01      	cmp	r3, #1
 8004032:	d02f      	beq.n	8004094 <main+0x8b4>
		  		  			  	break;
 8004034:	e05d      	b.n	80040f2 <main+0x912>
		  		  				ssd1306_FillRectangle(5, 25, 128, 64, Black);
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	2340      	movs	r3, #64	@ 0x40
 800403c:	2280      	movs	r2, #128	@ 0x80
 800403e:	2119      	movs	r1, #25
 8004040:	2005      	movs	r0, #5
 8004042:	f000 ff2f 	bl	8004ea4 <ssd1306_FillRectangle>
		  		  				ssd1306_UpdateScreen();
 8004046:	f000 fdad 	bl	8004ba4 <ssd1306_UpdateScreen>
		  		  				ssd1306_SetCursor(5, 25);
 800404a:	2119      	movs	r1, #25
 800404c:	2005      	movs	r0, #5
 800404e:	f000 ff0f 	bl	8004e70 <ssd1306_SetCursor>
		  		  				ssd1306_WriteString("Turn off?", Font_11x18, White);
 8004052:	4b6c      	ldr	r3, [pc, #432]	@ (8004204 <main+0xa24>)
 8004054:	4871      	ldr	r0, [pc, #452]	@ (800421c <main+0xa3c>)
 8004056:	2201      	movs	r2, #1
 8004058:	9200      	str	r2, [sp, #0]
 800405a:	6819      	ldr	r1, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f000 feda 	bl	8004e18 <ssd1306_WriteString>
		  		  				ssd1306_FillRectangle(5, 35, 17, 63, White);
 8004064:	2301      	movs	r3, #1
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	233f      	movs	r3, #63	@ 0x3f
 800406a:	2211      	movs	r2, #17
 800406c:	2123      	movs	r1, #35	@ 0x23
 800406e:	2005      	movs	r0, #5
 8004070:	f000 ff18 	bl	8004ea4 <ssd1306_FillRectangle>
		  		  				ssd1306_SetCursor(5, 45);
 8004074:	212d      	movs	r1, #45	@ 0x2d
 8004076:	2005      	movs	r0, #5
 8004078:	f000 fefa 	bl	8004e70 <ssd1306_SetCursor>
		  		  				ssd1306_WriteString("Yes", Font_11x18, Black);
 800407c:	4b61      	ldr	r3, [pc, #388]	@ (8004204 <main+0xa24>)
 800407e:	4868      	ldr	r0, [pc, #416]	@ (8004220 <main+0xa40>)
 8004080:	2200      	movs	r2, #0
 8004082:	9200      	str	r2, [sp, #0]
 8004084:	6819      	ldr	r1, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f000 fec5 	bl	8004e18 <ssd1306_WriteString>
		  		  				ssd1306_UpdateScreen();
 800408e:	f000 fd89 	bl	8004ba4 <ssd1306_UpdateScreen>
		  		  				break;
 8004092:	e02e      	b.n	80040f2 <main+0x912>
		  		  				ssd1306_FillRectangle(5, 25, 128, 64, Black);
 8004094:	2300      	movs	r3, #0
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2340      	movs	r3, #64	@ 0x40
 800409a:	2280      	movs	r2, #128	@ 0x80
 800409c:	2119      	movs	r1, #25
 800409e:	2005      	movs	r0, #5
 80040a0:	f000 ff00 	bl	8004ea4 <ssd1306_FillRectangle>
		  		  			  	ssd1306_UpdateScreen();
 80040a4:	f000 fd7e 	bl	8004ba4 <ssd1306_UpdateScreen>
		  		  			  	ssd1306_SetCursor(5, 25);
 80040a8:	2119      	movs	r1, #25
 80040aa:	2005      	movs	r0, #5
 80040ac:	f000 fee0 	bl	8004e70 <ssd1306_SetCursor>
		  		  				ssd1306_WriteString("Turn off?", Font_11x18, White);
 80040b0:	4b54      	ldr	r3, [pc, #336]	@ (8004204 <main+0xa24>)
 80040b2:	485a      	ldr	r0, [pc, #360]	@ (800421c <main+0xa3c>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	9200      	str	r2, [sp, #0]
 80040b8:	6819      	ldr	r1, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f000 feab 	bl	8004e18 <ssd1306_WriteString>
		  		  				ssd1306_FillRectangle(5, 35, 17, 63, White);
 80040c2:	2301      	movs	r3, #1
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	233f      	movs	r3, #63	@ 0x3f
 80040c8:	2211      	movs	r2, #17
 80040ca:	2123      	movs	r1, #35	@ 0x23
 80040cc:	2005      	movs	r0, #5
 80040ce:	f000 fee9 	bl	8004ea4 <ssd1306_FillRectangle>
		  		  				ssd1306_SetCursor(5, 45);
 80040d2:	212d      	movs	r1, #45	@ 0x2d
 80040d4:	2005      	movs	r0, #5
 80040d6:	f000 fecb 	bl	8004e70 <ssd1306_SetCursor>
		  		  			  	ssd1306_WriteString("No", Font_11x18, Black);
 80040da:	4b4a      	ldr	r3, [pc, #296]	@ (8004204 <main+0xa24>)
 80040dc:	4851      	ldr	r0, [pc, #324]	@ (8004224 <main+0xa44>)
 80040de:	2200      	movs	r2, #0
 80040e0:	9200      	str	r2, [sp, #0]
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f000 fe96 	bl	8004e18 <ssd1306_WriteString>
		  		  			  	ssd1306_UpdateScreen();
 80040ec:	f000 fd5a 	bl	8004ba4 <ssd1306_UpdateScreen>
		  		  			  	break;
 80040f0:	46c0      	nop			@ (mov r8, r8)
		  		  		  break;
 80040f2:	e000      	b.n	80040f6 <main+0x916>
		  		  		break;
 80040f4:	46c0      	nop			@ (mov r8, r8)

		  		  }
		  		  sub_menu_pos_last=sub_menu_pos;
 80040f6:	4b3e      	ldr	r3, [pc, #248]	@ (80041f0 <main+0xa10>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b3e      	ldr	r3, [pc, #248]	@ (80041f4 <main+0xa14>)
 80040fc:	601a      	str	r2, [r3, #0]
		  		  set_temperature_last=set_temperature;
 80040fe:	4b3f      	ldr	r3, [pc, #252]	@ (80041fc <main+0xa1c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	1c18      	adds	r0, r3, #0
 8004104:	f7fd f988 	bl	8001418 <__aeabi_f2iz>
 8004108:	0002      	movs	r2, r0
 800410a:	4b3b      	ldr	r3, [pc, #236]	@ (80041f8 <main+0xa18>)
 800410c:	601a      	str	r2, [r3, #0]
			  }
			  	if(menu==1){
 800410e:	4b3c      	ldr	r3, [pc, #240]	@ (8004200 <main+0xa20>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d137      	bne.n	8004186 <main+0x9a6>
					if(turn_CW_CCW==2){
 8004116:	4b35      	ldr	r3, [pc, #212]	@ (80041ec <main+0xa0c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d116      	bne.n	800414c <main+0x96c>
						set_temperature++;
 800411e:	4b37      	ldr	r3, [pc, #220]	@ (80041fc <main+0xa1c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	21fe      	movs	r1, #254	@ 0xfe
 8004124:	0589      	lsls	r1, r1, #22
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7fc f9f8 	bl	800051c <__aeabi_fadd>
 800412c:	1c03      	adds	r3, r0, #0
 800412e:	1c1a      	adds	r2, r3, #0
 8004130:	4b32      	ldr	r3, [pc, #200]	@ (80041fc <main+0xa1c>)
 8004132:	601a      	str	r2, [r3, #0]
							if(set_temperature>=400){
 8004134:	4b31      	ldr	r3, [pc, #196]	@ (80041fc <main+0xa1c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	493b      	ldr	r1, [pc, #236]	@ (8004228 <main+0xa48>)
 800413a:	1c18      	adds	r0, r3, #0
 800413c:	f7fc f9e4 	bl	8000508 <__aeabi_fcmpge>
 8004140:	1e03      	subs	r3, r0, #0
 8004142:	d01d      	beq.n	8004180 <main+0x9a0>
								set_temperature=400;
 8004144:	4b2d      	ldr	r3, [pc, #180]	@ (80041fc <main+0xa1c>)
 8004146:	4a38      	ldr	r2, [pc, #224]	@ (8004228 <main+0xa48>)
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e019      	b.n	8004180 <main+0x9a0>
							}
						}
						else if(turn_CW_CCW==1){
 800414c:	4b27      	ldr	r3, [pc, #156]	@ (80041ec <main+0xa0c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d115      	bne.n	8004180 <main+0x9a0>
							set_temperature--;
 8004154:	4b29      	ldr	r3, [pc, #164]	@ (80041fc <main+0xa1c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	21fe      	movs	r1, #254	@ 0xfe
 800415a:	0589      	lsls	r1, r1, #22
 800415c:	1c18      	adds	r0, r3, #0
 800415e:	f7fc fef7 	bl	8000f50 <__aeabi_fsub>
 8004162:	1c03      	adds	r3, r0, #0
 8004164:	1c1a      	adds	r2, r3, #0
 8004166:	4b25      	ldr	r3, [pc, #148]	@ (80041fc <main+0xa1c>)
 8004168:	601a      	str	r2, [r3, #0]
							if(set_temperature<=0){
 800416a:	4b24      	ldr	r3, [pc, #144]	@ (80041fc <main+0xa1c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2100      	movs	r1, #0
 8004170:	1c18      	adds	r0, r3, #0
 8004172:	f7fc f9b5 	bl	80004e0 <__aeabi_fcmple>
 8004176:	1e03      	subs	r3, r0, #0
 8004178:	d002      	beq.n	8004180 <main+0x9a0>
								set_temperature=0;
 800417a:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <main+0xa1c>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
							}
						}
						turn_CW_CCW=0;
 8004180:	4b1a      	ldr	r3, [pc, #104]	@ (80041ec <main+0xa0c>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
			  	}
			  	if(button==true){
 8004186:	4b29      	ldr	r3, [pc, #164]	@ (800422c <main+0xa4c>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d100      	bne.n	8004190 <main+0x9b0>
 800418e:	e08f      	b.n	80042b0 <main+0xad0>
			  		sub_menu=false;
 8004190:	4b27      	ldr	r3, [pc, #156]	@ (8004230 <main+0xa50>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
			  		button = false;
 8004196:	4b25      	ldr	r3, [pc, #148]	@ (800422c <main+0xa4c>)
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
			  		switch(menu){
 800419c:	4b18      	ldr	r3, [pc, #96]	@ (8004200 <main+0xa20>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d062      	beq.n	800426a <main+0xa8a>
 80041a4:	dd00      	ble.n	80041a8 <main+0x9c8>
 80041a6:	e07a      	b.n	800429e <main+0xabe>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <main+0x9d2>
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d010      	beq.n	80041d2 <main+0x9f2>
 80041b0:	e075      	b.n	800429e <main+0xabe>
			  		case 0:
						switch(sub_menu_pos){
 80041b2:	4b0f      	ldr	r3, [pc, #60]	@ (80041f0 <main+0xa10>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <main+0x9e0>
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d004      	beq.n	80041c8 <main+0x9e8>
									break;
							case 1:
								temp_select=1;
								break;
							default:
								break;
 80041be:	e007      	b.n	80041d0 <main+0x9f0>
								temp_select=2;
 80041c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004234 <main+0xa54>)
 80041c2:	2202      	movs	r2, #2
 80041c4:	601a      	str	r2, [r3, #0]
									break;
 80041c6:	e003      	b.n	80041d0 <main+0x9f0>
								temp_select=1;
 80041c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004234 <main+0xa54>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
								break;
 80041ce:	46c0      	nop			@ (mov r8, r8)

						}
			  			break;
 80041d0:	e065      	b.n	800429e <main+0xabe>
						case 1:
							if(set_temperature>0)
 80041d2:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <main+0xa1c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2100      	movs	r1, #0
 80041d8:	1c18      	adds	r0, r3, #0
 80041da:	f7fc f98b 	bl	80004f4 <__aeabi_fcmpgt>
 80041de:	1e03      	subs	r3, r0, #0
 80041e0:	d02c      	beq.n	800423c <main+0xa5c>
							{
								temp_set=true;
 80041e2:	4b15      	ldr	r3, [pc, #84]	@ (8004238 <main+0xa58>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
							else if(set_temperature<=0){
								temp_set=false;
								PID_value=0;
								HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
							}
							break;
 80041e8:	e059      	b.n	800429e <main+0xabe>
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	200004d0 	.word	0x200004d0
 80041f0:	200004d8 	.word	0x200004d8
 80041f4:	2000000c 	.word	0x2000000c
 80041f8:	20000010 	.word	0x20000010
 80041fc:	200004a8 	.word	0x200004a8
 8004200:	200004b0 	.word	0x200004b0
 8004204:	0800e344 	.word	0x0800e344
 8004208:	0800ba3c 	.word	0x0800ba3c
 800420c:	0800ba44 	.word	0x0800ba44
 8004210:	0800ba4c 	.word	0x0800ba4c
 8004214:	200004b8 	.word	0x200004b8
 8004218:	0800ba28 	.word	0x0800ba28
 800421c:	0800ba54 	.word	0x0800ba54
 8004220:	0800ba60 	.word	0x0800ba60
 8004224:	0800ba64 	.word	0x0800ba64
 8004228:	43c80000 	.word	0x43c80000
 800422c:	200004b4 	.word	0x200004b4
 8004230:	200004d4 	.word	0x200004d4
 8004234:	20000004 	.word	0x20000004
 8004238:	200004dc 	.word	0x200004dc
							else if(set_temperature<=0){
 800423c:	4b8a      	ldr	r3, [pc, #552]	@ (8004468 <main+0xc88>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2100      	movs	r1, #0
 8004242:	1c18      	adds	r0, r3, #0
 8004244:	f7fc f94c 	bl	80004e0 <__aeabi_fcmple>
 8004248:	1e03      	subs	r3, r0, #0
 800424a:	d100      	bne.n	800424e <main+0xa6e>
							break;
 800424c:	e027      	b.n	800429e <main+0xabe>
								temp_set=false;
 800424e:	4b87      	ldr	r3, [pc, #540]	@ (800446c <main+0xc8c>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
								PID_value=0;
 8004254:	4b86      	ldr	r3, [pc, #536]	@ (8004470 <main+0xc90>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
								HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800425a:	2390      	movs	r3, #144	@ 0x90
 800425c:	05db      	lsls	r3, r3, #23
 800425e:	2200      	movs	r2, #0
 8004260:	2102      	movs	r1, #2
 8004262:	0018      	movs	r0, r3
 8004264:	f001 fdd3 	bl	8005e0e <HAL_GPIO_WritePin>
							break;
 8004268:	e019      	b.n	800429e <main+0xabe>
						case 2:
							switch(sub_menu_pos){
 800426a:	4b82      	ldr	r3, [pc, #520]	@ (8004474 <main+0xc94>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <main+0xa98>
 8004272:	2b01      	cmp	r3, #1
 8004274:	d011      	beq.n	800429a <main+0xaba>
									break;
								case 1:

									break;
								default:
									break;
 8004276:	e011      	b.n	800429c <main+0xabc>
									temp_set=false;
 8004278:	4b7c      	ldr	r3, [pc, #496]	@ (800446c <main+0xc8c>)
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
									set_temperature =0;
 800427e:	4b7a      	ldr	r3, [pc, #488]	@ (8004468 <main+0xc88>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
									PID_value=0;
 8004284:	4b7a      	ldr	r3, [pc, #488]	@ (8004470 <main+0xc90>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
									HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800428a:	2390      	movs	r3, #144	@ 0x90
 800428c:	05db      	lsls	r3, r3, #23
 800428e:	2200      	movs	r2, #0
 8004290:	2102      	movs	r1, #2
 8004292:	0018      	movs	r0, r3
 8004294:	f001 fdbb 	bl	8005e0e <HAL_GPIO_WritePin>
									break;
 8004298:	e000      	b.n	800429c <main+0xabc>
									break;
 800429a:	46c0      	nop			@ (mov r8, r8)

													}

							break;
 800429c:	46c0      	nop			@ (mov r8, r8)
			  		}
			  		menu_last=100;
 800429e:	4b76      	ldr	r3, [pc, #472]	@ (8004478 <main+0xc98>)
 80042a0:	2264      	movs	r2, #100	@ 0x64
 80042a2:	601a      	str	r2, [r3, #0]
			  		sub_menu_pos_last=100;
 80042a4:	4b75      	ldr	r3, [pc, #468]	@ (800447c <main+0xc9c>)
 80042a6:	2264      	movs	r2, #100	@ 0x64
 80042a8:	601a      	str	r2, [r3, #0]
			  		set_temperature_last=100;
 80042aa:	4b75      	ldr	r3, [pc, #468]	@ (8004480 <main+0xca0>)
 80042ac:	2264      	movs	r2, #100	@ 0x64
 80042ae:	601a      	str	r2, [r3, #0]
			  	}

		  }
	  }
	  if(temp_select == 1 ){
 80042b0:	4b74      	ldr	r3, [pc, #464]	@ (8004484 <main+0xca4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d104      	bne.n	80042c2 <main+0xae2>
	  	  		  selected_temperature = real_temperature_heater;
 80042b8:	4b73      	ldr	r3, [pc, #460]	@ (8004488 <main+0xca8>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b73      	ldr	r3, [pc, #460]	@ (800448c <main+0xcac>)
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e007      	b.n	80042d2 <main+0xaf2>
	  	  	  }
	  	  	  else if(temp_select== 2){
 80042c2:	4b70      	ldr	r3, [pc, #448]	@ (8004484 <main+0xca4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d103      	bne.n	80042d2 <main+0xaf2>
	  	  		  selected_temperature = real_temperature_element;
 80042ca:	4b71      	ldr	r3, [pc, #452]	@ (8004490 <main+0xcb0>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b6f      	ldr	r3, [pc, #444]	@ (800448c <main+0xcac>)
 80042d0:	601a      	str	r2, [r3, #0]
	  	  	  }
	  if(temp_set){
 80042d2:	4b66      	ldr	r3, [pc, #408]	@ (800446c <main+0xc8c>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <main+0xafe>
 80042da:	f7ff fab5 	bl	8003848 <main+0x68>
		  PID_error = set_temperature - selected_temperature;
 80042de:	4b62      	ldr	r3, [pc, #392]	@ (8004468 <main+0xc88>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b6a      	ldr	r3, [pc, #424]	@ (800448c <main+0xcac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	1c19      	adds	r1, r3, #0
 80042e8:	1c10      	adds	r0, r2, #0
 80042ea:	f7fc fe31 	bl	8000f50 <__aeabi_fsub>
 80042ee:	1c03      	adds	r3, r0, #0
 80042f0:	1c1a      	adds	r2, r3, #0
 80042f2:	4b68      	ldr	r3, [pc, #416]	@ (8004494 <main+0xcb4>)
 80042f4:	601a      	str	r2, [r3, #0]
		  if(PID_error > 30){                              //integral constant will only affect errors below 30ºC
 80042f6:	4b67      	ldr	r3, [pc, #412]	@ (8004494 <main+0xcb4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4967      	ldr	r1, [pc, #412]	@ (8004498 <main+0xcb8>)
 80042fc:	1c18      	adds	r0, r3, #0
 80042fe:	f7fc f8f9 	bl	80004f4 <__aeabi_fcmpgt>
 8004302:	1e03      	subs	r3, r0, #0
 8004304:	d002      	beq.n	800430c <main+0xb2c>
			  PID_i = 0;
 8004306:	4b65      	ldr	r3, [pc, #404]	@ (800449c <main+0xcbc>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
		 	  }
		  PID_p = kp * PID_error;                         //Calculate the P value
 800430c:	4b64      	ldr	r3, [pc, #400]	@ (80044a0 <main+0xcc0>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b60      	ldr	r3, [pc, #384]	@ (8004494 <main+0xcb4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1c19      	adds	r1, r3, #0
 8004316:	1c10      	adds	r0, r2, #0
 8004318:	f7fc fcc0 	bl	8000c9c <__aeabi_fmul>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	1c18      	adds	r0, r3, #0
 8004320:	f7fd f87a 	bl	8001418 <__aeabi_f2iz>
 8004324:	0002      	movs	r2, r0
 8004326:	4b5f      	ldr	r3, [pc, #380]	@ (80044a4 <main+0xcc4>)
 8004328:	601a      	str	r2, [r3, #0]
		  PID_i = PID_i + (ki * PID_error);               //Calculate the I value
 800432a:	4b5c      	ldr	r3, [pc, #368]	@ (800449c <main+0xcbc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	0018      	movs	r0, r3
 8004330:	f7fd f892 	bl	8001458 <__aeabi_i2f>
 8004334:	1c04      	adds	r4, r0, #0
 8004336:	4b5c      	ldr	r3, [pc, #368]	@ (80044a8 <main+0xcc8>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b56      	ldr	r3, [pc, #344]	@ (8004494 <main+0xcb4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	1c19      	adds	r1, r3, #0
 8004340:	1c10      	adds	r0, r2, #0
 8004342:	f7fc fcab 	bl	8000c9c <__aeabi_fmul>
 8004346:	1c03      	adds	r3, r0, #0
 8004348:	1c19      	adds	r1, r3, #0
 800434a:	1c20      	adds	r0, r4, #0
 800434c:	f7fc f8e6 	bl	800051c <__aeabi_fadd>
 8004350:	1c03      	adds	r3, r0, #0
 8004352:	1c18      	adds	r0, r3, #0
 8004354:	f7fd f860 	bl	8001418 <__aeabi_f2iz>
 8004358:	0002      	movs	r2, r0
 800435a:	4b50      	ldr	r3, [pc, #320]	@ (800449c <main+0xcbc>)
 800435c:	601a      	str	r2, [r3, #0]
		  timePrev = Time;                    // the previous time is stored before the actual time read
 800435e:	4b53      	ldr	r3, [pc, #332]	@ (80044ac <main+0xccc>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b53      	ldr	r3, [pc, #332]	@ (80044b0 <main+0xcd0>)
 8004364:	601a      	str	r2, [r3, #0]
		  Time = __HAL_TIM_GET_COUNTER(&htim1);                    // actual time read
 8004366:	4b53      	ldr	r3, [pc, #332]	@ (80044b4 <main+0xcd4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	0018      	movs	r0, r3
 800436e:	f7fd f8c3 	bl	80014f8 <__aeabi_ui2f>
 8004372:	1c02      	adds	r2, r0, #0
 8004374:	4b4d      	ldr	r3, [pc, #308]	@ (80044ac <main+0xccc>)
 8004376:	601a      	str	r2, [r3, #0]
		  elapsedTime = (Time - timePrev) / 1000;
 8004378:	4b4c      	ldr	r3, [pc, #304]	@ (80044ac <main+0xccc>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b4c      	ldr	r3, [pc, #304]	@ (80044b0 <main+0xcd0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	1c19      	adds	r1, r3, #0
 8004382:	1c10      	adds	r0, r2, #0
 8004384:	f7fc fde4 	bl	8000f50 <__aeabi_fsub>
 8004388:	1c03      	adds	r3, r0, #0
 800438a:	494b      	ldr	r1, [pc, #300]	@ (80044b8 <main+0xcd8>)
 800438c:	1c18      	adds	r0, r3, #0
 800438e:	f7fc fab7 	bl	8000900 <__aeabi_fdiv>
 8004392:	1c03      	adds	r3, r0, #0
 8004394:	1c1a      	adds	r2, r3, #0
 8004396:	4b49      	ldr	r3, [pc, #292]	@ (80044bc <main+0xcdc>)
 8004398:	601a      	str	r2, [r3, #0]
		  PID_d = kd*((PID_error - previous_error)/elapsedTime);  //Calculate the D value
 800439a:	4b3e      	ldr	r3, [pc, #248]	@ (8004494 <main+0xcb4>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b48      	ldr	r3, [pc, #288]	@ (80044c0 <main+0xce0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	1c19      	adds	r1, r3, #0
 80043a4:	1c10      	adds	r0, r2, #0
 80043a6:	f7fc fdd3 	bl	8000f50 <__aeabi_fsub>
 80043aa:	1c03      	adds	r3, r0, #0
 80043ac:	1c1a      	adds	r2, r3, #0
 80043ae:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <main+0xcdc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	1c19      	adds	r1, r3, #0
 80043b4:	1c10      	adds	r0, r2, #0
 80043b6:	f7fc faa3 	bl	8000900 <__aeabi_fdiv>
 80043ba:	1c03      	adds	r3, r0, #0
 80043bc:	1c1a      	adds	r2, r3, #0
 80043be:	4b41      	ldr	r3, [pc, #260]	@ (80044c4 <main+0xce4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	1c19      	adds	r1, r3, #0
 80043c4:	1c10      	adds	r0, r2, #0
 80043c6:	f7fc fc69 	bl	8000c9c <__aeabi_fmul>
 80043ca:	1c03      	adds	r3, r0, #0
 80043cc:	1c18      	adds	r0, r3, #0
 80043ce:	f7fd f823 	bl	8001418 <__aeabi_f2iz>
 80043d2:	0002      	movs	r2, r0
 80043d4:	4b3c      	ldr	r3, [pc, #240]	@ (80044c8 <main+0xce8>)
 80043d6:	601a      	str	r2, [r3, #0]
		  PID_value = PID_p + PID_i + PID_d;
 80043d8:	4b32      	ldr	r3, [pc, #200]	@ (80044a4 <main+0xcc4>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b2f      	ldr	r3, [pc, #188]	@ (800449c <main+0xcbc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	18d2      	adds	r2, r2, r3
 80043e2:	4b39      	ldr	r3, [pc, #228]	@ (80044c8 <main+0xce8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	18d2      	adds	r2, r2, r3
 80043e8:	4b21      	ldr	r3, [pc, #132]	@ (8004470 <main+0xc90>)
 80043ea:	601a      	str	r2, [r3, #0]
		  if(PID_value < 0){
 80043ec:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <main+0xc90>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da02      	bge.n	80043fa <main+0xc1a>
			  PID_value = 0;
 80043f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004470 <main+0xc90>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
		 	  }
		  if(PID_value > 7400){
 80043fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004470 <main+0xc90>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a33      	ldr	r2, [pc, #204]	@ (80044cc <main+0xcec>)
 8004400:	4293      	cmp	r3, r2
 8004402:	dd02      	ble.n	800440a <main+0xc2a>
			  PID_value = 7400;
 8004404:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <main+0xc90>)
 8004406:	4a31      	ldr	r2, [pc, #196]	@ (80044cc <main+0xcec>)
 8004408:	601a      	str	r2, [r3, #0]
		  	  }
		  previous_error = PID_error; //Remember to store the previous error.
 800440a:	4b22      	ldr	r3, [pc, #136]	@ (8004494 <main+0xcb4>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b2c      	ldr	r3, [pc, #176]	@ (80044c0 <main+0xce0>)
 8004410:	601a      	str	r2, [r3, #0]
		  if (zero_cross_detected && heat){
 8004412:	4b2f      	ldr	r3, [pc, #188]	@ (80044d0 <main+0xcf0>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <main+0xc3e>
 800441a:	f7ff fa15 	bl	8003848 <main+0x68>
 800441e:	4b2d      	ldr	r3, [pc, #180]	@ (80044d4 <main+0xcf4>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <main+0xc4a>
 8004426:	f7ff fa0f 	bl	8003848 <main+0x68>
			  HAL_Delay(maximum_firing_delay - PID_value);
 800442a:	4b2b      	ldr	r3, [pc, #172]	@ (80044d8 <main+0xcf8>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <main+0xc90>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	0018      	movs	r0, r3
 8004436:	f001 f955 	bl	80056e4 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800443a:	2390      	movs	r3, #144	@ 0x90
 800443c:	05db      	lsls	r3, r3, #23
 800443e:	2201      	movs	r2, #1
 8004440:	2102      	movs	r1, #2
 8004442:	0018      	movs	r0, r3
 8004444:	f001 fce3 	bl	8005e0e <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8004448:	2064      	movs	r0, #100	@ 0x64
 800444a:	f001 f94b 	bl	80056e4 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800444e:	2390      	movs	r3, #144	@ 0x90
 8004450:	05db      	lsls	r3, r3, #23
 8004452:	2200      	movs	r2, #0
 8004454:	2102      	movs	r1, #2
 8004456:	0018      	movs	r0, r3
 8004458:	f001 fcd9 	bl	8005e0e <HAL_GPIO_WritePin>
			  zero_cross_detected = false;
 800445c:	4b1c      	ldr	r3, [pc, #112]	@ (80044d0 <main+0xcf0>)
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
	  sens_error=0;
 8004462:	f7ff f9f1 	bl	8003848 <main+0x68>
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	200004a8 	.word	0x200004a8
 800446c:	200004dc 	.word	0x200004dc
 8004470:	200004f4 	.word	0x200004f4
 8004474:	200004d8 	.word	0x200004d8
 8004478:	20000008 	.word	0x20000008
 800447c:	2000000c 	.word	0x2000000c
 8004480:	20000010 	.word	0x20000010
 8004484:	20000004 	.word	0x20000004
 8004488:	20000498 	.word	0x20000498
 800448c:	200004ac 	.word	0x200004ac
 8004490:	2000049c 	.word	0x2000049c
 8004494:	200004e0 	.word	0x200004e0
 8004498:	41f00000 	.word	0x41f00000
 800449c:	200004fc 	.word	0x200004fc
 80044a0:	20000014 	.word	0x20000014
 80044a4:	200004f8 	.word	0x200004f8
 80044a8:	20000018 	.word	0x20000018
 80044ac:	200004ec 	.word	0x200004ec
 80044b0:	200004f0 	.word	0x200004f0
 80044b4:	200003c0 	.word	0x200003c0
 80044b8:	447a0000 	.word	0x447a0000
 80044bc:	200004e8 	.word	0x200004e8
 80044c0:	200004e4 	.word	0x200004e4
 80044c4:	2000001c 	.word	0x2000001c
 80044c8:	20000500 	.word	0x20000500
 80044cc:	00001ce8 	.word	0x00001ce8
 80044d0:	20000494 	.word	0x20000494
 80044d4:	200004c2 	.word	0x200004c2
 80044d8:	20000000 	.word	0x20000000

080044dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b095      	sub	sp, #84	@ 0x54
 80044e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044e2:	2420      	movs	r4, #32
 80044e4:	193b      	adds	r3, r7, r4
 80044e6:	0018      	movs	r0, r3
 80044e8:	2330      	movs	r3, #48	@ 0x30
 80044ea:	001a      	movs	r2, r3
 80044ec:	2100      	movs	r1, #0
 80044ee:	f005 f8f7 	bl	80096e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044f2:	2310      	movs	r3, #16
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	0018      	movs	r0, r3
 80044f8:	2310      	movs	r3, #16
 80044fa:	001a      	movs	r2, r3
 80044fc:	2100      	movs	r1, #0
 80044fe:	f005 f8ef 	bl	80096e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004502:	003b      	movs	r3, r7
 8004504:	0018      	movs	r0, r3
 8004506:	2310      	movs	r3, #16
 8004508:	001a      	movs	r2, r3
 800450a:	2100      	movs	r1, #0
 800450c:	f005 f8e8 	bl	80096e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004510:	0021      	movs	r1, r4
 8004512:	187b      	adds	r3, r7, r1
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004518:	187b      	adds	r3, r7, r1
 800451a:	2201      	movs	r2, #1
 800451c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800451e:	187b      	adds	r3, r7, r1
 8004520:	2202      	movs	r2, #2
 8004522:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004524:	187b      	adds	r3, r7, r1
 8004526:	2280      	movs	r2, #128	@ 0x80
 8004528:	0252      	lsls	r2, r2, #9
 800452a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800452c:	187b      	adds	r3, r7, r1
 800452e:	2280      	movs	r2, #128	@ 0x80
 8004530:	02d2      	lsls	r2, r2, #11
 8004532:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004534:	187b      	adds	r3, r7, r1
 8004536:	2200      	movs	r2, #0
 8004538:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800453a:	187b      	adds	r3, r7, r1
 800453c:	0018      	movs	r0, r3
 800453e:	f002 f9a5 	bl	800688c <HAL_RCC_OscConfig>
 8004542:	1e03      	subs	r3, r0, #0
 8004544:	d001      	beq.n	800454a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004546:	f000 fa67 	bl	8004a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800454a:	2110      	movs	r1, #16
 800454c:	187b      	adds	r3, r7, r1
 800454e:	2207      	movs	r2, #7
 8004550:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004552:	187b      	adds	r3, r7, r1
 8004554:	2202      	movs	r2, #2
 8004556:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004558:	187b      	adds	r3, r7, r1
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800455e:	187b      	adds	r3, r7, r1
 8004560:	2200      	movs	r2, #0
 8004562:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004564:	187b      	adds	r3, r7, r1
 8004566:	2101      	movs	r1, #1
 8004568:	0018      	movs	r0, r3
 800456a:	f002 fca9 	bl	8006ec0 <HAL_RCC_ClockConfig>
 800456e:	1e03      	subs	r3, r0, #0
 8004570:	d001      	beq.n	8004576 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004572:	f000 fa51 	bl	8004a18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004576:	003b      	movs	r3, r7
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800457c:	003b      	movs	r3, r7
 800457e:	2200      	movs	r2, #0
 8004580:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004582:	003b      	movs	r3, r7
 8004584:	0018      	movs	r0, r3
 8004586:	f002 fde1 	bl	800714c <HAL_RCCEx_PeriphCLKConfig>
 800458a:	1e03      	subs	r3, r0, #0
 800458c:	d001      	beq.n	8004592 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800458e:	f000 fa43 	bl	8004a18 <Error_Handler>
  }
}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	46bd      	mov	sp, r7
 8004596:	b015      	add	sp, #84	@ 0x54
 8004598:	bd90      	pop	{r4, r7, pc}
	...

0800459c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80045a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004614 <MX_I2C2_Init+0x78>)
 80045a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 80045a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <MX_I2C2_Init+0x7c>)
 80045aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80045ac:	4b18      	ldr	r3, [pc, #96]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045b2:	4b17      	ldr	r3, [pc, #92]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045b8:	4b15      	ldr	r3, [pc, #84]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80045be:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80045c4:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045ca:	4b11      	ldr	r3, [pc, #68]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80045d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045d8:	0018      	movs	r0, r3
 80045da:	f001 fc51 	bl	8005e80 <HAL_I2C_Init>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d001      	beq.n	80045e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80045e2:	f000 fa19 	bl	8004a18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045e8:	2100      	movs	r1, #0
 80045ea:	0018      	movs	r0, r3
 80045ec:	f002 f8b6 	bl	800675c <HAL_I2CEx_ConfigAnalogFilter>
 80045f0:	1e03      	subs	r3, r0, #0
 80045f2:	d001      	beq.n	80045f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80045f4:	f000 fa10 	bl	8004a18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <MX_I2C2_Init+0x74>)
 80045fa:	2100      	movs	r1, #0
 80045fc:	0018      	movs	r0, r3
 80045fe:	f002 f8f9 	bl	80067f4 <HAL_I2CEx_ConfigDigitalFilter>
 8004602:	1e03      	subs	r3, r0, #0
 8004604:	d001      	beq.n	800460a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004606:	f000 fa07 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	2000021c 	.word	0x2000021c
 8004614:	40005800 	.word	0x40005800
 8004618:	0090194b 	.word	0x0090194b

0800461c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004620:	4b1c      	ldr	r3, [pc, #112]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004622:	4a1d      	ldr	r2, [pc, #116]	@ (8004698 <MX_SPI1_Init+0x7c>)
 8004624:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004626:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004628:	2282      	movs	r2, #130	@ 0x82
 800462a:	0052      	lsls	r2, r2, #1
 800462c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800462e:	4b19      	ldr	r3, [pc, #100]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004630:	2280      	movs	r2, #128	@ 0x80
 8004632:	00d2      	lsls	r2, r2, #3
 8004634:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004636:	4b17      	ldr	r3, [pc, #92]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004638:	22e0      	movs	r2, #224	@ 0xe0
 800463a:	00d2      	lsls	r2, r2, #3
 800463c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800463e:	4b15      	ldr	r3, [pc, #84]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004644:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004646:	2200      	movs	r2, #0
 8004648:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800464a:	4b12      	ldr	r3, [pc, #72]	@ (8004694 <MX_SPI1_Init+0x78>)
 800464c:	2280      	movs	r2, #128	@ 0x80
 800464e:	0092      	lsls	r2, r2, #2
 8004650:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004652:	4b10      	ldr	r3, [pc, #64]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004654:	2218      	movs	r2, #24
 8004656:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004658:	4b0e      	ldr	r3, [pc, #56]	@ (8004694 <MX_SPI1_Init+0x78>)
 800465a:	2200      	movs	r2, #0
 800465c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800465e:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004660:	2200      	movs	r2, #0
 8004662:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004664:	4b0b      	ldr	r3, [pc, #44]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004666:	2200      	movs	r2, #0
 8004668:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800466a:	4b0a      	ldr	r3, [pc, #40]	@ (8004694 <MX_SPI1_Init+0x78>)
 800466c:	2207      	movs	r2, #7
 800466e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004670:	4b08      	ldr	r3, [pc, #32]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004676:	4b07      	ldr	r3, [pc, #28]	@ (8004694 <MX_SPI1_Init+0x78>)
 8004678:	2208      	movs	r2, #8
 800467a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800467c:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <MX_SPI1_Init+0x78>)
 800467e:	0018      	movs	r0, r3
 8004680:	f002 fe32 	bl	80072e8 <HAL_SPI_Init>
 8004684:	1e03      	subs	r3, r0, #0
 8004686:	d001      	beq.n	800468c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8004688:	f000 f9c6 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	20000270 	.word	0x20000270
 8004698:	40013000 	.word	0x40013000

0800469c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80046a0:	4b19      	ldr	r3, [pc, #100]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046a2:	4a1a      	ldr	r2, [pc, #104]	@ (800470c <MX_SPI2_Init+0x70>)
 80046a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80046a6:	4b18      	ldr	r3, [pc, #96]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80046ac:	4b16      	ldr	r3, [pc, #88]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80046b2:	4b15      	ldr	r3, [pc, #84]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046b4:	22e0      	movs	r2, #224	@ 0xe0
 80046b6:	00d2      	lsls	r2, r2, #3
 80046b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ba:	4b13      	ldr	r3, [pc, #76]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046bc:	2200      	movs	r2, #0
 80046be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046c0:	4b11      	ldr	r3, [pc, #68]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80046c6:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80046d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046da:	2200      	movs	r2, #0
 80046dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80046de:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046e0:	2207      	movs	r2, #7
 80046e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80046e4:	4b08      	ldr	r3, [pc, #32]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80046ea:	4b07      	ldr	r3, [pc, #28]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <MX_SPI2_Init+0x6c>)
 80046f2:	0018      	movs	r0, r3
 80046f4:	f002 fdf8 	bl	80072e8 <HAL_SPI_Init>
 80046f8:	1e03      	subs	r3, r0, #0
 80046fa:	d001      	beq.n	8004700 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80046fc:	f000 f98c 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004700:	46c0      	nop			@ (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			@ (mov r8, r8)
 8004708:	200002d4 	.word	0x200002d4
 800470c:	40003800 	.word	0x40003800

08004710 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004716:	2308      	movs	r3, #8
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	0018      	movs	r0, r3
 800471c:	2310      	movs	r3, #16
 800471e:	001a      	movs	r2, r3
 8004720:	2100      	movs	r1, #0
 8004722:	f004 ffdd 	bl	80096e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004726:	003b      	movs	r3, r7
 8004728:	0018      	movs	r0, r3
 800472a:	2308      	movs	r3, #8
 800472c:	001a      	movs	r2, r3
 800472e:	2100      	movs	r1, #0
 8004730:	f004 ffd6 	bl	80096e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004734:	4b1f      	ldr	r3, [pc, #124]	@ (80047b4 <MX_TIM1_Init+0xa4>)
 8004736:	4a20      	ldr	r2, [pc, #128]	@ (80047b8 <MX_TIM1_Init+0xa8>)
 8004738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800473a:	4b1e      	ldr	r3, [pc, #120]	@ (80047b4 <MX_TIM1_Init+0xa4>)
 800473c:	2200      	movs	r2, #0
 800473e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004740:	4b1c      	ldr	r3, [pc, #112]	@ (80047b4 <MX_TIM1_Init+0xa4>)
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004746:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <MX_TIM1_Init+0xa4>)
 8004748:	4a1c      	ldr	r2, [pc, #112]	@ (80047bc <MX_TIM1_Init+0xac>)
 800474a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800474c:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <MX_TIM1_Init+0xa4>)
 800474e:	2200      	movs	r2, #0
 8004750:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004752:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <MX_TIM1_Init+0xa4>)
 8004754:	2200      	movs	r2, #0
 8004756:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004758:	4b16      	ldr	r3, [pc, #88]	@ (80047b4 <MX_TIM1_Init+0xa4>)
 800475a:	2280      	movs	r2, #128	@ 0x80
 800475c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800475e:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <MX_TIM1_Init+0xa4>)
 8004760:	0018      	movs	r0, r3
 8004762:	f003 fb81 	bl	8007e68 <HAL_TIM_Base_Init>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d001      	beq.n	800476e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800476a:	f000 f955 	bl	8004a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800476e:	2108      	movs	r1, #8
 8004770:	187b      	adds	r3, r7, r1
 8004772:	2280      	movs	r2, #128	@ 0x80
 8004774:	0152      	lsls	r2, r2, #5
 8004776:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004778:	187a      	adds	r2, r7, r1
 800477a:	4b0e      	ldr	r3, [pc, #56]	@ (80047b4 <MX_TIM1_Init+0xa4>)
 800477c:	0011      	movs	r1, r2
 800477e:	0018      	movs	r0, r3
 8004780:	f003 fc0e 	bl	8007fa0 <HAL_TIM_ConfigClockSource>
 8004784:	1e03      	subs	r3, r0, #0
 8004786:	d001      	beq.n	800478c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004788:	f000 f946 	bl	8004a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800478c:	003b      	movs	r3, r7
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004792:	003b      	movs	r3, r7
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004798:	003a      	movs	r2, r7
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <MX_TIM1_Init+0xa4>)
 800479c:	0011      	movs	r1, r2
 800479e:	0018      	movs	r0, r3
 80047a0:	f003 fdf0 	bl	8008384 <HAL_TIMEx_MasterConfigSynchronization>
 80047a4:	1e03      	subs	r3, r0, #0
 80047a6:	d001      	beq.n	80047ac <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80047a8:	f000 f936 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80047ac:	46c0      	nop			@ (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b006      	add	sp, #24
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	200003c0 	.word	0x200003c0
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	0000ffff 	.word	0x0000ffff

080047c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80047c4:	4b14      	ldr	r3, [pc, #80]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 80047c6:	4a15      	ldr	r2, [pc, #84]	@ (800481c <MX_USART1_UART_Init+0x5c>)
 80047c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80047ca:	4b13      	ldr	r3, [pc, #76]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 80047cc:	2296      	movs	r2, #150	@ 0x96
 80047ce:	0192      	lsls	r2, r2, #6
 80047d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047d2:	4b11      	ldr	r3, [pc, #68]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 80047da:	2200      	movs	r2, #0
 80047dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047de:	4b0e      	ldr	r3, [pc, #56]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 80047e6:	220c      	movs	r2, #12
 80047e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047f0:	4b09      	ldr	r3, [pc, #36]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047f6:	4b08      	ldr	r3, [pc, #32]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047fc:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 80047fe:	2200      	movs	r2, #0
 8004800:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004802:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <MX_USART1_UART_Init+0x58>)
 8004804:	0018      	movs	r0, r3
 8004806:	f003 fe15 	bl	8008434 <HAL_UART_Init>
 800480a:	1e03      	subs	r3, r0, #0
 800480c:	d001      	beq.n	8004812 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800480e:	f000 f903 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20000408 	.word	0x20000408
 800481c:	40013800 	.word	0x40013800

08004820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004826:	4b0c      	ldr	r3, [pc, #48]	@ (8004858 <MX_DMA_Init+0x38>)
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <MX_DMA_Init+0x38>)
 800482c:	2101      	movs	r1, #1
 800482e:	430a      	orrs	r2, r1
 8004830:	615a      	str	r2, [r3, #20]
 8004832:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <MX_DMA_Init+0x38>)
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	2201      	movs	r2, #1
 8004838:	4013      	ands	r3, r2
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800483e:	2200      	movs	r2, #0
 8004840:	2100      	movs	r1, #0
 8004842:	200b      	movs	r0, #11
 8004844:	f001 f81e 	bl	8005884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8004848:	200b      	movs	r0, #11
 800484a:	f001 f830 	bl	80058ae <HAL_NVIC_EnableIRQ>

}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b002      	add	sp, #8
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			@ (mov r8, r8)
 8004858:	40021000 	.word	0x40021000

0800485c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b089      	sub	sp, #36	@ 0x24
 8004860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004862:	240c      	movs	r4, #12
 8004864:	193b      	adds	r3, r7, r4
 8004866:	0018      	movs	r0, r3
 8004868:	2314      	movs	r3, #20
 800486a:	001a      	movs	r2, r3
 800486c:	2100      	movs	r1, #0
 800486e:	f004 ff37 	bl	80096e0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004872:	4b41      	ldr	r3, [pc, #260]	@ (8004978 <MX_GPIO_Init+0x11c>)
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	4b40      	ldr	r3, [pc, #256]	@ (8004978 <MX_GPIO_Init+0x11c>)
 8004878:	2180      	movs	r1, #128	@ 0x80
 800487a:	03c9      	lsls	r1, r1, #15
 800487c:	430a      	orrs	r2, r1
 800487e:	615a      	str	r2, [r3, #20]
 8004880:	4b3d      	ldr	r3, [pc, #244]	@ (8004978 <MX_GPIO_Init+0x11c>)
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	2380      	movs	r3, #128	@ 0x80
 8004886:	03db      	lsls	r3, r3, #15
 8004888:	4013      	ands	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800488e:	4b3a      	ldr	r3, [pc, #232]	@ (8004978 <MX_GPIO_Init+0x11c>)
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	4b39      	ldr	r3, [pc, #228]	@ (8004978 <MX_GPIO_Init+0x11c>)
 8004894:	2180      	movs	r1, #128	@ 0x80
 8004896:	0289      	lsls	r1, r1, #10
 8004898:	430a      	orrs	r2, r1
 800489a:	615a      	str	r2, [r3, #20]
 800489c:	4b36      	ldr	r3, [pc, #216]	@ (8004978 <MX_GPIO_Init+0x11c>)
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	2380      	movs	r3, #128	@ 0x80
 80048a2:	029b      	lsls	r3, r3, #10
 80048a4:	4013      	ands	r3, r2
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048aa:	4b33      	ldr	r3, [pc, #204]	@ (8004978 <MX_GPIO_Init+0x11c>)
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	4b32      	ldr	r3, [pc, #200]	@ (8004978 <MX_GPIO_Init+0x11c>)
 80048b0:	2180      	movs	r1, #128	@ 0x80
 80048b2:	02c9      	lsls	r1, r1, #11
 80048b4:	430a      	orrs	r2, r1
 80048b6:	615a      	str	r2, [r3, #20]
 80048b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004978 <MX_GPIO_Init+0x11c>)
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	2380      	movs	r3, #128	@ 0x80
 80048be:	02db      	lsls	r3, r3, #11
 80048c0:	4013      	ands	r3, r2
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 80048c6:	492d      	ldr	r1, [pc, #180]	@ (800497c <MX_GPIO_Init+0x120>)
 80048c8:	2390      	movs	r3, #144	@ 0x90
 80048ca:	05db      	lsls	r3, r3, #23
 80048cc:	2200      	movs	r2, #0
 80048ce:	0018      	movs	r0, r3
 80048d0:	f001 fa9d 	bl	8005e0e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80048d4:	193b      	adds	r3, r7, r4
 80048d6:	2205      	movs	r2, #5
 80048d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048da:	193b      	adds	r3, r7, r4
 80048dc:	2284      	movs	r2, #132	@ 0x84
 80048de:	0392      	lsls	r2, r2, #14
 80048e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e2:	193b      	adds	r3, r7, r4
 80048e4:	2200      	movs	r2, #0
 80048e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e8:	193a      	adds	r2, r7, r4
 80048ea:	2390      	movs	r3, #144	@ 0x90
 80048ec:	05db      	lsls	r3, r3, #23
 80048ee:	0011      	movs	r1, r2
 80048f0:	0018      	movs	r0, r3
 80048f2:	f001 f8ff 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 80048f6:	193b      	adds	r3, r7, r4
 80048f8:	4a20      	ldr	r2, [pc, #128]	@ (800497c <MX_GPIO_Init+0x120>)
 80048fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048fc:	193b      	adds	r3, r7, r4
 80048fe:	2201      	movs	r2, #1
 8004900:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004902:	193b      	adds	r3, r7, r4
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004908:	193b      	adds	r3, r7, r4
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490e:	193a      	adds	r2, r7, r4
 8004910:	2390      	movs	r3, #144	@ 0x90
 8004912:	05db      	lsls	r3, r3, #23
 8004914:	0011      	movs	r1, r2
 8004916:	0018      	movs	r0, r3
 8004918:	f001 f8ec 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800491c:	0021      	movs	r1, r4
 800491e:	187b      	adds	r3, r7, r1
 8004920:	22c0      	movs	r2, #192	@ 0xc0
 8004922:	0092      	lsls	r2, r2, #2
 8004924:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004926:	187b      	adds	r3, r7, r1
 8004928:	2284      	movs	r2, #132	@ 0x84
 800492a:	0392      	lsls	r2, r2, #14
 800492c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	187b      	adds	r3, r7, r1
 8004930:	2200      	movs	r2, #0
 8004932:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004934:	187b      	adds	r3, r7, r1
 8004936:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <MX_GPIO_Init+0x124>)
 8004938:	0019      	movs	r1, r3
 800493a:	0010      	movs	r0, r2
 800493c:	f001 f8da 	bl	8005af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004940:	2200      	movs	r2, #0
 8004942:	2100      	movs	r1, #0
 8004944:	2005      	movs	r0, #5
 8004946:	f000 ff9d 	bl	8005884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800494a:	2005      	movs	r0, #5
 800494c:	f000 ffaf 	bl	80058ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8004950:	2200      	movs	r2, #0
 8004952:	2103      	movs	r1, #3
 8004954:	2006      	movs	r0, #6
 8004956:	f000 ff95 	bl	8005884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800495a:	2006      	movs	r0, #6
 800495c:	f000 ffa7 	bl	80058ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8004960:	2200      	movs	r2, #0
 8004962:	2103      	movs	r1, #3
 8004964:	2007      	movs	r0, #7
 8004966:	f000 ff8d 	bl	8005884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800496a:	2007      	movs	r0, #7
 800496c:	f000 ff9f 	bl	80058ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004970:	46c0      	nop			@ (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	b009      	add	sp, #36	@ 0x24
 8004976:	bd90      	pop	{r4, r7, pc}
 8004978:	40021000 	.word	0x40021000
 800497c:	00008012 	.word	0x00008012
 8004980:	48000400 	.word	0x48000400

08004984 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	0002      	movs	r2, r0
 800498c:	1dbb      	adds	r3, r7, #6
 800498e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin==GPIO_PIN_0){
 8004990:	1dbb      	adds	r3, r7, #6
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d103      	bne.n	80049a0 <HAL_GPIO_EXTI_Callback+0x1c>
		zero_cross_detected = true;
 8004998:	4b1b      	ldr	r3, [pc, #108]	@ (8004a08 <HAL_GPIO_EXTI_Callback+0x84>)
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]
					turn_CW_CCW=2;
				}
		}


}
 800499e:	e02f      	b.n	8004a00 <HAL_GPIO_EXTI_Callback+0x7c>
	else if(GPIO_Pin==GPIO_PIN_2){
 80049a0:	1dbb      	adds	r3, r7, #6
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d106      	bne.n	80049b6 <HAL_GPIO_EXTI_Callback+0x32>
		button=true;
 80049a8:	4b18      	ldr	r3, [pc, #96]	@ (8004a0c <HAL_GPIO_EXTI_Callback+0x88>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80049ae:	200a      	movs	r0, #10
 80049b0:	f000 fe98 	bl	80056e4 <HAL_Delay>
}
 80049b4:	e024      	b.n	8004a00 <HAL_GPIO_EXTI_Callback+0x7c>
	else if(GPIO_Pin==GPIO_PIN_8){
 80049b6:	1dbb      	adds	r3, r7, #6
 80049b8:	881a      	ldrh	r2, [r3, #0]
 80049ba:	2380      	movs	r3, #128	@ 0x80
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	429a      	cmp	r2, r3
 80049c0:	d10c      	bne.n	80049dc <HAL_GPIO_EXTI_Callback+0x58>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)){
 80049c2:	2380      	movs	r3, #128	@ 0x80
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4a12      	ldr	r2, [pc, #72]	@ (8004a10 <HAL_GPIO_EXTI_Callback+0x8c>)
 80049c8:	0019      	movs	r1, r3
 80049ca:	0010      	movs	r0, r2
 80049cc:	f001 fa02 	bl	8005dd4 <HAL_GPIO_ReadPin>
 80049d0:	1e03      	subs	r3, r0, #0
 80049d2:	d015      	beq.n	8004a00 <HAL_GPIO_EXTI_Callback+0x7c>
			turn_CW_CCW=1;
 80049d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a14 <HAL_GPIO_EXTI_Callback+0x90>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
}
 80049da:	e011      	b.n	8004a00 <HAL_GPIO_EXTI_Callback+0x7c>
	else if(GPIO_Pin==GPIO_PIN_9){
 80049dc:	1dbb      	adds	r3, r7, #6
 80049de:	881a      	ldrh	r2, [r3, #0]
 80049e0:	2380      	movs	r3, #128	@ 0x80
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d10b      	bne.n	8004a00 <HAL_GPIO_EXTI_Callback+0x7c>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)){
 80049e8:	2380      	movs	r3, #128	@ 0x80
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	4a08      	ldr	r2, [pc, #32]	@ (8004a10 <HAL_GPIO_EXTI_Callback+0x8c>)
 80049ee:	0019      	movs	r1, r3
 80049f0:	0010      	movs	r0, r2
 80049f2:	f001 f9ef 	bl	8005dd4 <HAL_GPIO_ReadPin>
 80049f6:	1e03      	subs	r3, r0, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_GPIO_EXTI_Callback+0x7c>
					turn_CW_CCW=2;
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_GPIO_EXTI_Callback+0x90>)
 80049fc:	2202      	movs	r2, #2
 80049fe:	601a      	str	r2, [r3, #0]
}
 8004a00:	46c0      	nop			@ (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000494 	.word	0x20000494
 8004a0c:	200004b4 	.word	0x200004b4
 8004a10:	48000400 	.word	0x48000400
 8004a14:	200004d0 	.word	0x200004d0

08004a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a1c:	b672      	cpsid	i
}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	e7fd      	b.n	8004a20 <Error_Handler+0x8>

08004a24 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004a28:	46c0      	nop			@ (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af04      	add	r7, sp, #16
 8004a36:	0002      	movs	r2, r0
 8004a38:	1dfb      	adds	r3, r7, #7
 8004a3a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004a3c:	4808      	ldr	r0, [pc, #32]	@ (8004a60 <ssd1306_WriteCommand+0x30>)
 8004a3e:	2301      	movs	r3, #1
 8004a40:	425b      	negs	r3, r3
 8004a42:	9302      	str	r3, [sp, #8]
 8004a44:	2301      	movs	r3, #1
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	1dfb      	adds	r3, r7, #7
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2178      	movs	r1, #120	@ 0x78
 8004a52:	f001 fabb 	bl	8005fcc <HAL_I2C_Mem_Write>
}
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	2000021c 	.word	0x2000021c

08004a64 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af04      	add	r7, sp, #16
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	4808      	ldr	r0, [pc, #32]	@ (8004a94 <ssd1306_WriteData+0x30>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	4252      	negs	r2, r2
 8004a78:	9202      	str	r2, [sp, #8]
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	2301      	movs	r3, #1
 8004a82:	2240      	movs	r2, #64	@ 0x40
 8004a84:	2178      	movs	r1, #120	@ 0x78
 8004a86:	f001 faa1 	bl	8005fcc <HAL_I2C_Mem_Write>
}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b002      	add	sp, #8
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	2000021c 	.word	0x2000021c

08004a98 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004a9c:	f7ff ffc2 	bl	8004a24 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004aa0:	2064      	movs	r0, #100	@ 0x64
 8004aa2:	f000 fe1f 	bl	80056e4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f000 fa9c 	bl	8004fe4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004aac:	2020      	movs	r0, #32
 8004aae:	f7ff ffbf 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f7ff ffbc 	bl	8004a30 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004ab8:	20b0      	movs	r0, #176	@ 0xb0
 8004aba:	f7ff ffb9 	bl	8004a30 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004abe:	20c8      	movs	r0, #200	@ 0xc8
 8004ac0:	f7ff ffb6 	bl	8004a30 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f7ff ffb3 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004aca:	2010      	movs	r0, #16
 8004acc:	f7ff ffb0 	bl	8004a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004ad0:	2040      	movs	r0, #64	@ 0x40
 8004ad2:	f7ff ffad 	bl	8004a30 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004ad6:	20ff      	movs	r0, #255	@ 0xff
 8004ad8:	f000 fa6b 	bl	8004fb2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004adc:	20a1      	movs	r0, #161	@ 0xa1
 8004ade:	f7ff ffa7 	bl	8004a30 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004ae2:	20a6      	movs	r0, #166	@ 0xa6
 8004ae4:	f7ff ffa4 	bl	8004a30 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004ae8:	20a8      	movs	r0, #168	@ 0xa8
 8004aea:	f7ff ffa1 	bl	8004a30 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004aee:	203f      	movs	r0, #63	@ 0x3f
 8004af0:	f7ff ff9e 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004af4:	20a4      	movs	r0, #164	@ 0xa4
 8004af6:	f7ff ff9b 	bl	8004a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004afa:	20d3      	movs	r0, #211	@ 0xd3
 8004afc:	f7ff ff98 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004b00:	2000      	movs	r0, #0
 8004b02:	f7ff ff95 	bl	8004a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004b06:	20d5      	movs	r0, #213	@ 0xd5
 8004b08:	f7ff ff92 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004b0c:	20f0      	movs	r0, #240	@ 0xf0
 8004b0e:	f7ff ff8f 	bl	8004a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004b12:	20d9      	movs	r0, #217	@ 0xd9
 8004b14:	f7ff ff8c 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004b18:	2022      	movs	r0, #34	@ 0x22
 8004b1a:	f7ff ff89 	bl	8004a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004b1e:	20da      	movs	r0, #218	@ 0xda
 8004b20:	f7ff ff86 	bl	8004a30 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004b24:	2012      	movs	r0, #18
 8004b26:	f7ff ff83 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004b2a:	20db      	movs	r0, #219	@ 0xdb
 8004b2c:	f7ff ff80 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004b30:	2020      	movs	r0, #32
 8004b32:	f7ff ff7d 	bl	8004a30 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004b36:	208d      	movs	r0, #141	@ 0x8d
 8004b38:	f7ff ff7a 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004b3c:	2014      	movs	r0, #20
 8004b3e:	f7ff ff77 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004b42:	2001      	movs	r0, #1
 8004b44:	f000 fa4e 	bl	8004fe4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004b48:	2000      	movs	r0, #0
 8004b4a:	f000 f811 	bl	8004b70 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004b4e:	f000 f829 	bl	8004ba4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004b52:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <ssd1306_Init+0xd4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004b58:	4b04      	ldr	r3, [pc, #16]	@ (8004b6c <ssd1306_Init+0xd4>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004b5e:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <ssd1306_Init+0xd4>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	711a      	strb	r2, [r3, #4]
}
 8004b64:	46c0      	nop			@ (mov r8, r8)
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	20000904 	.word	0x20000904

08004b70 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	0002      	movs	r2, r0
 8004b78:	1dfb      	adds	r3, r7, #7
 8004b7a:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004b7c:	1dfb      	adds	r3, r7, #7
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <ssd1306_Fill+0x18>
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <ssd1306_Fill+0x1a>
 8004b88:	23ff      	movs	r3, #255	@ 0xff
 8004b8a:	2280      	movs	r2, #128	@ 0x80
 8004b8c:	00d2      	lsls	r2, r2, #3
 8004b8e:	4804      	ldr	r0, [pc, #16]	@ (8004ba0 <ssd1306_Fill+0x30>)
 8004b90:	0019      	movs	r1, r3
 8004b92:	f004 fda5 	bl	80096e0 <memset>
}
 8004b96:	46c0      	nop			@ (mov r8, r8)
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b002      	add	sp, #8
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	20000504 	.word	0x20000504

08004ba4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004baa:	1dfb      	adds	r3, r7, #7
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e01a      	b.n	8004be8 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004bb2:	1dfb      	adds	r3, r7, #7
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	3b50      	subs	r3, #80	@ 0x50
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f7ff ff38 	bl	8004a30 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f7ff ff35 	bl	8004a30 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004bc6:	2010      	movs	r0, #16
 8004bc8:	f7ff ff32 	bl	8004a30 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004bcc:	1dfb      	adds	r3, r7, #7
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	01da      	lsls	r2, r3, #7
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <ssd1306_UpdateScreen+0x58>)
 8004bd4:	18d3      	adds	r3, r2, r3
 8004bd6:	2180      	movs	r1, #128	@ 0x80
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7ff ff43 	bl	8004a64 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004bde:	1dfb      	adds	r3, r7, #7
 8004be0:	781a      	ldrb	r2, [r3, #0]
 8004be2:	1dfb      	adds	r3, r7, #7
 8004be4:	3201      	adds	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	1dfb      	adds	r3, r7, #7
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b07      	cmp	r3, #7
 8004bee:	d9e0      	bls.n	8004bb2 <ssd1306_UpdateScreen+0xe>
    }
}
 8004bf0:	46c0      	nop			@ (mov r8, r8)
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b002      	add	sp, #8
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			@ (mov r8, r8)
 8004bfc:	20000504 	.word	0x20000504

08004c00 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	0004      	movs	r4, r0
 8004c08:	0008      	movs	r0, r1
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	1dfb      	adds	r3, r7, #7
 8004c0e:	1c22      	adds	r2, r4, #0
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	1dbb      	adds	r3, r7, #6
 8004c14:	1c02      	adds	r2, r0, #0
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	1d7b      	adds	r3, r7, #5
 8004c1a:	1c0a      	adds	r2, r1, #0
 8004c1c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004c1e:	1dfb      	adds	r3, r7, #7
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b25b      	sxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	db47      	blt.n	8004cb8 <ssd1306_DrawPixel+0xb8>
 8004c28:	1dbb      	adds	r3, r7, #6
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c2e:	d843      	bhi.n	8004cb8 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004c30:	1d7b      	adds	r3, r7, #5
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d11e      	bne.n	8004c76 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004c38:	1dfb      	adds	r3, r7, #7
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	1dbb      	adds	r3, r7, #6
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	b2d8      	uxtb	r0, r3
 8004c44:	0003      	movs	r3, r0
 8004c46:	01db      	lsls	r3, r3, #7
 8004c48:	18d3      	adds	r3, r2, r3
 8004c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc0 <ssd1306_DrawPixel+0xc0>)
 8004c4c:	5cd3      	ldrb	r3, [r2, r3]
 8004c4e:	b25a      	sxtb	r2, r3
 8004c50:	1dbb      	adds	r3, r7, #6
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2107      	movs	r1, #7
 8004c56:	400b      	ands	r3, r1
 8004c58:	2101      	movs	r1, #1
 8004c5a:	4099      	lsls	r1, r3
 8004c5c:	000b      	movs	r3, r1
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	4313      	orrs	r3, r2
 8004c62:	b259      	sxtb	r1, r3
 8004c64:	1dfb      	adds	r3, r7, #7
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	0003      	movs	r3, r0
 8004c6a:	01db      	lsls	r3, r3, #7
 8004c6c:	18d3      	adds	r3, r2, r3
 8004c6e:	b2c9      	uxtb	r1, r1
 8004c70:	4a13      	ldr	r2, [pc, #76]	@ (8004cc0 <ssd1306_DrawPixel+0xc0>)
 8004c72:	54d1      	strb	r1, [r2, r3]
 8004c74:	e021      	b.n	8004cba <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	1dbb      	adds	r3, r7, #6
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	08db      	lsrs	r3, r3, #3
 8004c80:	b2d8      	uxtb	r0, r3
 8004c82:	0003      	movs	r3, r0
 8004c84:	01db      	lsls	r3, r3, #7
 8004c86:	18d3      	adds	r3, r2, r3
 8004c88:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc0 <ssd1306_DrawPixel+0xc0>)
 8004c8a:	5cd3      	ldrb	r3, [r2, r3]
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	1dba      	adds	r2, r7, #6
 8004c90:	7812      	ldrb	r2, [r2, #0]
 8004c92:	2107      	movs	r1, #7
 8004c94:	400a      	ands	r2, r1
 8004c96:	2101      	movs	r1, #1
 8004c98:	4091      	lsls	r1, r2
 8004c9a:	000a      	movs	r2, r1
 8004c9c:	b252      	sxtb	r2, r2
 8004c9e:	43d2      	mvns	r2, r2
 8004ca0:	b252      	sxtb	r2, r2
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	b259      	sxtb	r1, r3
 8004ca6:	1dfb      	adds	r3, r7, #7
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	0003      	movs	r3, r0
 8004cac:	01db      	lsls	r3, r3, #7
 8004cae:	18d3      	adds	r3, r2, r3
 8004cb0:	b2c9      	uxtb	r1, r1
 8004cb2:	4a03      	ldr	r2, [pc, #12]	@ (8004cc0 <ssd1306_DrawPixel+0xc0>)
 8004cb4:	54d1      	strb	r1, [r2, r3]
 8004cb6:	e000      	b.n	8004cba <ssd1306_DrawPixel+0xba>
        return;
 8004cb8:	46c0      	nop			@ (mov r8, r8)
    }
}
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b003      	add	sp, #12
 8004cbe:	bd90      	pop	{r4, r7, pc}
 8004cc0:	20000504 	.word	0x20000504

08004cc4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b089      	sub	sp, #36	@ 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	0004      	movs	r4, r0
 8004ccc:	0038      	movs	r0, r7
 8004cce:	6001      	str	r1, [r0, #0]
 8004cd0:	6042      	str	r2, [r0, #4]
 8004cd2:	6083      	str	r3, [r0, #8]
 8004cd4:	210f      	movs	r1, #15
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	1c22      	adds	r2, r4, #0
 8004cda:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004cdc:	000a      	movs	r2, r1
 8004cde:	18bb      	adds	r3, r7, r2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b1f      	cmp	r3, #31
 8004ce4:	d903      	bls.n	8004cee <ssd1306_WriteChar+0x2a>
 8004ce6:	18bb      	adds	r3, r7, r2
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b7e      	cmp	r3, #126	@ 0x7e
 8004cec:	d901      	bls.n	8004cf2 <ssd1306_WriteChar+0x2e>
        return 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e08b      	b.n	8004e0a <ssd1306_WriteChar+0x146>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8004cf2:	003b      	movs	r3, r7
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <ssd1306_WriteChar+0x48>
 8004cfa:	003b      	movs	r3, r7
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	230f      	movs	r3, #15
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	3b20      	subs	r3, #32
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	e001      	b.n	8004d10 <ssd1306_WriteChar+0x4c>
 8004d0c:	003b      	movs	r3, r7
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2117      	movs	r1, #23
 8004d12:	187a      	adds	r2, r7, r1
 8004d14:	7013      	strb	r3, [r2, #0]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004d16:	4b3f      	ldr	r3, [pc, #252]	@ (8004e14 <ssd1306_WriteChar+0x150>)
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	18d3      	adds	r3, r2, r3
 8004d22:	2b80      	cmp	r3, #128	@ 0x80
 8004d24:	dc07      	bgt.n	8004d36 <ssd1306_WriteChar+0x72>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004d26:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <ssd1306_WriteChar+0x150>)
 8004d28:	885b      	ldrh	r3, [r3, #2]
 8004d2a:	001a      	movs	r2, r3
 8004d2c:	003b      	movs	r3, r7
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004d32:	2b40      	cmp	r3, #64	@ 0x40
 8004d34:	dd01      	ble.n	8004d3a <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        return 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	e067      	b.n	8004e0a <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	e051      	b.n	8004de4 <ssd1306_WriteChar+0x120>
        b = Font.data[(ch - 32) * Font.height + i];
 8004d40:	003b      	movs	r3, r7
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	230f      	movs	r3, #15
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	3b20      	subs	r3, #32
 8004d4c:	0039      	movs	r1, r7
 8004d4e:	7849      	ldrb	r1, [r1, #1]
 8004d50:	434b      	muls	r3, r1
 8004d52:	0019      	movs	r1, r3
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	18cb      	adds	r3, r1, r3
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	18d3      	adds	r3, r2, r3
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	e035      	b.n	8004dd2 <ssd1306_WriteChar+0x10e>
            if((b << j) & 0x8000)  {
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	2380      	movs	r3, #128	@ 0x80
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	4013      	ands	r3, r2
 8004d72:	d014      	beq.n	8004d9e <ssd1306_WriteChar+0xda>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004d74:	4b27      	ldr	r3, [pc, #156]	@ (8004e14 <ssd1306_WriteChar+0x150>)
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	18d3      	adds	r3, r2, r3
 8004d80:	b2d8      	uxtb	r0, r3
 8004d82:	4b24      	ldr	r3, [pc, #144]	@ (8004e14 <ssd1306_WriteChar+0x150>)
 8004d84:	885b      	ldrh	r3, [r3, #2]
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	18d3      	adds	r3, r2, r3
 8004d8e:	b2d9      	uxtb	r1, r3
 8004d90:	2330      	movs	r3, #48	@ 0x30
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	001a      	movs	r2, r3
 8004d98:	f7ff ff32 	bl	8004c00 <ssd1306_DrawPixel>
 8004d9c:	e016      	b.n	8004dcc <ssd1306_WriteChar+0x108>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e14 <ssd1306_WriteChar+0x150>)
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	18d3      	adds	r3, r2, r3
 8004daa:	b2d8      	uxtb	r0, r3
 8004dac:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <ssd1306_WriteChar+0x150>)
 8004dae:	885b      	ldrh	r3, [r3, #2]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	18d3      	adds	r3, r2, r3
 8004db8:	b2d9      	uxtb	r1, r3
 8004dba:	2330      	movs	r3, #48	@ 0x30
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	425a      	negs	r2, r3
 8004dc2:	4153      	adcs	r3, r2
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	f7ff ff1a 	bl	8004c00 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	2317      	movs	r3, #23
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d3c3      	bcc.n	8004d66 <ssd1306_WriteChar+0xa2>
    for(i = 0; i < Font.height; i++) {
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	3301      	adds	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	003b      	movs	r3, r7
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	001a      	movs	r2, r3
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d3a7      	bcc.n	8004d40 <ssd1306_WriteChar+0x7c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8004df0:	4b08      	ldr	r3, [pc, #32]	@ (8004e14 <ssd1306_WriteChar+0x150>)
 8004df2:	881a      	ldrh	r2, [r3, #0]
 8004df4:	2317      	movs	r3, #23
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	18d3      	adds	r3, r2, r3
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	4b04      	ldr	r3, [pc, #16]	@ (8004e14 <ssd1306_WriteChar+0x150>)
 8004e02:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004e04:	230f      	movs	r3, #15
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	781b      	ldrb	r3, [r3, #0]
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b009      	add	sp, #36	@ 0x24
 8004e10:	bd90      	pop	{r4, r7, pc}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	20000904 	.word	0x20000904

08004e18 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	0038      	movs	r0, r7
 8004e22:	6001      	str	r1, [r0, #0]
 8004e24:	6042      	str	r2, [r0, #4]
 8004e26:	6083      	str	r3, [r0, #8]
    while (*str) {
 8004e28:	e017      	b.n	8004e5a <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	7818      	ldrb	r0, [r3, #0]
 8004e2e:	003b      	movs	r3, r7
 8004e30:	2218      	movs	r2, #24
 8004e32:	18ba      	adds	r2, r7, r2
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	9200      	str	r2, [sp, #0]
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f7ff ff41 	bl	8004cc4 <ssd1306_WriteChar>
 8004e42:	0003      	movs	r3, r0
 8004e44:	001a      	movs	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d002      	beq.n	8004e54 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	e008      	b.n	8004e66 <ssd1306_WriteString+0x4e>
        }
        str++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e3      	bne.n	8004e2a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	781b      	ldrb	r3, [r3, #0]
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b004      	add	sp, #16
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	0002      	movs	r2, r0
 8004e78:	1dfb      	adds	r3, r7, #7
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	1dbb      	adds	r3, r7, #6
 8004e7e:	1c0a      	adds	r2, r1, #0
 8004e80:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8004e82:	1dfb      	adds	r3, r7, #7
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	4b05      	ldr	r3, [pc, #20]	@ (8004ea0 <ssd1306_SetCursor+0x30>)
 8004e8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004e8c:	1dbb      	adds	r3, r7, #6
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	4b03      	ldr	r3, [pc, #12]	@ (8004ea0 <ssd1306_SetCursor+0x30>)
 8004e94:	805a      	strh	r2, [r3, #2]
}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b002      	add	sp, #8
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	20000904 	.word	0x20000904

08004ea4 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004ea4:	b5b0      	push	{r4, r5, r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	0005      	movs	r5, r0
 8004eac:	000c      	movs	r4, r1
 8004eae:	0010      	movs	r0, r2
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	1dfb      	adds	r3, r7, #7
 8004eb4:	1c2a      	adds	r2, r5, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	1dbb      	adds	r3, r7, #6
 8004eba:	1c22      	adds	r2, r4, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	1d7b      	adds	r3, r7, #5
 8004ec0:	1c02      	adds	r2, r0, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	1d3b      	adds	r3, r7, #4
 8004ec6:	1c0a      	adds	r2, r1, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8004eca:	230d      	movs	r3, #13
 8004ecc:	18fa      	adds	r2, r7, r3
 8004ece:	1dfb      	adds	r3, r7, #7
 8004ed0:	1d79      	adds	r1, r7, #5
 8004ed2:	780c      	ldrb	r4, [r1, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	b2d8      	uxtb	r0, r3
 8004ed8:	b2e1      	uxtb	r1, r4
 8004eda:	4288      	cmp	r0, r1
 8004edc:	d900      	bls.n	8004ee0 <ssd1306_FillRectangle+0x3c>
 8004ede:	1c23      	adds	r3, r4, #0
 8004ee0:	7013      	strb	r3, [r2, #0]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	18fa      	adds	r2, r7, r3
 8004ee6:	1d7b      	adds	r3, r7, #5
 8004ee8:	1df9      	adds	r1, r7, #7
 8004eea:	780c      	ldrb	r4, [r1, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	b2d8      	uxtb	r0, r3
 8004ef0:	b2e1      	uxtb	r1, r4
 8004ef2:	4288      	cmp	r0, r1
 8004ef4:	d200      	bcs.n	8004ef8 <ssd1306_FillRectangle+0x54>
 8004ef6:	1c23      	adds	r3, r4, #0
 8004ef8:	7013      	strb	r3, [r2, #0]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8004efa:	230b      	movs	r3, #11
 8004efc:	18fa      	adds	r2, r7, r3
 8004efe:	1dbb      	adds	r3, r7, #6
 8004f00:	1d39      	adds	r1, r7, #4
 8004f02:	780c      	ldrb	r4, [r1, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	b2d8      	uxtb	r0, r3
 8004f08:	b2e1      	uxtb	r1, r4
 8004f0a:	4288      	cmp	r0, r1
 8004f0c:	d900      	bls.n	8004f10 <ssd1306_FillRectangle+0x6c>
 8004f0e:	1c23      	adds	r3, r4, #0
 8004f10:	7013      	strb	r3, [r2, #0]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004f12:	230a      	movs	r3, #10
 8004f14:	18fa      	adds	r2, r7, r3
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	1db9      	adds	r1, r7, #6
 8004f1a:	780c      	ldrb	r4, [r1, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b2d8      	uxtb	r0, r3
 8004f20:	b2e1      	uxtb	r1, r4
 8004f22:	4288      	cmp	r0, r1
 8004f24:	d200      	bcs.n	8004f28 <ssd1306_FillRectangle+0x84>
 8004f26:	1c23      	adds	r3, r4, #0
 8004f28:	7013      	strb	r3, [r2, #0]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004f2a:	230f      	movs	r3, #15
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	220b      	movs	r2, #11
 8004f30:	18ba      	adds	r2, r7, r2
 8004f32:	7812      	ldrb	r2, [r2, #0]
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	e02b      	b.n	8004f90 <ssd1306_FillRectangle+0xec>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004f38:	230e      	movs	r3, #14
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	220d      	movs	r2, #13
 8004f3e:	18ba      	adds	r2, r7, r2
 8004f40:	7812      	ldrb	r2, [r2, #0]
 8004f42:	701a      	strb	r2, [r3, #0]
 8004f44:	e011      	b.n	8004f6a <ssd1306_FillRectangle+0xc6>
            ssd1306_DrawPixel(x, y, color);
 8004f46:	2320      	movs	r3, #32
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	781a      	ldrb	r2, [r3, #0]
 8004f4c:	230f      	movs	r3, #15
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	7819      	ldrb	r1, [r3, #0]
 8004f52:	240e      	movs	r4, #14
 8004f54:	193b      	adds	r3, r7, r4
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f7ff fe51 	bl	8004c00 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004f5e:	0021      	movs	r1, r4
 8004f60:	187b      	adds	r3, r7, r1
 8004f62:	781a      	ldrb	r2, [r3, #0]
 8004f64:	187b      	adds	r3, r7, r1
 8004f66:	3201      	adds	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	210e      	movs	r1, #14
 8004f6c:	187a      	adds	r2, r7, r1
 8004f6e:	230c      	movs	r3, #12
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	7812      	ldrb	r2, [r2, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d804      	bhi.n	8004f84 <ssd1306_FillRectangle+0xe0>
 8004f7a:	187b      	adds	r3, r7, r1
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	b25b      	sxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	dae0      	bge.n	8004f46 <ssd1306_FillRectangle+0xa2>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004f84:	210f      	movs	r1, #15
 8004f86:	187b      	adds	r3, r7, r1
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	3201      	adds	r2, #1
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	210f      	movs	r1, #15
 8004f92:	187a      	adds	r2, r7, r1
 8004f94:	230a      	movs	r3, #10
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	7812      	ldrb	r2, [r2, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d804      	bhi.n	8004faa <ssd1306_FillRectangle+0x106>
 8004fa0:	187b      	adds	r3, r7, r1
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b3f      	cmp	r3, #63	@ 0x3f
 8004fa6:	d9c7      	bls.n	8004f38 <ssd1306_FillRectangle+0x94>
        }
    }
    return;
 8004fa8:	46c0      	nop			@ (mov r8, r8)
 8004faa:	46c0      	nop			@ (mov r8, r8)
}
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b004      	add	sp, #16
 8004fb0:	bdb0      	pop	{r4, r5, r7, pc}

08004fb2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	0002      	movs	r2, r0
 8004fba:	1dfb      	adds	r3, r7, #7
 8004fbc:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004fbe:	210f      	movs	r1, #15
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	2281      	movs	r2, #129	@ 0x81
 8004fc4:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004fc6:	187b      	adds	r3, r7, r1
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f7ff fd30 	bl	8004a30 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004fd0:	1dfb      	adds	r3, r7, #7
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7ff fd2b 	bl	8004a30 <ssd1306_WriteCommand>
}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b004      	add	sp, #16
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	0002      	movs	r2, r0
 8004fec:	1dfb      	adds	r3, r7, #7
 8004fee:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8004ff0:	1dfb      	adds	r3, r7, #7
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8004ff8:	230f      	movs	r3, #15
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	22af      	movs	r2, #175	@ 0xaf
 8004ffe:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8005000:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <ssd1306_SetDisplayOn+0x48>)
 8005002:	2201      	movs	r2, #1
 8005004:	715a      	strb	r2, [r3, #5]
 8005006:	e006      	b.n	8005016 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8005008:	230f      	movs	r3, #15
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	22ae      	movs	r2, #174	@ 0xae
 800500e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8005010:	4b06      	ldr	r3, [pc, #24]	@ (800502c <ssd1306_SetDisplayOn+0x48>)
 8005012:	2200      	movs	r2, #0
 8005014:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005016:	230f      	movs	r3, #15
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	0018      	movs	r0, r3
 800501e:	f7ff fd07 	bl	8004a30 <ssd1306_WriteCommand>
}
 8005022:	46c0      	nop			@ (mov r8, r8)
 8005024:	46bd      	mov	sp, r7
 8005026:	b004      	add	sp, #16
 8005028:	bd80      	pop	{r7, pc}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	20000904 	.word	0x20000904

08005030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005036:	4b0f      	ldr	r3, [pc, #60]	@ (8005074 <HAL_MspInit+0x44>)
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <HAL_MspInit+0x44>)
 800503c:	2101      	movs	r1, #1
 800503e:	430a      	orrs	r2, r1
 8005040:	619a      	str	r2, [r3, #24]
 8005042:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <HAL_MspInit+0x44>)
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2201      	movs	r2, #1
 8005048:	4013      	ands	r3, r2
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800504e:	4b09      	ldr	r3, [pc, #36]	@ (8005074 <HAL_MspInit+0x44>)
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	4b08      	ldr	r3, [pc, #32]	@ (8005074 <HAL_MspInit+0x44>)
 8005054:	2180      	movs	r1, #128	@ 0x80
 8005056:	0549      	lsls	r1, r1, #21
 8005058:	430a      	orrs	r2, r1
 800505a:	61da      	str	r2, [r3, #28]
 800505c:	4b05      	ldr	r3, [pc, #20]	@ (8005074 <HAL_MspInit+0x44>)
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	2380      	movs	r3, #128	@ 0x80
 8005062:	055b      	lsls	r3, r3, #21
 8005064:	4013      	ands	r3, r2
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800506a:	46c0      	nop			@ (mov r8, r8)
 800506c:	46bd      	mov	sp, r7
 800506e:	b002      	add	sp, #8
 8005070:	bd80      	pop	{r7, pc}
 8005072:	46c0      	nop			@ (mov r8, r8)
 8005074:	40021000 	.word	0x40021000

08005078 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b08b      	sub	sp, #44	@ 0x2c
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005080:	2414      	movs	r4, #20
 8005082:	193b      	adds	r3, r7, r4
 8005084:	0018      	movs	r0, r3
 8005086:	2314      	movs	r3, #20
 8005088:	001a      	movs	r2, r3
 800508a:	2100      	movs	r1, #0
 800508c:	f004 fb28 	bl	80096e0 <memset>
  if(hi2c->Instance==I2C2)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1c      	ldr	r2, [pc, #112]	@ (8005108 <HAL_I2C_MspInit+0x90>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d132      	bne.n	8005100 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800509a:	4b1c      	ldr	r3, [pc, #112]	@ (800510c <HAL_I2C_MspInit+0x94>)
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	4b1b      	ldr	r3, [pc, #108]	@ (800510c <HAL_I2C_MspInit+0x94>)
 80050a0:	2180      	movs	r1, #128	@ 0x80
 80050a2:	02c9      	lsls	r1, r1, #11
 80050a4:	430a      	orrs	r2, r1
 80050a6:	615a      	str	r2, [r3, #20]
 80050a8:	4b18      	ldr	r3, [pc, #96]	@ (800510c <HAL_I2C_MspInit+0x94>)
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	2380      	movs	r3, #128	@ 0x80
 80050ae:	02db      	lsls	r3, r3, #11
 80050b0:	4013      	ands	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80050b6:	193b      	adds	r3, r7, r4
 80050b8:	22c0      	movs	r2, #192	@ 0xc0
 80050ba:	0112      	lsls	r2, r2, #4
 80050bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050be:	0021      	movs	r1, r4
 80050c0:	187b      	adds	r3, r7, r1
 80050c2:	2212      	movs	r2, #18
 80050c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c6:	187b      	adds	r3, r7, r1
 80050c8:	2200      	movs	r2, #0
 80050ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	2203      	movs	r2, #3
 80050d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80050d2:	187b      	adds	r3, r7, r1
 80050d4:	2201      	movs	r2, #1
 80050d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d8:	187b      	adds	r3, r7, r1
 80050da:	4a0d      	ldr	r2, [pc, #52]	@ (8005110 <HAL_I2C_MspInit+0x98>)
 80050dc:	0019      	movs	r1, r3
 80050de:	0010      	movs	r0, r2
 80050e0:	f000 fd08 	bl	8005af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80050e4:	4b09      	ldr	r3, [pc, #36]	@ (800510c <HAL_I2C_MspInit+0x94>)
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	4b08      	ldr	r3, [pc, #32]	@ (800510c <HAL_I2C_MspInit+0x94>)
 80050ea:	2180      	movs	r1, #128	@ 0x80
 80050ec:	03c9      	lsls	r1, r1, #15
 80050ee:	430a      	orrs	r2, r1
 80050f0:	61da      	str	r2, [r3, #28]
 80050f2:	4b06      	ldr	r3, [pc, #24]	@ (800510c <HAL_I2C_MspInit+0x94>)
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	2380      	movs	r3, #128	@ 0x80
 80050f8:	03db      	lsls	r3, r3, #15
 80050fa:	4013      	ands	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8005100:	46c0      	nop			@ (mov r8, r8)
 8005102:	46bd      	mov	sp, r7
 8005104:	b00b      	add	sp, #44	@ 0x2c
 8005106:	bd90      	pop	{r4, r7, pc}
 8005108:	40005800 	.word	0x40005800
 800510c:	40021000 	.word	0x40021000
 8005110:	48000400 	.word	0x48000400

08005114 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005114:	b590      	push	{r4, r7, lr}
 8005116:	b08d      	sub	sp, #52	@ 0x34
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800511c:	241c      	movs	r4, #28
 800511e:	193b      	adds	r3, r7, r4
 8005120:	0018      	movs	r0, r3
 8005122:	2314      	movs	r3, #20
 8005124:	001a      	movs	r2, r3
 8005126:	2100      	movs	r1, #0
 8005128:	f004 fada 	bl	80096e0 <memset>
  if(hspi->Instance==SPI1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a5f      	ldr	r2, [pc, #380]	@ (80052b0 <HAL_SPI_MspInit+0x19c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d133      	bne.n	800519e <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005136:	4b5f      	ldr	r3, [pc, #380]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	4b5e      	ldr	r3, [pc, #376]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 800513c:	2180      	movs	r1, #128	@ 0x80
 800513e:	0149      	lsls	r1, r1, #5
 8005140:	430a      	orrs	r2, r1
 8005142:	619a      	str	r2, [r3, #24]
 8005144:	4b5b      	ldr	r3, [pc, #364]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	2380      	movs	r3, #128	@ 0x80
 800514a:	015b      	lsls	r3, r3, #5
 800514c:	4013      	ands	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005152:	4b58      	ldr	r3, [pc, #352]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	4b57      	ldr	r3, [pc, #348]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 8005158:	2180      	movs	r1, #128	@ 0x80
 800515a:	0289      	lsls	r1, r1, #10
 800515c:	430a      	orrs	r2, r1
 800515e:	615a      	str	r2, [r3, #20]
 8005160:	4b54      	ldr	r3, [pc, #336]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	029b      	lsls	r3, r3, #10
 8005168:	4013      	ands	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800516e:	0021      	movs	r1, r4
 8005170:	187b      	adds	r3, r7, r1
 8005172:	2260      	movs	r2, #96	@ 0x60
 8005174:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005176:	187b      	adds	r3, r7, r1
 8005178:	2202      	movs	r2, #2
 800517a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517c:	187b      	adds	r3, r7, r1
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005182:	187b      	adds	r3, r7, r1
 8005184:	2203      	movs	r2, #3
 8005186:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005188:	187b      	adds	r3, r7, r1
 800518a:	2200      	movs	r2, #0
 800518c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518e:	187a      	adds	r2, r7, r1
 8005190:	2390      	movs	r3, #144	@ 0x90
 8005192:	05db      	lsls	r3, r3, #23
 8005194:	0011      	movs	r1, r2
 8005196:	0018      	movs	r0, r3
 8005198:	f000 fcac 	bl	8005af4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800519c:	e084      	b.n	80052a8 <HAL_SPI_MspInit+0x194>
  else if(hspi->Instance==SPI2)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a45      	ldr	r2, [pc, #276]	@ (80052b8 <HAL_SPI_MspInit+0x1a4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d000      	beq.n	80051aa <HAL_SPI_MspInit+0x96>
 80051a8:	e07e      	b.n	80052a8 <HAL_SPI_MspInit+0x194>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80051aa:	4b42      	ldr	r3, [pc, #264]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 80051ac:	69da      	ldr	r2, [r3, #28]
 80051ae:	4b41      	ldr	r3, [pc, #260]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 80051b0:	2180      	movs	r1, #128	@ 0x80
 80051b2:	01c9      	lsls	r1, r1, #7
 80051b4:	430a      	orrs	r2, r1
 80051b6:	61da      	str	r2, [r3, #28]
 80051b8:	4b3e      	ldr	r3, [pc, #248]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	2380      	movs	r3, #128	@ 0x80
 80051be:	01db      	lsls	r3, r3, #7
 80051c0:	4013      	ands	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051c6:	4b3b      	ldr	r3, [pc, #236]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	4b3a      	ldr	r3, [pc, #232]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 80051cc:	2180      	movs	r1, #128	@ 0x80
 80051ce:	02c9      	lsls	r1, r1, #11
 80051d0:	430a      	orrs	r2, r1
 80051d2:	615a      	str	r2, [r3, #20]
 80051d4:	4b37      	ldr	r3, [pc, #220]	@ (80052b4 <HAL_SPI_MspInit+0x1a0>)
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	2380      	movs	r3, #128	@ 0x80
 80051da:	02db      	lsls	r3, r3, #11
 80051dc:	4013      	ands	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80051e2:	211c      	movs	r1, #28
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	22f0      	movs	r2, #240	@ 0xf0
 80051e8:	0212      	lsls	r2, r2, #8
 80051ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	2202      	movs	r2, #2
 80051f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f2:	187b      	adds	r3, r7, r1
 80051f4:	2200      	movs	r2, #0
 80051f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051f8:	187b      	adds	r3, r7, r1
 80051fa:	2203      	movs	r2, #3
 80051fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80051fe:	187b      	adds	r3, r7, r1
 8005200:	2200      	movs	r2, #0
 8005202:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005204:	187b      	adds	r3, r7, r1
 8005206:	4a2d      	ldr	r2, [pc, #180]	@ (80052bc <HAL_SPI_MspInit+0x1a8>)
 8005208:	0019      	movs	r1, r3
 800520a:	0010      	movs	r0, r2
 800520c:	f000 fc72 	bl	8005af4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005210:	4b2b      	ldr	r3, [pc, #172]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 8005212:	4a2c      	ldr	r2, [pc, #176]	@ (80052c4 <HAL_SPI_MspInit+0x1b0>)
 8005214:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005216:	4b2a      	ldr	r3, [pc, #168]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 8005218:	2200      	movs	r2, #0
 800521a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800521c:	4b28      	ldr	r3, [pc, #160]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 800521e:	2200      	movs	r2, #0
 8005220:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005222:	4b27      	ldr	r3, [pc, #156]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 8005224:	2280      	movs	r2, #128	@ 0x80
 8005226:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005228:	4b25      	ldr	r3, [pc, #148]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 800522a:	2200      	movs	r2, #0
 800522c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800522e:	4b24      	ldr	r3, [pc, #144]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 8005230:	2200      	movs	r2, #0
 8005232:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005234:	4b22      	ldr	r3, [pc, #136]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 8005236:	2200      	movs	r2, #0
 8005238:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800523a:	4b21      	ldr	r3, [pc, #132]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 800523c:	2200      	movs	r2, #0
 800523e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005240:	4b1f      	ldr	r3, [pc, #124]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 8005242:	0018      	movs	r0, r3
 8005244:	f000 fb50 	bl	80058e8 <HAL_DMA_Init>
 8005248:	1e03      	subs	r3, r0, #0
 800524a:	d001      	beq.n	8005250 <HAL_SPI_MspInit+0x13c>
      Error_Handler();
 800524c:	f7ff fbe4 	bl	8004a18 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1b      	ldr	r2, [pc, #108]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 8005254:	659a      	str	r2, [r3, #88]	@ 0x58
 8005256:	4b1a      	ldr	r3, [pc, #104]	@ (80052c0 <HAL_SPI_MspInit+0x1ac>)
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800525c:	4b1a      	ldr	r3, [pc, #104]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 800525e:	4a1b      	ldr	r2, [pc, #108]	@ (80052cc <HAL_SPI_MspInit+0x1b8>)
 8005260:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005262:	4b19      	ldr	r3, [pc, #100]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 8005264:	2210      	movs	r2, #16
 8005266:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005268:	4b17      	ldr	r3, [pc, #92]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800526e:	4b16      	ldr	r3, [pc, #88]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 8005270:	2280      	movs	r2, #128	@ 0x80
 8005272:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005274:	4b14      	ldr	r3, [pc, #80]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 8005276:	2200      	movs	r2, #0
 8005278:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800527a:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 800527c:	2200      	movs	r2, #0
 800527e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005280:	4b11      	ldr	r3, [pc, #68]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 8005282:	2200      	movs	r2, #0
 8005284:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005286:	4b10      	ldr	r3, [pc, #64]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 8005288:	2200      	movs	r2, #0
 800528a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800528c:	4b0e      	ldr	r3, [pc, #56]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 800528e:	0018      	movs	r0, r3
 8005290:	f000 fb2a 	bl	80058e8 <HAL_DMA_Init>
 8005294:	1e03      	subs	r3, r0, #0
 8005296:	d001      	beq.n	800529c <HAL_SPI_MspInit+0x188>
      Error_Handler();
 8005298:	f7ff fbbe 	bl	8004a18 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0a      	ldr	r2, [pc, #40]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 80052a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80052a2:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <HAL_SPI_MspInit+0x1b4>)
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80052a8:	46c0      	nop			@ (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b00d      	add	sp, #52	@ 0x34
 80052ae:	bd90      	pop	{r4, r7, pc}
 80052b0:	40013000 	.word	0x40013000
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40003800 	.word	0x40003800
 80052bc:	48000400 	.word	0x48000400
 80052c0:	20000338 	.word	0x20000338
 80052c4:	40020044 	.word	0x40020044
 80052c8:	2000037c 	.word	0x2000037c
 80052cc:	40020058 	.word	0x40020058

080052d0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005308 <HAL_TIM_Base_MspInit+0x38>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d10d      	bne.n	80052fe <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052e2:	4b0a      	ldr	r3, [pc, #40]	@ (800530c <HAL_TIM_Base_MspInit+0x3c>)
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	4b09      	ldr	r3, [pc, #36]	@ (800530c <HAL_TIM_Base_MspInit+0x3c>)
 80052e8:	2180      	movs	r1, #128	@ 0x80
 80052ea:	0109      	lsls	r1, r1, #4
 80052ec:	430a      	orrs	r2, r1
 80052ee:	619a      	str	r2, [r3, #24]
 80052f0:	4b06      	ldr	r3, [pc, #24]	@ (800530c <HAL_TIM_Base_MspInit+0x3c>)
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	2380      	movs	r3, #128	@ 0x80
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	4013      	ands	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b004      	add	sp, #16
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40021000 	.word	0x40021000

08005310 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b08b      	sub	sp, #44	@ 0x2c
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005318:	2414      	movs	r4, #20
 800531a:	193b      	adds	r3, r7, r4
 800531c:	0018      	movs	r0, r3
 800531e:	2314      	movs	r3, #20
 8005320:	001a      	movs	r2, r3
 8005322:	2100      	movs	r1, #0
 8005324:	f004 f9dc 	bl	80096e0 <memset>
  if(huart->Instance==USART1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1d      	ldr	r2, [pc, #116]	@ (80053a4 <HAL_UART_MspInit+0x94>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d133      	bne.n	800539a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005332:	4b1d      	ldr	r3, [pc, #116]	@ (80053a8 <HAL_UART_MspInit+0x98>)
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	4b1c      	ldr	r3, [pc, #112]	@ (80053a8 <HAL_UART_MspInit+0x98>)
 8005338:	2180      	movs	r1, #128	@ 0x80
 800533a:	01c9      	lsls	r1, r1, #7
 800533c:	430a      	orrs	r2, r1
 800533e:	619a      	str	r2, [r3, #24]
 8005340:	4b19      	ldr	r3, [pc, #100]	@ (80053a8 <HAL_UART_MspInit+0x98>)
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	2380      	movs	r3, #128	@ 0x80
 8005346:	01db      	lsls	r3, r3, #7
 8005348:	4013      	ands	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800534e:	4b16      	ldr	r3, [pc, #88]	@ (80053a8 <HAL_UART_MspInit+0x98>)
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	4b15      	ldr	r3, [pc, #84]	@ (80053a8 <HAL_UART_MspInit+0x98>)
 8005354:	2180      	movs	r1, #128	@ 0x80
 8005356:	0289      	lsls	r1, r1, #10
 8005358:	430a      	orrs	r2, r1
 800535a:	615a      	str	r2, [r3, #20]
 800535c:	4b12      	ldr	r3, [pc, #72]	@ (80053a8 <HAL_UART_MspInit+0x98>)
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	029b      	lsls	r3, r3, #10
 8005364:	4013      	ands	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800536a:	193b      	adds	r3, r7, r4
 800536c:	22c0      	movs	r2, #192	@ 0xc0
 800536e:	00d2      	lsls	r2, r2, #3
 8005370:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005372:	0021      	movs	r1, r4
 8005374:	187b      	adds	r3, r7, r1
 8005376:	2202      	movs	r2, #2
 8005378:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800537a:	187b      	adds	r3, r7, r1
 800537c:	2200      	movs	r2, #0
 800537e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005380:	187b      	adds	r3, r7, r1
 8005382:	2203      	movs	r2, #3
 8005384:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005386:	187b      	adds	r3, r7, r1
 8005388:	2201      	movs	r2, #1
 800538a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538c:	187a      	adds	r2, r7, r1
 800538e:	2390      	movs	r3, #144	@ 0x90
 8005390:	05db      	lsls	r3, r3, #23
 8005392:	0011      	movs	r1, r2
 8005394:	0018      	movs	r0, r3
 8005396:	f000 fbad 	bl	8005af4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	46bd      	mov	sp, r7
 800539e:	b00b      	add	sp, #44	@ 0x2c
 80053a0:	bd90      	pop	{r4, r7, pc}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	40013800 	.word	0x40013800
 80053a8:	40021000 	.word	0x40021000

080053ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80053b0:	46c0      	nop			@ (mov r8, r8)
 80053b2:	e7fd      	b.n	80053b0 <NMI_Handler+0x4>

080053b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053b8:	46c0      	nop			@ (mov r8, r8)
 80053ba:	e7fd      	b.n	80053b8 <HardFault_Handler+0x4>

080053bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80053c0:	46c0      	nop			@ (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053ca:	46c0      	nop			@ (mov r8, r8)
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053d4:	f000 f96a 	bl	80056ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053d8:	46c0      	nop			@ (mov r8, r8)
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80053e2:	2001      	movs	r0, #1
 80053e4:	f000 fd30 	bl	8005e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80053e8:	46c0      	nop			@ (mov r8, r8)
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80053f2:	2004      	movs	r0, #4
 80053f4:	f000 fd28 	bl	8005e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80053f8:	46c0      	nop			@ (mov r8, r8)
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005402:	2380      	movs	r3, #128	@ 0x80
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	0018      	movs	r0, r3
 8005408:	f000 fd1e 	bl	8005e48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800540c:	2380      	movs	r3, #128	@ 0x80
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	0018      	movs	r0, r3
 8005412:	f000 fd19 	bl	8005e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005420:	4b05      	ldr	r3, [pc, #20]	@ (8005438 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8005422:	0018      	movs	r0, r3
 8005424:	f000 faa8 	bl	8005978 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005428:	4b04      	ldr	r3, [pc, #16]	@ (800543c <DMA1_Channel4_5_IRQHandler+0x20>)
 800542a:	0018      	movs	r0, r3
 800542c:	f000 faa4 	bl	8005978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8005430:	46c0      	nop			@ (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			@ (mov r8, r8)
 8005438:	20000338 	.word	0x20000338
 800543c:	2000037c 	.word	0x2000037c

08005440 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  return 1;
 8005444:	2301      	movs	r3, #1
}
 8005446:	0018      	movs	r0, r3
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <_kill>:

int _kill(int pid, int sig)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005456:	f004 f99d 	bl	8009794 <__errno>
 800545a:	0003      	movs	r3, r0
 800545c:	2216      	movs	r2, #22
 800545e:	601a      	str	r2, [r3, #0]
  return -1;
 8005460:	2301      	movs	r3, #1
 8005462:	425b      	negs	r3, r3
}
 8005464:	0018      	movs	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	b002      	add	sp, #8
 800546a:	bd80      	pop	{r7, pc}

0800546c <_exit>:

void _exit (int status)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005474:	2301      	movs	r3, #1
 8005476:	425a      	negs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	0011      	movs	r1, r2
 800547c:	0018      	movs	r0, r3
 800547e:	f7ff ffe5 	bl	800544c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	e7fd      	b.n	8005482 <_exit+0x16>

08005486 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e00a      	b.n	80054ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005498:	e000      	b.n	800549c <_read+0x16>
 800549a:	bf00      	nop
 800549c:	0001      	movs	r1, r0
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	60ba      	str	r2, [r7, #8]
 80054a4:	b2ca      	uxtb	r2, r1
 80054a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3301      	adds	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	dbf0      	blt.n	8005498 <_read+0x12>
  }

  return len;
 80054b6:	687b      	ldr	r3, [r7, #4]
}
 80054b8:	0018      	movs	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b006      	add	sp, #24
 80054be:	bd80      	pop	{r7, pc}

080054c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e009      	b.n	80054e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	60ba      	str	r2, [r7, #8]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	0018      	movs	r0, r3
 80054dc:	e000      	b.n	80054e0 <_write+0x20>
 80054de:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	3301      	adds	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	dbf1      	blt.n	80054d2 <_write+0x12>
  }
  return len;
 80054ee:	687b      	ldr	r3, [r7, #4]
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b006      	add	sp, #24
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <_close>:

int _close(int file)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005500:	2301      	movs	r3, #1
 8005502:	425b      	negs	r3, r3
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b002      	add	sp, #8
 800550a:	bd80      	pop	{r7, pc}

0800550c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2280      	movs	r2, #128	@ 0x80
 800551a:	0192      	lsls	r2, r2, #6
 800551c:	605a      	str	r2, [r3, #4]
  return 0;
 800551e:	2300      	movs	r3, #0
}
 8005520:	0018      	movs	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}

08005528 <_isatty>:

int _isatty(int file)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005530:	2301      	movs	r3, #1
}
 8005532:	0018      	movs	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	b002      	add	sp, #8
 8005538:	bd80      	pop	{r7, pc}

0800553a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005546:	2300      	movs	r3, #0
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b004      	add	sp, #16
 800554e:	bd80      	pop	{r7, pc}

08005550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005558:	4a14      	ldr	r2, [pc, #80]	@ (80055ac <_sbrk+0x5c>)
 800555a:	4b15      	ldr	r3, [pc, #84]	@ (80055b0 <_sbrk+0x60>)
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005564:	4b13      	ldr	r3, [pc, #76]	@ (80055b4 <_sbrk+0x64>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800556c:	4b11      	ldr	r3, [pc, #68]	@ (80055b4 <_sbrk+0x64>)
 800556e:	4a12      	ldr	r2, [pc, #72]	@ (80055b8 <_sbrk+0x68>)
 8005570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005572:	4b10      	ldr	r3, [pc, #64]	@ (80055b4 <_sbrk+0x64>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	18d3      	adds	r3, r2, r3
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	429a      	cmp	r2, r3
 800557e:	d207      	bcs.n	8005590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005580:	f004 f908 	bl	8009794 <__errno>
 8005584:	0003      	movs	r3, r0
 8005586:	220c      	movs	r2, #12
 8005588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800558a:	2301      	movs	r3, #1
 800558c:	425b      	negs	r3, r3
 800558e:	e009      	b.n	80055a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005590:	4b08      	ldr	r3, [pc, #32]	@ (80055b4 <_sbrk+0x64>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005596:	4b07      	ldr	r3, [pc, #28]	@ (80055b4 <_sbrk+0x64>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	18d2      	adds	r2, r2, r3
 800559e:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <_sbrk+0x64>)
 80055a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	0018      	movs	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b006      	add	sp, #24
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20002000 	.word	0x20002000
 80055b0:	00000400 	.word	0x00000400
 80055b4:	2000090c 	.word	0x2000090c
 80055b8:	20000a60 	.word	0x20000a60

080055bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80055c0:	46c0      	nop			@ (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055c8:	480d      	ldr	r0, [pc, #52]	@ (8005600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80055cc:	f7ff fff6 	bl	80055bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055d0:	480c      	ldr	r0, [pc, #48]	@ (8005604 <LoopForever+0x6>)
  ldr r1, =_edata
 80055d2:	490d      	ldr	r1, [pc, #52]	@ (8005608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055d4:	4a0d      	ldr	r2, [pc, #52]	@ (800560c <LoopForever+0xe>)
  movs r3, #0
 80055d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055d8:	e002      	b.n	80055e0 <LoopCopyDataInit>

080055da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055de:	3304      	adds	r3, #4

080055e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055e4:	d3f9      	bcc.n	80055da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055e8:	4c0a      	ldr	r4, [pc, #40]	@ (8005614 <LoopForever+0x16>)
  movs r3, #0
 80055ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055ec:	e001      	b.n	80055f2 <LoopFillZerobss>

080055ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055f0:	3204      	adds	r2, #4

080055f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055f4:	d3fb      	bcc.n	80055ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80055f6:	f004 f8d3 	bl	80097a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055fa:	f7fe f8f1 	bl	80037e0 <main>

080055fe <LoopForever>:

LoopForever:
    b LoopForever
 80055fe:	e7fe      	b.n	80055fe <LoopForever>
  ldr   r0, =_estack
 8005600:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005608:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800560c:	0800e714 	.word	0x0800e714
  ldr r2, =_sbss
 8005610:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8005614:	20000a60 	.word	0x20000a60

08005618 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005618:	e7fe      	b.n	8005618 <ADC1_IRQHandler>
	...

0800561c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005620:	4b07      	ldr	r3, [pc, #28]	@ (8005640 <HAL_Init+0x24>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4b06      	ldr	r3, [pc, #24]	@ (8005640 <HAL_Init+0x24>)
 8005626:	2110      	movs	r1, #16
 8005628:	430a      	orrs	r2, r1
 800562a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800562c:	2002      	movs	r0, #2
 800562e:	f000 f809 	bl	8005644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005632:	f7ff fcfd 	bl	8005030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	0018      	movs	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	46c0      	nop			@ (mov r8, r8)
 8005640:	40022000 	.word	0x40022000

08005644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005644:	b590      	push	{r4, r7, lr}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800564c:	4b14      	ldr	r3, [pc, #80]	@ (80056a0 <HAL_InitTick+0x5c>)
 800564e:	681c      	ldr	r4, [r3, #0]
 8005650:	4b14      	ldr	r3, [pc, #80]	@ (80056a4 <HAL_InitTick+0x60>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	0019      	movs	r1, r3
 8005656:	23fa      	movs	r3, #250	@ 0xfa
 8005658:	0098      	lsls	r0, r3, #2
 800565a:	f7fa fd71 	bl	8000140 <__udivsi3>
 800565e:	0003      	movs	r3, r0
 8005660:	0019      	movs	r1, r3
 8005662:	0020      	movs	r0, r4
 8005664:	f7fa fd6c 	bl	8000140 <__udivsi3>
 8005668:	0003      	movs	r3, r0
 800566a:	0018      	movs	r0, r3
 800566c:	f000 f92f 	bl	80058ce <HAL_SYSTICK_Config>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	d001      	beq.n	8005678 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e00f      	b.n	8005698 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b03      	cmp	r3, #3
 800567c:	d80b      	bhi.n	8005696 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	2301      	movs	r3, #1
 8005682:	425b      	negs	r3, r3
 8005684:	2200      	movs	r2, #0
 8005686:	0018      	movs	r0, r3
 8005688:	f000 f8fc 	bl	8005884 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <HAL_InitTick+0x64>)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e000      	b.n	8005698 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
}
 8005698:	0018      	movs	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	b003      	add	sp, #12
 800569e:	bd90      	pop	{r4, r7, pc}
 80056a0:	20000020 	.word	0x20000020
 80056a4:	20000028 	.word	0x20000028
 80056a8:	20000024 	.word	0x20000024

080056ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056b0:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_IncTick+0x1c>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	001a      	movs	r2, r3
 80056b6:	4b05      	ldr	r3, [pc, #20]	@ (80056cc <HAL_IncTick+0x20>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	18d2      	adds	r2, r2, r3
 80056bc:	4b03      	ldr	r3, [pc, #12]	@ (80056cc <HAL_IncTick+0x20>)
 80056be:	601a      	str	r2, [r3, #0]
}
 80056c0:	46c0      	nop			@ (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	20000028 	.word	0x20000028
 80056cc:	20000910 	.word	0x20000910

080056d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  return uwTick;
 80056d4:	4b02      	ldr	r3, [pc, #8]	@ (80056e0 <HAL_GetTick+0x10>)
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	0018      	movs	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	20000910 	.word	0x20000910

080056e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056ec:	f7ff fff0 	bl	80056d0 <HAL_GetTick>
 80056f0:	0003      	movs	r3, r0
 80056f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	d005      	beq.n	800570a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <HAL_Delay+0x44>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	001a      	movs	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	189b      	adds	r3, r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800570a:	46c0      	nop			@ (mov r8, r8)
 800570c:	f7ff ffe0 	bl	80056d0 <HAL_GetTick>
 8005710:	0002      	movs	r2, r0
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	429a      	cmp	r2, r3
 800571a:	d8f7      	bhi.n	800570c <HAL_Delay+0x28>
  {
  }
}
 800571c:	46c0      	nop			@ (mov r8, r8)
 800571e:	46c0      	nop			@ (mov r8, r8)
 8005720:	46bd      	mov	sp, r7
 8005722:	b004      	add	sp, #16
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			@ (mov r8, r8)
 8005728:	20000028 	.word	0x20000028

0800572c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	0002      	movs	r2, r0
 8005734:	1dfb      	adds	r3, r7, #7
 8005736:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005738:	1dfb      	adds	r3, r7, #7
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b7f      	cmp	r3, #127	@ 0x7f
 800573e:	d809      	bhi.n	8005754 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005740:	1dfb      	adds	r3, r7, #7
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	001a      	movs	r2, r3
 8005746:	231f      	movs	r3, #31
 8005748:	401a      	ands	r2, r3
 800574a:	4b04      	ldr	r3, [pc, #16]	@ (800575c <__NVIC_EnableIRQ+0x30>)
 800574c:	2101      	movs	r1, #1
 800574e:	4091      	lsls	r1, r2
 8005750:	000a      	movs	r2, r1
 8005752:	601a      	str	r2, [r3, #0]
  }
}
 8005754:	46c0      	nop			@ (mov r8, r8)
 8005756:	46bd      	mov	sp, r7
 8005758:	b002      	add	sp, #8
 800575a:	bd80      	pop	{r7, pc}
 800575c:	e000e100 	.word	0xe000e100

08005760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	0002      	movs	r2, r0
 8005768:	6039      	str	r1, [r7, #0]
 800576a:	1dfb      	adds	r3, r7, #7
 800576c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800576e:	1dfb      	adds	r3, r7, #7
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b7f      	cmp	r3, #127	@ 0x7f
 8005774:	d828      	bhi.n	80057c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005776:	4a2f      	ldr	r2, [pc, #188]	@ (8005834 <__NVIC_SetPriority+0xd4>)
 8005778:	1dfb      	adds	r3, r7, #7
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b25b      	sxtb	r3, r3
 800577e:	089b      	lsrs	r3, r3, #2
 8005780:	33c0      	adds	r3, #192	@ 0xc0
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	589b      	ldr	r3, [r3, r2]
 8005786:	1dfa      	adds	r2, r7, #7
 8005788:	7812      	ldrb	r2, [r2, #0]
 800578a:	0011      	movs	r1, r2
 800578c:	2203      	movs	r2, #3
 800578e:	400a      	ands	r2, r1
 8005790:	00d2      	lsls	r2, r2, #3
 8005792:	21ff      	movs	r1, #255	@ 0xff
 8005794:	4091      	lsls	r1, r2
 8005796:	000a      	movs	r2, r1
 8005798:	43d2      	mvns	r2, r2
 800579a:	401a      	ands	r2, r3
 800579c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	019b      	lsls	r3, r3, #6
 80057a2:	22ff      	movs	r2, #255	@ 0xff
 80057a4:	401a      	ands	r2, r3
 80057a6:	1dfb      	adds	r3, r7, #7
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	0018      	movs	r0, r3
 80057ac:	2303      	movs	r3, #3
 80057ae:	4003      	ands	r3, r0
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057b4:	481f      	ldr	r0, [pc, #124]	@ (8005834 <__NVIC_SetPriority+0xd4>)
 80057b6:	1dfb      	adds	r3, r7, #7
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	b25b      	sxtb	r3, r3
 80057bc:	089b      	lsrs	r3, r3, #2
 80057be:	430a      	orrs	r2, r1
 80057c0:	33c0      	adds	r3, #192	@ 0xc0
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80057c6:	e031      	b.n	800582c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005838 <__NVIC_SetPriority+0xd8>)
 80057ca:	1dfb      	adds	r3, r7, #7
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	0019      	movs	r1, r3
 80057d0:	230f      	movs	r3, #15
 80057d2:	400b      	ands	r3, r1
 80057d4:	3b08      	subs	r3, #8
 80057d6:	089b      	lsrs	r3, r3, #2
 80057d8:	3306      	adds	r3, #6
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	18d3      	adds	r3, r2, r3
 80057de:	3304      	adds	r3, #4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	1dfa      	adds	r2, r7, #7
 80057e4:	7812      	ldrb	r2, [r2, #0]
 80057e6:	0011      	movs	r1, r2
 80057e8:	2203      	movs	r2, #3
 80057ea:	400a      	ands	r2, r1
 80057ec:	00d2      	lsls	r2, r2, #3
 80057ee:	21ff      	movs	r1, #255	@ 0xff
 80057f0:	4091      	lsls	r1, r2
 80057f2:	000a      	movs	r2, r1
 80057f4:	43d2      	mvns	r2, r2
 80057f6:	401a      	ands	r2, r3
 80057f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	019b      	lsls	r3, r3, #6
 80057fe:	22ff      	movs	r2, #255	@ 0xff
 8005800:	401a      	ands	r2, r3
 8005802:	1dfb      	adds	r3, r7, #7
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	0018      	movs	r0, r3
 8005808:	2303      	movs	r3, #3
 800580a:	4003      	ands	r3, r0
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005810:	4809      	ldr	r0, [pc, #36]	@ (8005838 <__NVIC_SetPriority+0xd8>)
 8005812:	1dfb      	adds	r3, r7, #7
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	001c      	movs	r4, r3
 8005818:	230f      	movs	r3, #15
 800581a:	4023      	ands	r3, r4
 800581c:	3b08      	subs	r3, #8
 800581e:	089b      	lsrs	r3, r3, #2
 8005820:	430a      	orrs	r2, r1
 8005822:	3306      	adds	r3, #6
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	18c3      	adds	r3, r0, r3
 8005828:	3304      	adds	r3, #4
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	46c0      	nop			@ (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	b003      	add	sp, #12
 8005832:	bd90      	pop	{r4, r7, pc}
 8005834:	e000e100 	.word	0xe000e100
 8005838:	e000ed00 	.word	0xe000ed00

0800583c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	1e5a      	subs	r2, r3, #1
 8005848:	2380      	movs	r3, #128	@ 0x80
 800584a:	045b      	lsls	r3, r3, #17
 800584c:	429a      	cmp	r2, r3
 800584e:	d301      	bcc.n	8005854 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005850:	2301      	movs	r3, #1
 8005852:	e010      	b.n	8005876 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005854:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <SysTick_Config+0x44>)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	3a01      	subs	r2, #1
 800585a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800585c:	2301      	movs	r3, #1
 800585e:	425b      	negs	r3, r3
 8005860:	2103      	movs	r1, #3
 8005862:	0018      	movs	r0, r3
 8005864:	f7ff ff7c 	bl	8005760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005868:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <SysTick_Config+0x44>)
 800586a:	2200      	movs	r2, #0
 800586c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800586e:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <SysTick_Config+0x44>)
 8005870:	2207      	movs	r2, #7
 8005872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005874:	2300      	movs	r3, #0
}
 8005876:	0018      	movs	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	b002      	add	sp, #8
 800587c:	bd80      	pop	{r7, pc}
 800587e:	46c0      	nop			@ (mov r8, r8)
 8005880:	e000e010 	.word	0xe000e010

08005884 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	210f      	movs	r1, #15
 8005890:	187b      	adds	r3, r7, r1
 8005892:	1c02      	adds	r2, r0, #0
 8005894:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	187b      	adds	r3, r7, r1
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	b25b      	sxtb	r3, r3
 800589e:	0011      	movs	r1, r2
 80058a0:	0018      	movs	r0, r3
 80058a2:	f7ff ff5d 	bl	8005760 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80058a6:	46c0      	nop			@ (mov r8, r8)
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b004      	add	sp, #16
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	0002      	movs	r2, r0
 80058b6:	1dfb      	adds	r3, r7, #7
 80058b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058ba:	1dfb      	adds	r3, r7, #7
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	b25b      	sxtb	r3, r3
 80058c0:	0018      	movs	r0, r3
 80058c2:	f7ff ff33 	bl	800572c <__NVIC_EnableIRQ>
}
 80058c6:	46c0      	nop			@ (mov r8, r8)
 80058c8:	46bd      	mov	sp, r7
 80058ca:	b002      	add	sp, #8
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0018      	movs	r0, r3
 80058da:	f7ff ffaf 	bl	800583c <SysTick_Config>
 80058de:	0003      	movs	r3, r0
}
 80058e0:	0018      	movs	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b002      	add	sp, #8
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e036      	b.n	800596c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2221      	movs	r2, #33	@ 0x21
 8005902:	2102      	movs	r1, #2
 8005904:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a18      	ldr	r2, [pc, #96]	@ (8005974 <HAL_DMA_Init+0x8c>)
 8005912:	4013      	ands	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800591e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800592a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	0018      	movs	r0, r3
 8005950:	f000 f8b4 	bl	8005abc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2221      	movs	r2, #33	@ 0x21
 800595e:	2101      	movs	r1, #1
 8005960:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	2100      	movs	r1, #0
 8005968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	0018      	movs	r0, r3
 800596e:	46bd      	mov	sp, r7
 8005970:	b004      	add	sp, #16
 8005972:	bd80      	pop	{r7, pc}
 8005974:	ffffc00f 	.word	0xffffc00f

08005978 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	2204      	movs	r2, #4
 8005996:	409a      	lsls	r2, r3
 8005998:	0013      	movs	r3, r2
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4013      	ands	r3, r2
 800599e:	d024      	beq.n	80059ea <HAL_DMA_IRQHandler+0x72>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2204      	movs	r2, #4
 80059a4:	4013      	ands	r3, r2
 80059a6:	d020      	beq.n	80059ea <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2220      	movs	r2, #32
 80059b0:	4013      	ands	r3, r2
 80059b2:	d107      	bne.n	80059c4 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2104      	movs	r1, #4
 80059c0:	438a      	bics	r2, r1
 80059c2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059cc:	2104      	movs	r1, #4
 80059ce:	4091      	lsls	r1, r2
 80059d0:	000a      	movs	r2, r1
 80059d2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d100      	bne.n	80059de <HAL_DMA_IRQHandler+0x66>
 80059dc:	e06a      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	0010      	movs	r0, r2
 80059e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80059e8:	e064      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ee:	2202      	movs	r2, #2
 80059f0:	409a      	lsls	r2, r3
 80059f2:	0013      	movs	r3, r2
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4013      	ands	r3, r2
 80059f8:	d02b      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xda>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2202      	movs	r2, #2
 80059fe:	4013      	ands	r3, r2
 8005a00:	d027      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d10b      	bne.n	8005a26 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	210a      	movs	r1, #10
 8005a1a:	438a      	bics	r2, r1
 8005a1c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2221      	movs	r2, #33	@ 0x21
 8005a22:	2101      	movs	r1, #1
 8005a24:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2e:	2102      	movs	r1, #2
 8005a30:	4091      	lsls	r1, r2
 8005a32:	000a      	movs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d036      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	0010      	movs	r0, r2
 8005a4e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a50:	e030      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	2208      	movs	r2, #8
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	0013      	movs	r3, r2
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d028      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x13c>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2208      	movs	r2, #8
 8005a66:	4013      	ands	r3, r2
 8005a68:	d024      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	210e      	movs	r1, #14
 8005a76:	438a      	bics	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a82:	2101      	movs	r1, #1
 8005a84:	4091      	lsls	r1, r2
 8005a86:	000a      	movs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2221      	movs	r2, #33	@ 0x21
 8005a94:	2101      	movs	r1, #1
 8005a96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	0010      	movs	r0, r2
 8005ab0:	4798      	blx	r3
    }
  }
}
 8005ab2:	e7ff      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x13c>
 8005ab4:	46c0      	nop			@ (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b004      	add	sp, #16
 8005aba:	bd80      	pop	{r7, pc}

08005abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a08      	ldr	r2, [pc, #32]	@ (8005aec <DMA_CalcBaseAndBitshift+0x30>)
 8005aca:	4694      	mov	ip, r2
 8005acc:	4463      	add	r3, ip
 8005ace:	2114      	movs	r1, #20
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7fa fb35 	bl	8000140 <__udivsi3>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	009a      	lsls	r2, r3, #2
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a03      	ldr	r2, [pc, #12]	@ (8005af0 <DMA_CalcBaseAndBitshift+0x34>)
 8005ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b002      	add	sp, #8
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	bffdfff8 	.word	0xbffdfff8
 8005af0:	40020000 	.word	0x40020000

08005af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b02:	e14f      	b.n	8005da4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2101      	movs	r1, #1
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4091      	lsls	r1, r2
 8005b0e:	000a      	movs	r2, r1
 8005b10:	4013      	ands	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d100      	bne.n	8005b1c <HAL_GPIO_Init+0x28>
 8005b1a:	e140      	b.n	8005d9e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2203      	movs	r2, #3
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d005      	beq.n	8005b34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d130      	bne.n	8005b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	2203      	movs	r2, #3
 8005b40:	409a      	lsls	r2, r3
 8005b42:	0013      	movs	r3, r2
 8005b44:	43da      	mvns	r2, r3
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	409a      	lsls	r2, r3
 8005b56:	0013      	movs	r3, r2
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	409a      	lsls	r2, r3
 8005b70:	0013      	movs	r3, r2
 8005b72:	43da      	mvns	r2, r3
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4013      	ands	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	091b      	lsrs	r3, r3, #4
 8005b80:	2201      	movs	r2, #1
 8005b82:	401a      	ands	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	409a      	lsls	r2, r3
 8005b88:	0013      	movs	r3, r2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d017      	beq.n	8005bd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	2203      	movs	r2, #3
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	0013      	movs	r3, r2
 8005bb2:	43da      	mvns	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	0013      	movs	r3, r2
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d123      	bne.n	8005c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	08da      	lsrs	r2, r3, #3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3208      	adds	r2, #8
 8005be6:	0092      	lsls	r2, r2, #2
 8005be8:	58d3      	ldr	r3, [r2, r3]
 8005bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2207      	movs	r2, #7
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	220f      	movs	r2, #15
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	0013      	movs	r3, r2
 8005bfa:	43da      	mvns	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2107      	movs	r1, #7
 8005c0a:	400b      	ands	r3, r1
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	0013      	movs	r3, r2
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	08da      	lsrs	r2, r3, #3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3208      	adds	r2, #8
 8005c20:	0092      	lsls	r2, r2, #2
 8005c22:	6939      	ldr	r1, [r7, #16]
 8005c24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	2203      	movs	r2, #3
 8005c32:	409a      	lsls	r2, r3
 8005c34:	0013      	movs	r3, r2
 8005c36:	43da      	mvns	r2, r3
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2203      	movs	r2, #3
 8005c44:	401a      	ands	r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	0013      	movs	r3, r2
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	23c0      	movs	r3, #192	@ 0xc0
 8005c60:	029b      	lsls	r3, r3, #10
 8005c62:	4013      	ands	r3, r2
 8005c64:	d100      	bne.n	8005c68 <HAL_GPIO_Init+0x174>
 8005c66:	e09a      	b.n	8005d9e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c68:	4b54      	ldr	r3, [pc, #336]	@ (8005dbc <HAL_GPIO_Init+0x2c8>)
 8005c6a:	699a      	ldr	r2, [r3, #24]
 8005c6c:	4b53      	ldr	r3, [pc, #332]	@ (8005dbc <HAL_GPIO_Init+0x2c8>)
 8005c6e:	2101      	movs	r1, #1
 8005c70:	430a      	orrs	r2, r1
 8005c72:	619a      	str	r2, [r3, #24]
 8005c74:	4b51      	ldr	r3, [pc, #324]	@ (8005dbc <HAL_GPIO_Init+0x2c8>)
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005c80:	4a4f      	ldr	r2, [pc, #316]	@ (8005dc0 <HAL_GPIO_Init+0x2cc>)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	089b      	lsrs	r3, r3, #2
 8005c86:	3302      	adds	r3, #2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	589b      	ldr	r3, [r3, r2]
 8005c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2203      	movs	r2, #3
 8005c92:	4013      	ands	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	220f      	movs	r2, #15
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	0013      	movs	r3, r2
 8005c9c:	43da      	mvns	r2, r3
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	2390      	movs	r3, #144	@ 0x90
 8005ca8:	05db      	lsls	r3, r3, #23
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d013      	beq.n	8005cd6 <HAL_GPIO_Init+0x1e2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a44      	ldr	r2, [pc, #272]	@ (8005dc4 <HAL_GPIO_Init+0x2d0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00d      	beq.n	8005cd2 <HAL_GPIO_Init+0x1de>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a43      	ldr	r2, [pc, #268]	@ (8005dc8 <HAL_GPIO_Init+0x2d4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <HAL_GPIO_Init+0x1da>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a42      	ldr	r2, [pc, #264]	@ (8005dcc <HAL_GPIO_Init+0x2d8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d101      	bne.n	8005cca <HAL_GPIO_Init+0x1d6>
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e006      	b.n	8005cd8 <HAL_GPIO_Init+0x1e4>
 8005cca:	2305      	movs	r3, #5
 8005ccc:	e004      	b.n	8005cd8 <HAL_GPIO_Init+0x1e4>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e002      	b.n	8005cd8 <HAL_GPIO_Init+0x1e4>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <HAL_GPIO_Init+0x1e4>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	2103      	movs	r1, #3
 8005cdc:	400a      	ands	r2, r1
 8005cde:	0092      	lsls	r2, r2, #2
 8005ce0:	4093      	lsls	r3, r2
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ce8:	4935      	ldr	r1, [pc, #212]	@ (8005dc0 <HAL_GPIO_Init+0x2cc>)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	089b      	lsrs	r3, r3, #2
 8005cee:	3302      	adds	r3, #2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cf6:	4b36      	ldr	r3, [pc, #216]	@ (8005dd0 <HAL_GPIO_Init+0x2dc>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4013      	ands	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	2380      	movs	r3, #128	@ 0x80
 8005d0c:	035b      	lsls	r3, r3, #13
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d003      	beq.n	8005d1a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005dd0 <HAL_GPIO_Init+0x2dc>)
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005d20:	4b2b      	ldr	r3, [pc, #172]	@ (8005dd0 <HAL_GPIO_Init+0x2dc>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	43da      	mvns	r2, r3
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	2380      	movs	r3, #128	@ 0x80
 8005d36:	039b      	lsls	r3, r3, #14
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d44:	4b22      	ldr	r3, [pc, #136]	@ (8005dd0 <HAL_GPIO_Init+0x2dc>)
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005d4a:	4b21      	ldr	r3, [pc, #132]	@ (8005dd0 <HAL_GPIO_Init+0x2dc>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	43da      	mvns	r2, r3
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4013      	ands	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	2380      	movs	r3, #128	@ 0x80
 8005d60:	029b      	lsls	r3, r3, #10
 8005d62:	4013      	ands	r3, r2
 8005d64:	d003      	beq.n	8005d6e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005d6e:	4b18      	ldr	r3, [pc, #96]	@ (8005dd0 <HAL_GPIO_Init+0x2dc>)
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005d74:	4b16      	ldr	r3, [pc, #88]	@ (8005dd0 <HAL_GPIO_Init+0x2dc>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	43da      	mvns	r2, r3
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4013      	ands	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	2380      	movs	r3, #128	@ 0x80
 8005d8a:	025b      	lsls	r3, r3, #9
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005d98:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <HAL_GPIO_Init+0x2dc>)
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	3301      	adds	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	40da      	lsrs	r2, r3
 8005dac:	1e13      	subs	r3, r2, #0
 8005dae:	d000      	beq.n	8005db2 <HAL_GPIO_Init+0x2be>
 8005db0:	e6a8      	b.n	8005b04 <HAL_GPIO_Init+0x10>
  } 
}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	46c0      	nop			@ (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b006      	add	sp, #24
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	48000400 	.word	0x48000400
 8005dc8:	48000800 	.word	0x48000800
 8005dcc:	48000c00 	.word	0x48000c00
 8005dd0:	40010400 	.word	0x40010400

08005dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	000a      	movs	r2, r1
 8005dde:	1cbb      	adds	r3, r7, #2
 8005de0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	1cba      	adds	r2, r7, #2
 8005de8:	8812      	ldrh	r2, [r2, #0]
 8005dea:	4013      	ands	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005dee:	230f      	movs	r3, #15
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	2201      	movs	r2, #1
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	e003      	b.n	8005e00 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005df8:	230f      	movs	r3, #15
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005e00:	230f      	movs	r3, #15
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	781b      	ldrb	r3, [r3, #0]
  }
 8005e06:	0018      	movs	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b004      	add	sp, #16
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	0008      	movs	r0, r1
 8005e18:	0011      	movs	r1, r2
 8005e1a:	1cbb      	adds	r3, r7, #2
 8005e1c:	1c02      	adds	r2, r0, #0
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	1c7b      	adds	r3, r7, #1
 8005e22:	1c0a      	adds	r2, r1, #0
 8005e24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e26:	1c7b      	adds	r3, r7, #1
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d004      	beq.n	8005e38 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e2e:	1cbb      	adds	r3, r7, #2
 8005e30:	881a      	ldrh	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e36:	e003      	b.n	8005e40 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e38:	1cbb      	adds	r3, r7, #2
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005e40:	46c0      	nop			@ (mov r8, r8)
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b002      	add	sp, #8
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	0002      	movs	r2, r0
 8005e50:	1dbb      	adds	r3, r7, #6
 8005e52:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005e54:	4b09      	ldr	r3, [pc, #36]	@ (8005e7c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	1dba      	adds	r2, r7, #6
 8005e5a:	8812      	ldrh	r2, [r2, #0]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d008      	beq.n	8005e72 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e60:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005e62:	1dba      	adds	r2, r7, #6
 8005e64:	8812      	ldrh	r2, [r2, #0]
 8005e66:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e68:	1dbb      	adds	r3, r7, #6
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7fe fd89 	bl	8004984 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e72:	46c0      	nop			@ (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b002      	add	sp, #8
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	46c0      	nop			@ (mov r8, r8)
 8005e7c:	40010400 	.word	0x40010400

08005e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e08f      	b.n	8005fb2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2241      	movs	r2, #65	@ 0x41
 8005e96:	5c9b      	ldrb	r3, [r3, r2]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d107      	bne.n	8005eae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2240      	movs	r2, #64	@ 0x40
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f7ff f8e5 	bl	8005078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2241      	movs	r2, #65	@ 0x41
 8005eb2:	2124      	movs	r1, #36	@ 0x24
 8005eb4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	438a      	bics	r2, r1
 8005ec4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	493b      	ldr	r1, [pc, #236]	@ (8005fbc <HAL_I2C_Init+0x13c>)
 8005ed0:	400a      	ands	r2, r1
 8005ed2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4938      	ldr	r1, [pc, #224]	@ (8005fc0 <HAL_I2C_Init+0x140>)
 8005ee0:	400a      	ands	r2, r1
 8005ee2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d108      	bne.n	8005efe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2180      	movs	r1, #128	@ 0x80
 8005ef6:	0209      	lsls	r1, r1, #8
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	609a      	str	r2, [r3, #8]
 8005efc:	e007      	b.n	8005f0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2184      	movs	r1, #132	@ 0x84
 8005f08:	0209      	lsls	r1, r1, #8
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d109      	bne.n	8005f2a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2180      	movs	r1, #128	@ 0x80
 8005f22:	0109      	lsls	r1, r1, #4
 8005f24:	430a      	orrs	r2, r1
 8005f26:	605a      	str	r2, [r3, #4]
 8005f28:	e007      	b.n	8005f3a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4923      	ldr	r1, [pc, #140]	@ (8005fc4 <HAL_I2C_Init+0x144>)
 8005f36:	400a      	ands	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4920      	ldr	r1, [pc, #128]	@ (8005fc8 <HAL_I2C_Init+0x148>)
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	491a      	ldr	r1, [pc, #104]	@ (8005fc0 <HAL_I2C_Init+0x140>)
 8005f56:	400a      	ands	r2, r1
 8005f58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	69d9      	ldr	r1, [r3, #28]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1a      	ldr	r2, [r3, #32]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2101      	movs	r1, #1
 8005f90:	430a      	orrs	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2241      	movs	r2, #65	@ 0x41
 8005f9e:	2120      	movs	r1, #32
 8005fa0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2242      	movs	r2, #66	@ 0x42
 8005fac:	2100      	movs	r1, #0
 8005fae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	f0ffffff 	.word	0xf0ffffff
 8005fc0:	ffff7fff 	.word	0xffff7fff
 8005fc4:	fffff7ff 	.word	0xfffff7ff
 8005fc8:	02008000 	.word	0x02008000

08005fcc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b089      	sub	sp, #36	@ 0x24
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	000c      	movs	r4, r1
 8005fd6:	0010      	movs	r0, r2
 8005fd8:	0019      	movs	r1, r3
 8005fda:	230a      	movs	r3, #10
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	1c22      	adds	r2, r4, #0
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	18fb      	adds	r3, r7, r3
 8005fe6:	1c02      	adds	r2, r0, #0
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	1dbb      	adds	r3, r7, #6
 8005fec:	1c0a      	adds	r2, r1, #0
 8005fee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2241      	movs	r2, #65	@ 0x41
 8005ff4:	5c9b      	ldrb	r3, [r3, r2]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d000      	beq.n	8005ffe <HAL_I2C_Mem_Write+0x32>
 8005ffc:	e10c      	b.n	8006218 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	2b00      	cmp	r3, #0
 8006002:	d004      	beq.n	800600e <HAL_I2C_Mem_Write+0x42>
 8006004:	232c      	movs	r3, #44	@ 0x2c
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2280      	movs	r2, #128	@ 0x80
 8006012:	0092      	lsls	r2, r2, #2
 8006014:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0ff      	b.n	800621a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2240      	movs	r2, #64	@ 0x40
 800601e:	5c9b      	ldrb	r3, [r3, r2]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_I2C_Mem_Write+0x5c>
 8006024:	2302      	movs	r3, #2
 8006026:	e0f8      	b.n	800621a <HAL_I2C_Mem_Write+0x24e>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2240      	movs	r2, #64	@ 0x40
 800602c:	2101      	movs	r1, #1
 800602e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006030:	f7ff fb4e 	bl	80056d0 <HAL_GetTick>
 8006034:	0003      	movs	r3, r0
 8006036:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006038:	2380      	movs	r3, #128	@ 0x80
 800603a:	0219      	lsls	r1, r3, #8
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	2319      	movs	r3, #25
 8006044:	2201      	movs	r2, #1
 8006046:	f000 f975 	bl	8006334 <I2C_WaitOnFlagUntilTimeout>
 800604a:	1e03      	subs	r3, r0, #0
 800604c:	d001      	beq.n	8006052 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e0e3      	b.n	800621a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2241      	movs	r2, #65	@ 0x41
 8006056:	2121      	movs	r1, #33	@ 0x21
 8006058:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2242      	movs	r2, #66	@ 0x42
 800605e:	2140      	movs	r1, #64	@ 0x40
 8006060:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800606c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	222c      	movs	r2, #44	@ 0x2c
 8006072:	18ba      	adds	r2, r7, r2
 8006074:	8812      	ldrh	r2, [r2, #0]
 8006076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800607e:	1dbb      	adds	r3, r7, #6
 8006080:	881c      	ldrh	r4, [r3, #0]
 8006082:	2308      	movs	r3, #8
 8006084:	18fb      	adds	r3, r7, r3
 8006086:	881a      	ldrh	r2, [r3, #0]
 8006088:	230a      	movs	r3, #10
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	8819      	ldrh	r1, [r3, #0]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	9301      	str	r3, [sp, #4]
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	0023      	movs	r3, r4
 800609a:	f000 f8c5 	bl	8006228 <I2C_RequestMemoryWrite>
 800609e:	1e03      	subs	r3, r0, #0
 80060a0:	d005      	beq.n	80060ae <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2240      	movs	r2, #64	@ 0x40
 80060a6:	2100      	movs	r1, #0
 80060a8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e0b5      	b.n	800621a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2bff      	cmp	r3, #255	@ 0xff
 80060b6:	d911      	bls.n	80060dc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	22ff      	movs	r2, #255	@ 0xff
 80060bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	2380      	movs	r3, #128	@ 0x80
 80060c6:	045c      	lsls	r4, r3, #17
 80060c8:	230a      	movs	r3, #10
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	8819      	ldrh	r1, [r3, #0]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	2300      	movs	r3, #0
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	0023      	movs	r3, r4
 80060d6:	f000 fb07 	bl	80066e8 <I2C_TransferConfig>
 80060da:	e012      	b.n	8006102 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	2380      	movs	r3, #128	@ 0x80
 80060ee:	049c      	lsls	r4, r3, #18
 80060f0:	230a      	movs	r3, #10
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	8819      	ldrh	r1, [r3, #0]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	2300      	movs	r3, #0
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	0023      	movs	r3, r4
 80060fe:	f000 faf3 	bl	80066e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	0018      	movs	r0, r3
 800610a:	f000 f96b 	bl	80063e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800610e:	1e03      	subs	r3, r0, #0
 8006110:	d001      	beq.n	8006116 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e081      	b.n	800621a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611a:	781a      	ldrb	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d03a      	beq.n	80061c6 <HAL_I2C_Mem_Write+0x1fa>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006154:	2b00      	cmp	r3, #0
 8006156:	d136      	bne.n	80061c6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	0013      	movs	r3, r2
 8006162:	2200      	movs	r2, #0
 8006164:	2180      	movs	r1, #128	@ 0x80
 8006166:	f000 f8e5 	bl	8006334 <I2C_WaitOnFlagUntilTimeout>
 800616a:	1e03      	subs	r3, r0, #0
 800616c:	d001      	beq.n	8006172 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e053      	b.n	800621a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006176:	b29b      	uxth	r3, r3
 8006178:	2bff      	cmp	r3, #255	@ 0xff
 800617a:	d911      	bls.n	80061a0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	22ff      	movs	r2, #255	@ 0xff
 8006180:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006186:	b2da      	uxtb	r2, r3
 8006188:	2380      	movs	r3, #128	@ 0x80
 800618a:	045c      	lsls	r4, r3, #17
 800618c:	230a      	movs	r3, #10
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	8819      	ldrh	r1, [r3, #0]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	2300      	movs	r3, #0
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	0023      	movs	r3, r4
 800619a:	f000 faa5 	bl	80066e8 <I2C_TransferConfig>
 800619e:	e012      	b.n	80061c6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	2380      	movs	r3, #128	@ 0x80
 80061b2:	049c      	lsls	r4, r3, #18
 80061b4:	230a      	movs	r3, #10
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	8819      	ldrh	r1, [r3, #0]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	2300      	movs	r3, #0
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	0023      	movs	r3, r4
 80061c2:	f000 fa91 	bl	80066e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d198      	bne.n	8006102 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	0018      	movs	r0, r3
 80061d8:	f000 f94a 	bl	8006470 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061dc:	1e03      	subs	r3, r0, #0
 80061de:	d001      	beq.n	80061e4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e01a      	b.n	800621a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2220      	movs	r2, #32
 80061ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	490b      	ldr	r1, [pc, #44]	@ (8006224 <HAL_I2C_Mem_Write+0x258>)
 80061f8:	400a      	ands	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2241      	movs	r2, #65	@ 0x41
 8006200:	2120      	movs	r1, #32
 8006202:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2242      	movs	r2, #66	@ 0x42
 8006208:	2100      	movs	r1, #0
 800620a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2240      	movs	r2, #64	@ 0x40
 8006210:	2100      	movs	r1, #0
 8006212:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	e000      	b.n	800621a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006218:	2302      	movs	r3, #2
  }
}
 800621a:	0018      	movs	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	b007      	add	sp, #28
 8006220:	bd90      	pop	{r4, r7, pc}
 8006222:	46c0      	nop			@ (mov r8, r8)
 8006224:	fe00e800 	.word	0xfe00e800

08006228 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006228:	b5b0      	push	{r4, r5, r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af02      	add	r7, sp, #8
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	000c      	movs	r4, r1
 8006232:	0010      	movs	r0, r2
 8006234:	0019      	movs	r1, r3
 8006236:	250a      	movs	r5, #10
 8006238:	197b      	adds	r3, r7, r5
 800623a:	1c22      	adds	r2, r4, #0
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	2308      	movs	r3, #8
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	1c02      	adds	r2, r0, #0
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	1dbb      	adds	r3, r7, #6
 8006248:	1c0a      	adds	r2, r1, #0
 800624a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800624c:	1dbb      	adds	r3, r7, #6
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	2380      	movs	r3, #128	@ 0x80
 8006254:	045c      	lsls	r4, r3, #17
 8006256:	197b      	adds	r3, r7, r5
 8006258:	8819      	ldrh	r1, [r3, #0]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	4b23      	ldr	r3, [pc, #140]	@ (80062ec <I2C_RequestMemoryWrite+0xc4>)
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	0023      	movs	r3, r4
 8006262:	f000 fa41 	bl	80066e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006268:	6a39      	ldr	r1, [r7, #32]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	0018      	movs	r0, r3
 800626e:	f000 f8b9 	bl	80063e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006272:	1e03      	subs	r3, r0, #0
 8006274:	d001      	beq.n	800627a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e033      	b.n	80062e2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800627a:	1dbb      	adds	r3, r7, #6
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d107      	bne.n	8006292 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006282:	2308      	movs	r3, #8
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b2da      	uxtb	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006290:	e019      	b.n	80062c6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006292:	2308      	movs	r3, #8
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	0a1b      	lsrs	r3, r3, #8
 800629a:	b29b      	uxth	r3, r3
 800629c:	b2da      	uxtb	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a6:	6a39      	ldr	r1, [r7, #32]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	0018      	movs	r0, r3
 80062ac:	f000 f89a 	bl	80063e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80062b0:	1e03      	subs	r3, r0, #0
 80062b2:	d001      	beq.n	80062b8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e014      	b.n	80062e2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062b8:	2308      	movs	r3, #8
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80062c6:	6a3a      	ldr	r2, [r7, #32]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	0013      	movs	r3, r2
 80062d0:	2200      	movs	r2, #0
 80062d2:	2180      	movs	r1, #128	@ 0x80
 80062d4:	f000 f82e 	bl	8006334 <I2C_WaitOnFlagUntilTimeout>
 80062d8:	1e03      	subs	r3, r0, #0
 80062da:	d001      	beq.n	80062e0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	0018      	movs	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	b004      	add	sp, #16
 80062e8:	bdb0      	pop	{r4, r5, r7, pc}
 80062ea:	46c0      	nop			@ (mov r8, r8)
 80062ec:	80002000 	.word	0x80002000

080062f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2202      	movs	r2, #2
 8006300:	4013      	ands	r3, r2
 8006302:	2b02      	cmp	r3, #2
 8006304:	d103      	bne.n	800630e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	2201      	movs	r2, #1
 8006316:	4013      	ands	r3, r2
 8006318:	2b01      	cmp	r3, #1
 800631a:	d007      	beq.n	800632c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2101      	movs	r1, #1
 8006328:	430a      	orrs	r2, r1
 800632a:	619a      	str	r2, [r3, #24]
  }
}
 800632c:	46c0      	nop			@ (mov r8, r8)
 800632e:	46bd      	mov	sp, r7
 8006330:	b002      	add	sp, #8
 8006332:	bd80      	pop	{r7, pc}

08006334 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	1dfb      	adds	r3, r7, #7
 8006342:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006344:	e03a      	b.n	80063bc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	0018      	movs	r0, r3
 800634e:	f000 f8d3 	bl	80064f8 <I2C_IsErrorOccurred>
 8006352:	1e03      	subs	r3, r0, #0
 8006354:	d001      	beq.n	800635a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e040      	b.n	80063dc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	d02d      	beq.n	80063bc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006360:	f7ff f9b6 	bl	80056d0 <HAL_GetTick>
 8006364:	0002      	movs	r2, r0
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d302      	bcc.n	8006376 <I2C_WaitOnFlagUntilTimeout+0x42>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d122      	bne.n	80063bc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	425a      	negs	r2, r3
 8006386:	4153      	adcs	r3, r2
 8006388:	b2db      	uxtb	r3, r3
 800638a:	001a      	movs	r2, r3
 800638c:	1dfb      	adds	r3, r7, #7
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d113      	bne.n	80063bc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006398:	2220      	movs	r2, #32
 800639a:	431a      	orrs	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2241      	movs	r2, #65	@ 0x41
 80063a4:	2120      	movs	r1, #32
 80063a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2242      	movs	r2, #66	@ 0x42
 80063ac:	2100      	movs	r1, #0
 80063ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2240      	movs	r2, #64	@ 0x40
 80063b4:	2100      	movs	r1, #0
 80063b6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e00f      	b.n	80063dc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	4013      	ands	r3, r2
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	425a      	negs	r2, r3
 80063cc:	4153      	adcs	r3, r2
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	001a      	movs	r2, r3
 80063d2:	1dfb      	adds	r3, r7, #7
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d0b5      	beq.n	8006346 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	0018      	movs	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	b004      	add	sp, #16
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063f0:	e032      	b.n	8006458 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f000 f87d 	bl	80064f8 <I2C_IsErrorOccurred>
 80063fe:	1e03      	subs	r3, r0, #0
 8006400:	d001      	beq.n	8006406 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e030      	b.n	8006468 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	3301      	adds	r3, #1
 800640a:	d025      	beq.n	8006458 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640c:	f7ff f960 	bl	80056d0 <HAL_GetTick>
 8006410:	0002      	movs	r2, r0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d11a      	bne.n	8006458 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	2202      	movs	r2, #2
 800642a:	4013      	ands	r3, r2
 800642c:	2b02      	cmp	r3, #2
 800642e:	d013      	beq.n	8006458 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006434:	2220      	movs	r2, #32
 8006436:	431a      	orrs	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2241      	movs	r2, #65	@ 0x41
 8006440:	2120      	movs	r1, #32
 8006442:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2242      	movs	r2, #66	@ 0x42
 8006448:	2100      	movs	r1, #0
 800644a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2240      	movs	r2, #64	@ 0x40
 8006450:	2100      	movs	r1, #0
 8006452:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e007      	b.n	8006468 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	2202      	movs	r2, #2
 8006460:	4013      	ands	r3, r2
 8006462:	2b02      	cmp	r3, #2
 8006464:	d1c5      	bne.n	80063f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	0018      	movs	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	b004      	add	sp, #16
 800646e:	bd80      	pop	{r7, pc}

08006470 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800647c:	e02f      	b.n	80064de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	0018      	movs	r0, r3
 8006486:	f000 f837 	bl	80064f8 <I2C_IsErrorOccurred>
 800648a:	1e03      	subs	r3, r0, #0
 800648c:	d001      	beq.n	8006492 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e02d      	b.n	80064ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006492:	f7ff f91d 	bl	80056d0 <HAL_GetTick>
 8006496:	0002      	movs	r2, r0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d302      	bcc.n	80064a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11a      	bne.n	80064de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2220      	movs	r2, #32
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d013      	beq.n	80064de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ba:	2220      	movs	r2, #32
 80064bc:	431a      	orrs	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2241      	movs	r2, #65	@ 0x41
 80064c6:	2120      	movs	r1, #32
 80064c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2242      	movs	r2, #66	@ 0x42
 80064ce:	2100      	movs	r1, #0
 80064d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2240      	movs	r2, #64	@ 0x40
 80064d6:	2100      	movs	r1, #0
 80064d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e007      	b.n	80064ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	2220      	movs	r2, #32
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d1c8      	bne.n	800647e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	0018      	movs	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b004      	add	sp, #16
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	@ 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006504:	2327      	movs	r3, #39	@ 0x27
 8006506:	18fb      	adds	r3, r7, r3
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2210      	movs	r2, #16
 8006520:	4013      	ands	r3, r2
 8006522:	d100      	bne.n	8006526 <I2C_IsErrorOccurred+0x2e>
 8006524:	e079      	b.n	800661a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2210      	movs	r2, #16
 800652c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800652e:	e057      	b.n	80065e0 <I2C_IsErrorOccurred+0xe8>
 8006530:	2227      	movs	r2, #39	@ 0x27
 8006532:	18bb      	adds	r3, r7, r2
 8006534:	18ba      	adds	r2, r7, r2
 8006536:	7812      	ldrb	r2, [r2, #0]
 8006538:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	3301      	adds	r3, #1
 800653e:	d04f      	beq.n	80065e0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006540:	f7ff f8c6 	bl	80056d0 <HAL_GetTick>
 8006544:	0002      	movs	r2, r0
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	429a      	cmp	r2, r3
 800654e:	d302      	bcc.n	8006556 <I2C_IsErrorOccurred+0x5e>
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d144      	bne.n	80065e0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	2380      	movs	r3, #128	@ 0x80
 800655e:	01db      	lsls	r3, r3, #7
 8006560:	4013      	ands	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006564:	2013      	movs	r0, #19
 8006566:	183b      	adds	r3, r7, r0
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	2142      	movs	r1, #66	@ 0x42
 800656c:	5c52      	ldrb	r2, [r2, r1]
 800656e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	2380      	movs	r3, #128	@ 0x80
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	401a      	ands	r2, r3
 800657c:	2380      	movs	r3, #128	@ 0x80
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	429a      	cmp	r2, r3
 8006582:	d126      	bne.n	80065d2 <I2C_IsErrorOccurred+0xda>
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	2380      	movs	r3, #128	@ 0x80
 8006588:	01db      	lsls	r3, r3, #7
 800658a:	429a      	cmp	r2, r3
 800658c:	d021      	beq.n	80065d2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800658e:	183b      	adds	r3, r7, r0
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b20      	cmp	r3, #32
 8006594:	d01d      	beq.n	80065d2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2180      	movs	r1, #128	@ 0x80
 80065a2:	01c9      	lsls	r1, r1, #7
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065a8:	f7ff f892 	bl	80056d0 <HAL_GetTick>
 80065ac:	0003      	movs	r3, r0
 80065ae:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065b0:	e00f      	b.n	80065d2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065b2:	f7ff f88d 	bl	80056d0 <HAL_GetTick>
 80065b6:	0002      	movs	r2, r0
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b19      	cmp	r3, #25
 80065be:	d908      	bls.n	80065d2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	2220      	movs	r2, #32
 80065c4:	4313      	orrs	r3, r2
 80065c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80065c8:	2327      	movs	r3, #39	@ 0x27
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	2201      	movs	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]

              break;
 80065d0:	e006      	b.n	80065e0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	2220      	movs	r2, #32
 80065da:	4013      	ands	r3, r2
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d1e8      	bne.n	80065b2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2220      	movs	r2, #32
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d004      	beq.n	80065f8 <I2C_IsErrorOccurred+0x100>
 80065ee:	2327      	movs	r3, #39	@ 0x27
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d09b      	beq.n	8006530 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065f8:	2327      	movs	r3, #39	@ 0x27
 80065fa:	18fb      	adds	r3, r7, r3
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d103      	bne.n	800660a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2220      	movs	r2, #32
 8006608:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	2204      	movs	r2, #4
 800660e:	4313      	orrs	r3, r2
 8006610:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006612:	2327      	movs	r3, #39	@ 0x27
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	2201      	movs	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	2380      	movs	r3, #128	@ 0x80
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	4013      	ands	r3, r2
 800662a:	d00c      	beq.n	8006646 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	2201      	movs	r2, #1
 8006630:	4313      	orrs	r3, r2
 8006632:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2280      	movs	r2, #128	@ 0x80
 800663a:	0052      	lsls	r2, r2, #1
 800663c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800663e:	2327      	movs	r3, #39	@ 0x27
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	2201      	movs	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	2380      	movs	r3, #128	@ 0x80
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	4013      	ands	r3, r2
 800664e:	d00c      	beq.n	800666a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2208      	movs	r2, #8
 8006654:	4313      	orrs	r3, r2
 8006656:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2280      	movs	r2, #128	@ 0x80
 800665e:	00d2      	lsls	r2, r2, #3
 8006660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006662:	2327      	movs	r3, #39	@ 0x27
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	2380      	movs	r3, #128	@ 0x80
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4013      	ands	r3, r2
 8006672:	d00c      	beq.n	800668e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2202      	movs	r2, #2
 8006678:	4313      	orrs	r3, r2
 800667a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2280      	movs	r2, #128	@ 0x80
 8006682:	0092      	lsls	r2, r2, #2
 8006684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006686:	2327      	movs	r3, #39	@ 0x27
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800668e:	2327      	movs	r3, #39	@ 0x27
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01d      	beq.n	80066d4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	0018      	movs	r0, r3
 800669c:	f7ff fe28 	bl	80062f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	490e      	ldr	r1, [pc, #56]	@ (80066e4 <I2C_IsErrorOccurred+0x1ec>)
 80066ac:	400a      	ands	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2241      	movs	r2, #65	@ 0x41
 80066c0:	2120      	movs	r1, #32
 80066c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2242      	movs	r2, #66	@ 0x42
 80066c8:	2100      	movs	r1, #0
 80066ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2240      	movs	r2, #64	@ 0x40
 80066d0:	2100      	movs	r1, #0
 80066d2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80066d4:	2327      	movs	r3, #39	@ 0x27
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	781b      	ldrb	r3, [r3, #0]
}
 80066da:	0018      	movs	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	b00a      	add	sp, #40	@ 0x28
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	fe00e800 	.word	0xfe00e800

080066e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	0008      	movs	r0, r1
 80066f2:	0011      	movs	r1, r2
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	240a      	movs	r4, #10
 80066f8:	193b      	adds	r3, r7, r4
 80066fa:	1c02      	adds	r2, r0, #0
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	2009      	movs	r0, #9
 8006700:	183b      	adds	r3, r7, r0
 8006702:	1c0a      	adds	r2, r1, #0
 8006704:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006706:	193b      	adds	r3, r7, r4
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	059b      	lsls	r3, r3, #22
 800670c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800670e:	183b      	adds	r3, r7, r0
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	0419      	lsls	r1, r3, #16
 8006714:	23ff      	movs	r3, #255	@ 0xff
 8006716:	041b      	lsls	r3, r3, #16
 8006718:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800671a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	4313      	orrs	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006732:	0d51      	lsrs	r1, r2, #21
 8006734:	2280      	movs	r2, #128	@ 0x80
 8006736:	00d2      	lsls	r2, r2, #3
 8006738:	400a      	ands	r2, r1
 800673a:	4907      	ldr	r1, [pc, #28]	@ (8006758 <I2C_TransferConfig+0x70>)
 800673c:	430a      	orrs	r2, r1
 800673e:	43d2      	mvns	r2, r2
 8006740:	401a      	ands	r2, r3
 8006742:	0011      	movs	r1, r2
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	46bd      	mov	sp, r7
 8006752:	b007      	add	sp, #28
 8006754:	bd90      	pop	{r4, r7, pc}
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	03ff63ff 	.word	0x03ff63ff

0800675c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2241      	movs	r2, #65	@ 0x41
 800676a:	5c9b      	ldrb	r3, [r3, r2]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b20      	cmp	r3, #32
 8006770:	d138      	bne.n	80067e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2240      	movs	r2, #64	@ 0x40
 8006776:	5c9b      	ldrb	r3, [r3, r2]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800677c:	2302      	movs	r3, #2
 800677e:	e032      	b.n	80067e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2240      	movs	r2, #64	@ 0x40
 8006784:	2101      	movs	r1, #1
 8006786:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2241      	movs	r2, #65	@ 0x41
 800678c:	2124      	movs	r1, #36	@ 0x24
 800678e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2101      	movs	r1, #1
 800679c:	438a      	bics	r2, r1
 800679e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4911      	ldr	r1, [pc, #68]	@ (80067f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80067ac:	400a      	ands	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6819      	ldr	r1, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2101      	movs	r1, #1
 80067cc:	430a      	orrs	r2, r1
 80067ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2241      	movs	r2, #65	@ 0x41
 80067d4:	2120      	movs	r1, #32
 80067d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2240      	movs	r2, #64	@ 0x40
 80067dc:	2100      	movs	r1, #0
 80067de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e000      	b.n	80067e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067e4:	2302      	movs	r3, #2
  }
}
 80067e6:	0018      	movs	r0, r3
 80067e8:	46bd      	mov	sp, r7
 80067ea:	b002      	add	sp, #8
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	46c0      	nop			@ (mov r8, r8)
 80067f0:	ffffefff 	.word	0xffffefff

080067f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2241      	movs	r2, #65	@ 0x41
 8006802:	5c9b      	ldrb	r3, [r3, r2]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b20      	cmp	r3, #32
 8006808:	d139      	bne.n	800687e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2240      	movs	r2, #64	@ 0x40
 800680e:	5c9b      	ldrb	r3, [r3, r2]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006814:	2302      	movs	r3, #2
 8006816:	e033      	b.n	8006880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2240      	movs	r2, #64	@ 0x40
 800681c:	2101      	movs	r1, #1
 800681e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2241      	movs	r2, #65	@ 0x41
 8006824:	2124      	movs	r1, #36	@ 0x24
 8006826:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2101      	movs	r1, #1
 8006834:	438a      	bics	r2, r1
 8006836:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4a11      	ldr	r2, [pc, #68]	@ (8006888 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006844:	4013      	ands	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2101      	movs	r1, #1
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2241      	movs	r2, #65	@ 0x41
 800686e:	2120      	movs	r1, #32
 8006870:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2240      	movs	r2, #64	@ 0x40
 8006876:	2100      	movs	r1, #0
 8006878:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800687e:	2302      	movs	r3, #2
  }
}
 8006880:	0018      	movs	r0, r3
 8006882:	46bd      	mov	sp, r7
 8006884:	b004      	add	sp, #16
 8006886:	bd80      	pop	{r7, pc}
 8006888:	fffff0ff 	.word	0xfffff0ff

0800688c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e301      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2201      	movs	r2, #1
 80068a4:	4013      	ands	r3, r2
 80068a6:	d100      	bne.n	80068aa <HAL_RCC_OscConfig+0x1e>
 80068a8:	e08d      	b.n	80069c6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80068aa:	4bc3      	ldr	r3, [pc, #780]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	220c      	movs	r2, #12
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d00e      	beq.n	80068d4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068b6:	4bc0      	ldr	r3, [pc, #768]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	220c      	movs	r2, #12
 80068bc:	4013      	ands	r3, r2
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d116      	bne.n	80068f0 <HAL_RCC_OscConfig+0x64>
 80068c2:	4bbd      	ldr	r3, [pc, #756]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	2380      	movs	r3, #128	@ 0x80
 80068c8:	025b      	lsls	r3, r3, #9
 80068ca:	401a      	ands	r2, r3
 80068cc:	2380      	movs	r3, #128	@ 0x80
 80068ce:	025b      	lsls	r3, r3, #9
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d10d      	bne.n	80068f0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d4:	4bb8      	ldr	r3, [pc, #736]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	2380      	movs	r3, #128	@ 0x80
 80068da:	029b      	lsls	r3, r3, #10
 80068dc:	4013      	ands	r3, r2
 80068de:	d100      	bne.n	80068e2 <HAL_RCC_OscConfig+0x56>
 80068e0:	e070      	b.n	80069c4 <HAL_RCC_OscConfig+0x138>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d000      	beq.n	80068ec <HAL_RCC_OscConfig+0x60>
 80068ea:	e06b      	b.n	80069c4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e2d8      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d107      	bne.n	8006908 <HAL_RCC_OscConfig+0x7c>
 80068f8:	4baf      	ldr	r3, [pc, #700]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	4bae      	ldr	r3, [pc, #696]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068fe:	2180      	movs	r1, #128	@ 0x80
 8006900:	0249      	lsls	r1, r1, #9
 8006902:	430a      	orrs	r2, r1
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e02f      	b.n	8006968 <HAL_RCC_OscConfig+0xdc>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10c      	bne.n	800692a <HAL_RCC_OscConfig+0x9e>
 8006910:	4ba9      	ldr	r3, [pc, #676]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	4ba8      	ldr	r3, [pc, #672]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006916:	49a9      	ldr	r1, [pc, #676]	@ (8006bbc <HAL_RCC_OscConfig+0x330>)
 8006918:	400a      	ands	r2, r1
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	4ba6      	ldr	r3, [pc, #664]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4ba5      	ldr	r3, [pc, #660]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006922:	49a7      	ldr	r1, [pc, #668]	@ (8006bc0 <HAL_RCC_OscConfig+0x334>)
 8006924:	400a      	ands	r2, r1
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	e01e      	b.n	8006968 <HAL_RCC_OscConfig+0xdc>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b05      	cmp	r3, #5
 8006930:	d10e      	bne.n	8006950 <HAL_RCC_OscConfig+0xc4>
 8006932:	4ba1      	ldr	r3, [pc, #644]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	4ba0      	ldr	r3, [pc, #640]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006938:	2180      	movs	r1, #128	@ 0x80
 800693a:	02c9      	lsls	r1, r1, #11
 800693c:	430a      	orrs	r2, r1
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	4b9d      	ldr	r3, [pc, #628]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	4b9c      	ldr	r3, [pc, #624]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006946:	2180      	movs	r1, #128	@ 0x80
 8006948:	0249      	lsls	r1, r1, #9
 800694a:	430a      	orrs	r2, r1
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e00b      	b.n	8006968 <HAL_RCC_OscConfig+0xdc>
 8006950:	4b99      	ldr	r3, [pc, #612]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	4b98      	ldr	r3, [pc, #608]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006956:	4999      	ldr	r1, [pc, #612]	@ (8006bbc <HAL_RCC_OscConfig+0x330>)
 8006958:	400a      	ands	r2, r1
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	4b96      	ldr	r3, [pc, #600]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b95      	ldr	r3, [pc, #596]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006962:	4997      	ldr	r1, [pc, #604]	@ (8006bc0 <HAL_RCC_OscConfig+0x334>)
 8006964:	400a      	ands	r2, r1
 8006966:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d014      	beq.n	800699a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006970:	f7fe feae 	bl	80056d0 <HAL_GetTick>
 8006974:	0003      	movs	r3, r0
 8006976:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800697a:	f7fe fea9 	bl	80056d0 <HAL_GetTick>
 800697e:	0002      	movs	r2, r0
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b64      	cmp	r3, #100	@ 0x64
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e28a      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800698c:	4b8a      	ldr	r3, [pc, #552]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	2380      	movs	r3, #128	@ 0x80
 8006992:	029b      	lsls	r3, r3, #10
 8006994:	4013      	ands	r3, r2
 8006996:	d0f0      	beq.n	800697a <HAL_RCC_OscConfig+0xee>
 8006998:	e015      	b.n	80069c6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699a:	f7fe fe99 	bl	80056d0 <HAL_GetTick>
 800699e:	0003      	movs	r3, r0
 80069a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069a4:	f7fe fe94 	bl	80056d0 <HAL_GetTick>
 80069a8:	0002      	movs	r2, r0
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b64      	cmp	r3, #100	@ 0x64
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e275      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069b6:	4b80      	ldr	r3, [pc, #512]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	2380      	movs	r3, #128	@ 0x80
 80069bc:	029b      	lsls	r3, r3, #10
 80069be:	4013      	ands	r3, r2
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x118>
 80069c2:	e000      	b.n	80069c6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2202      	movs	r2, #2
 80069cc:	4013      	ands	r3, r2
 80069ce:	d100      	bne.n	80069d2 <HAL_RCC_OscConfig+0x146>
 80069d0:	e069      	b.n	8006aa6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80069d2:	4b79      	ldr	r3, [pc, #484]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	220c      	movs	r2, #12
 80069d8:	4013      	ands	r3, r2
 80069da:	d00b      	beq.n	80069f4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80069dc:	4b76      	ldr	r3, [pc, #472]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	220c      	movs	r2, #12
 80069e2:	4013      	ands	r3, r2
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d11c      	bne.n	8006a22 <HAL_RCC_OscConfig+0x196>
 80069e8:	4b73      	ldr	r3, [pc, #460]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	2380      	movs	r3, #128	@ 0x80
 80069ee:	025b      	lsls	r3, r3, #9
 80069f0:	4013      	ands	r3, r2
 80069f2:	d116      	bne.n	8006a22 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f4:	4b70      	ldr	r3, [pc, #448]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2202      	movs	r2, #2
 80069fa:	4013      	ands	r3, r2
 80069fc:	d005      	beq.n	8006a0a <HAL_RCC_OscConfig+0x17e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d001      	beq.n	8006a0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e24b      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0a:	4b6b      	ldr	r3, [pc, #428]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	22f8      	movs	r2, #248	@ 0xf8
 8006a10:	4393      	bics	r3, r2
 8006a12:	0019      	movs	r1, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	00da      	lsls	r2, r3, #3
 8006a1a:	4b67      	ldr	r3, [pc, #412]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a20:	e041      	b.n	8006aa6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d024      	beq.n	8006a74 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a2a:	4b63      	ldr	r3, [pc, #396]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4b62      	ldr	r3, [pc, #392]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a30:	2101      	movs	r1, #1
 8006a32:	430a      	orrs	r2, r1
 8006a34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a36:	f7fe fe4b 	bl	80056d0 <HAL_GetTick>
 8006a3a:	0003      	movs	r3, r0
 8006a3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a40:	f7fe fe46 	bl	80056d0 <HAL_GetTick>
 8006a44:	0002      	movs	r2, r0
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e227      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a52:	4b59      	ldr	r3, [pc, #356]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2202      	movs	r2, #2
 8006a58:	4013      	ands	r3, r2
 8006a5a:	d0f1      	beq.n	8006a40 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5c:	4b56      	ldr	r3, [pc, #344]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	22f8      	movs	r2, #248	@ 0xf8
 8006a62:	4393      	bics	r3, r2
 8006a64:	0019      	movs	r1, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	00da      	lsls	r2, r3, #3
 8006a6c:	4b52      	ldr	r3, [pc, #328]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e018      	b.n	8006aa6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a74:	4b50      	ldr	r3, [pc, #320]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4b4f      	ldr	r3, [pc, #316]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	438a      	bics	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a80:	f7fe fe26 	bl	80056d0 <HAL_GetTick>
 8006a84:	0003      	movs	r3, r0
 8006a86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a8a:	f7fe fe21 	bl	80056d0 <HAL_GetTick>
 8006a8e:	0002      	movs	r2, r0
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e202      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a9c:	4b46      	ldr	r3, [pc, #280]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d1f1      	bne.n	8006a8a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2208      	movs	r2, #8
 8006aac:	4013      	ands	r3, r2
 8006aae:	d036      	beq.n	8006b1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d019      	beq.n	8006aec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006aba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006abc:	4b3e      	ldr	r3, [pc, #248]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006abe:	2101      	movs	r1, #1
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ac4:	f7fe fe04 	bl	80056d0 <HAL_GetTick>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ace:	f7fe fdff 	bl	80056d0 <HAL_GetTick>
 8006ad2:	0002      	movs	r2, r0
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e1e0      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ae0:	4b35      	ldr	r3, [pc, #212]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	d0f1      	beq.n	8006ace <HAL_RCC_OscConfig+0x242>
 8006aea:	e018      	b.n	8006b1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aec:	4b32      	ldr	r3, [pc, #200]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006aee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006af0:	4b31      	ldr	r3, [pc, #196]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006af2:	2101      	movs	r1, #1
 8006af4:	438a      	bics	r2, r1
 8006af6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af8:	f7fe fdea 	bl	80056d0 <HAL_GetTick>
 8006afc:	0003      	movs	r3, r0
 8006afe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b02:	f7fe fde5 	bl	80056d0 <HAL_GetTick>
 8006b06:	0002      	movs	r2, r0
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e1c6      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b14:	4b28      	ldr	r3, [pc, #160]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b18:	2202      	movs	r2, #2
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d1f1      	bne.n	8006b02 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2204      	movs	r2, #4
 8006b24:	4013      	ands	r3, r2
 8006b26:	d100      	bne.n	8006b2a <HAL_RCC_OscConfig+0x29e>
 8006b28:	e0b4      	b.n	8006c94 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b2a:	201f      	movs	r0, #31
 8006b2c:	183b      	adds	r3, r7, r0
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b32:	4b21      	ldr	r3, [pc, #132]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b34:	69da      	ldr	r2, [r3, #28]
 8006b36:	2380      	movs	r3, #128	@ 0x80
 8006b38:	055b      	lsls	r3, r3, #21
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d110      	bne.n	8006b60 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b40:	69da      	ldr	r2, [r3, #28]
 8006b42:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b44:	2180      	movs	r1, #128	@ 0x80
 8006b46:	0549      	lsls	r1, r1, #21
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	61da      	str	r2, [r3, #28]
 8006b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	2380      	movs	r3, #128	@ 0x80
 8006b52:	055b      	lsls	r3, r3, #21
 8006b54:	4013      	ands	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b5a:	183b      	adds	r3, r7, r0
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b60:	4b18      	ldr	r3, [pc, #96]	@ (8006bc4 <HAL_RCC_OscConfig+0x338>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	2380      	movs	r3, #128	@ 0x80
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	4013      	ands	r3, r2
 8006b6a:	d11a      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b6c:	4b15      	ldr	r3, [pc, #84]	@ (8006bc4 <HAL_RCC_OscConfig+0x338>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	4b14      	ldr	r3, [pc, #80]	@ (8006bc4 <HAL_RCC_OscConfig+0x338>)
 8006b72:	2180      	movs	r1, #128	@ 0x80
 8006b74:	0049      	lsls	r1, r1, #1
 8006b76:	430a      	orrs	r2, r1
 8006b78:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b7a:	f7fe fda9 	bl	80056d0 <HAL_GetTick>
 8006b7e:	0003      	movs	r3, r0
 8006b80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b84:	f7fe fda4 	bl	80056d0 <HAL_GetTick>
 8006b88:	0002      	movs	r2, r0
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b64      	cmp	r3, #100	@ 0x64
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e185      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b96:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc4 <HAL_RCC_OscConfig+0x338>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	2380      	movs	r3, #128	@ 0x80
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d10e      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x33c>
 8006baa:	4b03      	ldr	r3, [pc, #12]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	4b02      	ldr	r3, [pc, #8]	@ (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	621a      	str	r2, [r3, #32]
 8006bb6:	e035      	b.n	8006c24 <HAL_RCC_OscConfig+0x398>
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	fffeffff 	.word	0xfffeffff
 8006bc0:	fffbffff 	.word	0xfffbffff
 8006bc4:	40007000 	.word	0x40007000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10c      	bne.n	8006bea <HAL_RCC_OscConfig+0x35e>
 8006bd0:	4bb6      	ldr	r3, [pc, #728]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006bd2:	6a1a      	ldr	r2, [r3, #32]
 8006bd4:	4bb5      	ldr	r3, [pc, #724]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	438a      	bics	r2, r1
 8006bda:	621a      	str	r2, [r3, #32]
 8006bdc:	4bb3      	ldr	r3, [pc, #716]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006bde:	6a1a      	ldr	r2, [r3, #32]
 8006be0:	4bb2      	ldr	r3, [pc, #712]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006be2:	2104      	movs	r1, #4
 8006be4:	438a      	bics	r2, r1
 8006be6:	621a      	str	r2, [r3, #32]
 8006be8:	e01c      	b.n	8006c24 <HAL_RCC_OscConfig+0x398>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d10c      	bne.n	8006c0c <HAL_RCC_OscConfig+0x380>
 8006bf2:	4bae      	ldr	r3, [pc, #696]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006bf4:	6a1a      	ldr	r2, [r3, #32]
 8006bf6:	4bad      	ldr	r3, [pc, #692]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006bf8:	2104      	movs	r1, #4
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	621a      	str	r2, [r3, #32]
 8006bfe:	4bab      	ldr	r3, [pc, #684]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006c00:	6a1a      	ldr	r2, [r3, #32]
 8006c02:	4baa      	ldr	r3, [pc, #680]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006c04:	2101      	movs	r1, #1
 8006c06:	430a      	orrs	r2, r1
 8006c08:	621a      	str	r2, [r3, #32]
 8006c0a:	e00b      	b.n	8006c24 <HAL_RCC_OscConfig+0x398>
 8006c0c:	4ba7      	ldr	r3, [pc, #668]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006c0e:	6a1a      	ldr	r2, [r3, #32]
 8006c10:	4ba6      	ldr	r3, [pc, #664]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006c12:	2101      	movs	r1, #1
 8006c14:	438a      	bics	r2, r1
 8006c16:	621a      	str	r2, [r3, #32]
 8006c18:	4ba4      	ldr	r3, [pc, #656]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006c1a:	6a1a      	ldr	r2, [r3, #32]
 8006c1c:	4ba3      	ldr	r3, [pc, #652]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006c1e:	2104      	movs	r1, #4
 8006c20:	438a      	bics	r2, r1
 8006c22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d014      	beq.n	8006c56 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c2c:	f7fe fd50 	bl	80056d0 <HAL_GetTick>
 8006c30:	0003      	movs	r3, r0
 8006c32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c34:	e009      	b.n	8006c4a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c36:	f7fe fd4b 	bl	80056d0 <HAL_GetTick>
 8006c3a:	0002      	movs	r2, r0
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	4a9b      	ldr	r2, [pc, #620]	@ (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e12b      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c4a:	4b98      	ldr	r3, [pc, #608]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	4013      	ands	r3, r2
 8006c52:	d0f0      	beq.n	8006c36 <HAL_RCC_OscConfig+0x3aa>
 8006c54:	e013      	b.n	8006c7e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c56:	f7fe fd3b 	bl	80056d0 <HAL_GetTick>
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c5e:	e009      	b.n	8006c74 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c60:	f7fe fd36 	bl	80056d0 <HAL_GetTick>
 8006c64:	0002      	movs	r2, r0
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	4a91      	ldr	r2, [pc, #580]	@ (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e116      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c74:	4b8d      	ldr	r3, [pc, #564]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d1f0      	bne.n	8006c60 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c7e:	231f      	movs	r3, #31
 8006c80:	18fb      	adds	r3, r7, r3
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d105      	bne.n	8006c94 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c88:	4b88      	ldr	r3, [pc, #544]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	4b87      	ldr	r3, [pc, #540]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006c8e:	4989      	ldr	r1, [pc, #548]	@ (8006eb4 <HAL_RCC_OscConfig+0x628>)
 8006c90:	400a      	ands	r2, r1
 8006c92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2210      	movs	r2, #16
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d063      	beq.n	8006d66 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d12a      	bne.n	8006cfc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006ca6:	4b81      	ldr	r3, [pc, #516]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006ca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006caa:	4b80      	ldr	r3, [pc, #512]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006cac:	2104      	movs	r1, #4
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006cb2:	4b7e      	ldr	r3, [pc, #504]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006cb8:	2101      	movs	r1, #1
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cbe:	f7fe fd07 	bl	80056d0 <HAL_GetTick>
 8006cc2:	0003      	movs	r3, r0
 8006cc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006cc8:	f7fe fd02 	bl	80056d0 <HAL_GetTick>
 8006ccc:	0002      	movs	r2, r0
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e0e3      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006cda:	4b74      	ldr	r3, [pc, #464]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cde:	2202      	movs	r2, #2
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	d0f1      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006ce4:	4b71      	ldr	r3, [pc, #452]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce8:	22f8      	movs	r2, #248	@ 0xf8
 8006cea:	4393      	bics	r3, r2
 8006cec:	0019      	movs	r1, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	00da      	lsls	r2, r3, #3
 8006cf4:	4b6d      	ldr	r3, [pc, #436]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8006cfa:	e034      	b.n	8006d66 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	3305      	adds	r3, #5
 8006d02:	d111      	bne.n	8006d28 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006d04:	4b69      	ldr	r3, [pc, #420]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d08:	4b68      	ldr	r3, [pc, #416]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d0a:	2104      	movs	r1, #4
 8006d0c:	438a      	bics	r2, r1
 8006d0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006d10:	4b66      	ldr	r3, [pc, #408]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d14:	22f8      	movs	r2, #248	@ 0xf8
 8006d16:	4393      	bics	r3, r2
 8006d18:	0019      	movs	r1, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	00da      	lsls	r2, r3, #3
 8006d20:	4b62      	ldr	r3, [pc, #392]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d22:	430a      	orrs	r2, r1
 8006d24:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d26:	e01e      	b.n	8006d66 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006d28:	4b60      	ldr	r3, [pc, #384]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d2e:	2104      	movs	r1, #4
 8006d30:	430a      	orrs	r2, r1
 8006d32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006d34:	4b5d      	ldr	r3, [pc, #372]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d38:	4b5c      	ldr	r3, [pc, #368]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	438a      	bics	r2, r1
 8006d3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d40:	f7fe fcc6 	bl	80056d0 <HAL_GetTick>
 8006d44:	0003      	movs	r3, r0
 8006d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006d48:	e008      	b.n	8006d5c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006d4a:	f7fe fcc1 	bl	80056d0 <HAL_GetTick>
 8006d4e:	0002      	movs	r2, r0
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e0a2      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006d5c:	4b53      	ldr	r3, [pc, #332]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d60:	2202      	movs	r2, #2
 8006d62:	4013      	ands	r3, r2
 8006d64:	d1f1      	bne.n	8006d4a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d100      	bne.n	8006d70 <HAL_RCC_OscConfig+0x4e4>
 8006d6e:	e097      	b.n	8006ea0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d70:	4b4e      	ldr	r3, [pc, #312]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	220c      	movs	r2, #12
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d100      	bne.n	8006d7e <HAL_RCC_OscConfig+0x4f2>
 8006d7c:	e06b      	b.n	8006e56 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d14c      	bne.n	8006e20 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d86:	4b49      	ldr	r3, [pc, #292]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b48      	ldr	r3, [pc, #288]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006d8c:	494a      	ldr	r1, [pc, #296]	@ (8006eb8 <HAL_RCC_OscConfig+0x62c>)
 8006d8e:	400a      	ands	r2, r1
 8006d90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d92:	f7fe fc9d 	bl	80056d0 <HAL_GetTick>
 8006d96:	0003      	movs	r3, r0
 8006d98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d9c:	f7fe fc98 	bl	80056d0 <HAL_GetTick>
 8006da0:	0002      	movs	r2, r0
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e079      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dae:	4b3f      	ldr	r3, [pc, #252]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	2380      	movs	r3, #128	@ 0x80
 8006db4:	049b      	lsls	r3, r3, #18
 8006db6:	4013      	ands	r3, r2
 8006db8:	d1f0      	bne.n	8006d9c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dba:	4b3c      	ldr	r3, [pc, #240]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	220f      	movs	r2, #15
 8006dc0:	4393      	bics	r3, r2
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc8:	4b38      	ldr	r3, [pc, #224]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006dce:	4b37      	ldr	r3, [pc, #220]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	4a3a      	ldr	r2, [pc, #232]	@ (8006ebc <HAL_RCC_OscConfig+0x630>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	0019      	movs	r1, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de0:	431a      	orrs	r2, r3
 8006de2:	4b32      	ldr	r3, [pc, #200]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006de8:	4b30      	ldr	r3, [pc, #192]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4b2f      	ldr	r3, [pc, #188]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006dee:	2180      	movs	r1, #128	@ 0x80
 8006df0:	0449      	lsls	r1, r1, #17
 8006df2:	430a      	orrs	r2, r1
 8006df4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df6:	f7fe fc6b 	bl	80056d0 <HAL_GetTick>
 8006dfa:	0003      	movs	r3, r0
 8006dfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e00:	f7fe fc66 	bl	80056d0 <HAL_GetTick>
 8006e04:	0002      	movs	r2, r0
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e047      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e12:	4b26      	ldr	r3, [pc, #152]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	2380      	movs	r3, #128	@ 0x80
 8006e18:	049b      	lsls	r3, r3, #18
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	d0f0      	beq.n	8006e00 <HAL_RCC_OscConfig+0x574>
 8006e1e:	e03f      	b.n	8006ea0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e20:	4b22      	ldr	r3, [pc, #136]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	4b21      	ldr	r3, [pc, #132]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006e26:	4924      	ldr	r1, [pc, #144]	@ (8006eb8 <HAL_RCC_OscConfig+0x62c>)
 8006e28:	400a      	ands	r2, r1
 8006e2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e2c:	f7fe fc50 	bl	80056d0 <HAL_GetTick>
 8006e30:	0003      	movs	r3, r0
 8006e32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e34:	e008      	b.n	8006e48 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e36:	f7fe fc4b 	bl	80056d0 <HAL_GetTick>
 8006e3a:	0002      	movs	r2, r0
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d901      	bls.n	8006e48 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e02c      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e48:	4b18      	ldr	r3, [pc, #96]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	2380      	movs	r3, #128	@ 0x80
 8006e4e:	049b      	lsls	r3, r3, #18
 8006e50:	4013      	ands	r3, r2
 8006e52:	d1f0      	bne.n	8006e36 <HAL_RCC_OscConfig+0x5aa>
 8006e54:	e024      	b.n	8006ea0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e01f      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006e62:	4b12      	ldr	r3, [pc, #72]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006e68:	4b10      	ldr	r3, [pc, #64]	@ (8006eac <HAL_RCC_OscConfig+0x620>)
 8006e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	2380      	movs	r3, #128	@ 0x80
 8006e72:	025b      	lsls	r3, r3, #9
 8006e74:	401a      	ands	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d10e      	bne.n	8006e9c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	220f      	movs	r2, #15
 8006e82:	401a      	ands	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d107      	bne.n	8006e9c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	23f0      	movs	r3, #240	@ 0xf0
 8006e90:	039b      	lsls	r3, r3, #14
 8006e92:	401a      	ands	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d001      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	b008      	add	sp, #32
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	46c0      	nop			@ (mov r8, r8)
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	00001388 	.word	0x00001388
 8006eb4:	efffffff 	.word	0xefffffff
 8006eb8:	feffffff 	.word	0xfeffffff
 8006ebc:	ffc2ffff 	.word	0xffc2ffff

08006ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e0b3      	b.n	800703c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8007044 <HAL_RCC_ClockConfig+0x184>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	4013      	ands	r3, r2
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d911      	bls.n	8006f06 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee2:	4b58      	ldr	r3, [pc, #352]	@ (8007044 <HAL_RCC_ClockConfig+0x184>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	4393      	bics	r3, r2
 8006eea:	0019      	movs	r1, r3
 8006eec:	4b55      	ldr	r3, [pc, #340]	@ (8007044 <HAL_RCC_ClockConfig+0x184>)
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef4:	4b53      	ldr	r3, [pc, #332]	@ (8007044 <HAL_RCC_ClockConfig+0x184>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	4013      	ands	r3, r2
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d001      	beq.n	8006f06 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e09a      	b.n	800703c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d015      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2204      	movs	r2, #4
 8006f16:	4013      	ands	r3, r2
 8006f18:	d006      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8006f20:	21e0      	movs	r1, #224	@ 0xe0
 8006f22:	00c9      	lsls	r1, r1, #3
 8006f24:	430a      	orrs	r2, r1
 8006f26:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f28:	4b47      	ldr	r3, [pc, #284]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	22f0      	movs	r2, #240	@ 0xf0
 8006f2e:	4393      	bics	r3, r2
 8006f30:	0019      	movs	r1, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	4b44      	ldr	r3, [pc, #272]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2201      	movs	r2, #1
 8006f42:	4013      	ands	r3, r2
 8006f44:	d040      	beq.n	8006fc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d107      	bne.n	8006f5e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	2380      	movs	r3, #128	@ 0x80
 8006f54:	029b      	lsls	r3, r3, #10
 8006f56:	4013      	ands	r3, r2
 8006f58:	d114      	bne.n	8006f84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e06e      	b.n	800703c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d107      	bne.n	8006f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f66:	4b38      	ldr	r3, [pc, #224]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	2380      	movs	r3, #128	@ 0x80
 8006f6c:	049b      	lsls	r3, r3, #18
 8006f6e:	4013      	ands	r3, r2
 8006f70:	d108      	bne.n	8006f84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e062      	b.n	800703c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f76:	4b34      	ldr	r3, [pc, #208]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d101      	bne.n	8006f84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e05b      	b.n	800703c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f84:	4b30      	ldr	r3, [pc, #192]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2203      	movs	r2, #3
 8006f8a:	4393      	bics	r3, r2
 8006f8c:	0019      	movs	r1, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	4b2d      	ldr	r3, [pc, #180]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8006f94:	430a      	orrs	r2, r1
 8006f96:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f98:	f7fe fb9a 	bl	80056d0 <HAL_GetTick>
 8006f9c:	0003      	movs	r3, r0
 8006f9e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa0:	e009      	b.n	8006fb6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa2:	f7fe fb95 	bl	80056d0 <HAL_GetTick>
 8006fa6:	0002      	movs	r2, r0
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	4a27      	ldr	r2, [pc, #156]	@ (800704c <HAL_RCC_ClockConfig+0x18c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e042      	b.n	800703c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fb6:	4b24      	ldr	r3, [pc, #144]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	220c      	movs	r2, #12
 8006fbc:	401a      	ands	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d1ec      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8007044 <HAL_RCC_ClockConfig+0x184>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	4013      	ands	r3, r2
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d211      	bcs.n	8006ffa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8007044 <HAL_RCC_ClockConfig+0x184>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	4393      	bics	r3, r2
 8006fde:	0019      	movs	r1, r3
 8006fe0:	4b18      	ldr	r3, [pc, #96]	@ (8007044 <HAL_RCC_ClockConfig+0x184>)
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe8:	4b16      	ldr	r3, [pc, #88]	@ (8007044 <HAL_RCC_ClockConfig+0x184>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2201      	movs	r2, #1
 8006fee:	4013      	ands	r3, r2
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d001      	beq.n	8006ffa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e020      	b.n	800703c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2204      	movs	r2, #4
 8007000:	4013      	ands	r3, r2
 8007002:	d009      	beq.n	8007018 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007004:	4b10      	ldr	r3, [pc, #64]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4a11      	ldr	r2, [pc, #68]	@ (8007050 <HAL_RCC_ClockConfig+0x190>)
 800700a:	4013      	ands	r3, r2
 800700c:	0019      	movs	r1, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	4b0d      	ldr	r3, [pc, #52]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007018:	f000 f820 	bl	800705c <HAL_RCC_GetSysClockFreq>
 800701c:	0001      	movs	r1, r0
 800701e:	4b0a      	ldr	r3, [pc, #40]	@ (8007048 <HAL_RCC_ClockConfig+0x188>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	091b      	lsrs	r3, r3, #4
 8007024:	220f      	movs	r2, #15
 8007026:	4013      	ands	r3, r2
 8007028:	4a0a      	ldr	r2, [pc, #40]	@ (8007054 <HAL_RCC_ClockConfig+0x194>)
 800702a:	5cd3      	ldrb	r3, [r2, r3]
 800702c:	000a      	movs	r2, r1
 800702e:	40da      	lsrs	r2, r3
 8007030:	4b09      	ldr	r3, [pc, #36]	@ (8007058 <HAL_RCC_ClockConfig+0x198>)
 8007032:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007034:	2002      	movs	r0, #2
 8007036:	f7fe fb05 	bl	8005644 <HAL_InitTick>
  
  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	0018      	movs	r0, r3
 800703e:	46bd      	mov	sp, r7
 8007040:	b004      	add	sp, #16
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40022000 	.word	0x40022000
 8007048:	40021000 	.word	0x40021000
 800704c:	00001388 	.word	0x00001388
 8007050:	fffff8ff 	.word	0xfffff8ff
 8007054:	0800e35c 	.word	0x0800e35c
 8007058:	20000020 	.word	0x20000020

0800705c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	2300      	movs	r3, #0
 8007068:	60bb      	str	r3, [r7, #8]
 800706a:	2300      	movs	r3, #0
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	2300      	movs	r3, #0
 8007070:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007076:	4b20      	ldr	r3, [pc, #128]	@ (80070f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	220c      	movs	r2, #12
 8007080:	4013      	ands	r3, r2
 8007082:	2b04      	cmp	r3, #4
 8007084:	d002      	beq.n	800708c <HAL_RCC_GetSysClockFreq+0x30>
 8007086:	2b08      	cmp	r3, #8
 8007088:	d003      	beq.n	8007092 <HAL_RCC_GetSysClockFreq+0x36>
 800708a:	e02c      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800708c:	4b1b      	ldr	r3, [pc, #108]	@ (80070fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800708e:	613b      	str	r3, [r7, #16]
      break;
 8007090:	e02c      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	0c9b      	lsrs	r3, r3, #18
 8007096:	220f      	movs	r2, #15
 8007098:	4013      	ands	r3, r2
 800709a:	4a19      	ldr	r2, [pc, #100]	@ (8007100 <HAL_RCC_GetSysClockFreq+0xa4>)
 800709c:	5cd3      	ldrb	r3, [r2, r3]
 800709e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80070a0:	4b15      	ldr	r3, [pc, #84]	@ (80070f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80070a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a4:	220f      	movs	r2, #15
 80070a6:	4013      	ands	r3, r2
 80070a8:	4a16      	ldr	r2, [pc, #88]	@ (8007104 <HAL_RCC_GetSysClockFreq+0xa8>)
 80070aa:	5cd3      	ldrb	r3, [r2, r3]
 80070ac:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	2380      	movs	r3, #128	@ 0x80
 80070b2:	025b      	lsls	r3, r3, #9
 80070b4:	4013      	ands	r3, r2
 80070b6:	d009      	beq.n	80070cc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	4810      	ldr	r0, [pc, #64]	@ (80070fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80070bc:	f7f9 f840 	bl	8000140 <__udivsi3>
 80070c0:	0003      	movs	r3, r0
 80070c2:	001a      	movs	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4353      	muls	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	e009      	b.n	80070e0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	000a      	movs	r2, r1
 80070d0:	0152      	lsls	r2, r2, #5
 80070d2:	1a52      	subs	r2, r2, r1
 80070d4:	0193      	lsls	r3, r2, #6
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	185b      	adds	r3, r3, r1
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	613b      	str	r3, [r7, #16]
      break;
 80070e4:	e002      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070e6:	4b08      	ldr	r3, [pc, #32]	@ (8007108 <HAL_RCC_GetSysClockFreq+0xac>)
 80070e8:	613b      	str	r3, [r7, #16]
      break;
 80070ea:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80070ec:	693b      	ldr	r3, [r7, #16]
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b006      	add	sp, #24
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	46c0      	nop			@ (mov r8, r8)
 80070f8:	40021000 	.word	0x40021000
 80070fc:	00f42400 	.word	0x00f42400
 8007100:	0800e374 	.word	0x0800e374
 8007104:	0800e384 	.word	0x0800e384
 8007108:	007a1200 	.word	0x007a1200

0800710c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007110:	4b02      	ldr	r3, [pc, #8]	@ (800711c <HAL_RCC_GetHCLKFreq+0x10>)
 8007112:	681b      	ldr	r3, [r3, #0]
}
 8007114:	0018      	movs	r0, r3
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	46c0      	nop			@ (mov r8, r8)
 800711c:	20000020 	.word	0x20000020

08007120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8007124:	f7ff fff2 	bl	800710c <HAL_RCC_GetHCLKFreq>
 8007128:	0001      	movs	r1, r0
 800712a:	4b06      	ldr	r3, [pc, #24]	@ (8007144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	2207      	movs	r2, #7
 8007132:	4013      	ands	r3, r2
 8007134:	4a04      	ldr	r2, [pc, #16]	@ (8007148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007136:	5cd3      	ldrb	r3, [r2, r3]
 8007138:	40d9      	lsrs	r1, r3
 800713a:	000b      	movs	r3, r1
}    
 800713c:	0018      	movs	r0, r3
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	46c0      	nop			@ (mov r8, r8)
 8007144:	40021000 	.word	0x40021000
 8007148:	0800e36c 	.word	0x0800e36c

0800714c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	2380      	movs	r3, #128	@ 0x80
 8007162:	025b      	lsls	r3, r3, #9
 8007164:	4013      	ands	r3, r2
 8007166:	d100      	bne.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007168:	e08e      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800716a:	2017      	movs	r0, #23
 800716c:	183b      	adds	r3, r7, r0
 800716e:	2200      	movs	r2, #0
 8007170:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007172:	4b57      	ldr	r3, [pc, #348]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007174:	69da      	ldr	r2, [r3, #28]
 8007176:	2380      	movs	r3, #128	@ 0x80
 8007178:	055b      	lsls	r3, r3, #21
 800717a:	4013      	ands	r3, r2
 800717c:	d110      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800717e:	4b54      	ldr	r3, [pc, #336]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007180:	69da      	ldr	r2, [r3, #28]
 8007182:	4b53      	ldr	r3, [pc, #332]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007184:	2180      	movs	r1, #128	@ 0x80
 8007186:	0549      	lsls	r1, r1, #21
 8007188:	430a      	orrs	r2, r1
 800718a:	61da      	str	r2, [r3, #28]
 800718c:	4b50      	ldr	r3, [pc, #320]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800718e:	69da      	ldr	r2, [r3, #28]
 8007190:	2380      	movs	r3, #128	@ 0x80
 8007192:	055b      	lsls	r3, r3, #21
 8007194:	4013      	ands	r3, r2
 8007196:	60bb      	str	r3, [r7, #8]
 8007198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800719a:	183b      	adds	r3, r7, r0
 800719c:	2201      	movs	r2, #1
 800719e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071a0:	4b4c      	ldr	r3, [pc, #304]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	2380      	movs	r3, #128	@ 0x80
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	4013      	ands	r3, r2
 80071aa:	d11a      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071ac:	4b49      	ldr	r3, [pc, #292]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4b48      	ldr	r3, [pc, #288]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80071b2:	2180      	movs	r1, #128	@ 0x80
 80071b4:	0049      	lsls	r1, r1, #1
 80071b6:	430a      	orrs	r2, r1
 80071b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ba:	f7fe fa89 	bl	80056d0 <HAL_GetTick>
 80071be:	0003      	movs	r3, r0
 80071c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c2:	e008      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c4:	f7fe fa84 	bl	80056d0 <HAL_GetTick>
 80071c8:	0002      	movs	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b64      	cmp	r3, #100	@ 0x64
 80071d0:	d901      	bls.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e077      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d6:	4b3f      	ldr	r3, [pc, #252]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	2380      	movs	r3, #128	@ 0x80
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4013      	ands	r3, r2
 80071e0:	d0f0      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071e2:	4b3b      	ldr	r3, [pc, #236]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80071e4:	6a1a      	ldr	r2, [r3, #32]
 80071e6:	23c0      	movs	r3, #192	@ 0xc0
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4013      	ands	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d034      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	23c0      	movs	r3, #192	@ 0xc0
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4013      	ands	r3, r2
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	429a      	cmp	r2, r3
 8007202:	d02c      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007204:	4b32      	ldr	r3, [pc, #200]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	4a33      	ldr	r2, [pc, #204]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800720a:	4013      	ands	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800720e:	4b30      	ldr	r3, [pc, #192]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007210:	6a1a      	ldr	r2, [r3, #32]
 8007212:	4b2f      	ldr	r3, [pc, #188]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007214:	2180      	movs	r1, #128	@ 0x80
 8007216:	0249      	lsls	r1, r1, #9
 8007218:	430a      	orrs	r2, r1
 800721a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800721c:	4b2c      	ldr	r3, [pc, #176]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800721e:	6a1a      	ldr	r2, [r3, #32]
 8007220:	4b2b      	ldr	r3, [pc, #172]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007222:	492e      	ldr	r1, [pc, #184]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8007224:	400a      	ands	r2, r1
 8007226:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007228:	4b29      	ldr	r3, [pc, #164]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	4013      	ands	r3, r2
 8007234:	d013      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007236:	f7fe fa4b 	bl	80056d0 <HAL_GetTick>
 800723a:	0003      	movs	r3, r0
 800723c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800723e:	e009      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007240:	f7fe fa46 	bl	80056d0 <HAL_GetTick>
 8007244:	0002      	movs	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	4a25      	ldr	r2, [pc, #148]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d901      	bls.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e038      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007254:	4b1e      	ldr	r3, [pc, #120]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	2202      	movs	r2, #2
 800725a:	4013      	ands	r3, r2
 800725c:	d0f0      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800725e:	4b1c      	ldr	r3, [pc, #112]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	4a1d      	ldr	r2, [pc, #116]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8007264:	4013      	ands	r3, r2
 8007266:	0019      	movs	r1, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	4b18      	ldr	r3, [pc, #96]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800726e:	430a      	orrs	r2, r1
 8007270:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007272:	2317      	movs	r3, #23
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d105      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800727c:	4b14      	ldr	r3, [pc, #80]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800727e:	69da      	ldr	r2, [r3, #28]
 8007280:	4b13      	ldr	r3, [pc, #76]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007282:	4918      	ldr	r1, [pc, #96]	@ (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8007284:	400a      	ands	r2, r1
 8007286:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	4013      	ands	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007292:	4b0f      	ldr	r3, [pc, #60]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	2203      	movs	r2, #3
 8007298:	4393      	bics	r3, r2
 800729a:	0019      	movs	r1, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	4b0b      	ldr	r3, [pc, #44]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80072a2:	430a      	orrs	r2, r1
 80072a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2220      	movs	r2, #32
 80072ac:	4013      	ands	r3, r2
 80072ae:	d009      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072b0:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80072b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b4:	2210      	movs	r2, #16
 80072b6:	4393      	bics	r3, r2
 80072b8:	0019      	movs	r1, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	4b04      	ldr	r3, [pc, #16]	@ (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80072c0:	430a      	orrs	r2, r1
 80072c2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	0018      	movs	r0, r3
 80072c8:	46bd      	mov	sp, r7
 80072ca:	b006      	add	sp, #24
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	46c0      	nop			@ (mov r8, r8)
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40007000 	.word	0x40007000
 80072d8:	fffffcff 	.word	0xfffffcff
 80072dc:	fffeffff 	.word	0xfffeffff
 80072e0:	00001388 	.word	0x00001388
 80072e4:	efffffff 	.word	0xefffffff

080072e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e0a8      	b.n	800744c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d109      	bne.n	8007316 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	2382      	movs	r3, #130	@ 0x82
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	429a      	cmp	r2, r3
 800730c:	d009      	beq.n	8007322 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	61da      	str	r2, [r3, #28]
 8007314:	e005      	b.n	8007322 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	225d      	movs	r2, #93	@ 0x5d
 800732c:	5c9b      	ldrb	r3, [r3, r2]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d107      	bne.n	8007344 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	225c      	movs	r2, #92	@ 0x5c
 8007338:	2100      	movs	r1, #0
 800733a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	0018      	movs	r0, r3
 8007340:	f7fd fee8 	bl	8005114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	225d      	movs	r2, #93	@ 0x5d
 8007348:	2102      	movs	r1, #2
 800734a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2140      	movs	r1, #64	@ 0x40
 8007358:	438a      	bics	r2, r1
 800735a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	23e0      	movs	r3, #224	@ 0xe0
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	429a      	cmp	r2, r3
 8007366:	d902      	bls.n	800736e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	e002      	b.n	8007374 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800736e:	2380      	movs	r3, #128	@ 0x80
 8007370:	015b      	lsls	r3, r3, #5
 8007372:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	23f0      	movs	r3, #240	@ 0xf0
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	429a      	cmp	r2, r3
 800737e:	d008      	beq.n	8007392 <HAL_SPI_Init+0xaa>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	23e0      	movs	r3, #224	@ 0xe0
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	429a      	cmp	r2, r3
 800738a:	d002      	beq.n	8007392 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	2382      	movs	r3, #130	@ 0x82
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	401a      	ands	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6899      	ldr	r1, [r3, #8]
 80073a0:	2384      	movs	r3, #132	@ 0x84
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	400b      	ands	r3, r1
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2102      	movs	r1, #2
 80073ae:	400b      	ands	r3, r1
 80073b0:	431a      	orrs	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	2101      	movs	r1, #1
 80073b8:	400b      	ands	r3, r1
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6999      	ldr	r1, [r3, #24]
 80073c0:	2380      	movs	r3, #128	@ 0x80
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	400b      	ands	r3, r1
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	2138      	movs	r1, #56	@ 0x38
 80073ce:	400b      	ands	r3, r1
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	2180      	movs	r1, #128	@ 0x80
 80073d8:	400b      	ands	r3, r1
 80073da:	431a      	orrs	r2, r3
 80073dc:	0011      	movs	r1, r2
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073e2:	2380      	movs	r3, #128	@ 0x80
 80073e4:	019b      	lsls	r3, r3, #6
 80073e6:	401a      	ands	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	0c1b      	lsrs	r3, r3, #16
 80073f6:	2204      	movs	r2, #4
 80073f8:	401a      	ands	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fe:	2110      	movs	r1, #16
 8007400:	400b      	ands	r3, r1
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007408:	2108      	movs	r1, #8
 800740a:	400b      	ands	r3, r1
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68d9      	ldr	r1, [r3, #12]
 8007412:	23f0      	movs	r3, #240	@ 0xf0
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	400b      	ands	r3, r1
 8007418:	431a      	orrs	r2, r3
 800741a:	0011      	movs	r1, r2
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	2380      	movs	r3, #128	@ 0x80
 8007420:	015b      	lsls	r3, r3, #5
 8007422:	401a      	ands	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69da      	ldr	r2, [r3, #28]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4907      	ldr	r1, [pc, #28]	@ (8007454 <HAL_SPI_Init+0x16c>)
 8007438:	400a      	ands	r2, r1
 800743a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	225d      	movs	r2, #93	@ 0x5d
 8007446:	2101      	movs	r1, #1
 8007448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	0018      	movs	r0, r3
 800744e:	46bd      	mov	sp, r7
 8007450:	b004      	add	sp, #16
 8007452:	bd80      	pop	{r7, pc}
 8007454:	fffff7ff 	.word	0xfffff7ff

08007458 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007458:	b590      	push	{r4, r7, lr}
 800745a:	b089      	sub	sp, #36	@ 0x24
 800745c:	af02      	add	r7, sp, #8
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	1dbb      	adds	r3, r7, #6
 8007466:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007468:	2117      	movs	r1, #23
 800746a:	187b      	adds	r3, r7, r1
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	225d      	movs	r2, #93	@ 0x5d
 8007474:	5c9b      	ldrb	r3, [r3, r2]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d003      	beq.n	8007484 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800747c:	187b      	adds	r3, r7, r1
 800747e:	2202      	movs	r2, #2
 8007480:	701a      	strb	r2, [r3, #0]
    goto error;
 8007482:	e12b      	b.n	80076dc <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	2382      	movs	r3, #130	@ 0x82
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	429a      	cmp	r2, r3
 800748e:	d113      	bne.n	80074b8 <HAL_SPI_Receive+0x60>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10f      	bne.n	80074b8 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	225d      	movs	r2, #93	@ 0x5d
 800749c:	2104      	movs	r1, #4
 800749e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074a0:	1dbb      	adds	r3, r7, #6
 80074a2:	881c      	ldrh	r4, [r3, #0]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	0023      	movs	r3, r4
 80074b0:	f000 f924 	bl	80076fc <HAL_SPI_TransmitReceive>
 80074b4:	0003      	movs	r3, r0
 80074b6:	e118      	b.n	80076ea <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	225c      	movs	r2, #92	@ 0x5c
 80074bc:	5c9b      	ldrb	r3, [r3, r2]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d101      	bne.n	80074c6 <HAL_SPI_Receive+0x6e>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e111      	b.n	80076ea <HAL_SPI_Receive+0x292>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	225c      	movs	r2, #92	@ 0x5c
 80074ca:	2101      	movs	r1, #1
 80074cc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074ce:	f7fe f8ff 	bl	80056d0 <HAL_GetTick>
 80074d2:	0003      	movs	r3, r0
 80074d4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_SPI_Receive+0x8c>
 80074dc:	1dbb      	adds	r3, r7, #6
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80074e4:	2317      	movs	r3, #23
 80074e6:	18fb      	adds	r3, r7, r3
 80074e8:	2201      	movs	r2, #1
 80074ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80074ec:	e0f6      	b.n	80076dc <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	225d      	movs	r2, #93	@ 0x5d
 80074f2:	2104      	movs	r1, #4
 80074f4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1dba      	adds	r2, r7, #6
 8007506:	2144      	movs	r1, #68	@ 0x44
 8007508:	8812      	ldrh	r2, [r2, #0]
 800750a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	1dba      	adds	r2, r7, #6
 8007510:	2146      	movs	r1, #70	@ 0x46
 8007512:	8812      	ldrh	r2, [r2, #0]
 8007514:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	23e0      	movs	r3, #224	@ 0xe0
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	429a      	cmp	r2, r3
 800753e:	d908      	bls.n	8007552 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	496a      	ldr	r1, [pc, #424]	@ (80076f4 <HAL_SPI_Receive+0x29c>)
 800754c:	400a      	ands	r2, r1
 800754e:	605a      	str	r2, [r3, #4]
 8007550:	e008      	b.n	8007564 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2180      	movs	r1, #128	@ 0x80
 800755e:	0149      	lsls	r1, r1, #5
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	2380      	movs	r3, #128	@ 0x80
 800756a:	021b      	lsls	r3, r3, #8
 800756c:	429a      	cmp	r2, r3
 800756e:	d10f      	bne.n	8007590 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2140      	movs	r1, #64	@ 0x40
 800757c:	438a      	bics	r2, r1
 800757e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	495b      	ldr	r1, [pc, #364]	@ (80076f8 <HAL_SPI_Receive+0x2a0>)
 800758c:	400a      	ands	r2, r1
 800758e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2240      	movs	r2, #64	@ 0x40
 8007598:	4013      	ands	r3, r2
 800759a:	2b40      	cmp	r3, #64	@ 0x40
 800759c:	d007      	beq.n	80075ae <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2140      	movs	r1, #64	@ 0x40
 80075aa:	430a      	orrs	r2, r1
 80075ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	23e0      	movs	r3, #224	@ 0xe0
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d900      	bls.n	80075bc <HAL_SPI_Receive+0x164>
 80075ba:	e071      	b.n	80076a0 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075bc:	e035      	b.n	800762a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2201      	movs	r2, #1
 80075c6:	4013      	ands	r3, r2
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d117      	bne.n	80075fc <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	001a      	movs	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d8:	7812      	ldrb	r2, [r2, #0]
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2246      	movs	r2, #70	@ 0x46
 80075ec:	5a9b      	ldrh	r3, [r3, r2]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b299      	uxth	r1, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2246      	movs	r2, #70	@ 0x46
 80075f8:	5299      	strh	r1, [r3, r2]
 80075fa:	e016      	b.n	800762a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075fc:	f7fe f868 	bl	80056d0 <HAL_GetTick>
 8007600:	0002      	movs	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d802      	bhi.n	8007612 <HAL_SPI_Receive+0x1ba>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	3301      	adds	r3, #1
 8007610:	d102      	bne.n	8007618 <HAL_SPI_Receive+0x1c0>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d108      	bne.n	800762a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8007618:	2317      	movs	r3, #23
 800761a:	18fb      	adds	r3, r7, r3
 800761c:	2203      	movs	r2, #3
 800761e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	225d      	movs	r2, #93	@ 0x5d
 8007624:	2101      	movs	r1, #1
 8007626:	5499      	strb	r1, [r3, r2]
          goto error;
 8007628:	e058      	b.n	80076dc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2246      	movs	r2, #70	@ 0x46
 800762e:	5a9b      	ldrh	r3, [r3, r2]
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1c3      	bne.n	80075be <HAL_SPI_Receive+0x166>
 8007636:	e039      	b.n	80076ac <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2201      	movs	r2, #1
 8007640:	4013      	ands	r3, r2
 8007642:	2b01      	cmp	r3, #1
 8007644:	d115      	bne.n	8007672 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007650:	b292      	uxth	r2, r2
 8007652:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007658:	1c9a      	adds	r2, r3, #2
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2246      	movs	r2, #70	@ 0x46
 8007662:	5a9b      	ldrh	r3, [r3, r2]
 8007664:	b29b      	uxth	r3, r3
 8007666:	3b01      	subs	r3, #1
 8007668:	b299      	uxth	r1, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2246      	movs	r2, #70	@ 0x46
 800766e:	5299      	strh	r1, [r3, r2]
 8007670:	e016      	b.n	80076a0 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007672:	f7fe f82d 	bl	80056d0 <HAL_GetTick>
 8007676:	0002      	movs	r2, r0
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d802      	bhi.n	8007688 <HAL_SPI_Receive+0x230>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	3301      	adds	r3, #1
 8007686:	d102      	bne.n	800768e <HAL_SPI_Receive+0x236>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d108      	bne.n	80076a0 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800768e:	2317      	movs	r3, #23
 8007690:	18fb      	adds	r3, r7, r3
 8007692:	2203      	movs	r2, #3
 8007694:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	225d      	movs	r2, #93	@ 0x5d
 800769a:	2101      	movs	r1, #1
 800769c:	5499      	strb	r1, [r3, r2]
          goto error;
 800769e:	e01d      	b.n	80076dc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2246      	movs	r2, #70	@ 0x46
 80076a4:	5a9b      	ldrh	r3, [r3, r2]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1c5      	bne.n	8007638 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 fb34 	bl	8007d20 <SPI_EndRxTransaction>
 80076b8:	1e03      	subs	r3, r0, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2220      	movs	r2, #32
 80076c0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80076ca:	2317      	movs	r3, #23
 80076cc:	18fb      	adds	r3, r7, r3
 80076ce:	2201      	movs	r2, #1
 80076d0:	701a      	strb	r2, [r3, #0]
 80076d2:	e003      	b.n	80076dc <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	225d      	movs	r2, #93	@ 0x5d
 80076d8:	2101      	movs	r1, #1
 80076da:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	225c      	movs	r2, #92	@ 0x5c
 80076e0:	2100      	movs	r1, #0
 80076e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80076e4:	2317      	movs	r3, #23
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	781b      	ldrb	r3, [r3, #0]
}
 80076ea:	0018      	movs	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b007      	add	sp, #28
 80076f0:	bd90      	pop	{r4, r7, pc}
 80076f2:	46c0      	nop			@ (mov r8, r8)
 80076f4:	ffffefff 	.word	0xffffefff
 80076f8:	ffffbfff 	.word	0xffffbfff

080076fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	@ 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	001a      	movs	r2, r3
 800770a:	1cbb      	adds	r3, r7, #2
 800770c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800770e:	2301      	movs	r3, #1
 8007710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007712:	2323      	movs	r3, #35	@ 0x23
 8007714:	18fb      	adds	r3, r7, r3
 8007716:	2200      	movs	r2, #0
 8007718:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	225c      	movs	r2, #92	@ 0x5c
 800771e:	5c9b      	ldrb	r3, [r3, r2]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x2c>
 8007724:	2302      	movs	r3, #2
 8007726:	e1c4      	b.n	8007ab2 <HAL_SPI_TransmitReceive+0x3b6>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	225c      	movs	r2, #92	@ 0x5c
 800772c:	2101      	movs	r1, #1
 800772e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007730:	f7fd ffce 	bl	80056d0 <HAL_GetTick>
 8007734:	0003      	movs	r3, r0
 8007736:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007738:	201b      	movs	r0, #27
 800773a:	183b      	adds	r3, r7, r0
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	215d      	movs	r1, #93	@ 0x5d
 8007740:	5c52      	ldrb	r2, [r2, r1]
 8007742:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800774a:	2312      	movs	r3, #18
 800774c:	18fb      	adds	r3, r7, r3
 800774e:	1cba      	adds	r2, r7, #2
 8007750:	8812      	ldrh	r2, [r2, #0]
 8007752:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007754:	183b      	adds	r3, r7, r0
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d011      	beq.n	8007780 <HAL_SPI_TransmitReceive+0x84>
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	2382      	movs	r3, #130	@ 0x82
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	429a      	cmp	r2, r3
 8007764:	d107      	bne.n	8007776 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d103      	bne.n	8007776 <HAL_SPI_TransmitReceive+0x7a>
 800776e:	183b      	adds	r3, r7, r0
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b04      	cmp	r3, #4
 8007774:	d004      	beq.n	8007780 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007776:	2323      	movs	r3, #35	@ 0x23
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	2202      	movs	r2, #2
 800777c:	701a      	strb	r2, [r3, #0]
    goto error;
 800777e:	e191      	b.n	8007aa4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d006      	beq.n	8007794 <HAL_SPI_TransmitReceive+0x98>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_SPI_TransmitReceive+0x98>
 800778c:	1cbb      	adds	r3, r7, #2
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007794:	2323      	movs	r3, #35	@ 0x23
 8007796:	18fb      	adds	r3, r7, r3
 8007798:	2201      	movs	r2, #1
 800779a:	701a      	strb	r2, [r3, #0]
    goto error;
 800779c:	e182      	b.n	8007aa4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	225d      	movs	r2, #93	@ 0x5d
 80077a2:	5c9b      	ldrb	r3, [r3, r2]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d003      	beq.n	80077b2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	225d      	movs	r2, #93	@ 0x5d
 80077ae:	2105      	movs	r1, #5
 80077b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1cba      	adds	r2, r7, #2
 80077c2:	2146      	movs	r1, #70	@ 0x46
 80077c4:	8812      	ldrh	r2, [r2, #0]
 80077c6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	1cba      	adds	r2, r7, #2
 80077cc:	2144      	movs	r1, #68	@ 0x44
 80077ce:	8812      	ldrh	r2, [r2, #0]
 80077d0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	1cba      	adds	r2, r7, #2
 80077dc:	8812      	ldrh	r2, [r2, #0]
 80077de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	1cba      	adds	r2, r7, #2
 80077e4:	8812      	ldrh	r2, [r2, #0]
 80077e6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	23e0      	movs	r3, #224	@ 0xe0
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d908      	bls.n	8007812 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	49ac      	ldr	r1, [pc, #688]	@ (8007abc <HAL_SPI_TransmitReceive+0x3c0>)
 800780c:	400a      	ands	r2, r1
 800780e:	605a      	str	r2, [r3, #4]
 8007810:	e008      	b.n	8007824 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2180      	movs	r1, #128	@ 0x80
 800781e:	0149      	lsls	r1, r1, #5
 8007820:	430a      	orrs	r2, r1
 8007822:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2240      	movs	r2, #64	@ 0x40
 800782c:	4013      	ands	r3, r2
 800782e:	2b40      	cmp	r3, #64	@ 0x40
 8007830:	d007      	beq.n	8007842 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2140      	movs	r1, #64	@ 0x40
 800783e:	430a      	orrs	r2, r1
 8007840:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	23e0      	movs	r3, #224	@ 0xe0
 8007848:	00db      	lsls	r3, r3, #3
 800784a:	429a      	cmp	r2, r3
 800784c:	d800      	bhi.n	8007850 <HAL_SPI_TransmitReceive+0x154>
 800784e:	e083      	b.n	8007958 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <HAL_SPI_TransmitReceive+0x168>
 8007858:	2312      	movs	r3, #18
 800785a:	18fb      	adds	r3, r7, r3
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d000      	beq.n	8007864 <HAL_SPI_TransmitReceive+0x168>
 8007862:	e06d      	b.n	8007940 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007868:	881a      	ldrh	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007874:	1c9a      	adds	r2, r3, #2
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007888:	e05a      	b.n	8007940 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2202      	movs	r2, #2
 8007892:	4013      	ands	r3, r2
 8007894:	2b02      	cmp	r3, #2
 8007896:	d11b      	bne.n	80078d0 <HAL_SPI_TransmitReceive+0x1d4>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d016      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x1d4>
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d113      	bne.n	80078d0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ac:	881a      	ldrh	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b8:	1c9a      	adds	r2, r3, #2
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	2201      	movs	r2, #1
 80078d8:	4013      	ands	r3, r2
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d11c      	bne.n	8007918 <HAL_SPI_TransmitReceive+0x21c>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2246      	movs	r2, #70	@ 0x46
 80078e2:	5a9b      	ldrh	r3, [r3, r2]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f4:	b292      	uxth	r2, r2
 80078f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fc:	1c9a      	adds	r2, r3, #2
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2246      	movs	r2, #70	@ 0x46
 8007906:	5a9b      	ldrh	r3, [r3, r2]
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b299      	uxth	r1, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2246      	movs	r2, #70	@ 0x46
 8007912:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007914:	2301      	movs	r3, #1
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007918:	f7fd feda 	bl	80056d0 <HAL_GetTick>
 800791c:	0002      	movs	r2, r0
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007924:	429a      	cmp	r2, r3
 8007926:	d80b      	bhi.n	8007940 <HAL_SPI_TransmitReceive+0x244>
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	3301      	adds	r3, #1
 800792c:	d008      	beq.n	8007940 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800792e:	2323      	movs	r3, #35	@ 0x23
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	2203      	movs	r2, #3
 8007934:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	225d      	movs	r2, #93	@ 0x5d
 800793a:	2101      	movs	r1, #1
 800793c:	5499      	strb	r1, [r3, r2]
        goto error;
 800793e:	e0b1      	b.n	8007aa4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d19f      	bne.n	800788a <HAL_SPI_TransmitReceive+0x18e>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2246      	movs	r2, #70	@ 0x46
 800794e:	5a9b      	ldrh	r3, [r3, r2]
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d199      	bne.n	800788a <HAL_SPI_TransmitReceive+0x18e>
 8007956:	e089      	b.n	8007a6c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <HAL_SPI_TransmitReceive+0x270>
 8007960:	2312      	movs	r3, #18
 8007962:	18fb      	adds	r3, r7, r3
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d000      	beq.n	800796c <HAL_SPI_TransmitReceive+0x270>
 800796a:	e074      	b.n	8007a56 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	330c      	adds	r3, #12
 8007976:	7812      	ldrb	r2, [r2, #0]
 8007978:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007992:	e060      	b.n	8007a56 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	2202      	movs	r2, #2
 800799c:	4013      	ands	r3, r2
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d11c      	bne.n	80079dc <HAL_SPI_TransmitReceive+0x2e0>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d017      	beq.n	80079dc <HAL_SPI_TransmitReceive+0x2e0>
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d114      	bne.n	80079dc <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	330c      	adds	r3, #12
 80079bc:	7812      	ldrb	r2, [r2, #0]
 80079be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2201      	movs	r2, #1
 80079e4:	4013      	ands	r3, r2
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d11e      	bne.n	8007a28 <HAL_SPI_TransmitReceive+0x32c>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2246      	movs	r2, #70	@ 0x46
 80079ee:	5a9b      	ldrh	r3, [r3, r2]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d018      	beq.n	8007a28 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	330c      	adds	r3, #12
 80079fc:	001a      	movs	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2246      	movs	r2, #70	@ 0x46
 8007a16:	5a9b      	ldrh	r3, [r3, r2]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b299      	uxth	r1, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2246      	movs	r2, #70	@ 0x46
 8007a22:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a24:	2301      	movs	r3, #1
 8007a26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a28:	f7fd fe52 	bl	80056d0 <HAL_GetTick>
 8007a2c:	0002      	movs	r2, r0
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d802      	bhi.n	8007a3e <HAL_SPI_TransmitReceive+0x342>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	d102      	bne.n	8007a44 <HAL_SPI_TransmitReceive+0x348>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d108      	bne.n	8007a56 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007a44:	2323      	movs	r3, #35	@ 0x23
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	2203      	movs	r2, #3
 8007a4a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	225d      	movs	r2, #93	@ 0x5d
 8007a50:	2101      	movs	r1, #1
 8007a52:	5499      	strb	r1, [r3, r2]
        goto error;
 8007a54:	e026      	b.n	8007aa4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d199      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x298>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2246      	movs	r2, #70	@ 0x46
 8007a64:	5a9b      	ldrh	r3, [r3, r2]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d193      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	0018      	movs	r0, r3
 8007a74:	f000 f9b2 	bl	8007ddc <SPI_EndRxTxTransaction>
 8007a78:	1e03      	subs	r3, r0, #0
 8007a7a:	d006      	beq.n	8007a8a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007a7c:	2323      	movs	r3, #35	@ 0x23
 8007a7e:	18fb      	adds	r3, r7, r3
 8007a80:	2201      	movs	r2, #1
 8007a82:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007a92:	2323      	movs	r3, #35	@ 0x23
 8007a94:	18fb      	adds	r3, r7, r3
 8007a96:	2201      	movs	r2, #1
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	e003      	b.n	8007aa4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	225d      	movs	r2, #93	@ 0x5d
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	225c      	movs	r2, #92	@ 0x5c
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007aac:	2323      	movs	r3, #35	@ 0x23
 8007aae:	18fb      	adds	r3, r7, r3
 8007ab0:	781b      	ldrb	r3, [r3, #0]
}
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	b00a      	add	sp, #40	@ 0x28
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	46c0      	nop			@ (mov r8, r8)
 8007abc:	ffffefff 	.word	0xffffefff

08007ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	1dfb      	adds	r3, r7, #7
 8007ace:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ad0:	f7fd fdfe 	bl	80056d0 <HAL_GetTick>
 8007ad4:	0002      	movs	r2, r0
 8007ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad8:	1a9b      	subs	r3, r3, r2
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	18d3      	adds	r3, r2, r3
 8007ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ae0:	f7fd fdf6 	bl	80056d0 <HAL_GetTick>
 8007ae4:	0003      	movs	r3, r0
 8007ae6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8007bd4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	015b      	lsls	r3, r3, #5
 8007aee:	0d1b      	lsrs	r3, r3, #20
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	4353      	muls	r3, r2
 8007af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007af6:	e058      	b.n	8007baa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	d055      	beq.n	8007baa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007afe:	f7fd fde7 	bl	80056d0 <HAL_GetTick>
 8007b02:	0002      	movs	r2, r0
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d902      	bls.n	8007b14 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d142      	bne.n	8007b9a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	21e0      	movs	r1, #224	@ 0xe0
 8007b20:	438a      	bics	r2, r1
 8007b22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	2382      	movs	r3, #130	@ 0x82
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d113      	bne.n	8007b58 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	2380      	movs	r3, #128	@ 0x80
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d005      	beq.n	8007b48 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	2380      	movs	r3, #128	@ 0x80
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d107      	bne.n	8007b58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2140      	movs	r1, #64	@ 0x40
 8007b54:	438a      	bics	r2, r1
 8007b56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b5c:	2380      	movs	r3, #128	@ 0x80
 8007b5e:	019b      	lsls	r3, r3, #6
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d110      	bne.n	8007b86 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	491a      	ldr	r1, [pc, #104]	@ (8007bd8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007b70:	400a      	ands	r2, r1
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2180      	movs	r1, #128	@ 0x80
 8007b80:	0189      	lsls	r1, r1, #6
 8007b82:	430a      	orrs	r2, r1
 8007b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	225d      	movs	r2, #93	@ 0x5d
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	225c      	movs	r2, #92	@ 0x5c
 8007b92:	2100      	movs	r1, #0
 8007b94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e017      	b.n	8007bca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	425a      	negs	r2, r3
 8007bba:	4153      	adcs	r3, r2
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	001a      	movs	r2, r3
 8007bc0:	1dfb      	adds	r3, r7, #7
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d197      	bne.n	8007af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	0018      	movs	r0, r3
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	b008      	add	sp, #32
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	46c0      	nop			@ (mov r8, r8)
 8007bd4:	20000020 	.word	0x20000020
 8007bd8:	ffffdfff 	.word	0xffffdfff

08007bdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08a      	sub	sp, #40	@ 0x28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
 8007be8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007bea:	2317      	movs	r3, #23
 8007bec:	18fb      	adds	r3, r7, r3
 8007bee:	2200      	movs	r2, #0
 8007bf0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007bf2:	f7fd fd6d 	bl	80056d0 <HAL_GetTick>
 8007bf6:	0002      	movs	r2, r0
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	18d3      	adds	r3, r2, r3
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007c02:	f7fd fd65 	bl	80056d0 <HAL_GetTick>
 8007c06:	0003      	movs	r3, r0
 8007c08:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	330c      	adds	r3, #12
 8007c10:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c12:	4b41      	ldr	r3, [pc, #260]	@ (8007d18 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	0013      	movs	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	189b      	adds	r3, r3, r2
 8007c1c:	00da      	lsls	r2, r3, #3
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	0d1b      	lsrs	r3, r3, #20
 8007c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c24:	4353      	muls	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007c28:	e068      	b.n	8007cfc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	23c0      	movs	r3, #192	@ 0xc0
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d10a      	bne.n	8007c4a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d107      	bne.n	8007c4a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	2117      	movs	r1, #23
 8007c42:	187b      	adds	r3, r7, r1
 8007c44:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007c46:	187b      	adds	r3, r7, r1
 8007c48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	d055      	beq.n	8007cfc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c50:	f7fd fd3e 	bl	80056d0 <HAL_GetTick>
 8007c54:	0002      	movs	r2, r0
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d902      	bls.n	8007c66 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d142      	bne.n	8007cec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	21e0      	movs	r1, #224	@ 0xe0
 8007c72:	438a      	bics	r2, r1
 8007c74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	2382      	movs	r3, #130	@ 0x82
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d113      	bne.n	8007caa <SPI_WaitFifoStateUntilTimeout+0xce>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	2380      	movs	r3, #128	@ 0x80
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d005      	beq.n	8007c9a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	2380      	movs	r3, #128	@ 0x80
 8007c94:	00db      	lsls	r3, r3, #3
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d107      	bne.n	8007caa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2140      	movs	r1, #64	@ 0x40
 8007ca6:	438a      	bics	r2, r1
 8007ca8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cae:	2380      	movs	r3, #128	@ 0x80
 8007cb0:	019b      	lsls	r3, r3, #6
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d110      	bne.n	8007cd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4916      	ldr	r1, [pc, #88]	@ (8007d1c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007cc2:	400a      	ands	r2, r1
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2180      	movs	r1, #128	@ 0x80
 8007cd2:	0189      	lsls	r1, r1, #6
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	225d      	movs	r2, #93	@ 0x5d
 8007cdc:	2101      	movs	r1, #1
 8007cde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	225c      	movs	r2, #92	@ 0x5c
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e010      	b.n	8007d0e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	4013      	ands	r3, r2
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d18e      	bne.n	8007c2a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	0018      	movs	r0, r3
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b00a      	add	sp, #40	@ 0x28
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	46c0      	nop			@ (mov r8, r8)
 8007d18:	20000020 	.word	0x20000020
 8007d1c:	ffffdfff 	.word	0xffffdfff

08007d20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	2382      	movs	r3, #130	@ 0x82
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d113      	bne.n	8007d60 <SPI_EndRxTransaction+0x40>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	2380      	movs	r3, #128	@ 0x80
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d005      	beq.n	8007d50 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	2380      	movs	r3, #128	@ 0x80
 8007d4a:	00db      	lsls	r3, r3, #3
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d107      	bne.n	8007d60 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2140      	movs	r1, #64	@ 0x40
 8007d5c:	438a      	bics	r2, r1
 8007d5e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	0013      	movs	r3, r2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2180      	movs	r1, #128	@ 0x80
 8007d6e:	f7ff fea7 	bl	8007ac0 <SPI_WaitFlagStateUntilTimeout>
 8007d72:	1e03      	subs	r3, r0, #0
 8007d74:	d007      	beq.n	8007d86 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e026      	b.n	8007dd4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	2382      	movs	r3, #130	@ 0x82
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d11f      	bne.n	8007dd2 <SPI_EndRxTransaction+0xb2>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	2380      	movs	r3, #128	@ 0x80
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d005      	beq.n	8007daa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	2380      	movs	r3, #128	@ 0x80
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d113      	bne.n	8007dd2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	23c0      	movs	r3, #192	@ 0xc0
 8007dae:	00d9      	lsls	r1, r3, #3
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	0013      	movs	r3, r2
 8007db8:	2200      	movs	r2, #0
 8007dba:	f7ff ff0f 	bl	8007bdc <SPI_WaitFifoStateUntilTimeout>
 8007dbe:	1e03      	subs	r3, r0, #0
 8007dc0:	d007      	beq.n	8007dd2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e000      	b.n	8007dd4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	b004      	add	sp, #16
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	23c0      	movs	r3, #192	@ 0xc0
 8007dec:	0159      	lsls	r1, r3, #5
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	0013      	movs	r3, r2
 8007df6:	2200      	movs	r2, #0
 8007df8:	f7ff fef0 	bl	8007bdc <SPI_WaitFifoStateUntilTimeout>
 8007dfc:	1e03      	subs	r3, r0, #0
 8007dfe:	d007      	beq.n	8007e10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e04:	2220      	movs	r2, #32
 8007e06:	431a      	orrs	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e027      	b.n	8007e60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	0013      	movs	r3, r2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2180      	movs	r1, #128	@ 0x80
 8007e1e:	f7ff fe4f 	bl	8007ac0 <SPI_WaitFlagStateUntilTimeout>
 8007e22:	1e03      	subs	r3, r0, #0
 8007e24:	d007      	beq.n	8007e36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e014      	b.n	8007e60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	23c0      	movs	r3, #192	@ 0xc0
 8007e3a:	00d9      	lsls	r1, r3, #3
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	0013      	movs	r3, r2
 8007e44:	2200      	movs	r2, #0
 8007e46:	f7ff fec9 	bl	8007bdc <SPI_WaitFifoStateUntilTimeout>
 8007e4a:	1e03      	subs	r3, r0, #0
 8007e4c:	d007      	beq.n	8007e5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e52:	2220      	movs	r2, #32
 8007e54:	431a      	orrs	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e000      	b.n	8007e60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	0018      	movs	r0, r3
 8007e62:	46bd      	mov	sp, r7
 8007e64:	b004      	add	sp, #16
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e042      	b.n	8007f00 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	223d      	movs	r2, #61	@ 0x3d
 8007e7e:	5c9b      	ldrb	r3, [r3, r2]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d107      	bne.n	8007e96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	223c      	movs	r2, #60	@ 0x3c
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	0018      	movs	r0, r3
 8007e92:	f7fd fa1d 	bl	80052d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	223d      	movs	r2, #61	@ 0x3d
 8007e9a:	2102      	movs	r1, #2
 8007e9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	0019      	movs	r1, r3
 8007ea8:	0010      	movs	r0, r2
 8007eaa:	f000 f94d 	bl	8008148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2246      	movs	r2, #70	@ 0x46
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	223e      	movs	r2, #62	@ 0x3e
 8007eba:	2101      	movs	r1, #1
 8007ebc:	5499      	strb	r1, [r3, r2]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	223f      	movs	r2, #63	@ 0x3f
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	5499      	strb	r1, [r3, r2]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2240      	movs	r2, #64	@ 0x40
 8007eca:	2101      	movs	r1, #1
 8007ecc:	5499      	strb	r1, [r3, r2]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2241      	movs	r2, #65	@ 0x41
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2242      	movs	r2, #66	@ 0x42
 8007eda:	2101      	movs	r1, #1
 8007edc:	5499      	strb	r1, [r3, r2]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2243      	movs	r2, #67	@ 0x43
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	5499      	strb	r1, [r3, r2]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2244      	movs	r2, #68	@ 0x44
 8007eea:	2101      	movs	r1, #1
 8007eec:	5499      	strb	r1, [r3, r2]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2245      	movs	r2, #69	@ 0x45
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	223d      	movs	r2, #61	@ 0x3d
 8007efa:	2101      	movs	r1, #1
 8007efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	0018      	movs	r0, r3
 8007f02:	46bd      	mov	sp, r7
 8007f04:	b002      	add	sp, #8
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	223d      	movs	r2, #61	@ 0x3d
 8007f14:	5c9b      	ldrb	r3, [r3, r2]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d001      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e035      	b.n	8007f8c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	223d      	movs	r2, #61	@ 0x3d
 8007f24:	2102      	movs	r1, #2
 8007f26:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2101      	movs	r1, #1
 8007f34:	430a      	orrs	r2, r1
 8007f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a15      	ldr	r2, [pc, #84]	@ (8007f94 <HAL_TIM_Base_Start_IT+0x8c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d009      	beq.n	8007f56 <HAL_TIM_Base_Start_IT+0x4e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a14      	ldr	r2, [pc, #80]	@ (8007f98 <HAL_TIM_Base_Start_IT+0x90>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d004      	beq.n	8007f56 <HAL_TIM_Base_Start_IT+0x4e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a12      	ldr	r2, [pc, #72]	@ (8007f9c <HAL_TIM_Base_Start_IT+0x94>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d111      	bne.n	8007f7a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	4013      	ands	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b06      	cmp	r3, #6
 8007f66:	d010      	beq.n	8007f8a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2101      	movs	r1, #1
 8007f74:	430a      	orrs	r2, r1
 8007f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f78:	e007      	b.n	8007f8a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2101      	movs	r1, #1
 8007f86:	430a      	orrs	r2, r1
 8007f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	b004      	add	sp, #16
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40012c00 	.word	0x40012c00
 8007f98:	40000400 	.word	0x40000400
 8007f9c:	40014000 	.word	0x40014000

08007fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007faa:	230f      	movs	r3, #15
 8007fac:	18fb      	adds	r3, r7, r3
 8007fae:	2200      	movs	r2, #0
 8007fb0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	223c      	movs	r2, #60	@ 0x3c
 8007fb6:	5c9b      	ldrb	r3, [r3, r2]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d101      	bne.n	8007fc0 <HAL_TIM_ConfigClockSource+0x20>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	e0bc      	b.n	800813a <HAL_TIM_ConfigClockSource+0x19a>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	223c      	movs	r2, #60	@ 0x3c
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	223d      	movs	r2, #61	@ 0x3d
 8007fcc:	2102      	movs	r1, #2
 8007fce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2277      	movs	r2, #119	@ 0x77
 8007fdc:	4393      	bics	r3, r2
 8007fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4a58      	ldr	r2, [pc, #352]	@ (8008144 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2280      	movs	r2, #128	@ 0x80
 8007ff6:	0192      	lsls	r2, r2, #6
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d040      	beq.n	800807e <HAL_TIM_ConfigClockSource+0xde>
 8007ffc:	2280      	movs	r2, #128	@ 0x80
 8007ffe:	0192      	lsls	r2, r2, #6
 8008000:	4293      	cmp	r3, r2
 8008002:	d900      	bls.n	8008006 <HAL_TIM_ConfigClockSource+0x66>
 8008004:	e088      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x178>
 8008006:	2280      	movs	r2, #128	@ 0x80
 8008008:	0152      	lsls	r2, r2, #5
 800800a:	4293      	cmp	r3, r2
 800800c:	d100      	bne.n	8008010 <HAL_TIM_ConfigClockSource+0x70>
 800800e:	e088      	b.n	8008122 <HAL_TIM_ConfigClockSource+0x182>
 8008010:	2280      	movs	r2, #128	@ 0x80
 8008012:	0152      	lsls	r2, r2, #5
 8008014:	4293      	cmp	r3, r2
 8008016:	d900      	bls.n	800801a <HAL_TIM_ConfigClockSource+0x7a>
 8008018:	e07e      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x178>
 800801a:	2b70      	cmp	r3, #112	@ 0x70
 800801c:	d018      	beq.n	8008050 <HAL_TIM_ConfigClockSource+0xb0>
 800801e:	d900      	bls.n	8008022 <HAL_TIM_ConfigClockSource+0x82>
 8008020:	e07a      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x178>
 8008022:	2b60      	cmp	r3, #96	@ 0x60
 8008024:	d04f      	beq.n	80080c6 <HAL_TIM_ConfigClockSource+0x126>
 8008026:	d900      	bls.n	800802a <HAL_TIM_ConfigClockSource+0x8a>
 8008028:	e076      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x178>
 800802a:	2b50      	cmp	r3, #80	@ 0x50
 800802c:	d03b      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0x106>
 800802e:	d900      	bls.n	8008032 <HAL_TIM_ConfigClockSource+0x92>
 8008030:	e072      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x178>
 8008032:	2b40      	cmp	r3, #64	@ 0x40
 8008034:	d057      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x146>
 8008036:	d900      	bls.n	800803a <HAL_TIM_ConfigClockSource+0x9a>
 8008038:	e06e      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x178>
 800803a:	2b30      	cmp	r3, #48	@ 0x30
 800803c:	d063      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0x166>
 800803e:	d86b      	bhi.n	8008118 <HAL_TIM_ConfigClockSource+0x178>
 8008040:	2b20      	cmp	r3, #32
 8008042:	d060      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0x166>
 8008044:	d868      	bhi.n	8008118 <HAL_TIM_ConfigClockSource+0x178>
 8008046:	2b00      	cmp	r3, #0
 8008048:	d05d      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0x166>
 800804a:	2b10      	cmp	r3, #16
 800804c:	d05b      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0x166>
 800804e:	e063      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008060:	f000 f970 	bl	8008344 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2277      	movs	r2, #119	@ 0x77
 8008070:	4313      	orrs	r3, r2
 8008072:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	609a      	str	r2, [r3, #8]
      break;
 800807c:	e052      	b.n	8008124 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800808e:	f000 f959 	bl	8008344 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2180      	movs	r1, #128	@ 0x80
 800809e:	01c9      	lsls	r1, r1, #7
 80080a0:	430a      	orrs	r2, r1
 80080a2:	609a      	str	r2, [r3, #8]
      break;
 80080a4:	e03e      	b.n	8008124 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080b2:	001a      	movs	r2, r3
 80080b4:	f000 f8cc 	bl	8008250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2150      	movs	r1, #80	@ 0x50
 80080be:	0018      	movs	r0, r3
 80080c0:	f000 f926 	bl	8008310 <TIM_ITRx_SetConfig>
      break;
 80080c4:	e02e      	b.n	8008124 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080d2:	001a      	movs	r2, r3
 80080d4:	f000 f8ea 	bl	80082ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2160      	movs	r1, #96	@ 0x60
 80080de:	0018      	movs	r0, r3
 80080e0:	f000 f916 	bl	8008310 <TIM_ITRx_SetConfig>
      break;
 80080e4:	e01e      	b.n	8008124 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080f2:	001a      	movs	r2, r3
 80080f4:	f000 f8ac 	bl	8008250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2140      	movs	r1, #64	@ 0x40
 80080fe:	0018      	movs	r0, r3
 8008100:	f000 f906 	bl	8008310 <TIM_ITRx_SetConfig>
      break;
 8008104:	e00e      	b.n	8008124 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	0019      	movs	r1, r3
 8008110:	0010      	movs	r0, r2
 8008112:	f000 f8fd 	bl	8008310 <TIM_ITRx_SetConfig>
      break;
 8008116:	e005      	b.n	8008124 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008118:	230f      	movs	r3, #15
 800811a:	18fb      	adds	r3, r7, r3
 800811c:	2201      	movs	r2, #1
 800811e:	701a      	strb	r2, [r3, #0]
      break;
 8008120:	e000      	b.n	8008124 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008122:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	223d      	movs	r2, #61	@ 0x3d
 8008128:	2101      	movs	r1, #1
 800812a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	223c      	movs	r2, #60	@ 0x3c
 8008130:	2100      	movs	r1, #0
 8008132:	5499      	strb	r1, [r3, r2]

  return status;
 8008134:	230f      	movs	r3, #15
 8008136:	18fb      	adds	r3, r7, r3
 8008138:	781b      	ldrb	r3, [r3, #0]
}
 800813a:	0018      	movs	r0, r3
 800813c:	46bd      	mov	sp, r7
 800813e:	b004      	add	sp, #16
 8008140:	bd80      	pop	{r7, pc}
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	ffff00ff 	.word	0xffff00ff

08008148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a36      	ldr	r2, [pc, #216]	@ (8008234 <TIM_Base_SetConfig+0xec>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_Base_SetConfig+0x20>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a35      	ldr	r2, [pc, #212]	@ (8008238 <TIM_Base_SetConfig+0xf0>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d108      	bne.n	800817a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2270      	movs	r2, #112	@ 0x70
 800816c:	4393      	bics	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a2d      	ldr	r2, [pc, #180]	@ (8008234 <TIM_Base_SetConfig+0xec>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d013      	beq.n	80081aa <TIM_Base_SetConfig+0x62>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a2c      	ldr	r2, [pc, #176]	@ (8008238 <TIM_Base_SetConfig+0xf0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00f      	beq.n	80081aa <TIM_Base_SetConfig+0x62>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a2b      	ldr	r2, [pc, #172]	@ (800823c <TIM_Base_SetConfig+0xf4>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00b      	beq.n	80081aa <TIM_Base_SetConfig+0x62>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a2a      	ldr	r2, [pc, #168]	@ (8008240 <TIM_Base_SetConfig+0xf8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d007      	beq.n	80081aa <TIM_Base_SetConfig+0x62>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a29      	ldr	r2, [pc, #164]	@ (8008244 <TIM_Base_SetConfig+0xfc>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d003      	beq.n	80081aa <TIM_Base_SetConfig+0x62>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a28      	ldr	r2, [pc, #160]	@ (8008248 <TIM_Base_SetConfig+0x100>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d108      	bne.n	80081bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4a27      	ldr	r2, [pc, #156]	@ (800824c <TIM_Base_SetConfig+0x104>)
 80081ae:	4013      	ands	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2280      	movs	r2, #128	@ 0x80
 80081c0:	4393      	bics	r3, r2
 80081c2:	001a      	movs	r2, r3
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	689a      	ldr	r2, [r3, #8]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a13      	ldr	r2, [pc, #76]	@ (8008234 <TIM_Base_SetConfig+0xec>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00b      	beq.n	8008202 <TIM_Base_SetConfig+0xba>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a14      	ldr	r2, [pc, #80]	@ (8008240 <TIM_Base_SetConfig+0xf8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d007      	beq.n	8008202 <TIM_Base_SetConfig+0xba>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a13      	ldr	r2, [pc, #76]	@ (8008244 <TIM_Base_SetConfig+0xfc>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d003      	beq.n	8008202 <TIM_Base_SetConfig+0xba>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a12      	ldr	r2, [pc, #72]	@ (8008248 <TIM_Base_SetConfig+0x100>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d103      	bne.n	800820a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	691a      	ldr	r2, [r3, #16]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	2201      	movs	r2, #1
 8008216:	4013      	ands	r3, r2
 8008218:	2b01      	cmp	r3, #1
 800821a:	d106      	bne.n	800822a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2201      	movs	r2, #1
 8008222:	4393      	bics	r3, r2
 8008224:	001a      	movs	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	611a      	str	r2, [r3, #16]
  }
}
 800822a:	46c0      	nop			@ (mov r8, r8)
 800822c:	46bd      	mov	sp, r7
 800822e:	b004      	add	sp, #16
 8008230:	bd80      	pop	{r7, pc}
 8008232:	46c0      	nop			@ (mov r8, r8)
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40000400 	.word	0x40000400
 800823c:	40002000 	.word	0x40002000
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800
 800824c:	fffffcff 	.word	0xfffffcff

08008250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	2201      	movs	r2, #1
 8008268:	4393      	bics	r3, r2
 800826a:	001a      	movs	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	22f0      	movs	r2, #240	@ 0xf0
 800827a:	4393      	bics	r3, r2
 800827c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	011b      	lsls	r3, r3, #4
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4313      	orrs	r3, r2
 8008286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	220a      	movs	r2, #10
 800828c:	4393      	bics	r3, r2
 800828e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	4313      	orrs	r3, r2
 8008296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	621a      	str	r2, [r3, #32]
}
 80082a4:	46c0      	nop			@ (mov r8, r8)
 80082a6:	46bd      	mov	sp, r7
 80082a8:	b006      	add	sp, #24
 80082aa:	bd80      	pop	{r7, pc}

080082ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	2210      	movs	r2, #16
 80082c4:	4393      	bics	r3, r2
 80082c6:	001a      	movs	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	4a0d      	ldr	r2, [pc, #52]	@ (800830c <TIM_TI2_ConfigInputStage+0x60>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	031b      	lsls	r3, r3, #12
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	22a0      	movs	r2, #160	@ 0xa0
 80082e8:	4393      	bics	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	46c0      	nop			@ (mov r8, r8)
 8008304:	46bd      	mov	sp, r7
 8008306:	b006      	add	sp, #24
 8008308:	bd80      	pop	{r7, pc}
 800830a:	46c0      	nop			@ (mov r8, r8)
 800830c:	ffff0fff 	.word	0xffff0fff

08008310 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2270      	movs	r2, #112	@ 0x70
 8008324:	4393      	bics	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	4313      	orrs	r3, r2
 800832e:	2207      	movs	r2, #7
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	609a      	str	r2, [r3, #8]
}
 800833a:	46c0      	nop			@ (mov r8, r8)
 800833c:	46bd      	mov	sp, r7
 800833e:	b004      	add	sp, #16
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	4a09      	ldr	r2, [pc, #36]	@ (8008380 <TIM_ETR_SetConfig+0x3c>)
 800835c:	4013      	ands	r3, r2
 800835e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	021a      	lsls	r2, r3, #8
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	431a      	orrs	r2, r3
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	4313      	orrs	r3, r2
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	4313      	orrs	r3, r2
 8008370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	609a      	str	r2, [r3, #8]
}
 8008378:	46c0      	nop			@ (mov r8, r8)
 800837a:	46bd      	mov	sp, r7
 800837c:	b006      	add	sp, #24
 800837e:	bd80      	pop	{r7, pc}
 8008380:	ffff00ff 	.word	0xffff00ff

08008384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	223c      	movs	r2, #60	@ 0x3c
 8008392:	5c9b      	ldrb	r3, [r3, r2]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008398:	2302      	movs	r3, #2
 800839a:	e041      	b.n	8008420 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	223c      	movs	r2, #60	@ 0x3c
 80083a0:	2101      	movs	r1, #1
 80083a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	223d      	movs	r2, #61	@ 0x3d
 80083a8:	2102      	movs	r1, #2
 80083aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2270      	movs	r2, #112	@ 0x70
 80083c0:	4393      	bics	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a13      	ldr	r2, [pc, #76]	@ (8008428 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d009      	beq.n	80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a11      	ldr	r2, [pc, #68]	@ (800842c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d004      	beq.n	80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a10      	ldr	r2, [pc, #64]	@ (8008430 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d10c      	bne.n	800840e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2280      	movs	r2, #128	@ 0x80
 80083f8:	4393      	bics	r3, r2
 80083fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	4313      	orrs	r3, r2
 8008404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	223d      	movs	r2, #61	@ 0x3d
 8008412:	2101      	movs	r1, #1
 8008414:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	223c      	movs	r2, #60	@ 0x3c
 800841a:	2100      	movs	r1, #0
 800841c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	0018      	movs	r0, r3
 8008422:	46bd      	mov	sp, r7
 8008424:	b004      	add	sp, #16
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40012c00 	.word	0x40012c00
 800842c:	40000400 	.word	0x40000400
 8008430:	40014000 	.word	0x40014000

08008434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e044      	b.n	80084d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800844a:	2b00      	cmp	r3, #0
 800844c:	d107      	bne.n	800845e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2278      	movs	r2, #120	@ 0x78
 8008452:	2100      	movs	r1, #0
 8008454:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	0018      	movs	r0, r3
 800845a:	f7fc ff59 	bl	8005310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2224      	movs	r2, #36	@ 0x24
 8008462:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2101      	movs	r1, #1
 8008470:	438a      	bics	r2, r1
 8008472:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	0018      	movs	r0, r3
 8008480:	f000 f96c 	bl	800875c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	0018      	movs	r0, r3
 8008488:	f000 f828 	bl	80084dc <UART_SetConfig>
 800848c:	0003      	movs	r3, r0
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e01c      	b.n	80084d0 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	490d      	ldr	r1, [pc, #52]	@ (80084d8 <HAL_UART_Init+0xa4>)
 80084a2:	400a      	ands	r2, r1
 80084a4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2108      	movs	r1, #8
 80084b2:	438a      	bics	r2, r1
 80084b4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2101      	movs	r1, #1
 80084c2:	430a      	orrs	r2, r1
 80084c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	0018      	movs	r0, r3
 80084ca:	f000 f9fb 	bl	80088c4 <UART_CheckIdleState>
 80084ce:	0003      	movs	r3, r0
}
 80084d0:	0018      	movs	r0, r3
 80084d2:	46bd      	mov	sp, r7
 80084d4:	b002      	add	sp, #8
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	fffff7ff 	.word	0xfffff7ff

080084dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084e4:	231e      	movs	r3, #30
 80084e6:	18fb      	adds	r3, r7, r3
 80084e8:	2200      	movs	r2, #0
 80084ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	431a      	orrs	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a8d      	ldr	r2, [pc, #564]	@ (8008740 <UART_SetConfig+0x264>)
 800850c:	4013      	ands	r3, r2
 800850e:	0019      	movs	r1, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	430a      	orrs	r2, r1
 8008518:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	4a88      	ldr	r2, [pc, #544]	@ (8008744 <UART_SetConfig+0x268>)
 8008522:	4013      	ands	r3, r2
 8008524:	0019      	movs	r1, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	4313      	orrs	r3, r2
 8008540:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	4a7f      	ldr	r2, [pc, #508]	@ (8008748 <UART_SetConfig+0x26c>)
 800854a:	4013      	ands	r3, r2
 800854c:	0019      	movs	r1, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	430a      	orrs	r2, r1
 8008556:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a7b      	ldr	r2, [pc, #492]	@ (800874c <UART_SetConfig+0x270>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d127      	bne.n	80085b2 <UART_SetConfig+0xd6>
 8008562:	4b7b      	ldr	r3, [pc, #492]	@ (8008750 <UART_SetConfig+0x274>)
 8008564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008566:	2203      	movs	r2, #3
 8008568:	4013      	ands	r3, r2
 800856a:	2b03      	cmp	r3, #3
 800856c:	d00d      	beq.n	800858a <UART_SetConfig+0xae>
 800856e:	d81b      	bhi.n	80085a8 <UART_SetConfig+0xcc>
 8008570:	2b02      	cmp	r3, #2
 8008572:	d014      	beq.n	800859e <UART_SetConfig+0xc2>
 8008574:	d818      	bhi.n	80085a8 <UART_SetConfig+0xcc>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <UART_SetConfig+0xa4>
 800857a:	2b01      	cmp	r3, #1
 800857c:	d00a      	beq.n	8008594 <UART_SetConfig+0xb8>
 800857e:	e013      	b.n	80085a8 <UART_SetConfig+0xcc>
 8008580:	231f      	movs	r3, #31
 8008582:	18fb      	adds	r3, r7, r3
 8008584:	2200      	movs	r2, #0
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	e021      	b.n	80085ce <UART_SetConfig+0xf2>
 800858a:	231f      	movs	r3, #31
 800858c:	18fb      	adds	r3, r7, r3
 800858e:	2202      	movs	r2, #2
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	e01c      	b.n	80085ce <UART_SetConfig+0xf2>
 8008594:	231f      	movs	r3, #31
 8008596:	18fb      	adds	r3, r7, r3
 8008598:	2204      	movs	r2, #4
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	e017      	b.n	80085ce <UART_SetConfig+0xf2>
 800859e:	231f      	movs	r3, #31
 80085a0:	18fb      	adds	r3, r7, r3
 80085a2:	2208      	movs	r2, #8
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	e012      	b.n	80085ce <UART_SetConfig+0xf2>
 80085a8:	231f      	movs	r3, #31
 80085aa:	18fb      	adds	r3, r7, r3
 80085ac:	2210      	movs	r2, #16
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	e00d      	b.n	80085ce <UART_SetConfig+0xf2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a67      	ldr	r2, [pc, #412]	@ (8008754 <UART_SetConfig+0x278>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d104      	bne.n	80085c6 <UART_SetConfig+0xea>
 80085bc:	231f      	movs	r3, #31
 80085be:	18fb      	adds	r3, r7, r3
 80085c0:	2200      	movs	r2, #0
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	e003      	b.n	80085ce <UART_SetConfig+0xf2>
 80085c6:	231f      	movs	r3, #31
 80085c8:	18fb      	adds	r3, r7, r3
 80085ca:	2210      	movs	r2, #16
 80085cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	69da      	ldr	r2, [r3, #28]
 80085d2:	2380      	movs	r3, #128	@ 0x80
 80085d4:	021b      	lsls	r3, r3, #8
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d15c      	bne.n	8008694 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80085da:	231f      	movs	r3, #31
 80085dc:	18fb      	adds	r3, r7, r3
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b08      	cmp	r3, #8
 80085e2:	d015      	beq.n	8008610 <UART_SetConfig+0x134>
 80085e4:	dc18      	bgt.n	8008618 <UART_SetConfig+0x13c>
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d00d      	beq.n	8008606 <UART_SetConfig+0x12a>
 80085ea:	dc15      	bgt.n	8008618 <UART_SetConfig+0x13c>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <UART_SetConfig+0x11a>
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d005      	beq.n	8008600 <UART_SetConfig+0x124>
 80085f4:	e010      	b.n	8008618 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085f6:	f7fe fd93 	bl	8007120 <HAL_RCC_GetPCLK1Freq>
 80085fa:	0003      	movs	r3, r0
 80085fc:	61bb      	str	r3, [r7, #24]
        break;
 80085fe:	e012      	b.n	8008626 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008600:	4b55      	ldr	r3, [pc, #340]	@ (8008758 <UART_SetConfig+0x27c>)
 8008602:	61bb      	str	r3, [r7, #24]
        break;
 8008604:	e00f      	b.n	8008626 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008606:	f7fe fd29 	bl	800705c <HAL_RCC_GetSysClockFreq>
 800860a:	0003      	movs	r3, r0
 800860c:	61bb      	str	r3, [r7, #24]
        break;
 800860e:	e00a      	b.n	8008626 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008610:	2380      	movs	r3, #128	@ 0x80
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	61bb      	str	r3, [r7, #24]
        break;
 8008616:	e006      	b.n	8008626 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800861c:	231e      	movs	r3, #30
 800861e:	18fb      	adds	r3, r7, r3
 8008620:	2201      	movs	r2, #1
 8008622:	701a      	strb	r2, [r3, #0]
        break;
 8008624:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d100      	bne.n	800862e <UART_SetConfig+0x152>
 800862c:	e07a      	b.n	8008724 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	005a      	lsls	r2, r3, #1
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	18d2      	adds	r2, r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	0019      	movs	r1, r3
 8008640:	0010      	movs	r0, r2
 8008642:	f7f7 fd7d 	bl	8000140 <__udivsi3>
 8008646:	0003      	movs	r3, r0
 8008648:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b0f      	cmp	r3, #15
 800864e:	d91c      	bls.n	800868a <UART_SetConfig+0x1ae>
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	2380      	movs	r3, #128	@ 0x80
 8008654:	025b      	lsls	r3, r3, #9
 8008656:	429a      	cmp	r2, r3
 8008658:	d217      	bcs.n	800868a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	b29a      	uxth	r2, r3
 800865e:	200e      	movs	r0, #14
 8008660:	183b      	adds	r3, r7, r0
 8008662:	210f      	movs	r1, #15
 8008664:	438a      	bics	r2, r1
 8008666:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	085b      	lsrs	r3, r3, #1
 800866c:	b29b      	uxth	r3, r3
 800866e:	2207      	movs	r2, #7
 8008670:	4013      	ands	r3, r2
 8008672:	b299      	uxth	r1, r3
 8008674:	183b      	adds	r3, r7, r0
 8008676:	183a      	adds	r2, r7, r0
 8008678:	8812      	ldrh	r2, [r2, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	183a      	adds	r2, r7, r0
 8008684:	8812      	ldrh	r2, [r2, #0]
 8008686:	60da      	str	r2, [r3, #12]
 8008688:	e04c      	b.n	8008724 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800868a:	231e      	movs	r3, #30
 800868c:	18fb      	adds	r3, r7, r3
 800868e:	2201      	movs	r2, #1
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	e047      	b.n	8008724 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008694:	231f      	movs	r3, #31
 8008696:	18fb      	adds	r3, r7, r3
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	2b08      	cmp	r3, #8
 800869c:	d015      	beq.n	80086ca <UART_SetConfig+0x1ee>
 800869e:	dc18      	bgt.n	80086d2 <UART_SetConfig+0x1f6>
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d00d      	beq.n	80086c0 <UART_SetConfig+0x1e4>
 80086a4:	dc15      	bgt.n	80086d2 <UART_SetConfig+0x1f6>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <UART_SetConfig+0x1d4>
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d005      	beq.n	80086ba <UART_SetConfig+0x1de>
 80086ae:	e010      	b.n	80086d2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b0:	f7fe fd36 	bl	8007120 <HAL_RCC_GetPCLK1Freq>
 80086b4:	0003      	movs	r3, r0
 80086b6:	61bb      	str	r3, [r7, #24]
        break;
 80086b8:	e012      	b.n	80086e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086ba:	4b27      	ldr	r3, [pc, #156]	@ (8008758 <UART_SetConfig+0x27c>)
 80086bc:	61bb      	str	r3, [r7, #24]
        break;
 80086be:	e00f      	b.n	80086e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086c0:	f7fe fccc 	bl	800705c <HAL_RCC_GetSysClockFreq>
 80086c4:	0003      	movs	r3, r0
 80086c6:	61bb      	str	r3, [r7, #24]
        break;
 80086c8:	e00a      	b.n	80086e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ca:	2380      	movs	r3, #128	@ 0x80
 80086cc:	021b      	lsls	r3, r3, #8
 80086ce:	61bb      	str	r3, [r7, #24]
        break;
 80086d0:	e006      	b.n	80086e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086d6:	231e      	movs	r3, #30
 80086d8:	18fb      	adds	r3, r7, r3
 80086da:	2201      	movs	r2, #1
 80086dc:	701a      	strb	r2, [r3, #0]
        break;
 80086de:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d01e      	beq.n	8008724 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	085a      	lsrs	r2, r3, #1
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	18d2      	adds	r2, r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	0019      	movs	r1, r3
 80086f6:	0010      	movs	r0, r2
 80086f8:	f7f7 fd22 	bl	8000140 <__udivsi3>
 80086fc:	0003      	movs	r3, r0
 80086fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b0f      	cmp	r3, #15
 8008704:	d90a      	bls.n	800871c <UART_SetConfig+0x240>
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	2380      	movs	r3, #128	@ 0x80
 800870a:	025b      	lsls	r3, r3, #9
 800870c:	429a      	cmp	r2, r3
 800870e:	d205      	bcs.n	800871c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	b29a      	uxth	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60da      	str	r2, [r3, #12]
 800871a:	e003      	b.n	8008724 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800871c:	231e      	movs	r3, #30
 800871e:	18fb      	adds	r3, r7, r3
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008730:	231e      	movs	r3, #30
 8008732:	18fb      	adds	r3, r7, r3
 8008734:	781b      	ldrb	r3, [r3, #0]
}
 8008736:	0018      	movs	r0, r3
 8008738:	46bd      	mov	sp, r7
 800873a:	b008      	add	sp, #32
 800873c:	bd80      	pop	{r7, pc}
 800873e:	46c0      	nop			@ (mov r8, r8)
 8008740:	ffff69f3 	.word	0xffff69f3
 8008744:	ffffcfff 	.word	0xffffcfff
 8008748:	fffff4ff 	.word	0xfffff4ff
 800874c:	40013800 	.word	0x40013800
 8008750:	40021000 	.word	0x40021000
 8008754:	40004400 	.word	0x40004400
 8008758:	007a1200 	.word	0x007a1200

0800875c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008768:	2208      	movs	r2, #8
 800876a:	4013      	ands	r3, r2
 800876c:	d00b      	beq.n	8008786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	4a4a      	ldr	r2, [pc, #296]	@ (80088a0 <UART_AdvFeatureConfig+0x144>)
 8008776:	4013      	ands	r3, r2
 8008778:	0019      	movs	r1, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878a:	2201      	movs	r2, #1
 800878c:	4013      	ands	r3, r2
 800878e:	d00b      	beq.n	80087a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	4a43      	ldr	r2, [pc, #268]	@ (80088a4 <UART_AdvFeatureConfig+0x148>)
 8008798:	4013      	ands	r3, r2
 800879a:	0019      	movs	r1, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ac:	2202      	movs	r2, #2
 80087ae:	4013      	ands	r3, r2
 80087b0:	d00b      	beq.n	80087ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	4a3b      	ldr	r2, [pc, #236]	@ (80088a8 <UART_AdvFeatureConfig+0x14c>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	0019      	movs	r1, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ce:	2204      	movs	r2, #4
 80087d0:	4013      	ands	r3, r2
 80087d2:	d00b      	beq.n	80087ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	4a34      	ldr	r2, [pc, #208]	@ (80088ac <UART_AdvFeatureConfig+0x150>)
 80087dc:	4013      	ands	r3, r2
 80087de:	0019      	movs	r1, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f0:	2210      	movs	r2, #16
 80087f2:	4013      	ands	r3, r2
 80087f4:	d00b      	beq.n	800880e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	4a2c      	ldr	r2, [pc, #176]	@ (80088b0 <UART_AdvFeatureConfig+0x154>)
 80087fe:	4013      	ands	r3, r2
 8008800:	0019      	movs	r1, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008812:	2220      	movs	r2, #32
 8008814:	4013      	ands	r3, r2
 8008816:	d00b      	beq.n	8008830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	4a25      	ldr	r2, [pc, #148]	@ (80088b4 <UART_AdvFeatureConfig+0x158>)
 8008820:	4013      	ands	r3, r2
 8008822:	0019      	movs	r1, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008834:	2240      	movs	r2, #64	@ 0x40
 8008836:	4013      	ands	r3, r2
 8008838:	d01d      	beq.n	8008876 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	4a1d      	ldr	r2, [pc, #116]	@ (80088b8 <UART_AdvFeatureConfig+0x15c>)
 8008842:	4013      	ands	r3, r2
 8008844:	0019      	movs	r1, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008856:	2380      	movs	r3, #128	@ 0x80
 8008858:	035b      	lsls	r3, r3, #13
 800885a:	429a      	cmp	r2, r3
 800885c:	d10b      	bne.n	8008876 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4a15      	ldr	r2, [pc, #84]	@ (80088bc <UART_AdvFeatureConfig+0x160>)
 8008866:	4013      	ands	r3, r2
 8008868:	0019      	movs	r1, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800887a:	2280      	movs	r2, #128	@ 0x80
 800887c:	4013      	ands	r3, r2
 800887e:	d00b      	beq.n	8008898 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	4a0e      	ldr	r2, [pc, #56]	@ (80088c0 <UART_AdvFeatureConfig+0x164>)
 8008888:	4013      	ands	r3, r2
 800888a:	0019      	movs	r1, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	605a      	str	r2, [r3, #4]
  }
}
 8008898:	46c0      	nop			@ (mov r8, r8)
 800889a:	46bd      	mov	sp, r7
 800889c:	b002      	add	sp, #8
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	ffff7fff 	.word	0xffff7fff
 80088a4:	fffdffff 	.word	0xfffdffff
 80088a8:	fffeffff 	.word	0xfffeffff
 80088ac:	fffbffff 	.word	0xfffbffff
 80088b0:	ffffefff 	.word	0xffffefff
 80088b4:	ffffdfff 	.word	0xffffdfff
 80088b8:	ffefffff 	.word	0xffefffff
 80088bc:	ff9fffff 	.word	0xff9fffff
 80088c0:	fff7ffff 	.word	0xfff7ffff

080088c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b092      	sub	sp, #72	@ 0x48
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2284      	movs	r2, #132	@ 0x84
 80088d0:	2100      	movs	r1, #0
 80088d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088d4:	f7fc fefc 	bl	80056d0 <HAL_GetTick>
 80088d8:	0003      	movs	r3, r0
 80088da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2208      	movs	r2, #8
 80088e4:	4013      	ands	r3, r2
 80088e6:	2b08      	cmp	r3, #8
 80088e8:	d12c      	bne.n	8008944 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ec:	2280      	movs	r2, #128	@ 0x80
 80088ee:	0391      	lsls	r1, r2, #14
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	4a46      	ldr	r2, [pc, #280]	@ (8008a0c <UART_CheckIdleState+0x148>)
 80088f4:	9200      	str	r2, [sp, #0]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f000 f88c 	bl	8008a14 <UART_WaitOnFlagUntilTimeout>
 80088fc:	1e03      	subs	r3, r0, #0
 80088fe:	d021      	beq.n	8008944 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008900:	f3ef 8310 	mrs	r3, PRIMASK
 8008904:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008908:	63bb      	str	r3, [r7, #56]	@ 0x38
 800890a:	2301      	movs	r3, #1
 800890c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008910:	f383 8810 	msr	PRIMASK, r3
}
 8008914:	46c0      	nop			@ (mov r8, r8)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2180      	movs	r1, #128	@ 0x80
 8008922:	438a      	bics	r2, r1
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800892a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892c:	f383 8810 	msr	PRIMASK, r3
}
 8008930:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2220      	movs	r2, #32
 8008936:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2278      	movs	r2, #120	@ 0x78
 800893c:	2100      	movs	r1, #0
 800893e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e05f      	b.n	8008a04 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2204      	movs	r2, #4
 800894c:	4013      	ands	r3, r2
 800894e:	2b04      	cmp	r3, #4
 8008950:	d146      	bne.n	80089e0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008954:	2280      	movs	r2, #128	@ 0x80
 8008956:	03d1      	lsls	r1, r2, #15
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	4a2c      	ldr	r2, [pc, #176]	@ (8008a0c <UART_CheckIdleState+0x148>)
 800895c:	9200      	str	r2, [sp, #0]
 800895e:	2200      	movs	r2, #0
 8008960:	f000 f858 	bl	8008a14 <UART_WaitOnFlagUntilTimeout>
 8008964:	1e03      	subs	r3, r0, #0
 8008966:	d03b      	beq.n	80089e0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008968:	f3ef 8310 	mrs	r3, PRIMASK
 800896c:	60fb      	str	r3, [r7, #12]
  return(result);
 800896e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
 8008972:	2301      	movs	r3, #1
 8008974:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f383 8810 	msr	PRIMASK, r3
}
 800897c:	46c0      	nop			@ (mov r8, r8)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4921      	ldr	r1, [pc, #132]	@ (8008a10 <UART_CheckIdleState+0x14c>)
 800898a:	400a      	ands	r2, r1
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f383 8810 	msr	PRIMASK, r3
}
 8008998:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800899a:	f3ef 8310 	mrs	r3, PRIMASK
 800899e:	61bb      	str	r3, [r7, #24]
  return(result);
 80089a0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80089a4:	2301      	movs	r3, #1
 80089a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	f383 8810 	msr	PRIMASK, r3
}
 80089ae:	46c0      	nop			@ (mov r8, r8)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2101      	movs	r1, #1
 80089bc:	438a      	bics	r2, r1
 80089be:	609a      	str	r2, [r3, #8]
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	f383 8810 	msr	PRIMASK, r3
}
 80089ca:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2280      	movs	r2, #128	@ 0x80
 80089d0:	2120      	movs	r1, #32
 80089d2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2278      	movs	r2, #120	@ 0x78
 80089d8:	2100      	movs	r1, #0
 80089da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e011      	b.n	8008a04 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2220      	movs	r2, #32
 80089e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2280      	movs	r2, #128	@ 0x80
 80089ea:	2120      	movs	r1, #32
 80089ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2278      	movs	r2, #120	@ 0x78
 80089fe:	2100      	movs	r1, #0
 8008a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	0018      	movs	r0, r3
 8008a06:	46bd      	mov	sp, r7
 8008a08:	b010      	add	sp, #64	@ 0x40
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	01ffffff 	.word	0x01ffffff
 8008a10:	fffffedf 	.word	0xfffffedf

08008a14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	1dfb      	adds	r3, r7, #7
 8008a22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a24:	e051      	b.n	8008aca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	d04e      	beq.n	8008aca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a2c:	f7fc fe50 	bl	80056d0 <HAL_GetTick>
 8008a30:	0002      	movs	r2, r0
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d302      	bcc.n	8008a42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e051      	b.n	8008aea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2204      	movs	r2, #4
 8008a4e:	4013      	ands	r3, r2
 8008a50:	d03b      	beq.n	8008aca <UART_WaitOnFlagUntilTimeout+0xb6>
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b80      	cmp	r3, #128	@ 0x80
 8008a56:	d038      	beq.n	8008aca <UART_WaitOnFlagUntilTimeout+0xb6>
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b40      	cmp	r3, #64	@ 0x40
 8008a5c:	d035      	beq.n	8008aca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	2208      	movs	r2, #8
 8008a66:	4013      	ands	r3, r2
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d111      	bne.n	8008a90 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2208      	movs	r2, #8
 8008a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	0018      	movs	r0, r3
 8008a78:	f000 f83c 	bl	8008af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2284      	movs	r2, #132	@ 0x84
 8008a80:	2108      	movs	r1, #8
 8008a82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2278      	movs	r2, #120	@ 0x78
 8008a88:	2100      	movs	r1, #0
 8008a8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e02c      	b.n	8008aea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69da      	ldr	r2, [r3, #28]
 8008a96:	2380      	movs	r3, #128	@ 0x80
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	401a      	ands	r2, r3
 8008a9c:	2380      	movs	r3, #128	@ 0x80
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d112      	bne.n	8008aca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2280      	movs	r2, #128	@ 0x80
 8008aaa:	0112      	lsls	r2, r2, #4
 8008aac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	0018      	movs	r0, r3
 8008ab2:	f000 f81f 	bl	8008af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2284      	movs	r2, #132	@ 0x84
 8008aba:	2120      	movs	r1, #32
 8008abc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2278      	movs	r2, #120	@ 0x78
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e00f      	b.n	8008aea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	425a      	negs	r2, r3
 8008ada:	4153      	adcs	r3, r2
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	001a      	movs	r2, r3
 8008ae0:	1dfb      	adds	r3, r7, #7
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d09e      	beq.n	8008a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	0018      	movs	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b004      	add	sp, #16
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08e      	sub	sp, #56	@ 0x38
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008afc:	f3ef 8310 	mrs	r3, PRIMASK
 8008b00:	617b      	str	r3, [r7, #20]
  return(result);
 8008b02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b06:	2301      	movs	r3, #1
 8008b08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	f383 8810 	msr	PRIMASK, r3
}
 8008b10:	46c0      	nop			@ (mov r8, r8)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4926      	ldr	r1, [pc, #152]	@ (8008bb8 <UART_EndRxTransfer+0xc4>)
 8008b1e:	400a      	ands	r2, r1
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	f383 8810 	msr	PRIMASK, r3
}
 8008b2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b32:	623b      	str	r3, [r7, #32]
  return(result);
 8008b34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b38:	2301      	movs	r3, #1
 8008b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	f383 8810 	msr	PRIMASK, r3
}
 8008b42:	46c0      	nop			@ (mov r8, r8)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2101      	movs	r1, #1
 8008b50:	438a      	bics	r2, r1
 8008b52:	609a      	str	r2, [r3, #8]
 8008b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5a:	f383 8810 	msr	PRIMASK, r3
}
 8008b5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d118      	bne.n	8008b9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b68:	f3ef 8310 	mrs	r3, PRIMASK
 8008b6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b72:	2301      	movs	r3, #1
 8008b74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f383 8810 	msr	PRIMASK, r3
}
 8008b7c:	46c0      	nop			@ (mov r8, r8)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2110      	movs	r1, #16
 8008b8a:	438a      	bics	r2, r1
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f383 8810 	msr	PRIMASK, r3
}
 8008b98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2280      	movs	r2, #128	@ 0x80
 8008b9e:	2120      	movs	r1, #32
 8008ba0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008bae:	46c0      	nop			@ (mov r8, r8)
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	b00e      	add	sp, #56	@ 0x38
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	46c0      	nop			@ (mov r8, r8)
 8008bb8:	fffffedf 	.word	0xfffffedf

08008bbc <__cvt>:
 8008bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bbe:	001f      	movs	r7, r3
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	0016      	movs	r6, r2
 8008bc4:	b08b      	sub	sp, #44	@ 0x2c
 8008bc6:	429f      	cmp	r7, r3
 8008bc8:	da04      	bge.n	8008bd4 <__cvt+0x18>
 8008bca:	2180      	movs	r1, #128	@ 0x80
 8008bcc:	0609      	lsls	r1, r1, #24
 8008bce:	187b      	adds	r3, r7, r1
 8008bd0:	001f      	movs	r7, r3
 8008bd2:	232d      	movs	r3, #45	@ 0x2d
 8008bd4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008bd6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008bd8:	7013      	strb	r3, [r2, #0]
 8008bda:	2320      	movs	r3, #32
 8008bdc:	2203      	movs	r2, #3
 8008bde:	439d      	bics	r5, r3
 8008be0:	2d46      	cmp	r5, #70	@ 0x46
 8008be2:	d007      	beq.n	8008bf4 <__cvt+0x38>
 8008be4:	002b      	movs	r3, r5
 8008be6:	3b45      	subs	r3, #69	@ 0x45
 8008be8:	4259      	negs	r1, r3
 8008bea:	414b      	adcs	r3, r1
 8008bec:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008bee:	3a01      	subs	r2, #1
 8008bf0:	18cb      	adds	r3, r1, r3
 8008bf2:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bf4:	ab09      	add	r3, sp, #36	@ 0x24
 8008bf6:	9304      	str	r3, [sp, #16]
 8008bf8:	ab08      	add	r3, sp, #32
 8008bfa:	9303      	str	r3, [sp, #12]
 8008bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bfe:	9200      	str	r2, [sp, #0]
 8008c00:	9302      	str	r3, [sp, #8]
 8008c02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c04:	0032      	movs	r2, r6
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	003b      	movs	r3, r7
 8008c0a:	f000 fe89 	bl	8009920 <_dtoa_r>
 8008c0e:	0004      	movs	r4, r0
 8008c10:	2d47      	cmp	r5, #71	@ 0x47
 8008c12:	d11b      	bne.n	8008c4c <__cvt+0x90>
 8008c14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c16:	07db      	lsls	r3, r3, #31
 8008c18:	d511      	bpl.n	8008c3e <__cvt+0x82>
 8008c1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c1c:	18c3      	adds	r3, r0, r3
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	2200      	movs	r2, #0
 8008c22:	2300      	movs	r3, #0
 8008c24:	0030      	movs	r0, r6
 8008c26:	0039      	movs	r1, r7
 8008c28:	f7f7 fc10 	bl	800044c <__aeabi_dcmpeq>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d001      	beq.n	8008c34 <__cvt+0x78>
 8008c30:	9b07      	ldr	r3, [sp, #28]
 8008c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c34:	2230      	movs	r2, #48	@ 0x30
 8008c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c38:	9907      	ldr	r1, [sp, #28]
 8008c3a:	428b      	cmp	r3, r1
 8008c3c:	d320      	bcc.n	8008c80 <__cvt+0xc4>
 8008c3e:	0020      	movs	r0, r4
 8008c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c42:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008c44:	1b1b      	subs	r3, r3, r4
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	b00b      	add	sp, #44	@ 0x2c
 8008c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c4e:	18c3      	adds	r3, r0, r3
 8008c50:	9307      	str	r3, [sp, #28]
 8008c52:	2d46      	cmp	r5, #70	@ 0x46
 8008c54:	d1e4      	bne.n	8008c20 <__cvt+0x64>
 8008c56:	7803      	ldrb	r3, [r0, #0]
 8008c58:	2b30      	cmp	r3, #48	@ 0x30
 8008c5a:	d10c      	bne.n	8008c76 <__cvt+0xba>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2300      	movs	r3, #0
 8008c60:	0030      	movs	r0, r6
 8008c62:	0039      	movs	r1, r7
 8008c64:	f7f7 fbf2 	bl	800044c <__aeabi_dcmpeq>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d104      	bne.n	8008c76 <__cvt+0xba>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008c70:	1a9b      	subs	r3, r3, r2
 8008c72:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c78:	9a07      	ldr	r2, [sp, #28]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	18d3      	adds	r3, r2, r3
 8008c7e:	e7ce      	b.n	8008c1e <__cvt+0x62>
 8008c80:	1c59      	adds	r1, r3, #1
 8008c82:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c84:	701a      	strb	r2, [r3, #0]
 8008c86:	e7d6      	b.n	8008c36 <__cvt+0x7a>

08008c88 <__exponent>:
 8008c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8a:	232b      	movs	r3, #43	@ 0x2b
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	0005      	movs	r5, r0
 8008c90:	1e0c      	subs	r4, r1, #0
 8008c92:	7002      	strb	r2, [r0, #0]
 8008c94:	da01      	bge.n	8008c9a <__exponent+0x12>
 8008c96:	424c      	negs	r4, r1
 8008c98:	3302      	adds	r3, #2
 8008c9a:	706b      	strb	r3, [r5, #1]
 8008c9c:	2c09      	cmp	r4, #9
 8008c9e:	dd2c      	ble.n	8008cfa <__exponent+0x72>
 8008ca0:	ab02      	add	r3, sp, #8
 8008ca2:	1dde      	adds	r6, r3, #7
 8008ca4:	0020      	movs	r0, r4
 8008ca6:	210a      	movs	r1, #10
 8008ca8:	f7f7 fbba 	bl	8000420 <__aeabi_idivmod>
 8008cac:	0037      	movs	r7, r6
 8008cae:	3130      	adds	r1, #48	@ 0x30
 8008cb0:	3e01      	subs	r6, #1
 8008cb2:	0020      	movs	r0, r4
 8008cb4:	7031      	strb	r1, [r6, #0]
 8008cb6:	210a      	movs	r1, #10
 8008cb8:	9401      	str	r4, [sp, #4]
 8008cba:	f7f7 facb 	bl	8000254 <__divsi3>
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	0004      	movs	r4, r0
 8008cc2:	2b63      	cmp	r3, #99	@ 0x63
 8008cc4:	dcee      	bgt.n	8008ca4 <__exponent+0x1c>
 8008cc6:	1eba      	subs	r2, r7, #2
 8008cc8:	1ca8      	adds	r0, r5, #2
 8008cca:	0001      	movs	r1, r0
 8008ccc:	0013      	movs	r3, r2
 8008cce:	3430      	adds	r4, #48	@ 0x30
 8008cd0:	7014      	strb	r4, [r2, #0]
 8008cd2:	ac02      	add	r4, sp, #8
 8008cd4:	3407      	adds	r4, #7
 8008cd6:	429c      	cmp	r4, r3
 8008cd8:	d80a      	bhi.n	8008cf0 <__exponent+0x68>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4294      	cmp	r4, r2
 8008cde:	d303      	bcc.n	8008ce8 <__exponent+0x60>
 8008ce0:	3309      	adds	r3, #9
 8008ce2:	aa02      	add	r2, sp, #8
 8008ce4:	189b      	adds	r3, r3, r2
 8008ce6:	1bdb      	subs	r3, r3, r7
 8008ce8:	18c0      	adds	r0, r0, r3
 8008cea:	1b40      	subs	r0, r0, r5
 8008cec:	b005      	add	sp, #20
 8008cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf0:	781c      	ldrb	r4, [r3, #0]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	700c      	strb	r4, [r1, #0]
 8008cf6:	3101      	adds	r1, #1
 8008cf8:	e7eb      	b.n	8008cd2 <__exponent+0x4a>
 8008cfa:	2330      	movs	r3, #48	@ 0x30
 8008cfc:	18e4      	adds	r4, r4, r3
 8008cfe:	70ab      	strb	r3, [r5, #2]
 8008d00:	1d28      	adds	r0, r5, #4
 8008d02:	70ec      	strb	r4, [r5, #3]
 8008d04:	e7f1      	b.n	8008cea <__exponent+0x62>
	...

08008d08 <_printf_float>:
 8008d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d0a:	b097      	sub	sp, #92	@ 0x5c
 8008d0c:	000d      	movs	r5, r1
 8008d0e:	920a      	str	r2, [sp, #40]	@ 0x28
 8008d10:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8008d12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d14:	9009      	str	r0, [sp, #36]	@ 0x24
 8008d16:	f000 fceb 	bl	80096f0 <_localeconv_r>
 8008d1a:	6803      	ldr	r3, [r0, #0]
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d20:	f7f7 f9f2 	bl	8000108 <strlen>
 8008d24:	2300      	movs	r3, #0
 8008d26:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008d28:	9314      	str	r3, [sp, #80]	@ 0x50
 8008d2a:	7e2b      	ldrb	r3, [r5, #24]
 8008d2c:	2207      	movs	r2, #7
 8008d2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d34:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	05c9      	lsls	r1, r1, #23
 8008d3a:	d545      	bpl.n	8008dc8 <_printf_float+0xc0>
 8008d3c:	189b      	adds	r3, r3, r2
 8008d3e:	4393      	bics	r3, r2
 8008d40:	001a      	movs	r2, r3
 8008d42:	3208      	adds	r2, #8
 8008d44:	6022      	str	r2, [r4, #0]
 8008d46:	2201      	movs	r2, #1
 8008d48:	681e      	ldr	r6, [r3, #0]
 8008d4a:	685f      	ldr	r7, [r3, #4]
 8008d4c:	007b      	lsls	r3, r7, #1
 8008d4e:	085b      	lsrs	r3, r3, #1
 8008d50:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d52:	9610      	str	r6, [sp, #64]	@ 0x40
 8008d54:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008d56:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008d58:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008d5a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008d5c:	4ba7      	ldr	r3, [pc, #668]	@ (8008ffc <_printf_float+0x2f4>)
 8008d5e:	4252      	negs	r2, r2
 8008d60:	f7fa fb00 	bl	8003364 <__aeabi_dcmpun>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d131      	bne.n	8008dcc <_printf_float+0xc4>
 8008d68:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008d6a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	4ba3      	ldr	r3, [pc, #652]	@ (8008ffc <_printf_float+0x2f4>)
 8008d70:	4252      	negs	r2, r2
 8008d72:	f7f7 fb7b 	bl	800046c <__aeabi_dcmple>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d128      	bne.n	8008dcc <_printf_float+0xc4>
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	0030      	movs	r0, r6
 8008d80:	0039      	movs	r1, r7
 8008d82:	f7f7 fb69 	bl	8000458 <__aeabi_dcmplt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d003      	beq.n	8008d92 <_printf_float+0x8a>
 8008d8a:	002b      	movs	r3, r5
 8008d8c:	222d      	movs	r2, #45	@ 0x2d
 8008d8e:	3343      	adds	r3, #67	@ 0x43
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d94:	4f9a      	ldr	r7, [pc, #616]	@ (8009000 <_printf_float+0x2f8>)
 8008d96:	2b47      	cmp	r3, #71	@ 0x47
 8008d98:	d800      	bhi.n	8008d9c <_printf_float+0x94>
 8008d9a:	4f9a      	ldr	r7, [pc, #616]	@ (8009004 <_printf_float+0x2fc>)
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	2400      	movs	r4, #0
 8008da0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008da2:	612b      	str	r3, [r5, #16]
 8008da4:	3301      	adds	r3, #1
 8008da6:	439a      	bics	r2, r3
 8008da8:	602a      	str	r2, [r5, #0]
 8008daa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dac:	0029      	movs	r1, r5
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008db2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008db4:	aa15      	add	r2, sp, #84	@ 0x54
 8008db6:	f000 f9e5 	bl	8009184 <_printf_common>
 8008dba:	3001      	adds	r0, #1
 8008dbc:	d000      	beq.n	8008dc0 <_printf_float+0xb8>
 8008dbe:	e09e      	b.n	8008efe <_printf_float+0x1f6>
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	4240      	negs	r0, r0
 8008dc4:	b017      	add	sp, #92	@ 0x5c
 8008dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc8:	3307      	adds	r3, #7
 8008dca:	e7b8      	b.n	8008d3e <_printf_float+0x36>
 8008dcc:	0032      	movs	r2, r6
 8008dce:	003b      	movs	r3, r7
 8008dd0:	0030      	movs	r0, r6
 8008dd2:	0039      	movs	r1, r7
 8008dd4:	f7fa fac6 	bl	8003364 <__aeabi_dcmpun>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d00b      	beq.n	8008df4 <_printf_float+0xec>
 8008ddc:	2f00      	cmp	r7, #0
 8008dde:	da03      	bge.n	8008de8 <_printf_float+0xe0>
 8008de0:	002b      	movs	r3, r5
 8008de2:	222d      	movs	r2, #45	@ 0x2d
 8008de4:	3343      	adds	r3, #67	@ 0x43
 8008de6:	701a      	strb	r2, [r3, #0]
 8008de8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dea:	4f87      	ldr	r7, [pc, #540]	@ (8009008 <_printf_float+0x300>)
 8008dec:	2b47      	cmp	r3, #71	@ 0x47
 8008dee:	d8d5      	bhi.n	8008d9c <_printf_float+0x94>
 8008df0:	4f86      	ldr	r7, [pc, #536]	@ (800900c <_printf_float+0x304>)
 8008df2:	e7d3      	b.n	8008d9c <_printf_float+0x94>
 8008df4:	2220      	movs	r2, #32
 8008df6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008df8:	686b      	ldr	r3, [r5, #4]
 8008dfa:	4394      	bics	r4, r2
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	d146      	bne.n	8008e8e <_printf_float+0x186>
 8008e00:	3307      	adds	r3, #7
 8008e02:	606b      	str	r3, [r5, #4]
 8008e04:	2380      	movs	r3, #128	@ 0x80
 8008e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	602b      	str	r3, [r5, #0]
 8008e10:	9206      	str	r2, [sp, #24]
 8008e12:	aa14      	add	r2, sp, #80	@ 0x50
 8008e14:	9205      	str	r2, [sp, #20]
 8008e16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008e18:	a90a      	add	r1, sp, #40	@ 0x28
 8008e1a:	9204      	str	r2, [sp, #16]
 8008e1c:	aa13      	add	r2, sp, #76	@ 0x4c
 8008e1e:	9203      	str	r2, [sp, #12]
 8008e20:	2223      	movs	r2, #35	@ 0x23
 8008e22:	1852      	adds	r2, r2, r1
 8008e24:	9202      	str	r2, [sp, #8]
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	686b      	ldr	r3, [r5, #4]
 8008e2a:	0032      	movs	r2, r6
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e30:	003b      	movs	r3, r7
 8008e32:	f7ff fec3 	bl	8008bbc <__cvt>
 8008e36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e38:	0007      	movs	r7, r0
 8008e3a:	2c47      	cmp	r4, #71	@ 0x47
 8008e3c:	d12d      	bne.n	8008e9a <_printf_float+0x192>
 8008e3e:	1cd3      	adds	r3, r2, #3
 8008e40:	db02      	blt.n	8008e48 <_printf_float+0x140>
 8008e42:	686b      	ldr	r3, [r5, #4]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	dd47      	ble.n	8008ed8 <_printf_float+0x1d0>
 8008e48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e4a:	3b02      	subs	r3, #2
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e50:	0028      	movs	r0, r5
 8008e52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008e54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008e56:	3901      	subs	r1, #1
 8008e58:	3050      	adds	r0, #80	@ 0x50
 8008e5a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008e5c:	f7ff ff14 	bl	8008c88 <__exponent>
 8008e60:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008e62:	0004      	movs	r4, r0
 8008e64:	1813      	adds	r3, r2, r0
 8008e66:	612b      	str	r3, [r5, #16]
 8008e68:	2a01      	cmp	r2, #1
 8008e6a:	dc02      	bgt.n	8008e72 <_printf_float+0x16a>
 8008e6c:	682a      	ldr	r2, [r5, #0]
 8008e6e:	07d2      	lsls	r2, r2, #31
 8008e70:	d501      	bpl.n	8008e76 <_printf_float+0x16e>
 8008e72:	3301      	adds	r3, #1
 8008e74:	612b      	str	r3, [r5, #16]
 8008e76:	2323      	movs	r3, #35	@ 0x23
 8008e78:	aa0a      	add	r2, sp, #40	@ 0x28
 8008e7a:	189b      	adds	r3, r3, r2
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d100      	bne.n	8008e84 <_printf_float+0x17c>
 8008e82:	e792      	b.n	8008daa <_printf_float+0xa2>
 8008e84:	002b      	movs	r3, r5
 8008e86:	222d      	movs	r2, #45	@ 0x2d
 8008e88:	3343      	adds	r3, #67	@ 0x43
 8008e8a:	701a      	strb	r2, [r3, #0]
 8008e8c:	e78d      	b.n	8008daa <_printf_float+0xa2>
 8008e8e:	2c47      	cmp	r4, #71	@ 0x47
 8008e90:	d1b8      	bne.n	8008e04 <_printf_float+0xfc>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1b6      	bne.n	8008e04 <_printf_float+0xfc>
 8008e96:	3301      	adds	r3, #1
 8008e98:	e7b3      	b.n	8008e02 <_printf_float+0xfa>
 8008e9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e9c:	2b65      	cmp	r3, #101	@ 0x65
 8008e9e:	d9d7      	bls.n	8008e50 <_printf_float+0x148>
 8008ea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ea2:	2b66      	cmp	r3, #102	@ 0x66
 8008ea4:	d11a      	bne.n	8008edc <_printf_float+0x1d4>
 8008ea6:	686b      	ldr	r3, [r5, #4]
 8008ea8:	2a00      	cmp	r2, #0
 8008eaa:	dd09      	ble.n	8008ec0 <_printf_float+0x1b8>
 8008eac:	612a      	str	r2, [r5, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <_printf_float+0x1b0>
 8008eb2:	6829      	ldr	r1, [r5, #0]
 8008eb4:	07c9      	lsls	r1, r1, #31
 8008eb6:	d50b      	bpl.n	8008ed0 <_printf_float+0x1c8>
 8008eb8:	3301      	adds	r3, #1
 8008eba:	189b      	adds	r3, r3, r2
 8008ebc:	612b      	str	r3, [r5, #16]
 8008ebe:	e007      	b.n	8008ed0 <_printf_float+0x1c8>
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <_printf_float+0x1c4>
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	6829      	ldr	r1, [r5, #0]
 8008ec8:	4211      	tst	r1, r2
 8008eca:	d000      	beq.n	8008ece <_printf_float+0x1c6>
 8008ecc:	1c9a      	adds	r2, r3, #2
 8008ece:	612a      	str	r2, [r5, #16]
 8008ed0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ed2:	2400      	movs	r4, #0
 8008ed4:	65ab      	str	r3, [r5, #88]	@ 0x58
 8008ed6:	e7ce      	b.n	8008e76 <_printf_float+0x16e>
 8008ed8:	2367      	movs	r3, #103	@ 0x67
 8008eda:	930c      	str	r3, [sp, #48]	@ 0x30
 8008edc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008ede:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	db06      	blt.n	8008ef2 <_printf_float+0x1ea>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	6129      	str	r1, [r5, #16]
 8008ee8:	07db      	lsls	r3, r3, #31
 8008eea:	d5f1      	bpl.n	8008ed0 <_printf_float+0x1c8>
 8008eec:	3101      	adds	r1, #1
 8008eee:	6129      	str	r1, [r5, #16]
 8008ef0:	e7ee      	b.n	8008ed0 <_printf_float+0x1c8>
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	2900      	cmp	r1, #0
 8008ef6:	dce0      	bgt.n	8008eba <_printf_float+0x1b2>
 8008ef8:	1892      	adds	r2, r2, r2
 8008efa:	1a52      	subs	r2, r2, r1
 8008efc:	e7dd      	b.n	8008eba <_printf_float+0x1b2>
 8008efe:	682a      	ldr	r2, [r5, #0]
 8008f00:	0553      	lsls	r3, r2, #21
 8008f02:	d408      	bmi.n	8008f16 <_printf_float+0x20e>
 8008f04:	692b      	ldr	r3, [r5, #16]
 8008f06:	003a      	movs	r2, r7
 8008f08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f0c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008f0e:	47a0      	blx	r4
 8008f10:	3001      	adds	r0, #1
 8008f12:	d129      	bne.n	8008f68 <_printf_float+0x260>
 8008f14:	e754      	b.n	8008dc0 <_printf_float+0xb8>
 8008f16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f18:	2b65      	cmp	r3, #101	@ 0x65
 8008f1a:	d800      	bhi.n	8008f1e <_printf_float+0x216>
 8008f1c:	e0db      	b.n	80090d6 <_printf_float+0x3ce>
 8008f1e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008f20:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008f22:	2200      	movs	r2, #0
 8008f24:	2300      	movs	r3, #0
 8008f26:	f7f7 fa91 	bl	800044c <__aeabi_dcmpeq>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d033      	beq.n	8008f96 <_printf_float+0x28e>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4a37      	ldr	r2, [pc, #220]	@ (8009010 <_printf_float+0x308>)
 8008f32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f36:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008f38:	47a0      	blx	r4
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d100      	bne.n	8008f40 <_printf_float+0x238>
 8008f3e:	e73f      	b.n	8008dc0 <_printf_float+0xb8>
 8008f40:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008f42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f44:	42b3      	cmp	r3, r6
 8008f46:	db02      	blt.n	8008f4e <_printf_float+0x246>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	07db      	lsls	r3, r3, #31
 8008f4c:	d50c      	bpl.n	8008f68 <_printf_float+0x260>
 8008f4e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008f50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f58:	47a0      	blx	r4
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d100      	bne.n	8008f62 <_printf_float+0x25a>
 8008f60:	e72e      	b.n	8008dc0 <_printf_float+0xb8>
 8008f62:	1e73      	subs	r3, r6, #1
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	dc0a      	bgt.n	8008f7e <_printf_float+0x276>
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	079b      	lsls	r3, r3, #30
 8008f6c:	d500      	bpl.n	8008f70 <_printf_float+0x268>
 8008f6e:	e106      	b.n	800917e <_printf_float+0x476>
 8008f70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008f72:	68e8      	ldr	r0, [r5, #12]
 8008f74:	4298      	cmp	r0, r3
 8008f76:	db00      	blt.n	8008f7a <_printf_float+0x272>
 8008f78:	e724      	b.n	8008dc4 <_printf_float+0xbc>
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	e722      	b.n	8008dc4 <_printf_float+0xbc>
 8008f7e:	002a      	movs	r2, r5
 8008f80:	2301      	movs	r3, #1
 8008f82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f86:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008f88:	321a      	adds	r2, #26
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d100      	bne.n	8008f92 <_printf_float+0x28a>
 8008f90:	e716      	b.n	8008dc0 <_printf_float+0xb8>
 8008f92:	3401      	adds	r4, #1
 8008f94:	e7e5      	b.n	8008f62 <_printf_float+0x25a>
 8008f96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	dc3b      	bgt.n	8009014 <_printf_float+0x30c>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8009010 <_printf_float+0x308>)
 8008fa0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fa4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008fa6:	47a0      	blx	r4
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d100      	bne.n	8008fae <_printf_float+0x2a6>
 8008fac:	e708      	b.n	8008dc0 <_printf_float+0xb8>
 8008fae:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008fb0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008fb2:	4333      	orrs	r3, r6
 8008fb4:	d102      	bne.n	8008fbc <_printf_float+0x2b4>
 8008fb6:	682b      	ldr	r3, [r5, #0]
 8008fb8:	07db      	lsls	r3, r3, #31
 8008fba:	d5d5      	bpl.n	8008f68 <_printf_float+0x260>
 8008fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fbe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008fc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fc4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008fc6:	47a0      	blx	r4
 8008fc8:	2300      	movs	r3, #0
 8008fca:	3001      	adds	r0, #1
 8008fcc:	d100      	bne.n	8008fd0 <_printf_float+0x2c8>
 8008fce:	e6f7      	b.n	8008dc0 <_printf_float+0xb8>
 8008fd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fd2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008fd4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008fd6:	425b      	negs	r3, r3
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	dc01      	bgt.n	8008fe0 <_printf_float+0x2d8>
 8008fdc:	0033      	movs	r3, r6
 8008fde:	e792      	b.n	8008f06 <_printf_float+0x1fe>
 8008fe0:	002a      	movs	r2, r5
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fe8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008fea:	321a      	adds	r2, #26
 8008fec:	47a0      	blx	r4
 8008fee:	3001      	adds	r0, #1
 8008ff0:	d100      	bne.n	8008ff4 <_printf_float+0x2ec>
 8008ff2:	e6e5      	b.n	8008dc0 <_printf_float+0xb8>
 8008ff4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	e7ea      	b.n	8008fd0 <_printf_float+0x2c8>
 8008ffa:	46c0      	nop			@ (mov r8, r8)
 8008ffc:	7fefffff 	.word	0x7fefffff
 8009000:	0800e398 	.word	0x0800e398
 8009004:	0800e394 	.word	0x0800e394
 8009008:	0800e3a0 	.word	0x0800e3a0
 800900c:	0800e39c 	.word	0x0800e39c
 8009010:	0800e3a4 	.word	0x0800e3a4
 8009014:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009016:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009018:	930c      	str	r3, [sp, #48]	@ 0x30
 800901a:	429e      	cmp	r6, r3
 800901c:	dd00      	ble.n	8009020 <_printf_float+0x318>
 800901e:	001e      	movs	r6, r3
 8009020:	2e00      	cmp	r6, #0
 8009022:	dc31      	bgt.n	8009088 <_printf_float+0x380>
 8009024:	43f3      	mvns	r3, r6
 8009026:	2400      	movs	r4, #0
 8009028:	17db      	asrs	r3, r3, #31
 800902a:	4033      	ands	r3, r6
 800902c:	930e      	str	r3, [sp, #56]	@ 0x38
 800902e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009032:	1af3      	subs	r3, r6, r3
 8009034:	42a3      	cmp	r3, r4
 8009036:	dc30      	bgt.n	800909a <_printf_float+0x392>
 8009038:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800903a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800903c:	429a      	cmp	r2, r3
 800903e:	dc38      	bgt.n	80090b2 <_printf_float+0x3aa>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	07db      	lsls	r3, r3, #31
 8009044:	d435      	bmi.n	80090b2 <_printf_float+0x3aa>
 8009046:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009048:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800904a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800904c:	1b9b      	subs	r3, r3, r6
 800904e:	1b14      	subs	r4, r2, r4
 8009050:	429c      	cmp	r4, r3
 8009052:	dd00      	ble.n	8009056 <_printf_float+0x34e>
 8009054:	001c      	movs	r4, r3
 8009056:	2c00      	cmp	r4, #0
 8009058:	dc34      	bgt.n	80090c4 <_printf_float+0x3bc>
 800905a:	43e3      	mvns	r3, r4
 800905c:	2600      	movs	r6, #0
 800905e:	17db      	asrs	r3, r3, #31
 8009060:	401c      	ands	r4, r3
 8009062:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009064:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	1b1b      	subs	r3, r3, r4
 800906a:	42b3      	cmp	r3, r6
 800906c:	dc00      	bgt.n	8009070 <_printf_float+0x368>
 800906e:	e77b      	b.n	8008f68 <_printf_float+0x260>
 8009070:	002a      	movs	r2, r5
 8009072:	2301      	movs	r3, #1
 8009074:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009078:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800907a:	321a      	adds	r2, #26
 800907c:	47b8      	blx	r7
 800907e:	3001      	adds	r0, #1
 8009080:	d100      	bne.n	8009084 <_printf_float+0x37c>
 8009082:	e69d      	b.n	8008dc0 <_printf_float+0xb8>
 8009084:	3601      	adds	r6, #1
 8009086:	e7ec      	b.n	8009062 <_printf_float+0x35a>
 8009088:	0033      	movs	r3, r6
 800908a:	003a      	movs	r2, r7
 800908c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800908e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009090:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009092:	47a0      	blx	r4
 8009094:	3001      	adds	r0, #1
 8009096:	d1c5      	bne.n	8009024 <_printf_float+0x31c>
 8009098:	e692      	b.n	8008dc0 <_printf_float+0xb8>
 800909a:	002a      	movs	r2, r5
 800909c:	2301      	movs	r3, #1
 800909e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090a2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80090a4:	321a      	adds	r2, #26
 80090a6:	47b0      	blx	r6
 80090a8:	3001      	adds	r0, #1
 80090aa:	d100      	bne.n	80090ae <_printf_float+0x3a6>
 80090ac:	e688      	b.n	8008dc0 <_printf_float+0xb8>
 80090ae:	3401      	adds	r4, #1
 80090b0:	e7bd      	b.n	800902e <_printf_float+0x326>
 80090b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80090bc:	47a0      	blx	r4
 80090be:	3001      	adds	r0, #1
 80090c0:	d1c1      	bne.n	8009046 <_printf_float+0x33e>
 80090c2:	e67d      	b.n	8008dc0 <_printf_float+0xb8>
 80090c4:	19ba      	adds	r2, r7, r6
 80090c6:	0023      	movs	r3, r4
 80090c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80090ce:	47b0      	blx	r6
 80090d0:	3001      	adds	r0, #1
 80090d2:	d1c2      	bne.n	800905a <_printf_float+0x352>
 80090d4:	e674      	b.n	8008dc0 <_printf_float+0xb8>
 80090d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80090da:	2b01      	cmp	r3, #1
 80090dc:	dc02      	bgt.n	80090e4 <_printf_float+0x3dc>
 80090de:	2301      	movs	r3, #1
 80090e0:	421a      	tst	r2, r3
 80090e2:	d039      	beq.n	8009158 <_printf_float+0x450>
 80090e4:	2301      	movs	r3, #1
 80090e6:	003a      	movs	r2, r7
 80090e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80090ee:	47b0      	blx	r6
 80090f0:	3001      	adds	r0, #1
 80090f2:	d100      	bne.n	80090f6 <_printf_float+0x3ee>
 80090f4:	e664      	b.n	8008dc0 <_printf_float+0xb8>
 80090f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090fe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009100:	47b0      	blx	r6
 8009102:	3001      	adds	r0, #1
 8009104:	d100      	bne.n	8009108 <_printf_float+0x400>
 8009106:	e65b      	b.n	8008dc0 <_printf_float+0xb8>
 8009108:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800910a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800910c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800910e:	2200      	movs	r2, #0
 8009110:	3b01      	subs	r3, #1
 8009112:	930c      	str	r3, [sp, #48]	@ 0x30
 8009114:	2300      	movs	r3, #0
 8009116:	f7f7 f999 	bl	800044c <__aeabi_dcmpeq>
 800911a:	2800      	cmp	r0, #0
 800911c:	d11a      	bne.n	8009154 <_printf_float+0x44c>
 800911e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009120:	1c7a      	adds	r2, r7, #1
 8009122:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009124:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009126:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009128:	47b0      	blx	r6
 800912a:	3001      	adds	r0, #1
 800912c:	d10e      	bne.n	800914c <_printf_float+0x444>
 800912e:	e647      	b.n	8008dc0 <_printf_float+0xb8>
 8009130:	002a      	movs	r2, r5
 8009132:	2301      	movs	r3, #1
 8009134:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009138:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800913a:	321a      	adds	r2, #26
 800913c:	47b8      	blx	r7
 800913e:	3001      	adds	r0, #1
 8009140:	d100      	bne.n	8009144 <_printf_float+0x43c>
 8009142:	e63d      	b.n	8008dc0 <_printf_float+0xb8>
 8009144:	3601      	adds	r6, #1
 8009146:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009148:	429e      	cmp	r6, r3
 800914a:	dbf1      	blt.n	8009130 <_printf_float+0x428>
 800914c:	002a      	movs	r2, r5
 800914e:	0023      	movs	r3, r4
 8009150:	3250      	adds	r2, #80	@ 0x50
 8009152:	e6d9      	b.n	8008f08 <_printf_float+0x200>
 8009154:	2600      	movs	r6, #0
 8009156:	e7f6      	b.n	8009146 <_printf_float+0x43e>
 8009158:	003a      	movs	r2, r7
 800915a:	e7e2      	b.n	8009122 <_printf_float+0x41a>
 800915c:	002a      	movs	r2, r5
 800915e:	2301      	movs	r3, #1
 8009160:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009164:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009166:	3219      	adds	r2, #25
 8009168:	47b0      	blx	r6
 800916a:	3001      	adds	r0, #1
 800916c:	d100      	bne.n	8009170 <_printf_float+0x468>
 800916e:	e627      	b.n	8008dc0 <_printf_float+0xb8>
 8009170:	3401      	adds	r4, #1
 8009172:	68eb      	ldr	r3, [r5, #12]
 8009174:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009176:	1a9b      	subs	r3, r3, r2
 8009178:	42a3      	cmp	r3, r4
 800917a:	dcef      	bgt.n	800915c <_printf_float+0x454>
 800917c:	e6f8      	b.n	8008f70 <_printf_float+0x268>
 800917e:	2400      	movs	r4, #0
 8009180:	e7f7      	b.n	8009172 <_printf_float+0x46a>
 8009182:	46c0      	nop			@ (mov r8, r8)

08009184 <_printf_common>:
 8009184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009186:	0016      	movs	r6, r2
 8009188:	9301      	str	r3, [sp, #4]
 800918a:	688a      	ldr	r2, [r1, #8]
 800918c:	690b      	ldr	r3, [r1, #16]
 800918e:	000c      	movs	r4, r1
 8009190:	9000      	str	r0, [sp, #0]
 8009192:	4293      	cmp	r3, r2
 8009194:	da00      	bge.n	8009198 <_printf_common+0x14>
 8009196:	0013      	movs	r3, r2
 8009198:	0022      	movs	r2, r4
 800919a:	6033      	str	r3, [r6, #0]
 800919c:	3243      	adds	r2, #67	@ 0x43
 800919e:	7812      	ldrb	r2, [r2, #0]
 80091a0:	2a00      	cmp	r2, #0
 80091a2:	d001      	beq.n	80091a8 <_printf_common+0x24>
 80091a4:	3301      	adds	r3, #1
 80091a6:	6033      	str	r3, [r6, #0]
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	069b      	lsls	r3, r3, #26
 80091ac:	d502      	bpl.n	80091b4 <_printf_common+0x30>
 80091ae:	6833      	ldr	r3, [r6, #0]
 80091b0:	3302      	adds	r3, #2
 80091b2:	6033      	str	r3, [r6, #0]
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	2306      	movs	r3, #6
 80091b8:	0015      	movs	r5, r2
 80091ba:	401d      	ands	r5, r3
 80091bc:	421a      	tst	r2, r3
 80091be:	d027      	beq.n	8009210 <_printf_common+0x8c>
 80091c0:	0023      	movs	r3, r4
 80091c2:	3343      	adds	r3, #67	@ 0x43
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	1e5a      	subs	r2, r3, #1
 80091c8:	4193      	sbcs	r3, r2
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	0692      	lsls	r2, r2, #26
 80091ce:	d430      	bmi.n	8009232 <_printf_common+0xae>
 80091d0:	0022      	movs	r2, r4
 80091d2:	9901      	ldr	r1, [sp, #4]
 80091d4:	9800      	ldr	r0, [sp, #0]
 80091d6:	9d08      	ldr	r5, [sp, #32]
 80091d8:	3243      	adds	r2, #67	@ 0x43
 80091da:	47a8      	blx	r5
 80091dc:	3001      	adds	r0, #1
 80091de:	d025      	beq.n	800922c <_printf_common+0xa8>
 80091e0:	2206      	movs	r2, #6
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	2500      	movs	r5, #0
 80091e6:	4013      	ands	r3, r2
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d105      	bne.n	80091f8 <_printf_common+0x74>
 80091ec:	6833      	ldr	r3, [r6, #0]
 80091ee:	68e5      	ldr	r5, [r4, #12]
 80091f0:	1aed      	subs	r5, r5, r3
 80091f2:	43eb      	mvns	r3, r5
 80091f4:	17db      	asrs	r3, r3, #31
 80091f6:	401d      	ands	r5, r3
 80091f8:	68a3      	ldr	r3, [r4, #8]
 80091fa:	6922      	ldr	r2, [r4, #16]
 80091fc:	4293      	cmp	r3, r2
 80091fe:	dd01      	ble.n	8009204 <_printf_common+0x80>
 8009200:	1a9b      	subs	r3, r3, r2
 8009202:	18ed      	adds	r5, r5, r3
 8009204:	2600      	movs	r6, #0
 8009206:	42b5      	cmp	r5, r6
 8009208:	d120      	bne.n	800924c <_printf_common+0xc8>
 800920a:	2000      	movs	r0, #0
 800920c:	e010      	b.n	8009230 <_printf_common+0xac>
 800920e:	3501      	adds	r5, #1
 8009210:	68e3      	ldr	r3, [r4, #12]
 8009212:	6832      	ldr	r2, [r6, #0]
 8009214:	1a9b      	subs	r3, r3, r2
 8009216:	42ab      	cmp	r3, r5
 8009218:	ddd2      	ble.n	80091c0 <_printf_common+0x3c>
 800921a:	0022      	movs	r2, r4
 800921c:	2301      	movs	r3, #1
 800921e:	9901      	ldr	r1, [sp, #4]
 8009220:	9800      	ldr	r0, [sp, #0]
 8009222:	9f08      	ldr	r7, [sp, #32]
 8009224:	3219      	adds	r2, #25
 8009226:	47b8      	blx	r7
 8009228:	3001      	adds	r0, #1
 800922a:	d1f0      	bne.n	800920e <_printf_common+0x8a>
 800922c:	2001      	movs	r0, #1
 800922e:	4240      	negs	r0, r0
 8009230:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009232:	2030      	movs	r0, #48	@ 0x30
 8009234:	18e1      	adds	r1, r4, r3
 8009236:	3143      	adds	r1, #67	@ 0x43
 8009238:	7008      	strb	r0, [r1, #0]
 800923a:	0021      	movs	r1, r4
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	3145      	adds	r1, #69	@ 0x45
 8009240:	7809      	ldrb	r1, [r1, #0]
 8009242:	18a2      	adds	r2, r4, r2
 8009244:	3243      	adds	r2, #67	@ 0x43
 8009246:	3302      	adds	r3, #2
 8009248:	7011      	strb	r1, [r2, #0]
 800924a:	e7c1      	b.n	80091d0 <_printf_common+0x4c>
 800924c:	0022      	movs	r2, r4
 800924e:	2301      	movs	r3, #1
 8009250:	9901      	ldr	r1, [sp, #4]
 8009252:	9800      	ldr	r0, [sp, #0]
 8009254:	9f08      	ldr	r7, [sp, #32]
 8009256:	321a      	adds	r2, #26
 8009258:	47b8      	blx	r7
 800925a:	3001      	adds	r0, #1
 800925c:	d0e6      	beq.n	800922c <_printf_common+0xa8>
 800925e:	3601      	adds	r6, #1
 8009260:	e7d1      	b.n	8009206 <_printf_common+0x82>
	...

08009264 <_printf_i>:
 8009264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009266:	b08b      	sub	sp, #44	@ 0x2c
 8009268:	9206      	str	r2, [sp, #24]
 800926a:	000a      	movs	r2, r1
 800926c:	3243      	adds	r2, #67	@ 0x43
 800926e:	9307      	str	r3, [sp, #28]
 8009270:	9005      	str	r0, [sp, #20]
 8009272:	9203      	str	r2, [sp, #12]
 8009274:	7e0a      	ldrb	r2, [r1, #24]
 8009276:	000c      	movs	r4, r1
 8009278:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800927a:	2a78      	cmp	r2, #120	@ 0x78
 800927c:	d809      	bhi.n	8009292 <_printf_i+0x2e>
 800927e:	2a62      	cmp	r2, #98	@ 0x62
 8009280:	d80b      	bhi.n	800929a <_printf_i+0x36>
 8009282:	2a00      	cmp	r2, #0
 8009284:	d100      	bne.n	8009288 <_printf_i+0x24>
 8009286:	e0ba      	b.n	80093fe <_printf_i+0x19a>
 8009288:	497a      	ldr	r1, [pc, #488]	@ (8009474 <_printf_i+0x210>)
 800928a:	9104      	str	r1, [sp, #16]
 800928c:	2a58      	cmp	r2, #88	@ 0x58
 800928e:	d100      	bne.n	8009292 <_printf_i+0x2e>
 8009290:	e08e      	b.n	80093b0 <_printf_i+0x14c>
 8009292:	0025      	movs	r5, r4
 8009294:	3542      	adds	r5, #66	@ 0x42
 8009296:	702a      	strb	r2, [r5, #0]
 8009298:	e022      	b.n	80092e0 <_printf_i+0x7c>
 800929a:	0010      	movs	r0, r2
 800929c:	3863      	subs	r0, #99	@ 0x63
 800929e:	2815      	cmp	r0, #21
 80092a0:	d8f7      	bhi.n	8009292 <_printf_i+0x2e>
 80092a2:	f7f6 ff43 	bl	800012c <__gnu_thumb1_case_shi>
 80092a6:	0016      	.short	0x0016
 80092a8:	fff6001f 	.word	0xfff6001f
 80092ac:	fff6fff6 	.word	0xfff6fff6
 80092b0:	001ffff6 	.word	0x001ffff6
 80092b4:	fff6fff6 	.word	0xfff6fff6
 80092b8:	fff6fff6 	.word	0xfff6fff6
 80092bc:	0036009f 	.word	0x0036009f
 80092c0:	fff6007e 	.word	0xfff6007e
 80092c4:	00b0fff6 	.word	0x00b0fff6
 80092c8:	0036fff6 	.word	0x0036fff6
 80092cc:	fff6fff6 	.word	0xfff6fff6
 80092d0:	0082      	.short	0x0082
 80092d2:	0025      	movs	r5, r4
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	3542      	adds	r5, #66	@ 0x42
 80092d8:	1d11      	adds	r1, r2, #4
 80092da:	6019      	str	r1, [r3, #0]
 80092dc:	6813      	ldr	r3, [r2, #0]
 80092de:	702b      	strb	r3, [r5, #0]
 80092e0:	2301      	movs	r3, #1
 80092e2:	e09e      	b.n	8009422 <_printf_i+0x1be>
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	6809      	ldr	r1, [r1, #0]
 80092e8:	1d02      	adds	r2, r0, #4
 80092ea:	060d      	lsls	r5, r1, #24
 80092ec:	d50b      	bpl.n	8009306 <_printf_i+0xa2>
 80092ee:	6806      	ldr	r6, [r0, #0]
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	2e00      	cmp	r6, #0
 80092f4:	da03      	bge.n	80092fe <_printf_i+0x9a>
 80092f6:	232d      	movs	r3, #45	@ 0x2d
 80092f8:	9a03      	ldr	r2, [sp, #12]
 80092fa:	4276      	negs	r6, r6
 80092fc:	7013      	strb	r3, [r2, #0]
 80092fe:	4b5d      	ldr	r3, [pc, #372]	@ (8009474 <_printf_i+0x210>)
 8009300:	270a      	movs	r7, #10
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	e018      	b.n	8009338 <_printf_i+0xd4>
 8009306:	6806      	ldr	r6, [r0, #0]
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	0649      	lsls	r1, r1, #25
 800930c:	d5f1      	bpl.n	80092f2 <_printf_i+0x8e>
 800930e:	b236      	sxth	r6, r6
 8009310:	e7ef      	b.n	80092f2 <_printf_i+0x8e>
 8009312:	6808      	ldr	r0, [r1, #0]
 8009314:	6819      	ldr	r1, [r3, #0]
 8009316:	c940      	ldmia	r1!, {r6}
 8009318:	0605      	lsls	r5, r0, #24
 800931a:	d402      	bmi.n	8009322 <_printf_i+0xbe>
 800931c:	0640      	lsls	r0, r0, #25
 800931e:	d500      	bpl.n	8009322 <_printf_i+0xbe>
 8009320:	b2b6      	uxth	r6, r6
 8009322:	6019      	str	r1, [r3, #0]
 8009324:	4b53      	ldr	r3, [pc, #332]	@ (8009474 <_printf_i+0x210>)
 8009326:	270a      	movs	r7, #10
 8009328:	9304      	str	r3, [sp, #16]
 800932a:	2a6f      	cmp	r2, #111	@ 0x6f
 800932c:	d100      	bne.n	8009330 <_printf_i+0xcc>
 800932e:	3f02      	subs	r7, #2
 8009330:	0023      	movs	r3, r4
 8009332:	2200      	movs	r2, #0
 8009334:	3343      	adds	r3, #67	@ 0x43
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	6863      	ldr	r3, [r4, #4]
 800933a:	60a3      	str	r3, [r4, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	db06      	blt.n	800934e <_printf_i+0xea>
 8009340:	2104      	movs	r1, #4
 8009342:	6822      	ldr	r2, [r4, #0]
 8009344:	9d03      	ldr	r5, [sp, #12]
 8009346:	438a      	bics	r2, r1
 8009348:	6022      	str	r2, [r4, #0]
 800934a:	4333      	orrs	r3, r6
 800934c:	d00c      	beq.n	8009368 <_printf_i+0x104>
 800934e:	9d03      	ldr	r5, [sp, #12]
 8009350:	0030      	movs	r0, r6
 8009352:	0039      	movs	r1, r7
 8009354:	f7f6 ff7a 	bl	800024c <__aeabi_uidivmod>
 8009358:	9b04      	ldr	r3, [sp, #16]
 800935a:	3d01      	subs	r5, #1
 800935c:	5c5b      	ldrb	r3, [r3, r1]
 800935e:	702b      	strb	r3, [r5, #0]
 8009360:	0033      	movs	r3, r6
 8009362:	0006      	movs	r6, r0
 8009364:	429f      	cmp	r7, r3
 8009366:	d9f3      	bls.n	8009350 <_printf_i+0xec>
 8009368:	2f08      	cmp	r7, #8
 800936a:	d109      	bne.n	8009380 <_printf_i+0x11c>
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	07db      	lsls	r3, r3, #31
 8009370:	d506      	bpl.n	8009380 <_printf_i+0x11c>
 8009372:	6862      	ldr	r2, [r4, #4]
 8009374:	6923      	ldr	r3, [r4, #16]
 8009376:	429a      	cmp	r2, r3
 8009378:	dc02      	bgt.n	8009380 <_printf_i+0x11c>
 800937a:	2330      	movs	r3, #48	@ 0x30
 800937c:	3d01      	subs	r5, #1
 800937e:	702b      	strb	r3, [r5, #0]
 8009380:	9b03      	ldr	r3, [sp, #12]
 8009382:	1b5b      	subs	r3, r3, r5
 8009384:	6123      	str	r3, [r4, #16]
 8009386:	9b07      	ldr	r3, [sp, #28]
 8009388:	0021      	movs	r1, r4
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	9805      	ldr	r0, [sp, #20]
 800938e:	9b06      	ldr	r3, [sp, #24]
 8009390:	aa09      	add	r2, sp, #36	@ 0x24
 8009392:	f7ff fef7 	bl	8009184 <_printf_common>
 8009396:	3001      	adds	r0, #1
 8009398:	d148      	bne.n	800942c <_printf_i+0x1c8>
 800939a:	2001      	movs	r0, #1
 800939c:	4240      	negs	r0, r0
 800939e:	b00b      	add	sp, #44	@ 0x2c
 80093a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a2:	2220      	movs	r2, #32
 80093a4:	6809      	ldr	r1, [r1, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	6022      	str	r2, [r4, #0]
 80093aa:	2278      	movs	r2, #120	@ 0x78
 80093ac:	4932      	ldr	r1, [pc, #200]	@ (8009478 <_printf_i+0x214>)
 80093ae:	9104      	str	r1, [sp, #16]
 80093b0:	0021      	movs	r1, r4
 80093b2:	3145      	adds	r1, #69	@ 0x45
 80093b4:	700a      	strb	r2, [r1, #0]
 80093b6:	6819      	ldr	r1, [r3, #0]
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	c940      	ldmia	r1!, {r6}
 80093bc:	0610      	lsls	r0, r2, #24
 80093be:	d402      	bmi.n	80093c6 <_printf_i+0x162>
 80093c0:	0650      	lsls	r0, r2, #25
 80093c2:	d500      	bpl.n	80093c6 <_printf_i+0x162>
 80093c4:	b2b6      	uxth	r6, r6
 80093c6:	6019      	str	r1, [r3, #0]
 80093c8:	07d3      	lsls	r3, r2, #31
 80093ca:	d502      	bpl.n	80093d2 <_printf_i+0x16e>
 80093cc:	2320      	movs	r3, #32
 80093ce:	4313      	orrs	r3, r2
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	2e00      	cmp	r6, #0
 80093d4:	d001      	beq.n	80093da <_printf_i+0x176>
 80093d6:	2710      	movs	r7, #16
 80093d8:	e7aa      	b.n	8009330 <_printf_i+0xcc>
 80093da:	2220      	movs	r2, #32
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	4393      	bics	r3, r2
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	e7f8      	b.n	80093d6 <_printf_i+0x172>
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	680d      	ldr	r5, [r1, #0]
 80093e8:	1d10      	adds	r0, r2, #4
 80093ea:	6949      	ldr	r1, [r1, #20]
 80093ec:	6018      	str	r0, [r3, #0]
 80093ee:	6813      	ldr	r3, [r2, #0]
 80093f0:	062e      	lsls	r6, r5, #24
 80093f2:	d501      	bpl.n	80093f8 <_printf_i+0x194>
 80093f4:	6019      	str	r1, [r3, #0]
 80093f6:	e002      	b.n	80093fe <_printf_i+0x19a>
 80093f8:	066d      	lsls	r5, r5, #25
 80093fa:	d5fb      	bpl.n	80093f4 <_printf_i+0x190>
 80093fc:	8019      	strh	r1, [r3, #0]
 80093fe:	2300      	movs	r3, #0
 8009400:	9d03      	ldr	r5, [sp, #12]
 8009402:	6123      	str	r3, [r4, #16]
 8009404:	e7bf      	b.n	8009386 <_printf_i+0x122>
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	1d11      	adds	r1, r2, #4
 800940a:	6019      	str	r1, [r3, #0]
 800940c:	6815      	ldr	r5, [r2, #0]
 800940e:	2100      	movs	r1, #0
 8009410:	0028      	movs	r0, r5
 8009412:	6862      	ldr	r2, [r4, #4]
 8009414:	f000 f9eb 	bl	80097ee <memchr>
 8009418:	2800      	cmp	r0, #0
 800941a:	d001      	beq.n	8009420 <_printf_i+0x1bc>
 800941c:	1b40      	subs	r0, r0, r5
 800941e:	6060      	str	r0, [r4, #4]
 8009420:	6863      	ldr	r3, [r4, #4]
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	2300      	movs	r3, #0
 8009426:	9a03      	ldr	r2, [sp, #12]
 8009428:	7013      	strb	r3, [r2, #0]
 800942a:	e7ac      	b.n	8009386 <_printf_i+0x122>
 800942c:	002a      	movs	r2, r5
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	9906      	ldr	r1, [sp, #24]
 8009432:	9805      	ldr	r0, [sp, #20]
 8009434:	9d07      	ldr	r5, [sp, #28]
 8009436:	47a8      	blx	r5
 8009438:	3001      	adds	r0, #1
 800943a:	d0ae      	beq.n	800939a <_printf_i+0x136>
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	079b      	lsls	r3, r3, #30
 8009440:	d415      	bmi.n	800946e <_printf_i+0x20a>
 8009442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009444:	68e0      	ldr	r0, [r4, #12]
 8009446:	4298      	cmp	r0, r3
 8009448:	daa9      	bge.n	800939e <_printf_i+0x13a>
 800944a:	0018      	movs	r0, r3
 800944c:	e7a7      	b.n	800939e <_printf_i+0x13a>
 800944e:	0022      	movs	r2, r4
 8009450:	2301      	movs	r3, #1
 8009452:	9906      	ldr	r1, [sp, #24]
 8009454:	9805      	ldr	r0, [sp, #20]
 8009456:	9e07      	ldr	r6, [sp, #28]
 8009458:	3219      	adds	r2, #25
 800945a:	47b0      	blx	r6
 800945c:	3001      	adds	r0, #1
 800945e:	d09c      	beq.n	800939a <_printf_i+0x136>
 8009460:	3501      	adds	r5, #1
 8009462:	68e3      	ldr	r3, [r4, #12]
 8009464:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009466:	1a9b      	subs	r3, r3, r2
 8009468:	42ab      	cmp	r3, r5
 800946a:	dcf0      	bgt.n	800944e <_printf_i+0x1ea>
 800946c:	e7e9      	b.n	8009442 <_printf_i+0x1de>
 800946e:	2500      	movs	r5, #0
 8009470:	e7f7      	b.n	8009462 <_printf_i+0x1fe>
 8009472:	46c0      	nop			@ (mov r8, r8)
 8009474:	0800e3a6 	.word	0x0800e3a6
 8009478:	0800e3b7 	.word	0x0800e3b7

0800947c <std>:
 800947c:	2300      	movs	r3, #0
 800947e:	b510      	push	{r4, lr}
 8009480:	0004      	movs	r4, r0
 8009482:	6003      	str	r3, [r0, #0]
 8009484:	6043      	str	r3, [r0, #4]
 8009486:	6083      	str	r3, [r0, #8]
 8009488:	8181      	strh	r1, [r0, #12]
 800948a:	6643      	str	r3, [r0, #100]	@ 0x64
 800948c:	81c2      	strh	r2, [r0, #14]
 800948e:	6103      	str	r3, [r0, #16]
 8009490:	6143      	str	r3, [r0, #20]
 8009492:	6183      	str	r3, [r0, #24]
 8009494:	0019      	movs	r1, r3
 8009496:	2208      	movs	r2, #8
 8009498:	305c      	adds	r0, #92	@ 0x5c
 800949a:	f000 f921 	bl	80096e0 <memset>
 800949e:	4b0b      	ldr	r3, [pc, #44]	@ (80094cc <std+0x50>)
 80094a0:	6224      	str	r4, [r4, #32]
 80094a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80094a4:	4b0a      	ldr	r3, [pc, #40]	@ (80094d0 <std+0x54>)
 80094a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094a8:	4b0a      	ldr	r3, [pc, #40]	@ (80094d4 <std+0x58>)
 80094aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094ac:	4b0a      	ldr	r3, [pc, #40]	@ (80094d8 <std+0x5c>)
 80094ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80094b0:	4b0a      	ldr	r3, [pc, #40]	@ (80094dc <std+0x60>)
 80094b2:	429c      	cmp	r4, r3
 80094b4:	d005      	beq.n	80094c2 <std+0x46>
 80094b6:	4b0a      	ldr	r3, [pc, #40]	@ (80094e0 <std+0x64>)
 80094b8:	429c      	cmp	r4, r3
 80094ba:	d002      	beq.n	80094c2 <std+0x46>
 80094bc:	4b09      	ldr	r3, [pc, #36]	@ (80094e4 <std+0x68>)
 80094be:	429c      	cmp	r4, r3
 80094c0:	d103      	bne.n	80094ca <std+0x4e>
 80094c2:	0020      	movs	r0, r4
 80094c4:	3058      	adds	r0, #88	@ 0x58
 80094c6:	f000 f98f 	bl	80097e8 <__retarget_lock_init_recursive>
 80094ca:	bd10      	pop	{r4, pc}
 80094cc:	08009649 	.word	0x08009649
 80094d0:	08009671 	.word	0x08009671
 80094d4:	080096a9 	.word	0x080096a9
 80094d8:	080096d5 	.word	0x080096d5
 80094dc:	20000914 	.word	0x20000914
 80094e0:	2000097c 	.word	0x2000097c
 80094e4:	200009e4 	.word	0x200009e4

080094e8 <stdio_exit_handler>:
 80094e8:	b510      	push	{r4, lr}
 80094ea:	4a03      	ldr	r2, [pc, #12]	@ (80094f8 <stdio_exit_handler+0x10>)
 80094ec:	4903      	ldr	r1, [pc, #12]	@ (80094fc <stdio_exit_handler+0x14>)
 80094ee:	4804      	ldr	r0, [pc, #16]	@ (8009500 <stdio_exit_handler+0x18>)
 80094f0:	f000 f86c 	bl	80095cc <_fwalk_sglue>
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	46c0      	nop			@ (mov r8, r8)
 80094f8:	2000002c 	.word	0x2000002c
 80094fc:	0800b20d 	.word	0x0800b20d
 8009500:	2000003c 	.word	0x2000003c

08009504 <cleanup_stdio>:
 8009504:	6841      	ldr	r1, [r0, #4]
 8009506:	4b0b      	ldr	r3, [pc, #44]	@ (8009534 <cleanup_stdio+0x30>)
 8009508:	b510      	push	{r4, lr}
 800950a:	0004      	movs	r4, r0
 800950c:	4299      	cmp	r1, r3
 800950e:	d001      	beq.n	8009514 <cleanup_stdio+0x10>
 8009510:	f001 fe7c 	bl	800b20c <_fflush_r>
 8009514:	68a1      	ldr	r1, [r4, #8]
 8009516:	4b08      	ldr	r3, [pc, #32]	@ (8009538 <cleanup_stdio+0x34>)
 8009518:	4299      	cmp	r1, r3
 800951a:	d002      	beq.n	8009522 <cleanup_stdio+0x1e>
 800951c:	0020      	movs	r0, r4
 800951e:	f001 fe75 	bl	800b20c <_fflush_r>
 8009522:	68e1      	ldr	r1, [r4, #12]
 8009524:	4b05      	ldr	r3, [pc, #20]	@ (800953c <cleanup_stdio+0x38>)
 8009526:	4299      	cmp	r1, r3
 8009528:	d002      	beq.n	8009530 <cleanup_stdio+0x2c>
 800952a:	0020      	movs	r0, r4
 800952c:	f001 fe6e 	bl	800b20c <_fflush_r>
 8009530:	bd10      	pop	{r4, pc}
 8009532:	46c0      	nop			@ (mov r8, r8)
 8009534:	20000914 	.word	0x20000914
 8009538:	2000097c 	.word	0x2000097c
 800953c:	200009e4 	.word	0x200009e4

08009540 <global_stdio_init.part.0>:
 8009540:	b510      	push	{r4, lr}
 8009542:	4b09      	ldr	r3, [pc, #36]	@ (8009568 <global_stdio_init.part.0+0x28>)
 8009544:	4a09      	ldr	r2, [pc, #36]	@ (800956c <global_stdio_init.part.0+0x2c>)
 8009546:	2104      	movs	r1, #4
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	4809      	ldr	r0, [pc, #36]	@ (8009570 <global_stdio_init.part.0+0x30>)
 800954c:	2200      	movs	r2, #0
 800954e:	f7ff ff95 	bl	800947c <std>
 8009552:	2201      	movs	r2, #1
 8009554:	2109      	movs	r1, #9
 8009556:	4807      	ldr	r0, [pc, #28]	@ (8009574 <global_stdio_init.part.0+0x34>)
 8009558:	f7ff ff90 	bl	800947c <std>
 800955c:	2202      	movs	r2, #2
 800955e:	2112      	movs	r1, #18
 8009560:	4805      	ldr	r0, [pc, #20]	@ (8009578 <global_stdio_init.part.0+0x38>)
 8009562:	f7ff ff8b 	bl	800947c <std>
 8009566:	bd10      	pop	{r4, pc}
 8009568:	20000a4c 	.word	0x20000a4c
 800956c:	080094e9 	.word	0x080094e9
 8009570:	20000914 	.word	0x20000914
 8009574:	2000097c 	.word	0x2000097c
 8009578:	200009e4 	.word	0x200009e4

0800957c <__sfp_lock_acquire>:
 800957c:	b510      	push	{r4, lr}
 800957e:	4802      	ldr	r0, [pc, #8]	@ (8009588 <__sfp_lock_acquire+0xc>)
 8009580:	f000 f933 	bl	80097ea <__retarget_lock_acquire_recursive>
 8009584:	bd10      	pop	{r4, pc}
 8009586:	46c0      	nop			@ (mov r8, r8)
 8009588:	20000a55 	.word	0x20000a55

0800958c <__sfp_lock_release>:
 800958c:	b510      	push	{r4, lr}
 800958e:	4802      	ldr	r0, [pc, #8]	@ (8009598 <__sfp_lock_release+0xc>)
 8009590:	f000 f92c 	bl	80097ec <__retarget_lock_release_recursive>
 8009594:	bd10      	pop	{r4, pc}
 8009596:	46c0      	nop			@ (mov r8, r8)
 8009598:	20000a55 	.word	0x20000a55

0800959c <__sinit>:
 800959c:	b510      	push	{r4, lr}
 800959e:	0004      	movs	r4, r0
 80095a0:	f7ff ffec 	bl	800957c <__sfp_lock_acquire>
 80095a4:	6a23      	ldr	r3, [r4, #32]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <__sinit+0x14>
 80095aa:	f7ff ffef 	bl	800958c <__sfp_lock_release>
 80095ae:	bd10      	pop	{r4, pc}
 80095b0:	4b04      	ldr	r3, [pc, #16]	@ (80095c4 <__sinit+0x28>)
 80095b2:	6223      	str	r3, [r4, #32]
 80095b4:	4b04      	ldr	r3, [pc, #16]	@ (80095c8 <__sinit+0x2c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1f6      	bne.n	80095aa <__sinit+0xe>
 80095bc:	f7ff ffc0 	bl	8009540 <global_stdio_init.part.0>
 80095c0:	e7f3      	b.n	80095aa <__sinit+0xe>
 80095c2:	46c0      	nop			@ (mov r8, r8)
 80095c4:	08009505 	.word	0x08009505
 80095c8:	20000a4c 	.word	0x20000a4c

080095cc <_fwalk_sglue>:
 80095cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ce:	0014      	movs	r4, r2
 80095d0:	2600      	movs	r6, #0
 80095d2:	9000      	str	r0, [sp, #0]
 80095d4:	9101      	str	r1, [sp, #4]
 80095d6:	68a5      	ldr	r5, [r4, #8]
 80095d8:	6867      	ldr	r7, [r4, #4]
 80095da:	3f01      	subs	r7, #1
 80095dc:	d504      	bpl.n	80095e8 <_fwalk_sglue+0x1c>
 80095de:	6824      	ldr	r4, [r4, #0]
 80095e0:	2c00      	cmp	r4, #0
 80095e2:	d1f8      	bne.n	80095d6 <_fwalk_sglue+0xa>
 80095e4:	0030      	movs	r0, r6
 80095e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095e8:	89ab      	ldrh	r3, [r5, #12]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d908      	bls.n	8009600 <_fwalk_sglue+0x34>
 80095ee:	220e      	movs	r2, #14
 80095f0:	5eab      	ldrsh	r3, [r5, r2]
 80095f2:	3301      	adds	r3, #1
 80095f4:	d004      	beq.n	8009600 <_fwalk_sglue+0x34>
 80095f6:	0029      	movs	r1, r5
 80095f8:	9800      	ldr	r0, [sp, #0]
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	4798      	blx	r3
 80095fe:	4306      	orrs	r6, r0
 8009600:	3568      	adds	r5, #104	@ 0x68
 8009602:	e7ea      	b.n	80095da <_fwalk_sglue+0xe>

08009604 <siprintf>:
 8009604:	b40e      	push	{r1, r2, r3}
 8009606:	b510      	push	{r4, lr}
 8009608:	2400      	movs	r4, #0
 800960a:	490c      	ldr	r1, [pc, #48]	@ (800963c <siprintf+0x38>)
 800960c:	b09d      	sub	sp, #116	@ 0x74
 800960e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009610:	9002      	str	r0, [sp, #8]
 8009612:	9006      	str	r0, [sp, #24]
 8009614:	9107      	str	r1, [sp, #28]
 8009616:	9104      	str	r1, [sp, #16]
 8009618:	4809      	ldr	r0, [pc, #36]	@ (8009640 <siprintf+0x3c>)
 800961a:	490a      	ldr	r1, [pc, #40]	@ (8009644 <siprintf+0x40>)
 800961c:	cb04      	ldmia	r3!, {r2}
 800961e:	9105      	str	r1, [sp, #20]
 8009620:	6800      	ldr	r0, [r0, #0]
 8009622:	a902      	add	r1, sp, #8
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009628:	f001 fc6c 	bl	800af04 <_svfiprintf_r>
 800962c:	9b02      	ldr	r3, [sp, #8]
 800962e:	701c      	strb	r4, [r3, #0]
 8009630:	b01d      	add	sp, #116	@ 0x74
 8009632:	bc10      	pop	{r4}
 8009634:	bc08      	pop	{r3}
 8009636:	b003      	add	sp, #12
 8009638:	4718      	bx	r3
 800963a:	46c0      	nop			@ (mov r8, r8)
 800963c:	7fffffff 	.word	0x7fffffff
 8009640:	20000038 	.word	0x20000038
 8009644:	ffff0208 	.word	0xffff0208

08009648 <__sread>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	000c      	movs	r4, r1
 800964c:	250e      	movs	r5, #14
 800964e:	5f49      	ldrsh	r1, [r1, r5]
 8009650:	f000 f878 	bl	8009744 <_read_r>
 8009654:	2800      	cmp	r0, #0
 8009656:	db03      	blt.n	8009660 <__sread+0x18>
 8009658:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800965a:	181b      	adds	r3, r3, r0
 800965c:	6563      	str	r3, [r4, #84]	@ 0x54
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	4a02      	ldr	r2, [pc, #8]	@ (800966c <__sread+0x24>)
 8009664:	4013      	ands	r3, r2
 8009666:	81a3      	strh	r3, [r4, #12]
 8009668:	e7f9      	b.n	800965e <__sread+0x16>
 800966a:	46c0      	nop			@ (mov r8, r8)
 800966c:	ffffefff 	.word	0xffffefff

08009670 <__swrite>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	001f      	movs	r7, r3
 8009674:	898b      	ldrh	r3, [r1, #12]
 8009676:	0005      	movs	r5, r0
 8009678:	000c      	movs	r4, r1
 800967a:	0016      	movs	r6, r2
 800967c:	05db      	lsls	r3, r3, #23
 800967e:	d505      	bpl.n	800968c <__swrite+0x1c>
 8009680:	230e      	movs	r3, #14
 8009682:	5ec9      	ldrsh	r1, [r1, r3]
 8009684:	2200      	movs	r2, #0
 8009686:	2302      	movs	r3, #2
 8009688:	f000 f848 	bl	800971c <_lseek_r>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	4a05      	ldr	r2, [pc, #20]	@ (80096a4 <__swrite+0x34>)
 8009690:	0028      	movs	r0, r5
 8009692:	4013      	ands	r3, r2
 8009694:	81a3      	strh	r3, [r4, #12]
 8009696:	0032      	movs	r2, r6
 8009698:	230e      	movs	r3, #14
 800969a:	5ee1      	ldrsh	r1, [r4, r3]
 800969c:	003b      	movs	r3, r7
 800969e:	f000 f865 	bl	800976c <_write_r>
 80096a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a4:	ffffefff 	.word	0xffffefff

080096a8 <__sseek>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	000c      	movs	r4, r1
 80096ac:	250e      	movs	r5, #14
 80096ae:	5f49      	ldrsh	r1, [r1, r5]
 80096b0:	f000 f834 	bl	800971c <_lseek_r>
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	1c42      	adds	r2, r0, #1
 80096b8:	d103      	bne.n	80096c2 <__sseek+0x1a>
 80096ba:	4a05      	ldr	r2, [pc, #20]	@ (80096d0 <__sseek+0x28>)
 80096bc:	4013      	ands	r3, r2
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	bd70      	pop	{r4, r5, r6, pc}
 80096c2:	2280      	movs	r2, #128	@ 0x80
 80096c4:	0152      	lsls	r2, r2, #5
 80096c6:	4313      	orrs	r3, r2
 80096c8:	81a3      	strh	r3, [r4, #12]
 80096ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80096cc:	e7f8      	b.n	80096c0 <__sseek+0x18>
 80096ce:	46c0      	nop			@ (mov r8, r8)
 80096d0:	ffffefff 	.word	0xffffefff

080096d4 <__sclose>:
 80096d4:	b510      	push	{r4, lr}
 80096d6:	230e      	movs	r3, #14
 80096d8:	5ec9      	ldrsh	r1, [r1, r3]
 80096da:	f000 f80d 	bl	80096f8 <_close_r>
 80096de:	bd10      	pop	{r4, pc}

080096e0 <memset>:
 80096e0:	0003      	movs	r3, r0
 80096e2:	1882      	adds	r2, r0, r2
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d100      	bne.n	80096ea <memset+0xa>
 80096e8:	4770      	bx	lr
 80096ea:	7019      	strb	r1, [r3, #0]
 80096ec:	3301      	adds	r3, #1
 80096ee:	e7f9      	b.n	80096e4 <memset+0x4>

080096f0 <_localeconv_r>:
 80096f0:	4800      	ldr	r0, [pc, #0]	@ (80096f4 <_localeconv_r+0x4>)
 80096f2:	4770      	bx	lr
 80096f4:	20000178 	.word	0x20000178

080096f8 <_close_r>:
 80096f8:	2300      	movs	r3, #0
 80096fa:	b570      	push	{r4, r5, r6, lr}
 80096fc:	4d06      	ldr	r5, [pc, #24]	@ (8009718 <_close_r+0x20>)
 80096fe:	0004      	movs	r4, r0
 8009700:	0008      	movs	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7fb fef8 	bl	80054f8 <_close>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d103      	bne.n	8009714 <_close_r+0x1c>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d000      	beq.n	8009714 <_close_r+0x1c>
 8009712:	6023      	str	r3, [r4, #0]
 8009714:	bd70      	pop	{r4, r5, r6, pc}
 8009716:	46c0      	nop			@ (mov r8, r8)
 8009718:	20000a50 	.word	0x20000a50

0800971c <_lseek_r>:
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	0004      	movs	r4, r0
 8009720:	0008      	movs	r0, r1
 8009722:	0011      	movs	r1, r2
 8009724:	001a      	movs	r2, r3
 8009726:	2300      	movs	r3, #0
 8009728:	4d05      	ldr	r5, [pc, #20]	@ (8009740 <_lseek_r+0x24>)
 800972a:	602b      	str	r3, [r5, #0]
 800972c:	f7fb ff05 	bl	800553a <_lseek>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d103      	bne.n	800973c <_lseek_r+0x20>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d000      	beq.n	800973c <_lseek_r+0x20>
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	bd70      	pop	{r4, r5, r6, pc}
 800973e:	46c0      	nop			@ (mov r8, r8)
 8009740:	20000a50 	.word	0x20000a50

08009744 <_read_r>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	0004      	movs	r4, r0
 8009748:	0008      	movs	r0, r1
 800974a:	0011      	movs	r1, r2
 800974c:	001a      	movs	r2, r3
 800974e:	2300      	movs	r3, #0
 8009750:	4d05      	ldr	r5, [pc, #20]	@ (8009768 <_read_r+0x24>)
 8009752:	602b      	str	r3, [r5, #0]
 8009754:	f7fb fe97 	bl	8005486 <_read>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	d103      	bne.n	8009764 <_read_r+0x20>
 800975c:	682b      	ldr	r3, [r5, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d000      	beq.n	8009764 <_read_r+0x20>
 8009762:	6023      	str	r3, [r4, #0]
 8009764:	bd70      	pop	{r4, r5, r6, pc}
 8009766:	46c0      	nop			@ (mov r8, r8)
 8009768:	20000a50 	.word	0x20000a50

0800976c <_write_r>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	0004      	movs	r4, r0
 8009770:	0008      	movs	r0, r1
 8009772:	0011      	movs	r1, r2
 8009774:	001a      	movs	r2, r3
 8009776:	2300      	movs	r3, #0
 8009778:	4d05      	ldr	r5, [pc, #20]	@ (8009790 <_write_r+0x24>)
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	f7fb fea0 	bl	80054c0 <_write>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d103      	bne.n	800978c <_write_r+0x20>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d000      	beq.n	800978c <_write_r+0x20>
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	bd70      	pop	{r4, r5, r6, pc}
 800978e:	46c0      	nop			@ (mov r8, r8)
 8009790:	20000a50 	.word	0x20000a50

08009794 <__errno>:
 8009794:	4b01      	ldr	r3, [pc, #4]	@ (800979c <__errno+0x8>)
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	4770      	bx	lr
 800979a:	46c0      	nop			@ (mov r8, r8)
 800979c:	20000038 	.word	0x20000038

080097a0 <__libc_init_array>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	2600      	movs	r6, #0
 80097a4:	4c0c      	ldr	r4, [pc, #48]	@ (80097d8 <__libc_init_array+0x38>)
 80097a6:	4d0d      	ldr	r5, [pc, #52]	@ (80097dc <__libc_init_array+0x3c>)
 80097a8:	1b64      	subs	r4, r4, r5
 80097aa:	10a4      	asrs	r4, r4, #2
 80097ac:	42a6      	cmp	r6, r4
 80097ae:	d109      	bne.n	80097c4 <__libc_init_array+0x24>
 80097b0:	2600      	movs	r6, #0
 80097b2:	f002 f8f1 	bl	800b998 <_init>
 80097b6:	4c0a      	ldr	r4, [pc, #40]	@ (80097e0 <__libc_init_array+0x40>)
 80097b8:	4d0a      	ldr	r5, [pc, #40]	@ (80097e4 <__libc_init_array+0x44>)
 80097ba:	1b64      	subs	r4, r4, r5
 80097bc:	10a4      	asrs	r4, r4, #2
 80097be:	42a6      	cmp	r6, r4
 80097c0:	d105      	bne.n	80097ce <__libc_init_array+0x2e>
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	00b3      	lsls	r3, r6, #2
 80097c6:	58eb      	ldr	r3, [r5, r3]
 80097c8:	4798      	blx	r3
 80097ca:	3601      	adds	r6, #1
 80097cc:	e7ee      	b.n	80097ac <__libc_init_array+0xc>
 80097ce:	00b3      	lsls	r3, r6, #2
 80097d0:	58eb      	ldr	r3, [r5, r3]
 80097d2:	4798      	blx	r3
 80097d4:	3601      	adds	r6, #1
 80097d6:	e7f2      	b.n	80097be <__libc_init_array+0x1e>
 80097d8:	0800e70c 	.word	0x0800e70c
 80097dc:	0800e70c 	.word	0x0800e70c
 80097e0:	0800e710 	.word	0x0800e710
 80097e4:	0800e70c 	.word	0x0800e70c

080097e8 <__retarget_lock_init_recursive>:
 80097e8:	4770      	bx	lr

080097ea <__retarget_lock_acquire_recursive>:
 80097ea:	4770      	bx	lr

080097ec <__retarget_lock_release_recursive>:
 80097ec:	4770      	bx	lr

080097ee <memchr>:
 80097ee:	b2c9      	uxtb	r1, r1
 80097f0:	1882      	adds	r2, r0, r2
 80097f2:	4290      	cmp	r0, r2
 80097f4:	d101      	bne.n	80097fa <memchr+0xc>
 80097f6:	2000      	movs	r0, #0
 80097f8:	4770      	bx	lr
 80097fa:	7803      	ldrb	r3, [r0, #0]
 80097fc:	428b      	cmp	r3, r1
 80097fe:	d0fb      	beq.n	80097f8 <memchr+0xa>
 8009800:	3001      	adds	r0, #1
 8009802:	e7f6      	b.n	80097f2 <memchr+0x4>

08009804 <memcpy>:
 8009804:	2300      	movs	r3, #0
 8009806:	b510      	push	{r4, lr}
 8009808:	429a      	cmp	r2, r3
 800980a:	d100      	bne.n	800980e <memcpy+0xa>
 800980c:	bd10      	pop	{r4, pc}
 800980e:	5ccc      	ldrb	r4, [r1, r3]
 8009810:	54c4      	strb	r4, [r0, r3]
 8009812:	3301      	adds	r3, #1
 8009814:	e7f8      	b.n	8009808 <memcpy+0x4>

08009816 <quorem>:
 8009816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009818:	6903      	ldr	r3, [r0, #16]
 800981a:	690c      	ldr	r4, [r1, #16]
 800981c:	b089      	sub	sp, #36	@ 0x24
 800981e:	9003      	str	r0, [sp, #12]
 8009820:	9106      	str	r1, [sp, #24]
 8009822:	2000      	movs	r0, #0
 8009824:	42a3      	cmp	r3, r4
 8009826:	db63      	blt.n	80098f0 <quorem+0xda>
 8009828:	000b      	movs	r3, r1
 800982a:	3c01      	subs	r4, #1
 800982c:	3314      	adds	r3, #20
 800982e:	00a5      	lsls	r5, r4, #2
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	195b      	adds	r3, r3, r5
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	9b03      	ldr	r3, [sp, #12]
 8009838:	3314      	adds	r3, #20
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	195d      	adds	r5, r3, r5
 800983e:	9b05      	ldr	r3, [sp, #20]
 8009840:	682f      	ldr	r7, [r5, #0]
 8009842:	681e      	ldr	r6, [r3, #0]
 8009844:	0038      	movs	r0, r7
 8009846:	3601      	adds	r6, #1
 8009848:	0031      	movs	r1, r6
 800984a:	f7f6 fc79 	bl	8000140 <__udivsi3>
 800984e:	9002      	str	r0, [sp, #8]
 8009850:	42b7      	cmp	r7, r6
 8009852:	d327      	bcc.n	80098a4 <quorem+0x8e>
 8009854:	9b04      	ldr	r3, [sp, #16]
 8009856:	2700      	movs	r7, #0
 8009858:	469c      	mov	ip, r3
 800985a:	9e01      	ldr	r6, [sp, #4]
 800985c:	9707      	str	r7, [sp, #28]
 800985e:	4662      	mov	r2, ip
 8009860:	ca08      	ldmia	r2!, {r3}
 8009862:	6830      	ldr	r0, [r6, #0]
 8009864:	4694      	mov	ip, r2
 8009866:	9a02      	ldr	r2, [sp, #8]
 8009868:	b299      	uxth	r1, r3
 800986a:	4351      	muls	r1, r2
 800986c:	0c1b      	lsrs	r3, r3, #16
 800986e:	4353      	muls	r3, r2
 8009870:	19c9      	adds	r1, r1, r7
 8009872:	0c0a      	lsrs	r2, r1, #16
 8009874:	189b      	adds	r3, r3, r2
 8009876:	b289      	uxth	r1, r1
 8009878:	b282      	uxth	r2, r0
 800987a:	1a52      	subs	r2, r2, r1
 800987c:	9907      	ldr	r1, [sp, #28]
 800987e:	0c1f      	lsrs	r7, r3, #16
 8009880:	1852      	adds	r2, r2, r1
 8009882:	0c00      	lsrs	r0, r0, #16
 8009884:	b29b      	uxth	r3, r3
 8009886:	1411      	asrs	r1, r2, #16
 8009888:	1ac3      	subs	r3, r0, r3
 800988a:	185b      	adds	r3, r3, r1
 800988c:	1419      	asrs	r1, r3, #16
 800988e:	b292      	uxth	r2, r2
 8009890:	041b      	lsls	r3, r3, #16
 8009892:	431a      	orrs	r2, r3
 8009894:	9b05      	ldr	r3, [sp, #20]
 8009896:	9107      	str	r1, [sp, #28]
 8009898:	c604      	stmia	r6!, {r2}
 800989a:	4563      	cmp	r3, ip
 800989c:	d2df      	bcs.n	800985e <quorem+0x48>
 800989e:	682b      	ldr	r3, [r5, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d02b      	beq.n	80098fc <quorem+0xe6>
 80098a4:	9906      	ldr	r1, [sp, #24]
 80098a6:	9803      	ldr	r0, [sp, #12]
 80098a8:	f001 f9b6 	bl	800ac18 <__mcmp>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	db1e      	blt.n	80098ee <quorem+0xd8>
 80098b0:	2600      	movs	r6, #0
 80098b2:	9d01      	ldr	r5, [sp, #4]
 80098b4:	9904      	ldr	r1, [sp, #16]
 80098b6:	c901      	ldmia	r1!, {r0}
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	b287      	uxth	r7, r0
 80098bc:	b29a      	uxth	r2, r3
 80098be:	1bd2      	subs	r2, r2, r7
 80098c0:	1992      	adds	r2, r2, r6
 80098c2:	0c00      	lsrs	r0, r0, #16
 80098c4:	0c1b      	lsrs	r3, r3, #16
 80098c6:	1a1b      	subs	r3, r3, r0
 80098c8:	1410      	asrs	r0, r2, #16
 80098ca:	181b      	adds	r3, r3, r0
 80098cc:	141e      	asrs	r6, r3, #16
 80098ce:	b292      	uxth	r2, r2
 80098d0:	041b      	lsls	r3, r3, #16
 80098d2:	431a      	orrs	r2, r3
 80098d4:	9b05      	ldr	r3, [sp, #20]
 80098d6:	c504      	stmia	r5!, {r2}
 80098d8:	428b      	cmp	r3, r1
 80098da:	d2ec      	bcs.n	80098b6 <quorem+0xa0>
 80098dc:	9a01      	ldr	r2, [sp, #4]
 80098de:	00a3      	lsls	r3, r4, #2
 80098e0:	18d3      	adds	r3, r2, r3
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	2a00      	cmp	r2, #0
 80098e6:	d014      	beq.n	8009912 <quorem+0xfc>
 80098e8:	9b02      	ldr	r3, [sp, #8]
 80098ea:	3301      	adds	r3, #1
 80098ec:	9302      	str	r3, [sp, #8]
 80098ee:	9802      	ldr	r0, [sp, #8]
 80098f0:	b009      	add	sp, #36	@ 0x24
 80098f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d104      	bne.n	8009904 <quorem+0xee>
 80098fa:	3c01      	subs	r4, #1
 80098fc:	9b01      	ldr	r3, [sp, #4]
 80098fe:	3d04      	subs	r5, #4
 8009900:	42ab      	cmp	r3, r5
 8009902:	d3f7      	bcc.n	80098f4 <quorem+0xde>
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	611c      	str	r4, [r3, #16]
 8009908:	e7cc      	b.n	80098a4 <quorem+0x8e>
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	2a00      	cmp	r2, #0
 800990e:	d104      	bne.n	800991a <quorem+0x104>
 8009910:	3c01      	subs	r4, #1
 8009912:	9a01      	ldr	r2, [sp, #4]
 8009914:	3b04      	subs	r3, #4
 8009916:	429a      	cmp	r2, r3
 8009918:	d3f7      	bcc.n	800990a <quorem+0xf4>
 800991a:	9b03      	ldr	r3, [sp, #12]
 800991c:	611c      	str	r4, [r3, #16]
 800991e:	e7e3      	b.n	80098e8 <quorem+0xd2>

08009920 <_dtoa_r>:
 8009920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009922:	0014      	movs	r4, r2
 8009924:	001d      	movs	r5, r3
 8009926:	69c6      	ldr	r6, [r0, #28]
 8009928:	b09d      	sub	sp, #116	@ 0x74
 800992a:	940a      	str	r4, [sp, #40]	@ 0x28
 800992c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800992e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8009930:	9003      	str	r0, [sp, #12]
 8009932:	2e00      	cmp	r6, #0
 8009934:	d10f      	bne.n	8009956 <_dtoa_r+0x36>
 8009936:	2010      	movs	r0, #16
 8009938:	f000 fe2c 	bl	800a594 <malloc>
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	1e02      	subs	r2, r0, #0
 8009940:	61d8      	str	r0, [r3, #28]
 8009942:	d104      	bne.n	800994e <_dtoa_r+0x2e>
 8009944:	21ef      	movs	r1, #239	@ 0xef
 8009946:	4bc7      	ldr	r3, [pc, #796]	@ (8009c64 <_dtoa_r+0x344>)
 8009948:	48c7      	ldr	r0, [pc, #796]	@ (8009c68 <_dtoa_r+0x348>)
 800994a:	f001 fcaf 	bl	800b2ac <__assert_func>
 800994e:	6046      	str	r6, [r0, #4]
 8009950:	6086      	str	r6, [r0, #8]
 8009952:	6006      	str	r6, [r0, #0]
 8009954:	60c6      	str	r6, [r0, #12]
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	6819      	ldr	r1, [r3, #0]
 800995c:	2900      	cmp	r1, #0
 800995e:	d00b      	beq.n	8009978 <_dtoa_r+0x58>
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	2301      	movs	r3, #1
 8009964:	4093      	lsls	r3, r2
 8009966:	604a      	str	r2, [r1, #4]
 8009968:	608b      	str	r3, [r1, #8]
 800996a:	9803      	ldr	r0, [sp, #12]
 800996c:	f000 ff12 	bl	800a794 <_Bfree>
 8009970:	2200      	movs	r2, #0
 8009972:	9b03      	ldr	r3, [sp, #12]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	2d00      	cmp	r5, #0
 800997a:	da1e      	bge.n	80099ba <_dtoa_r+0x9a>
 800997c:	2301      	movs	r3, #1
 800997e:	603b      	str	r3, [r7, #0]
 8009980:	006b      	lsls	r3, r5, #1
 8009982:	085b      	lsrs	r3, r3, #1
 8009984:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009986:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009988:	4bb8      	ldr	r3, [pc, #736]	@ (8009c6c <_dtoa_r+0x34c>)
 800998a:	4ab8      	ldr	r2, [pc, #736]	@ (8009c6c <_dtoa_r+0x34c>)
 800998c:	403b      	ands	r3, r7
 800998e:	4293      	cmp	r3, r2
 8009990:	d116      	bne.n	80099c0 <_dtoa_r+0xa0>
 8009992:	4bb7      	ldr	r3, [pc, #732]	@ (8009c70 <_dtoa_r+0x350>)
 8009994:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	033b      	lsls	r3, r7, #12
 800999a:	0b1b      	lsrs	r3, r3, #12
 800999c:	4323      	orrs	r3, r4
 800999e:	d101      	bne.n	80099a4 <_dtoa_r+0x84>
 80099a0:	f000 fd80 	bl	800a4a4 <_dtoa_r+0xb84>
 80099a4:	4bb3      	ldr	r3, [pc, #716]	@ (8009c74 <_dtoa_r+0x354>)
 80099a6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80099a8:	9308      	str	r3, [sp, #32]
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	d002      	beq.n	80099b4 <_dtoa_r+0x94>
 80099ae:	4bb2      	ldr	r3, [pc, #712]	@ (8009c78 <_dtoa_r+0x358>)
 80099b0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	9808      	ldr	r0, [sp, #32]
 80099b6:	b01d      	add	sp, #116	@ 0x74
 80099b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ba:	2300      	movs	r3, #0
 80099bc:	603b      	str	r3, [r7, #0]
 80099be:	e7e2      	b.n	8009986 <_dtoa_r+0x66>
 80099c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099c4:	9212      	str	r2, [sp, #72]	@ 0x48
 80099c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099c8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80099ca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80099cc:	2200      	movs	r2, #0
 80099ce:	2300      	movs	r3, #0
 80099d0:	f7f6 fd3c 	bl	800044c <__aeabi_dcmpeq>
 80099d4:	1e06      	subs	r6, r0, #0
 80099d6:	d00b      	beq.n	80099f0 <_dtoa_r+0xd0>
 80099d8:	2301      	movs	r3, #1
 80099da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <_dtoa_r+0xca>
 80099e4:	4ba5      	ldr	r3, [pc, #660]	@ (8009c7c <_dtoa_r+0x35c>)
 80099e6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80099e8:	6013      	str	r3, [r2, #0]
 80099ea:	4ba5      	ldr	r3, [pc, #660]	@ (8009c80 <_dtoa_r+0x360>)
 80099ec:	9308      	str	r3, [sp, #32]
 80099ee:	e7e1      	b.n	80099b4 <_dtoa_r+0x94>
 80099f0:	ab1a      	add	r3, sp, #104	@ 0x68
 80099f2:	9301      	str	r3, [sp, #4]
 80099f4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	9803      	ldr	r0, [sp, #12]
 80099fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80099fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099fe:	f001 f9c1 	bl	800ad84 <__d2b>
 8009a02:	007a      	lsls	r2, r7, #1
 8009a04:	9005      	str	r0, [sp, #20]
 8009a06:	0d52      	lsrs	r2, r2, #21
 8009a08:	d100      	bne.n	8009a0c <_dtoa_r+0xec>
 8009a0a:	e07b      	b.n	8009b04 <_dtoa_r+0x1e4>
 8009a0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a0e:	9618      	str	r6, [sp, #96]	@ 0x60
 8009a10:	0319      	lsls	r1, r3, #12
 8009a12:	4b9c      	ldr	r3, [pc, #624]	@ (8009c84 <_dtoa_r+0x364>)
 8009a14:	0b09      	lsrs	r1, r1, #12
 8009a16:	430b      	orrs	r3, r1
 8009a18:	499b      	ldr	r1, [pc, #620]	@ (8009c88 <_dtoa_r+0x368>)
 8009a1a:	1857      	adds	r7, r2, r1
 8009a1c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009a1e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009a20:	0019      	movs	r1, r3
 8009a22:	2200      	movs	r2, #0
 8009a24:	4b99      	ldr	r3, [pc, #612]	@ (8009c8c <_dtoa_r+0x36c>)
 8009a26:	f7f9 f893 	bl	8002b50 <__aeabi_dsub>
 8009a2a:	4a99      	ldr	r2, [pc, #612]	@ (8009c90 <_dtoa_r+0x370>)
 8009a2c:	4b99      	ldr	r3, [pc, #612]	@ (8009c94 <_dtoa_r+0x374>)
 8009a2e:	f7f8 fda9 	bl	8002584 <__aeabi_dmul>
 8009a32:	4a99      	ldr	r2, [pc, #612]	@ (8009c98 <_dtoa_r+0x378>)
 8009a34:	4b99      	ldr	r3, [pc, #612]	@ (8009c9c <_dtoa_r+0x37c>)
 8009a36:	f7f7 fda5 	bl	8001584 <__aeabi_dadd>
 8009a3a:	0004      	movs	r4, r0
 8009a3c:	0038      	movs	r0, r7
 8009a3e:	000d      	movs	r5, r1
 8009a40:	f7f9 fcee 	bl	8003420 <__aeabi_i2d>
 8009a44:	4a96      	ldr	r2, [pc, #600]	@ (8009ca0 <_dtoa_r+0x380>)
 8009a46:	4b97      	ldr	r3, [pc, #604]	@ (8009ca4 <_dtoa_r+0x384>)
 8009a48:	f7f8 fd9c 	bl	8002584 <__aeabi_dmul>
 8009a4c:	0002      	movs	r2, r0
 8009a4e:	000b      	movs	r3, r1
 8009a50:	0020      	movs	r0, r4
 8009a52:	0029      	movs	r1, r5
 8009a54:	f7f7 fd96 	bl	8001584 <__aeabi_dadd>
 8009a58:	0004      	movs	r4, r0
 8009a5a:	000d      	movs	r5, r1
 8009a5c:	f7f9 fca4 	bl	80033a8 <__aeabi_d2iz>
 8009a60:	2200      	movs	r2, #0
 8009a62:	9004      	str	r0, [sp, #16]
 8009a64:	2300      	movs	r3, #0
 8009a66:	0020      	movs	r0, r4
 8009a68:	0029      	movs	r1, r5
 8009a6a:	f7f6 fcf5 	bl	8000458 <__aeabi_dcmplt>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d00b      	beq.n	8009a8a <_dtoa_r+0x16a>
 8009a72:	9804      	ldr	r0, [sp, #16]
 8009a74:	f7f9 fcd4 	bl	8003420 <__aeabi_i2d>
 8009a78:	002b      	movs	r3, r5
 8009a7a:	0022      	movs	r2, r4
 8009a7c:	f7f6 fce6 	bl	800044c <__aeabi_dcmpeq>
 8009a80:	4243      	negs	r3, r0
 8009a82:	4158      	adcs	r0, r3
 8009a84:	9b04      	ldr	r3, [sp, #16]
 8009a86:	1a1b      	subs	r3, r3, r0
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a8e:	9b04      	ldr	r3, [sp, #16]
 8009a90:	2b16      	cmp	r3, #22
 8009a92:	d810      	bhi.n	8009ab6 <_dtoa_r+0x196>
 8009a94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009a96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009a98:	9a04      	ldr	r2, [sp, #16]
 8009a9a:	4b83      	ldr	r3, [pc, #524]	@ (8009ca8 <_dtoa_r+0x388>)
 8009a9c:	00d2      	lsls	r2, r2, #3
 8009a9e:	189b      	adds	r3, r3, r2
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f7f6 fcd8 	bl	8000458 <__aeabi_dcmplt>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d047      	beq.n	8009b3c <_dtoa_r+0x21c>
 8009aac:	9b04      	ldr	r3, [sp, #16]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	9304      	str	r3, [sp, #16]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009aba:	9206      	str	r2, [sp, #24]
 8009abc:	1bdb      	subs	r3, r3, r7
 8009abe:	1e5a      	subs	r2, r3, #1
 8009ac0:	d53e      	bpl.n	8009b40 <_dtoa_r+0x220>
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	9306      	str	r3, [sp, #24]
 8009ac8:	2300      	movs	r3, #0
 8009aca:	930d      	str	r3, [sp, #52]	@ 0x34
 8009acc:	9b04      	ldr	r3, [sp, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	db38      	blt.n	8009b44 <_dtoa_r+0x224>
 8009ad2:	9a04      	ldr	r2, [sp, #16]
 8009ad4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ad6:	4694      	mov	ip, r2
 8009ad8:	4463      	add	r3, ip
 8009ada:	930d      	str	r3, [sp, #52]	@ 0x34
 8009adc:	2300      	movs	r3, #0
 8009ade:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ae0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ae2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009ae4:	2401      	movs	r4, #1
 8009ae6:	2b09      	cmp	r3, #9
 8009ae8:	d862      	bhi.n	8009bb0 <_dtoa_r+0x290>
 8009aea:	2b05      	cmp	r3, #5
 8009aec:	dd02      	ble.n	8009af4 <_dtoa_r+0x1d4>
 8009aee:	2400      	movs	r4, #0
 8009af0:	3b04      	subs	r3, #4
 8009af2:	9322      	str	r3, [sp, #136]	@ 0x88
 8009af4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009af6:	1e98      	subs	r0, r3, #2
 8009af8:	2803      	cmp	r0, #3
 8009afa:	d863      	bhi.n	8009bc4 <_dtoa_r+0x2a4>
 8009afc:	f7f6 fb0c 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009b00:	2b385654 	.word	0x2b385654
 8009b04:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009b06:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8009b08:	18f6      	adds	r6, r6, r3
 8009b0a:	4b68      	ldr	r3, [pc, #416]	@ (8009cac <_dtoa_r+0x38c>)
 8009b0c:	18f2      	adds	r2, r6, r3
 8009b0e:	2a20      	cmp	r2, #32
 8009b10:	dd0f      	ble.n	8009b32 <_dtoa_r+0x212>
 8009b12:	2340      	movs	r3, #64	@ 0x40
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	409f      	lsls	r7, r3
 8009b18:	4b65      	ldr	r3, [pc, #404]	@ (8009cb0 <_dtoa_r+0x390>)
 8009b1a:	0038      	movs	r0, r7
 8009b1c:	18f3      	adds	r3, r6, r3
 8009b1e:	40dc      	lsrs	r4, r3
 8009b20:	4320      	orrs	r0, r4
 8009b22:	f7f9 fcab 	bl	800347c <__aeabi_ui2d>
 8009b26:	2201      	movs	r2, #1
 8009b28:	4b62      	ldr	r3, [pc, #392]	@ (8009cb4 <_dtoa_r+0x394>)
 8009b2a:	1e77      	subs	r7, r6, #1
 8009b2c:	18cb      	adds	r3, r1, r3
 8009b2e:	9218      	str	r2, [sp, #96]	@ 0x60
 8009b30:	e776      	b.n	8009a20 <_dtoa_r+0x100>
 8009b32:	2320      	movs	r3, #32
 8009b34:	0020      	movs	r0, r4
 8009b36:	1a9b      	subs	r3, r3, r2
 8009b38:	4098      	lsls	r0, r3
 8009b3a:	e7f2      	b.n	8009b22 <_dtoa_r+0x202>
 8009b3c:	9015      	str	r0, [sp, #84]	@ 0x54
 8009b3e:	e7ba      	b.n	8009ab6 <_dtoa_r+0x196>
 8009b40:	920d      	str	r2, [sp, #52]	@ 0x34
 8009b42:	e7c3      	b.n	8009acc <_dtoa_r+0x1ac>
 8009b44:	9b06      	ldr	r3, [sp, #24]
 8009b46:	9a04      	ldr	r2, [sp, #16]
 8009b48:	1a9b      	subs	r3, r3, r2
 8009b4a:	9306      	str	r3, [sp, #24]
 8009b4c:	4253      	negs	r3, r2
 8009b4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b50:	2300      	movs	r3, #0
 8009b52:	9314      	str	r3, [sp, #80]	@ 0x50
 8009b54:	e7c5      	b.n	8009ae2 <_dtoa_r+0x1c2>
 8009b56:	2301      	movs	r3, #1
 8009b58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009b5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b5c:	4694      	mov	ip, r2
 8009b5e:	9b04      	ldr	r3, [sp, #16]
 8009b60:	4463      	add	r3, ip
 8009b62:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b64:	3301      	adds	r3, #1
 8009b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	dc08      	bgt.n	8009b7e <_dtoa_r+0x25e>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e006      	b.n	8009b7e <_dtoa_r+0x25e>
 8009b70:	2301      	movs	r3, #1
 8009b72:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	dd28      	ble.n	8009bcc <_dtoa_r+0x2ac>
 8009b7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b7e:	9a03      	ldr	r2, [sp, #12]
 8009b80:	2100      	movs	r1, #0
 8009b82:	69d0      	ldr	r0, [r2, #28]
 8009b84:	2204      	movs	r2, #4
 8009b86:	0015      	movs	r5, r2
 8009b88:	3514      	adds	r5, #20
 8009b8a:	429d      	cmp	r5, r3
 8009b8c:	d923      	bls.n	8009bd6 <_dtoa_r+0x2b6>
 8009b8e:	6041      	str	r1, [r0, #4]
 8009b90:	9803      	ldr	r0, [sp, #12]
 8009b92:	f000 fdbb 	bl	800a70c <_Balloc>
 8009b96:	9008      	str	r0, [sp, #32]
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d11f      	bne.n	8009bdc <_dtoa_r+0x2bc>
 8009b9c:	21b0      	movs	r1, #176	@ 0xb0
 8009b9e:	4b46      	ldr	r3, [pc, #280]	@ (8009cb8 <_dtoa_r+0x398>)
 8009ba0:	4831      	ldr	r0, [pc, #196]	@ (8009c68 <_dtoa_r+0x348>)
 8009ba2:	9a08      	ldr	r2, [sp, #32]
 8009ba4:	31ff      	adds	r1, #255	@ 0xff
 8009ba6:	e6d0      	b.n	800994a <_dtoa_r+0x2a>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	e7e2      	b.n	8009b72 <_dtoa_r+0x252>
 8009bac:	2300      	movs	r3, #0
 8009bae:	e7d3      	b.n	8009b58 <_dtoa_r+0x238>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	9410      	str	r4, [sp, #64]	@ 0x40
 8009bb4:	9322      	str	r3, [sp, #136]	@ 0x88
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	2200      	movs	r2, #0
 8009bba:	930e      	str	r3, [sp, #56]	@ 0x38
 8009bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bbe:	3313      	adds	r3, #19
 8009bc0:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009bc2:	e7dc      	b.n	8009b7e <_dtoa_r+0x25e>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bc8:	3b02      	subs	r3, #2
 8009bca:	e7f5      	b.n	8009bb8 <_dtoa_r+0x298>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	001a      	movs	r2, r3
 8009bd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8009bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bd4:	e7f4      	b.n	8009bc0 <_dtoa_r+0x2a0>
 8009bd6:	3101      	adds	r1, #1
 8009bd8:	0052      	lsls	r2, r2, #1
 8009bda:	e7d4      	b.n	8009b86 <_dtoa_r+0x266>
 8009bdc:	9b03      	ldr	r3, [sp, #12]
 8009bde:	9a08      	ldr	r2, [sp, #32]
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be6:	2b0e      	cmp	r3, #14
 8009be8:	d900      	bls.n	8009bec <_dtoa_r+0x2cc>
 8009bea:	e0d6      	b.n	8009d9a <_dtoa_r+0x47a>
 8009bec:	2c00      	cmp	r4, #0
 8009bee:	d100      	bne.n	8009bf2 <_dtoa_r+0x2d2>
 8009bf0:	e0d3      	b.n	8009d9a <_dtoa_r+0x47a>
 8009bf2:	9b04      	ldr	r3, [sp, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dd63      	ble.n	8009cc0 <_dtoa_r+0x3a0>
 8009bf8:	210f      	movs	r1, #15
 8009bfa:	9a04      	ldr	r2, [sp, #16]
 8009bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8009ca8 <_dtoa_r+0x388>)
 8009bfe:	400a      	ands	r2, r1
 8009c00:	00d2      	lsls	r2, r2, #3
 8009c02:	189b      	adds	r3, r3, r2
 8009c04:	681e      	ldr	r6, [r3, #0]
 8009c06:	685f      	ldr	r7, [r3, #4]
 8009c08:	9b04      	ldr	r3, [sp, #16]
 8009c0a:	2402      	movs	r4, #2
 8009c0c:	111d      	asrs	r5, r3, #4
 8009c0e:	05db      	lsls	r3, r3, #23
 8009c10:	d50a      	bpl.n	8009c28 <_dtoa_r+0x308>
 8009c12:	4b2a      	ldr	r3, [pc, #168]	@ (8009cbc <_dtoa_r+0x39c>)
 8009c14:	400d      	ands	r5, r1
 8009c16:	6a1a      	ldr	r2, [r3, #32]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c1a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009c1c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009c1e:	f7f8 f877 	bl	8001d10 <__aeabi_ddiv>
 8009c22:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009c26:	3401      	adds	r4, #1
 8009c28:	4b24      	ldr	r3, [pc, #144]	@ (8009cbc <_dtoa_r+0x39c>)
 8009c2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c2c:	2d00      	cmp	r5, #0
 8009c2e:	d108      	bne.n	8009c42 <_dtoa_r+0x322>
 8009c30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c34:	0032      	movs	r2, r6
 8009c36:	003b      	movs	r3, r7
 8009c38:	f7f8 f86a 	bl	8001d10 <__aeabi_ddiv>
 8009c3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c3e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009c40:	e059      	b.n	8009cf6 <_dtoa_r+0x3d6>
 8009c42:	2301      	movs	r3, #1
 8009c44:	421d      	tst	r5, r3
 8009c46:	d009      	beq.n	8009c5c <_dtoa_r+0x33c>
 8009c48:	18e4      	adds	r4, r4, r3
 8009c4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c4c:	0030      	movs	r0, r6
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	0039      	movs	r1, r7
 8009c54:	f7f8 fc96 	bl	8002584 <__aeabi_dmul>
 8009c58:	0006      	movs	r6, r0
 8009c5a:	000f      	movs	r7, r1
 8009c5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c5e:	106d      	asrs	r5, r5, #1
 8009c60:	3308      	adds	r3, #8
 8009c62:	e7e2      	b.n	8009c2a <_dtoa_r+0x30a>
 8009c64:	0800e3d5 	.word	0x0800e3d5
 8009c68:	0800e3ec 	.word	0x0800e3ec
 8009c6c:	7ff00000 	.word	0x7ff00000
 8009c70:	0000270f 	.word	0x0000270f
 8009c74:	0800e3d1 	.word	0x0800e3d1
 8009c78:	0800e3d4 	.word	0x0800e3d4
 8009c7c:	0800e3a5 	.word	0x0800e3a5
 8009c80:	0800e3a4 	.word	0x0800e3a4
 8009c84:	3ff00000 	.word	0x3ff00000
 8009c88:	fffffc01 	.word	0xfffffc01
 8009c8c:	3ff80000 	.word	0x3ff80000
 8009c90:	636f4361 	.word	0x636f4361
 8009c94:	3fd287a7 	.word	0x3fd287a7
 8009c98:	8b60c8b3 	.word	0x8b60c8b3
 8009c9c:	3fc68a28 	.word	0x3fc68a28
 8009ca0:	509f79fb 	.word	0x509f79fb
 8009ca4:	3fd34413 	.word	0x3fd34413
 8009ca8:	0800e540 	.word	0x0800e540
 8009cac:	00000432 	.word	0x00000432
 8009cb0:	00000412 	.word	0x00000412
 8009cb4:	fe100000 	.word	0xfe100000
 8009cb8:	0800e444 	.word	0x0800e444
 8009cbc:	0800e518 	.word	0x0800e518
 8009cc0:	9b04      	ldr	r3, [sp, #16]
 8009cc2:	2402      	movs	r4, #2
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d016      	beq.n	8009cf6 <_dtoa_r+0x3d6>
 8009cc8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009cca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009ccc:	220f      	movs	r2, #15
 8009cce:	425d      	negs	r5, r3
 8009cd0:	402a      	ands	r2, r5
 8009cd2:	4bd5      	ldr	r3, [pc, #852]	@ (800a028 <_dtoa_r+0x708>)
 8009cd4:	00d2      	lsls	r2, r2, #3
 8009cd6:	189b      	adds	r3, r3, r2
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f7f8 fc52 	bl	8002584 <__aeabi_dmul>
 8009ce0:	2701      	movs	r7, #1
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ce6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ce8:	4ed0      	ldr	r6, [pc, #832]	@ (800a02c <_dtoa_r+0x70c>)
 8009cea:	112d      	asrs	r5, r5, #4
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	d000      	beq.n	8009cf2 <_dtoa_r+0x3d2>
 8009cf0:	e095      	b.n	8009e1e <_dtoa_r+0x4fe>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1a2      	bne.n	8009c3c <_dtoa_r+0x31c>
 8009cf6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009cf8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009cfa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d100      	bne.n	8009d02 <_dtoa_r+0x3e2>
 8009d00:	e098      	b.n	8009e34 <_dtoa_r+0x514>
 8009d02:	2200      	movs	r2, #0
 8009d04:	0030      	movs	r0, r6
 8009d06:	0039      	movs	r1, r7
 8009d08:	4bc9      	ldr	r3, [pc, #804]	@ (800a030 <_dtoa_r+0x710>)
 8009d0a:	f7f6 fba5 	bl	8000458 <__aeabi_dcmplt>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d100      	bne.n	8009d14 <_dtoa_r+0x3f4>
 8009d12:	e08f      	b.n	8009e34 <_dtoa_r+0x514>
 8009d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d100      	bne.n	8009d1c <_dtoa_r+0x3fc>
 8009d1a:	e08b      	b.n	8009e34 <_dtoa_r+0x514>
 8009d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	dd37      	ble.n	8009d92 <_dtoa_r+0x472>
 8009d22:	9b04      	ldr	r3, [sp, #16]
 8009d24:	2200      	movs	r2, #0
 8009d26:	3b01      	subs	r3, #1
 8009d28:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d2a:	0030      	movs	r0, r6
 8009d2c:	4bc1      	ldr	r3, [pc, #772]	@ (800a034 <_dtoa_r+0x714>)
 8009d2e:	0039      	movs	r1, r7
 8009d30:	f7f8 fc28 	bl	8002584 <__aeabi_dmul>
 8009d34:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d36:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d3a:	3401      	adds	r4, #1
 8009d3c:	0020      	movs	r0, r4
 8009d3e:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d40:	f7f9 fb6e 	bl	8003420 <__aeabi_i2d>
 8009d44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d48:	f7f8 fc1c 	bl	8002584 <__aeabi_dmul>
 8009d4c:	4bba      	ldr	r3, [pc, #744]	@ (800a038 <_dtoa_r+0x718>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f7f7 fc18 	bl	8001584 <__aeabi_dadd>
 8009d54:	4bb9      	ldr	r3, [pc, #740]	@ (800a03c <_dtoa_r+0x71c>)
 8009d56:	0006      	movs	r6, r0
 8009d58:	18cf      	adds	r7, r1, r3
 8009d5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d16d      	bne.n	8009e3c <_dtoa_r+0x51c>
 8009d60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009d62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d64:	2200      	movs	r2, #0
 8009d66:	4bb6      	ldr	r3, [pc, #728]	@ (800a040 <_dtoa_r+0x720>)
 8009d68:	f7f8 fef2 	bl	8002b50 <__aeabi_dsub>
 8009d6c:	0032      	movs	r2, r6
 8009d6e:	003b      	movs	r3, r7
 8009d70:	0004      	movs	r4, r0
 8009d72:	000d      	movs	r5, r1
 8009d74:	f7f6 fb84 	bl	8000480 <__aeabi_dcmpgt>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d000      	beq.n	8009d7e <_dtoa_r+0x45e>
 8009d7c:	e2b6      	b.n	800a2ec <_dtoa_r+0x9cc>
 8009d7e:	2180      	movs	r1, #128	@ 0x80
 8009d80:	0609      	lsls	r1, r1, #24
 8009d82:	187b      	adds	r3, r7, r1
 8009d84:	0032      	movs	r2, r6
 8009d86:	0020      	movs	r0, r4
 8009d88:	0029      	movs	r1, r5
 8009d8a:	f7f6 fb65 	bl	8000458 <__aeabi_dcmplt>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d128      	bne.n	8009de4 <_dtoa_r+0x4c4>
 8009d92:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d94:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d98:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009d9a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	da00      	bge.n	8009da2 <_dtoa_r+0x482>
 8009da0:	e174      	b.n	800a08c <_dtoa_r+0x76c>
 8009da2:	9a04      	ldr	r2, [sp, #16]
 8009da4:	2a0e      	cmp	r2, #14
 8009da6:	dd00      	ble.n	8009daa <_dtoa_r+0x48a>
 8009da8:	e170      	b.n	800a08c <_dtoa_r+0x76c>
 8009daa:	4b9f      	ldr	r3, [pc, #636]	@ (800a028 <_dtoa_r+0x708>)
 8009dac:	00d2      	lsls	r2, r2, #3
 8009dae:	189b      	adds	r3, r3, r2
 8009db0:	685c      	ldr	r4, [r3, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	9306      	str	r3, [sp, #24]
 8009db6:	9407      	str	r4, [sp, #28]
 8009db8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	db00      	blt.n	8009dc0 <_dtoa_r+0x4a0>
 8009dbe:	e0e7      	b.n	8009f90 <_dtoa_r+0x670>
 8009dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	dd00      	ble.n	8009dc8 <_dtoa_r+0x4a8>
 8009dc6:	e0e3      	b.n	8009f90 <_dtoa_r+0x670>
 8009dc8:	d10c      	bne.n	8009de4 <_dtoa_r+0x4c4>
 8009dca:	9806      	ldr	r0, [sp, #24]
 8009dcc:	9907      	ldr	r1, [sp, #28]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	4b9b      	ldr	r3, [pc, #620]	@ (800a040 <_dtoa_r+0x720>)
 8009dd2:	f7f8 fbd7 	bl	8002584 <__aeabi_dmul>
 8009dd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009dd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dda:	f7f6 fb5b 	bl	8000494 <__aeabi_dcmpge>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d100      	bne.n	8009de4 <_dtoa_r+0x4c4>
 8009de2:	e286      	b.n	800a2f2 <_dtoa_r+0x9d2>
 8009de4:	2600      	movs	r6, #0
 8009de6:	0037      	movs	r7, r6
 8009de8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dea:	9c08      	ldr	r4, [sp, #32]
 8009dec:	43db      	mvns	r3, r3
 8009dee:	930c      	str	r3, [sp, #48]	@ 0x30
 8009df0:	9704      	str	r7, [sp, #16]
 8009df2:	2700      	movs	r7, #0
 8009df4:	0031      	movs	r1, r6
 8009df6:	9803      	ldr	r0, [sp, #12]
 8009df8:	f000 fccc 	bl	800a794 <_Bfree>
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d100      	bne.n	8009e04 <_dtoa_r+0x4e4>
 8009e02:	e0bb      	b.n	8009f7c <_dtoa_r+0x65c>
 8009e04:	2f00      	cmp	r7, #0
 8009e06:	d005      	beq.n	8009e14 <_dtoa_r+0x4f4>
 8009e08:	429f      	cmp	r7, r3
 8009e0a:	d003      	beq.n	8009e14 <_dtoa_r+0x4f4>
 8009e0c:	0039      	movs	r1, r7
 8009e0e:	9803      	ldr	r0, [sp, #12]
 8009e10:	f000 fcc0 	bl	800a794 <_Bfree>
 8009e14:	9904      	ldr	r1, [sp, #16]
 8009e16:	9803      	ldr	r0, [sp, #12]
 8009e18:	f000 fcbc 	bl	800a794 <_Bfree>
 8009e1c:	e0ae      	b.n	8009f7c <_dtoa_r+0x65c>
 8009e1e:	423d      	tst	r5, r7
 8009e20:	d005      	beq.n	8009e2e <_dtoa_r+0x50e>
 8009e22:	6832      	ldr	r2, [r6, #0]
 8009e24:	6873      	ldr	r3, [r6, #4]
 8009e26:	f7f8 fbad 	bl	8002584 <__aeabi_dmul>
 8009e2a:	003b      	movs	r3, r7
 8009e2c:	3401      	adds	r4, #1
 8009e2e:	106d      	asrs	r5, r5, #1
 8009e30:	3608      	adds	r6, #8
 8009e32:	e75b      	b.n	8009cec <_dtoa_r+0x3cc>
 8009e34:	9b04      	ldr	r3, [sp, #16]
 8009e36:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e3a:	e77f      	b.n	8009d3c <_dtoa_r+0x41c>
 8009e3c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e3e:	4b7a      	ldr	r3, [pc, #488]	@ (800a028 <_dtoa_r+0x708>)
 8009e40:	3a01      	subs	r2, #1
 8009e42:	00d2      	lsls	r2, r2, #3
 8009e44:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009e46:	189b      	adds	r3, r3, r2
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	d04c      	beq.n	8009eea <_dtoa_r+0x5ca>
 8009e50:	2000      	movs	r0, #0
 8009e52:	497c      	ldr	r1, [pc, #496]	@ (800a044 <_dtoa_r+0x724>)
 8009e54:	f7f7 ff5c 	bl	8001d10 <__aeabi_ddiv>
 8009e58:	0032      	movs	r2, r6
 8009e5a:	003b      	movs	r3, r7
 8009e5c:	f7f8 fe78 	bl	8002b50 <__aeabi_dsub>
 8009e60:	9a08      	ldr	r2, [sp, #32]
 8009e62:	0006      	movs	r6, r0
 8009e64:	4694      	mov	ip, r2
 8009e66:	000f      	movs	r7, r1
 8009e68:	9b08      	ldr	r3, [sp, #32]
 8009e6a:	9316      	str	r3, [sp, #88]	@ 0x58
 8009e6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e6e:	4463      	add	r3, ip
 8009e70:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e76:	f7f9 fa97 	bl	80033a8 <__aeabi_d2iz>
 8009e7a:	0005      	movs	r5, r0
 8009e7c:	f7f9 fad0 	bl	8003420 <__aeabi_i2d>
 8009e80:	0002      	movs	r2, r0
 8009e82:	000b      	movs	r3, r1
 8009e84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e86:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e88:	f7f8 fe62 	bl	8002b50 <__aeabi_dsub>
 8009e8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e8e:	3530      	adds	r5, #48	@ 0x30
 8009e90:	1c5c      	adds	r4, r3, #1
 8009e92:	701d      	strb	r5, [r3, #0]
 8009e94:	0032      	movs	r2, r6
 8009e96:	003b      	movs	r3, r7
 8009e98:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e9a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e9c:	f7f6 fadc 	bl	8000458 <__aeabi_dcmplt>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d16b      	bne.n	8009f7c <_dtoa_r+0x65c>
 8009ea4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	4961      	ldr	r1, [pc, #388]	@ (800a030 <_dtoa_r+0x710>)
 8009eac:	f7f8 fe50 	bl	8002b50 <__aeabi_dsub>
 8009eb0:	0032      	movs	r2, r6
 8009eb2:	003b      	movs	r3, r7
 8009eb4:	f7f6 fad0 	bl	8000458 <__aeabi_dcmplt>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d000      	beq.n	8009ebe <_dtoa_r+0x59e>
 8009ebc:	e0c6      	b.n	800a04c <_dtoa_r+0x72c>
 8009ebe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d100      	bne.n	8009ec6 <_dtoa_r+0x5a6>
 8009ec4:	e765      	b.n	8009d92 <_dtoa_r+0x472>
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	0030      	movs	r0, r6
 8009eca:	0039      	movs	r1, r7
 8009ecc:	4b59      	ldr	r3, [pc, #356]	@ (800a034 <_dtoa_r+0x714>)
 8009ece:	f7f8 fb59 	bl	8002584 <__aeabi_dmul>
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	0006      	movs	r6, r0
 8009ed6:	000f      	movs	r7, r1
 8009ed8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009eda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009edc:	4b55      	ldr	r3, [pc, #340]	@ (800a034 <_dtoa_r+0x714>)
 8009ede:	f7f8 fb51 	bl	8002584 <__aeabi_dmul>
 8009ee2:	9416      	str	r4, [sp, #88]	@ 0x58
 8009ee4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ee6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ee8:	e7c3      	b.n	8009e72 <_dtoa_r+0x552>
 8009eea:	0030      	movs	r0, r6
 8009eec:	0039      	movs	r1, r7
 8009eee:	f7f8 fb49 	bl	8002584 <__aeabi_dmul>
 8009ef2:	9d08      	ldr	r5, [sp, #32]
 8009ef4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009ef6:	002b      	movs	r3, r5
 8009ef8:	4694      	mov	ip, r2
 8009efa:	9016      	str	r0, [sp, #88]	@ 0x58
 8009efc:	9117      	str	r1, [sp, #92]	@ 0x5c
 8009efe:	4463      	add	r3, ip
 8009f00:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f02:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009f04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f06:	f7f9 fa4f 	bl	80033a8 <__aeabi_d2iz>
 8009f0a:	0004      	movs	r4, r0
 8009f0c:	f7f9 fa88 	bl	8003420 <__aeabi_i2d>
 8009f10:	000b      	movs	r3, r1
 8009f12:	0002      	movs	r2, r0
 8009f14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009f16:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f18:	f7f8 fe1a 	bl	8002b50 <__aeabi_dsub>
 8009f1c:	3430      	adds	r4, #48	@ 0x30
 8009f1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f20:	702c      	strb	r4, [r5, #0]
 8009f22:	3501      	adds	r5, #1
 8009f24:	0006      	movs	r6, r0
 8009f26:	000f      	movs	r7, r1
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	d12a      	bne.n	8009f82 <_dtoa_r+0x662>
 8009f2c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8009f2e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009f30:	9b08      	ldr	r3, [sp, #32]
 8009f32:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009f34:	469c      	mov	ip, r3
 8009f36:	2200      	movs	r2, #0
 8009f38:	4b42      	ldr	r3, [pc, #264]	@ (800a044 <_dtoa_r+0x724>)
 8009f3a:	4464      	add	r4, ip
 8009f3c:	f7f7 fb22 	bl	8001584 <__aeabi_dadd>
 8009f40:	0002      	movs	r2, r0
 8009f42:	000b      	movs	r3, r1
 8009f44:	0030      	movs	r0, r6
 8009f46:	0039      	movs	r1, r7
 8009f48:	f7f6 fa9a 	bl	8000480 <__aeabi_dcmpgt>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d000      	beq.n	8009f52 <_dtoa_r+0x632>
 8009f50:	e07c      	b.n	800a04c <_dtoa_r+0x72c>
 8009f52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f56:	2000      	movs	r0, #0
 8009f58:	493a      	ldr	r1, [pc, #232]	@ (800a044 <_dtoa_r+0x724>)
 8009f5a:	f7f8 fdf9 	bl	8002b50 <__aeabi_dsub>
 8009f5e:	0002      	movs	r2, r0
 8009f60:	000b      	movs	r3, r1
 8009f62:	0030      	movs	r0, r6
 8009f64:	0039      	movs	r1, r7
 8009f66:	f7f6 fa77 	bl	8000458 <__aeabi_dcmplt>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d100      	bne.n	8009f70 <_dtoa_r+0x650>
 8009f6e:	e710      	b.n	8009d92 <_dtoa_r+0x472>
 8009f70:	0023      	movs	r3, r4
 8009f72:	3c01      	subs	r4, #1
 8009f74:	7822      	ldrb	r2, [r4, #0]
 8009f76:	2a30      	cmp	r2, #48	@ 0x30
 8009f78:	d0fa      	beq.n	8009f70 <_dtoa_r+0x650>
 8009f7a:	001c      	movs	r4, r3
 8009f7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	e042      	b.n	800a008 <_dtoa_r+0x6e8>
 8009f82:	2200      	movs	r2, #0
 8009f84:	4b2b      	ldr	r3, [pc, #172]	@ (800a034 <_dtoa_r+0x714>)
 8009f86:	f7f8 fafd 	bl	8002584 <__aeabi_dmul>
 8009f8a:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009f8e:	e7b8      	b.n	8009f02 <_dtoa_r+0x5e2>
 8009f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f92:	9d08      	ldr	r5, [sp, #32]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	195b      	adds	r3, r3, r5
 8009f98:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009f9a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009f9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f9e:	9a06      	ldr	r2, [sp, #24]
 8009fa0:	9b07      	ldr	r3, [sp, #28]
 8009fa2:	0030      	movs	r0, r6
 8009fa4:	0039      	movs	r1, r7
 8009fa6:	f7f7 feb3 	bl	8001d10 <__aeabi_ddiv>
 8009faa:	f7f9 f9fd 	bl	80033a8 <__aeabi_d2iz>
 8009fae:	9009      	str	r0, [sp, #36]	@ 0x24
 8009fb0:	f7f9 fa36 	bl	8003420 <__aeabi_i2d>
 8009fb4:	9a06      	ldr	r2, [sp, #24]
 8009fb6:	9b07      	ldr	r3, [sp, #28]
 8009fb8:	f7f8 fae4 	bl	8002584 <__aeabi_dmul>
 8009fbc:	0002      	movs	r2, r0
 8009fbe:	000b      	movs	r3, r1
 8009fc0:	0030      	movs	r0, r6
 8009fc2:	0039      	movs	r1, r7
 8009fc4:	f7f8 fdc4 	bl	8002b50 <__aeabi_dsub>
 8009fc8:	002b      	movs	r3, r5
 8009fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fcc:	3501      	adds	r5, #1
 8009fce:	3230      	adds	r2, #48	@ 0x30
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fd4:	002c      	movs	r4, r5
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d14b      	bne.n	800a072 <_dtoa_r+0x752>
 8009fda:	0002      	movs	r2, r0
 8009fdc:	000b      	movs	r3, r1
 8009fde:	f7f7 fad1 	bl	8001584 <__aeabi_dadd>
 8009fe2:	9a06      	ldr	r2, [sp, #24]
 8009fe4:	9b07      	ldr	r3, [sp, #28]
 8009fe6:	0006      	movs	r6, r0
 8009fe8:	000f      	movs	r7, r1
 8009fea:	f7f6 fa49 	bl	8000480 <__aeabi_dcmpgt>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d12a      	bne.n	800a048 <_dtoa_r+0x728>
 8009ff2:	9a06      	ldr	r2, [sp, #24]
 8009ff4:	9b07      	ldr	r3, [sp, #28]
 8009ff6:	0030      	movs	r0, r6
 8009ff8:	0039      	movs	r1, r7
 8009ffa:	f7f6 fa27 	bl	800044c <__aeabi_dcmpeq>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d002      	beq.n	800a008 <_dtoa_r+0x6e8>
 800a002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a004:	07dd      	lsls	r5, r3, #31
 800a006:	d41f      	bmi.n	800a048 <_dtoa_r+0x728>
 800a008:	9905      	ldr	r1, [sp, #20]
 800a00a:	9803      	ldr	r0, [sp, #12]
 800a00c:	f000 fbc2 	bl	800a794 <_Bfree>
 800a010:	2300      	movs	r3, #0
 800a012:	7023      	strb	r3, [r4, #0]
 800a014:	9b04      	ldr	r3, [sp, #16]
 800a016:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a018:	3301      	adds	r3, #1
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d100      	bne.n	800a024 <_dtoa_r+0x704>
 800a022:	e4c7      	b.n	80099b4 <_dtoa_r+0x94>
 800a024:	601c      	str	r4, [r3, #0]
 800a026:	e4c5      	b.n	80099b4 <_dtoa_r+0x94>
 800a028:	0800e540 	.word	0x0800e540
 800a02c:	0800e518 	.word	0x0800e518
 800a030:	3ff00000 	.word	0x3ff00000
 800a034:	40240000 	.word	0x40240000
 800a038:	401c0000 	.word	0x401c0000
 800a03c:	fcc00000 	.word	0xfcc00000
 800a040:	40140000 	.word	0x40140000
 800a044:	3fe00000 	.word	0x3fe00000
 800a048:	9b04      	ldr	r3, [sp, #16]
 800a04a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a04c:	0023      	movs	r3, r4
 800a04e:	001c      	movs	r4, r3
 800a050:	3b01      	subs	r3, #1
 800a052:	781a      	ldrb	r2, [r3, #0]
 800a054:	2a39      	cmp	r2, #57	@ 0x39
 800a056:	d108      	bne.n	800a06a <_dtoa_r+0x74a>
 800a058:	9a08      	ldr	r2, [sp, #32]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d1f7      	bne.n	800a04e <_dtoa_r+0x72e>
 800a05e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a060:	9908      	ldr	r1, [sp, #32]
 800a062:	3201      	adds	r2, #1
 800a064:	920c      	str	r2, [sp, #48]	@ 0x30
 800a066:	2230      	movs	r2, #48	@ 0x30
 800a068:	700a      	strb	r2, [r1, #0]
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	3201      	adds	r2, #1
 800a06e:	701a      	strb	r2, [r3, #0]
 800a070:	e784      	b.n	8009f7c <_dtoa_r+0x65c>
 800a072:	2200      	movs	r2, #0
 800a074:	4bc6      	ldr	r3, [pc, #792]	@ (800a390 <_dtoa_r+0xa70>)
 800a076:	f7f8 fa85 	bl	8002584 <__aeabi_dmul>
 800a07a:	2200      	movs	r2, #0
 800a07c:	2300      	movs	r3, #0
 800a07e:	0006      	movs	r6, r0
 800a080:	000f      	movs	r7, r1
 800a082:	f7f6 f9e3 	bl	800044c <__aeabi_dcmpeq>
 800a086:	2800      	cmp	r0, #0
 800a088:	d089      	beq.n	8009f9e <_dtoa_r+0x67e>
 800a08a:	e7bd      	b.n	800a008 <_dtoa_r+0x6e8>
 800a08c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a08e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a090:	9c06      	ldr	r4, [sp, #24]
 800a092:	2f00      	cmp	r7, #0
 800a094:	d014      	beq.n	800a0c0 <_dtoa_r+0x7a0>
 800a096:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a098:	2a01      	cmp	r2, #1
 800a09a:	dd00      	ble.n	800a09e <_dtoa_r+0x77e>
 800a09c:	e0e4      	b.n	800a268 <_dtoa_r+0x948>
 800a09e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	d100      	bne.n	800a0a6 <_dtoa_r+0x786>
 800a0a4:	e0da      	b.n	800a25c <_dtoa_r+0x93c>
 800a0a6:	4abb      	ldr	r2, [pc, #748]	@ (800a394 <_dtoa_r+0xa74>)
 800a0a8:	189b      	adds	r3, r3, r2
 800a0aa:	9a06      	ldr	r2, [sp, #24]
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	18d2      	adds	r2, r2, r3
 800a0b0:	9206      	str	r2, [sp, #24]
 800a0b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0b4:	9803      	ldr	r0, [sp, #12]
 800a0b6:	18d3      	adds	r3, r2, r3
 800a0b8:	930d      	str	r3, [sp, #52]	@ 0x34
 800a0ba:	f000 fc23 	bl	800a904 <__i2b>
 800a0be:	0007      	movs	r7, r0
 800a0c0:	2c00      	cmp	r4, #0
 800a0c2:	d00e      	beq.n	800a0e2 <_dtoa_r+0x7c2>
 800a0c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	dd0b      	ble.n	800a0e2 <_dtoa_r+0x7c2>
 800a0ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0cc:	0023      	movs	r3, r4
 800a0ce:	4294      	cmp	r4, r2
 800a0d0:	dd00      	ble.n	800a0d4 <_dtoa_r+0x7b4>
 800a0d2:	0013      	movs	r3, r2
 800a0d4:	9a06      	ldr	r2, [sp, #24]
 800a0d6:	1ae4      	subs	r4, r4, r3
 800a0d8:	1ad2      	subs	r2, r2, r3
 800a0da:	9206      	str	r2, [sp, #24]
 800a0dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	930d      	str	r3, [sp, #52]	@ 0x34
 800a0e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d021      	beq.n	800a12c <_dtoa_r+0x80c>
 800a0e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d100      	bne.n	800a0f0 <_dtoa_r+0x7d0>
 800a0ee:	e0d3      	b.n	800a298 <_dtoa_r+0x978>
 800a0f0:	9e05      	ldr	r6, [sp, #20]
 800a0f2:	2d00      	cmp	r5, #0
 800a0f4:	d014      	beq.n	800a120 <_dtoa_r+0x800>
 800a0f6:	0039      	movs	r1, r7
 800a0f8:	002a      	movs	r2, r5
 800a0fa:	9803      	ldr	r0, [sp, #12]
 800a0fc:	f000 fcc4 	bl	800aa88 <__pow5mult>
 800a100:	9a05      	ldr	r2, [sp, #20]
 800a102:	0001      	movs	r1, r0
 800a104:	0007      	movs	r7, r0
 800a106:	9803      	ldr	r0, [sp, #12]
 800a108:	f000 fc14 	bl	800a934 <__multiply>
 800a10c:	0006      	movs	r6, r0
 800a10e:	9905      	ldr	r1, [sp, #20]
 800a110:	9803      	ldr	r0, [sp, #12]
 800a112:	f000 fb3f 	bl	800a794 <_Bfree>
 800a116:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a118:	9605      	str	r6, [sp, #20]
 800a11a:	1b5b      	subs	r3, r3, r5
 800a11c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a11e:	d005      	beq.n	800a12c <_dtoa_r+0x80c>
 800a120:	0031      	movs	r1, r6
 800a122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a124:	9803      	ldr	r0, [sp, #12]
 800a126:	f000 fcaf 	bl	800aa88 <__pow5mult>
 800a12a:	9005      	str	r0, [sp, #20]
 800a12c:	2101      	movs	r1, #1
 800a12e:	9803      	ldr	r0, [sp, #12]
 800a130:	f000 fbe8 	bl	800a904 <__i2b>
 800a134:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a136:	0006      	movs	r6, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d100      	bne.n	800a13e <_dtoa_r+0x81e>
 800a13c:	e1bc      	b.n	800a4b8 <_dtoa_r+0xb98>
 800a13e:	001a      	movs	r2, r3
 800a140:	0001      	movs	r1, r0
 800a142:	9803      	ldr	r0, [sp, #12]
 800a144:	f000 fca0 	bl	800aa88 <__pow5mult>
 800a148:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a14a:	0006      	movs	r6, r0
 800a14c:	2500      	movs	r5, #0
 800a14e:	2b01      	cmp	r3, #1
 800a150:	dc16      	bgt.n	800a180 <_dtoa_r+0x860>
 800a152:	2500      	movs	r5, #0
 800a154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a156:	42ab      	cmp	r3, r5
 800a158:	d10e      	bne.n	800a178 <_dtoa_r+0x858>
 800a15a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a15c:	031b      	lsls	r3, r3, #12
 800a15e:	42ab      	cmp	r3, r5
 800a160:	d10a      	bne.n	800a178 <_dtoa_r+0x858>
 800a162:	4b8d      	ldr	r3, [pc, #564]	@ (800a398 <_dtoa_r+0xa78>)
 800a164:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a166:	4213      	tst	r3, r2
 800a168:	d006      	beq.n	800a178 <_dtoa_r+0x858>
 800a16a:	9b06      	ldr	r3, [sp, #24]
 800a16c:	3501      	adds	r5, #1
 800a16e:	3301      	adds	r3, #1
 800a170:	9306      	str	r3, [sp, #24]
 800a172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a174:	3301      	adds	r3, #1
 800a176:	930d      	str	r3, [sp, #52]	@ 0x34
 800a178:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a17a:	2001      	movs	r0, #1
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d008      	beq.n	800a192 <_dtoa_r+0x872>
 800a180:	6933      	ldr	r3, [r6, #16]
 800a182:	3303      	adds	r3, #3
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	18f3      	adds	r3, r6, r3
 800a188:	6858      	ldr	r0, [r3, #4]
 800a18a:	f000 fb6b 	bl	800a864 <__hi0bits>
 800a18e:	2320      	movs	r3, #32
 800a190:	1a18      	subs	r0, r3, r0
 800a192:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a194:	1818      	adds	r0, r3, r0
 800a196:	0002      	movs	r2, r0
 800a198:	231f      	movs	r3, #31
 800a19a:	401a      	ands	r2, r3
 800a19c:	4218      	tst	r0, r3
 800a19e:	d100      	bne.n	800a1a2 <_dtoa_r+0x882>
 800a1a0:	e081      	b.n	800a2a6 <_dtoa_r+0x986>
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	dd79      	ble.n	800a29e <_dtoa_r+0x97e>
 800a1aa:	231c      	movs	r3, #28
 800a1ac:	1a9b      	subs	r3, r3, r2
 800a1ae:	9a06      	ldr	r2, [sp, #24]
 800a1b0:	18e4      	adds	r4, r4, r3
 800a1b2:	18d2      	adds	r2, r2, r3
 800a1b4:	9206      	str	r2, [sp, #24]
 800a1b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1b8:	18d3      	adds	r3, r2, r3
 800a1ba:	930d      	str	r3, [sp, #52]	@ 0x34
 800a1bc:	9b06      	ldr	r3, [sp, #24]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	dd05      	ble.n	800a1ce <_dtoa_r+0x8ae>
 800a1c2:	001a      	movs	r2, r3
 800a1c4:	9905      	ldr	r1, [sp, #20]
 800a1c6:	9803      	ldr	r0, [sp, #12]
 800a1c8:	f000 fcba 	bl	800ab40 <__lshift>
 800a1cc:	9005      	str	r0, [sp, #20]
 800a1ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	dd05      	ble.n	800a1e0 <_dtoa_r+0x8c0>
 800a1d4:	0031      	movs	r1, r6
 800a1d6:	001a      	movs	r2, r3
 800a1d8:	9803      	ldr	r0, [sp, #12]
 800a1da:	f000 fcb1 	bl	800ab40 <__lshift>
 800a1de:	0006      	movs	r6, r0
 800a1e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d061      	beq.n	800a2aa <_dtoa_r+0x98a>
 800a1e6:	0031      	movs	r1, r6
 800a1e8:	9805      	ldr	r0, [sp, #20]
 800a1ea:	f000 fd15 	bl	800ac18 <__mcmp>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	da5b      	bge.n	800a2aa <_dtoa_r+0x98a>
 800a1f2:	9b04      	ldr	r3, [sp, #16]
 800a1f4:	220a      	movs	r2, #10
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1fa:	9905      	ldr	r1, [sp, #20]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9803      	ldr	r0, [sp, #12]
 800a200:	f000 faec 	bl	800a7dc <__multadd>
 800a204:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a206:	9005      	str	r0, [sp, #20]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d100      	bne.n	800a20e <_dtoa_r+0x8ee>
 800a20c:	e15b      	b.n	800a4c6 <_dtoa_r+0xba6>
 800a20e:	2300      	movs	r3, #0
 800a210:	0039      	movs	r1, r7
 800a212:	220a      	movs	r2, #10
 800a214:	9803      	ldr	r0, [sp, #12]
 800a216:	f000 fae1 	bl	800a7dc <__multadd>
 800a21a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a21c:	0007      	movs	r7, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	dc4d      	bgt.n	800a2be <_dtoa_r+0x99e>
 800a222:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a224:	2b02      	cmp	r3, #2
 800a226:	dd46      	ble.n	800a2b6 <_dtoa_r+0x996>
 800a228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d000      	beq.n	800a230 <_dtoa_r+0x910>
 800a22e:	e5db      	b.n	8009de8 <_dtoa_r+0x4c8>
 800a230:	0031      	movs	r1, r6
 800a232:	2205      	movs	r2, #5
 800a234:	9803      	ldr	r0, [sp, #12]
 800a236:	f000 fad1 	bl	800a7dc <__multadd>
 800a23a:	0006      	movs	r6, r0
 800a23c:	0001      	movs	r1, r0
 800a23e:	9805      	ldr	r0, [sp, #20]
 800a240:	f000 fcea 	bl	800ac18 <__mcmp>
 800a244:	2800      	cmp	r0, #0
 800a246:	dc00      	bgt.n	800a24a <_dtoa_r+0x92a>
 800a248:	e5ce      	b.n	8009de8 <_dtoa_r+0x4c8>
 800a24a:	9b08      	ldr	r3, [sp, #32]
 800a24c:	9a08      	ldr	r2, [sp, #32]
 800a24e:	1c5c      	adds	r4, r3, #1
 800a250:	2331      	movs	r3, #49	@ 0x31
 800a252:	7013      	strb	r3, [r2, #0]
 800a254:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a256:	3301      	adds	r3, #1
 800a258:	930c      	str	r3, [sp, #48]	@ 0x30
 800a25a:	e5c9      	b.n	8009df0 <_dtoa_r+0x4d0>
 800a25c:	2336      	movs	r3, #54	@ 0x36
 800a25e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a260:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a262:	1a9b      	subs	r3, r3, r2
 800a264:	9c06      	ldr	r4, [sp, #24]
 800a266:	e720      	b.n	800a0aa <_dtoa_r+0x78a>
 800a268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a26a:	1e5d      	subs	r5, r3, #1
 800a26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a26e:	42ab      	cmp	r3, r5
 800a270:	db08      	blt.n	800a284 <_dtoa_r+0x964>
 800a272:	1b5d      	subs	r5, r3, r5
 800a274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a276:	2b00      	cmp	r3, #0
 800a278:	daf4      	bge.n	800a264 <_dtoa_r+0x944>
 800a27a:	9b06      	ldr	r3, [sp, #24]
 800a27c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a27e:	1a9c      	subs	r4, r3, r2
 800a280:	2300      	movs	r3, #0
 800a282:	e712      	b.n	800a0aa <_dtoa_r+0x78a>
 800a284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a286:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a288:	1aeb      	subs	r3, r5, r3
 800a28a:	18d3      	adds	r3, r2, r3
 800a28c:	9314      	str	r3, [sp, #80]	@ 0x50
 800a28e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a290:	9c06      	ldr	r4, [sp, #24]
 800a292:	2500      	movs	r5, #0
 800a294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a296:	e708      	b.n	800a0aa <_dtoa_r+0x78a>
 800a298:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a29a:	9905      	ldr	r1, [sp, #20]
 800a29c:	e742      	b.n	800a124 <_dtoa_r+0x804>
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d08c      	beq.n	800a1bc <_dtoa_r+0x89c>
 800a2a2:	331c      	adds	r3, #28
 800a2a4:	e783      	b.n	800a1ae <_dtoa_r+0x88e>
 800a2a6:	0013      	movs	r3, r2
 800a2a8:	e7fb      	b.n	800a2a2 <_dtoa_r+0x982>
 800a2aa:	9b04      	ldr	r3, [sp, #16]
 800a2ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	ddb5      	ble.n	800a222 <_dtoa_r+0x902>
 800a2b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d100      	bne.n	800a2be <_dtoa_r+0x99e>
 800a2bc:	e107      	b.n	800a4ce <_dtoa_r+0xbae>
 800a2be:	2c00      	cmp	r4, #0
 800a2c0:	dd05      	ble.n	800a2ce <_dtoa_r+0x9ae>
 800a2c2:	0039      	movs	r1, r7
 800a2c4:	0022      	movs	r2, r4
 800a2c6:	9803      	ldr	r0, [sp, #12]
 800a2c8:	f000 fc3a 	bl	800ab40 <__lshift>
 800a2cc:	0007      	movs	r7, r0
 800a2ce:	9704      	str	r7, [sp, #16]
 800a2d0:	2d00      	cmp	r5, #0
 800a2d2:	d020      	beq.n	800a316 <_dtoa_r+0x9f6>
 800a2d4:	6879      	ldr	r1, [r7, #4]
 800a2d6:	9803      	ldr	r0, [sp, #12]
 800a2d8:	f000 fa18 	bl	800a70c <_Balloc>
 800a2dc:	1e04      	subs	r4, r0, #0
 800a2de:	d10c      	bne.n	800a2fa <_dtoa_r+0x9da>
 800a2e0:	0022      	movs	r2, r4
 800a2e2:	4b2e      	ldr	r3, [pc, #184]	@ (800a39c <_dtoa_r+0xa7c>)
 800a2e4:	482e      	ldr	r0, [pc, #184]	@ (800a3a0 <_dtoa_r+0xa80>)
 800a2e6:	492f      	ldr	r1, [pc, #188]	@ (800a3a4 <_dtoa_r+0xa84>)
 800a2e8:	f7ff fb2f 	bl	800994a <_dtoa_r+0x2a>
 800a2ec:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800a2ee:	0037      	movs	r7, r6
 800a2f0:	e7ab      	b.n	800a24a <_dtoa_r+0x92a>
 800a2f2:	9b04      	ldr	r3, [sp, #16]
 800a2f4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a2f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2f8:	e7f9      	b.n	800a2ee <_dtoa_r+0x9ce>
 800a2fa:	0039      	movs	r1, r7
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	310c      	adds	r1, #12
 800a300:	3202      	adds	r2, #2
 800a302:	0092      	lsls	r2, r2, #2
 800a304:	300c      	adds	r0, #12
 800a306:	f7ff fa7d 	bl	8009804 <memcpy>
 800a30a:	2201      	movs	r2, #1
 800a30c:	0021      	movs	r1, r4
 800a30e:	9803      	ldr	r0, [sp, #12]
 800a310:	f000 fc16 	bl	800ab40 <__lshift>
 800a314:	9004      	str	r0, [sp, #16]
 800a316:	9b08      	ldr	r3, [sp, #32]
 800a318:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a31a:	9306      	str	r3, [sp, #24]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	189b      	adds	r3, r3, r2
 800a320:	2201      	movs	r2, #1
 800a322:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a326:	4013      	ands	r3, r2
 800a328:	930e      	str	r3, [sp, #56]	@ 0x38
 800a32a:	0031      	movs	r1, r6
 800a32c:	9805      	ldr	r0, [sp, #20]
 800a32e:	f7ff fa72 	bl	8009816 <quorem>
 800a332:	0039      	movs	r1, r7
 800a334:	0005      	movs	r5, r0
 800a336:	900a      	str	r0, [sp, #40]	@ 0x28
 800a338:	9805      	ldr	r0, [sp, #20]
 800a33a:	f000 fc6d 	bl	800ac18 <__mcmp>
 800a33e:	9a04      	ldr	r2, [sp, #16]
 800a340:	900d      	str	r0, [sp, #52]	@ 0x34
 800a342:	0031      	movs	r1, r6
 800a344:	9803      	ldr	r0, [sp, #12]
 800a346:	f000 fc83 	bl	800ac50 <__mdiff>
 800a34a:	2201      	movs	r2, #1
 800a34c:	68c3      	ldr	r3, [r0, #12]
 800a34e:	0004      	movs	r4, r0
 800a350:	3530      	adds	r5, #48	@ 0x30
 800a352:	9209      	str	r2, [sp, #36]	@ 0x24
 800a354:	2b00      	cmp	r3, #0
 800a356:	d104      	bne.n	800a362 <_dtoa_r+0xa42>
 800a358:	0001      	movs	r1, r0
 800a35a:	9805      	ldr	r0, [sp, #20]
 800a35c:	f000 fc5c 	bl	800ac18 <__mcmp>
 800a360:	9009      	str	r0, [sp, #36]	@ 0x24
 800a362:	0021      	movs	r1, r4
 800a364:	9803      	ldr	r0, [sp, #12]
 800a366:	f000 fa15 	bl	800a794 <_Bfree>
 800a36a:	9b06      	ldr	r3, [sp, #24]
 800a36c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a36e:	1c5c      	adds	r4, r3, #1
 800a370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a372:	4313      	orrs	r3, r2
 800a374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a376:	4313      	orrs	r3, r2
 800a378:	d116      	bne.n	800a3a8 <_dtoa_r+0xa88>
 800a37a:	2d39      	cmp	r5, #57	@ 0x39
 800a37c:	d02f      	beq.n	800a3de <_dtoa_r+0xabe>
 800a37e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a380:	2b00      	cmp	r3, #0
 800a382:	dd01      	ble.n	800a388 <_dtoa_r+0xa68>
 800a384:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a386:	3531      	adds	r5, #49	@ 0x31
 800a388:	9b06      	ldr	r3, [sp, #24]
 800a38a:	701d      	strb	r5, [r3, #0]
 800a38c:	e532      	b.n	8009df4 <_dtoa_r+0x4d4>
 800a38e:	46c0      	nop			@ (mov r8, r8)
 800a390:	40240000 	.word	0x40240000
 800a394:	00000433 	.word	0x00000433
 800a398:	7ff00000 	.word	0x7ff00000
 800a39c:	0800e444 	.word	0x0800e444
 800a3a0:	0800e3ec 	.word	0x0800e3ec
 800a3a4:	000002ef 	.word	0x000002ef
 800a3a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	db04      	blt.n	800a3b8 <_dtoa_r+0xa98>
 800a3ae:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	d11e      	bne.n	800a3f6 <_dtoa_r+0xad6>
 800a3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dde4      	ble.n	800a388 <_dtoa_r+0xa68>
 800a3be:	9905      	ldr	r1, [sp, #20]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	9803      	ldr	r0, [sp, #12]
 800a3c4:	f000 fbbc 	bl	800ab40 <__lshift>
 800a3c8:	0031      	movs	r1, r6
 800a3ca:	9005      	str	r0, [sp, #20]
 800a3cc:	f000 fc24 	bl	800ac18 <__mcmp>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	dc02      	bgt.n	800a3da <_dtoa_r+0xaba>
 800a3d4:	d1d8      	bne.n	800a388 <_dtoa_r+0xa68>
 800a3d6:	07eb      	lsls	r3, r5, #31
 800a3d8:	d5d6      	bpl.n	800a388 <_dtoa_r+0xa68>
 800a3da:	2d39      	cmp	r5, #57	@ 0x39
 800a3dc:	d1d2      	bne.n	800a384 <_dtoa_r+0xa64>
 800a3de:	2339      	movs	r3, #57	@ 0x39
 800a3e0:	9a06      	ldr	r2, [sp, #24]
 800a3e2:	7013      	strb	r3, [r2, #0]
 800a3e4:	0023      	movs	r3, r4
 800a3e6:	001c      	movs	r4, r3
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	781a      	ldrb	r2, [r3, #0]
 800a3ec:	2a39      	cmp	r2, #57	@ 0x39
 800a3ee:	d050      	beq.n	800a492 <_dtoa_r+0xb72>
 800a3f0:	3201      	adds	r2, #1
 800a3f2:	701a      	strb	r2, [r3, #0]
 800a3f4:	e4fe      	b.n	8009df4 <_dtoa_r+0x4d4>
 800a3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dd03      	ble.n	800a404 <_dtoa_r+0xae4>
 800a3fc:	2d39      	cmp	r5, #57	@ 0x39
 800a3fe:	d0ee      	beq.n	800a3de <_dtoa_r+0xabe>
 800a400:	3501      	adds	r5, #1
 800a402:	e7c1      	b.n	800a388 <_dtoa_r+0xa68>
 800a404:	9b06      	ldr	r3, [sp, #24]
 800a406:	9a06      	ldr	r2, [sp, #24]
 800a408:	701d      	strb	r5, [r3, #0]
 800a40a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d02b      	beq.n	800a468 <_dtoa_r+0xb48>
 800a410:	2300      	movs	r3, #0
 800a412:	220a      	movs	r2, #10
 800a414:	9905      	ldr	r1, [sp, #20]
 800a416:	9803      	ldr	r0, [sp, #12]
 800a418:	f000 f9e0 	bl	800a7dc <__multadd>
 800a41c:	9b04      	ldr	r3, [sp, #16]
 800a41e:	9005      	str	r0, [sp, #20]
 800a420:	429f      	cmp	r7, r3
 800a422:	d109      	bne.n	800a438 <_dtoa_r+0xb18>
 800a424:	0039      	movs	r1, r7
 800a426:	2300      	movs	r3, #0
 800a428:	220a      	movs	r2, #10
 800a42a:	9803      	ldr	r0, [sp, #12]
 800a42c:	f000 f9d6 	bl	800a7dc <__multadd>
 800a430:	0007      	movs	r7, r0
 800a432:	9004      	str	r0, [sp, #16]
 800a434:	9406      	str	r4, [sp, #24]
 800a436:	e778      	b.n	800a32a <_dtoa_r+0xa0a>
 800a438:	0039      	movs	r1, r7
 800a43a:	2300      	movs	r3, #0
 800a43c:	220a      	movs	r2, #10
 800a43e:	9803      	ldr	r0, [sp, #12]
 800a440:	f000 f9cc 	bl	800a7dc <__multadd>
 800a444:	2300      	movs	r3, #0
 800a446:	0007      	movs	r7, r0
 800a448:	220a      	movs	r2, #10
 800a44a:	9904      	ldr	r1, [sp, #16]
 800a44c:	9803      	ldr	r0, [sp, #12]
 800a44e:	f000 f9c5 	bl	800a7dc <__multadd>
 800a452:	9004      	str	r0, [sp, #16]
 800a454:	e7ee      	b.n	800a434 <_dtoa_r+0xb14>
 800a456:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a458:	2401      	movs	r4, #1
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dd00      	ble.n	800a460 <_dtoa_r+0xb40>
 800a45e:	001c      	movs	r4, r3
 800a460:	9704      	str	r7, [sp, #16]
 800a462:	2700      	movs	r7, #0
 800a464:	9b08      	ldr	r3, [sp, #32]
 800a466:	191c      	adds	r4, r3, r4
 800a468:	9905      	ldr	r1, [sp, #20]
 800a46a:	2201      	movs	r2, #1
 800a46c:	9803      	ldr	r0, [sp, #12]
 800a46e:	f000 fb67 	bl	800ab40 <__lshift>
 800a472:	0031      	movs	r1, r6
 800a474:	9005      	str	r0, [sp, #20]
 800a476:	f000 fbcf 	bl	800ac18 <__mcmp>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	dcb2      	bgt.n	800a3e4 <_dtoa_r+0xac4>
 800a47e:	d101      	bne.n	800a484 <_dtoa_r+0xb64>
 800a480:	07ed      	lsls	r5, r5, #31
 800a482:	d4af      	bmi.n	800a3e4 <_dtoa_r+0xac4>
 800a484:	0023      	movs	r3, r4
 800a486:	001c      	movs	r4, r3
 800a488:	3b01      	subs	r3, #1
 800a48a:	781a      	ldrb	r2, [r3, #0]
 800a48c:	2a30      	cmp	r2, #48	@ 0x30
 800a48e:	d0fa      	beq.n	800a486 <_dtoa_r+0xb66>
 800a490:	e4b0      	b.n	8009df4 <_dtoa_r+0x4d4>
 800a492:	9a08      	ldr	r2, [sp, #32]
 800a494:	429a      	cmp	r2, r3
 800a496:	d1a6      	bne.n	800a3e6 <_dtoa_r+0xac6>
 800a498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a49a:	3301      	adds	r3, #1
 800a49c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a49e:	2331      	movs	r3, #49	@ 0x31
 800a4a0:	7013      	strb	r3, [r2, #0]
 800a4a2:	e4a7      	b.n	8009df4 <_dtoa_r+0x4d4>
 800a4a4:	4b14      	ldr	r3, [pc, #80]	@ (800a4f8 <_dtoa_r+0xbd8>)
 800a4a6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a4a8:	9308      	str	r3, [sp, #32]
 800a4aa:	4b14      	ldr	r3, [pc, #80]	@ (800a4fc <_dtoa_r+0xbdc>)
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	d001      	beq.n	800a4b4 <_dtoa_r+0xb94>
 800a4b0:	f7ff fa7e 	bl	80099b0 <_dtoa_r+0x90>
 800a4b4:	f7ff fa7e 	bl	80099b4 <_dtoa_r+0x94>
 800a4b8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	dc00      	bgt.n	800a4c0 <_dtoa_r+0xba0>
 800a4be:	e648      	b.n	800a152 <_dtoa_r+0x832>
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a4c4:	e665      	b.n	800a192 <_dtoa_r+0x872>
 800a4c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dc00      	bgt.n	800a4ce <_dtoa_r+0xbae>
 800a4cc:	e6a9      	b.n	800a222 <_dtoa_r+0x902>
 800a4ce:	2400      	movs	r4, #0
 800a4d0:	0031      	movs	r1, r6
 800a4d2:	9805      	ldr	r0, [sp, #20]
 800a4d4:	f7ff f99f 	bl	8009816 <quorem>
 800a4d8:	9b08      	ldr	r3, [sp, #32]
 800a4da:	3030      	adds	r0, #48	@ 0x30
 800a4dc:	5518      	strb	r0, [r3, r4]
 800a4de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4e0:	3401      	adds	r4, #1
 800a4e2:	0005      	movs	r5, r0
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	ddb6      	ble.n	800a456 <_dtoa_r+0xb36>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	220a      	movs	r2, #10
 800a4ec:	9905      	ldr	r1, [sp, #20]
 800a4ee:	9803      	ldr	r0, [sp, #12]
 800a4f0:	f000 f974 	bl	800a7dc <__multadd>
 800a4f4:	9005      	str	r0, [sp, #20]
 800a4f6:	e7eb      	b.n	800a4d0 <_dtoa_r+0xbb0>
 800a4f8:	0800e3c8 	.word	0x0800e3c8
 800a4fc:	0800e3d0 	.word	0x0800e3d0

0800a500 <_free_r>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	0005      	movs	r5, r0
 800a504:	1e0c      	subs	r4, r1, #0
 800a506:	d010      	beq.n	800a52a <_free_r+0x2a>
 800a508:	3c04      	subs	r4, #4
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	da00      	bge.n	800a512 <_free_r+0x12>
 800a510:	18e4      	adds	r4, r4, r3
 800a512:	0028      	movs	r0, r5
 800a514:	f000 f8ea 	bl	800a6ec <__malloc_lock>
 800a518:	4a1d      	ldr	r2, [pc, #116]	@ (800a590 <_free_r+0x90>)
 800a51a:	6813      	ldr	r3, [r2, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d105      	bne.n	800a52c <_free_r+0x2c>
 800a520:	6063      	str	r3, [r4, #4]
 800a522:	6014      	str	r4, [r2, #0]
 800a524:	0028      	movs	r0, r5
 800a526:	f000 f8e9 	bl	800a6fc <__malloc_unlock>
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	42a3      	cmp	r3, r4
 800a52e:	d908      	bls.n	800a542 <_free_r+0x42>
 800a530:	6820      	ldr	r0, [r4, #0]
 800a532:	1821      	adds	r1, r4, r0
 800a534:	428b      	cmp	r3, r1
 800a536:	d1f3      	bne.n	800a520 <_free_r+0x20>
 800a538:	6819      	ldr	r1, [r3, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	1809      	adds	r1, r1, r0
 800a53e:	6021      	str	r1, [r4, #0]
 800a540:	e7ee      	b.n	800a520 <_free_r+0x20>
 800a542:	001a      	movs	r2, r3
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <_free_r+0x4e>
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	d9f9      	bls.n	800a542 <_free_r+0x42>
 800a54e:	6811      	ldr	r1, [r2, #0]
 800a550:	1850      	adds	r0, r2, r1
 800a552:	42a0      	cmp	r0, r4
 800a554:	d10b      	bne.n	800a56e <_free_r+0x6e>
 800a556:	6820      	ldr	r0, [r4, #0]
 800a558:	1809      	adds	r1, r1, r0
 800a55a:	1850      	adds	r0, r2, r1
 800a55c:	6011      	str	r1, [r2, #0]
 800a55e:	4283      	cmp	r3, r0
 800a560:	d1e0      	bne.n	800a524 <_free_r+0x24>
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	1841      	adds	r1, r0, r1
 800a568:	6011      	str	r1, [r2, #0]
 800a56a:	6053      	str	r3, [r2, #4]
 800a56c:	e7da      	b.n	800a524 <_free_r+0x24>
 800a56e:	42a0      	cmp	r0, r4
 800a570:	d902      	bls.n	800a578 <_free_r+0x78>
 800a572:	230c      	movs	r3, #12
 800a574:	602b      	str	r3, [r5, #0]
 800a576:	e7d5      	b.n	800a524 <_free_r+0x24>
 800a578:	6820      	ldr	r0, [r4, #0]
 800a57a:	1821      	adds	r1, r4, r0
 800a57c:	428b      	cmp	r3, r1
 800a57e:	d103      	bne.n	800a588 <_free_r+0x88>
 800a580:	6819      	ldr	r1, [r3, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	1809      	adds	r1, r1, r0
 800a586:	6021      	str	r1, [r4, #0]
 800a588:	6063      	str	r3, [r4, #4]
 800a58a:	6054      	str	r4, [r2, #4]
 800a58c:	e7ca      	b.n	800a524 <_free_r+0x24>
 800a58e:	46c0      	nop			@ (mov r8, r8)
 800a590:	20000a5c 	.word	0x20000a5c

0800a594 <malloc>:
 800a594:	b510      	push	{r4, lr}
 800a596:	4b03      	ldr	r3, [pc, #12]	@ (800a5a4 <malloc+0x10>)
 800a598:	0001      	movs	r1, r0
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	f000 f826 	bl	800a5ec <_malloc_r>
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	46c0      	nop			@ (mov r8, r8)
 800a5a4:	20000038 	.word	0x20000038

0800a5a8 <sbrk_aligned>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a5e8 <sbrk_aligned+0x40>)
 800a5ac:	000d      	movs	r5, r1
 800a5ae:	6831      	ldr	r1, [r6, #0]
 800a5b0:	0004      	movs	r4, r0
 800a5b2:	2900      	cmp	r1, #0
 800a5b4:	d102      	bne.n	800a5bc <sbrk_aligned+0x14>
 800a5b6:	f000 fe67 	bl	800b288 <_sbrk_r>
 800a5ba:	6030      	str	r0, [r6, #0]
 800a5bc:	0029      	movs	r1, r5
 800a5be:	0020      	movs	r0, r4
 800a5c0:	f000 fe62 	bl	800b288 <_sbrk_r>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d103      	bne.n	800a5d0 <sbrk_aligned+0x28>
 800a5c8:	2501      	movs	r5, #1
 800a5ca:	426d      	negs	r5, r5
 800a5cc:	0028      	movs	r0, r5
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	1cc5      	adds	r5, r0, #3
 800a5d4:	439d      	bics	r5, r3
 800a5d6:	42a8      	cmp	r0, r5
 800a5d8:	d0f8      	beq.n	800a5cc <sbrk_aligned+0x24>
 800a5da:	1a29      	subs	r1, r5, r0
 800a5dc:	0020      	movs	r0, r4
 800a5de:	f000 fe53 	bl	800b288 <_sbrk_r>
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d1f2      	bne.n	800a5cc <sbrk_aligned+0x24>
 800a5e6:	e7ef      	b.n	800a5c8 <sbrk_aligned+0x20>
 800a5e8:	20000a58 	.word	0x20000a58

0800a5ec <_malloc_r>:
 800a5ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ee:	2203      	movs	r2, #3
 800a5f0:	1ccb      	adds	r3, r1, #3
 800a5f2:	4393      	bics	r3, r2
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	0005      	movs	r5, r0
 800a5f8:	001f      	movs	r7, r3
 800a5fa:	2b0c      	cmp	r3, #12
 800a5fc:	d234      	bcs.n	800a668 <_malloc_r+0x7c>
 800a5fe:	270c      	movs	r7, #12
 800a600:	42b9      	cmp	r1, r7
 800a602:	d833      	bhi.n	800a66c <_malloc_r+0x80>
 800a604:	0028      	movs	r0, r5
 800a606:	f000 f871 	bl	800a6ec <__malloc_lock>
 800a60a:	4e37      	ldr	r6, [pc, #220]	@ (800a6e8 <_malloc_r+0xfc>)
 800a60c:	6833      	ldr	r3, [r6, #0]
 800a60e:	001c      	movs	r4, r3
 800a610:	2c00      	cmp	r4, #0
 800a612:	d12f      	bne.n	800a674 <_malloc_r+0x88>
 800a614:	0039      	movs	r1, r7
 800a616:	0028      	movs	r0, r5
 800a618:	f7ff ffc6 	bl	800a5a8 <sbrk_aligned>
 800a61c:	0004      	movs	r4, r0
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	d15f      	bne.n	800a6e2 <_malloc_r+0xf6>
 800a622:	6834      	ldr	r4, [r6, #0]
 800a624:	9400      	str	r4, [sp, #0]
 800a626:	9b00      	ldr	r3, [sp, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d14a      	bne.n	800a6c2 <_malloc_r+0xd6>
 800a62c:	2c00      	cmp	r4, #0
 800a62e:	d052      	beq.n	800a6d6 <_malloc_r+0xea>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	0028      	movs	r0, r5
 800a634:	18e3      	adds	r3, r4, r3
 800a636:	9900      	ldr	r1, [sp, #0]
 800a638:	9301      	str	r3, [sp, #4]
 800a63a:	f000 fe25 	bl	800b288 <_sbrk_r>
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	4283      	cmp	r3, r0
 800a642:	d148      	bne.n	800a6d6 <_malloc_r+0xea>
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	0028      	movs	r0, r5
 800a648:	1aff      	subs	r7, r7, r3
 800a64a:	0039      	movs	r1, r7
 800a64c:	f7ff ffac 	bl	800a5a8 <sbrk_aligned>
 800a650:	3001      	adds	r0, #1
 800a652:	d040      	beq.n	800a6d6 <_malloc_r+0xea>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	19db      	adds	r3, r3, r7
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	6833      	ldr	r3, [r6, #0]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	2a00      	cmp	r2, #0
 800a660:	d133      	bne.n	800a6ca <_malloc_r+0xde>
 800a662:	9b00      	ldr	r3, [sp, #0]
 800a664:	6033      	str	r3, [r6, #0]
 800a666:	e019      	b.n	800a69c <_malloc_r+0xb0>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	dac9      	bge.n	800a600 <_malloc_r+0x14>
 800a66c:	230c      	movs	r3, #12
 800a66e:	602b      	str	r3, [r5, #0]
 800a670:	2000      	movs	r0, #0
 800a672:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a674:	6821      	ldr	r1, [r4, #0]
 800a676:	1bc9      	subs	r1, r1, r7
 800a678:	d420      	bmi.n	800a6bc <_malloc_r+0xd0>
 800a67a:	290b      	cmp	r1, #11
 800a67c:	d90a      	bls.n	800a694 <_malloc_r+0xa8>
 800a67e:	19e2      	adds	r2, r4, r7
 800a680:	6027      	str	r7, [r4, #0]
 800a682:	42a3      	cmp	r3, r4
 800a684:	d104      	bne.n	800a690 <_malloc_r+0xa4>
 800a686:	6032      	str	r2, [r6, #0]
 800a688:	6863      	ldr	r3, [r4, #4]
 800a68a:	6011      	str	r1, [r2, #0]
 800a68c:	6053      	str	r3, [r2, #4]
 800a68e:	e005      	b.n	800a69c <_malloc_r+0xb0>
 800a690:	605a      	str	r2, [r3, #4]
 800a692:	e7f9      	b.n	800a688 <_malloc_r+0x9c>
 800a694:	6862      	ldr	r2, [r4, #4]
 800a696:	42a3      	cmp	r3, r4
 800a698:	d10e      	bne.n	800a6b8 <_malloc_r+0xcc>
 800a69a:	6032      	str	r2, [r6, #0]
 800a69c:	0028      	movs	r0, r5
 800a69e:	f000 f82d 	bl	800a6fc <__malloc_unlock>
 800a6a2:	0020      	movs	r0, r4
 800a6a4:	2207      	movs	r2, #7
 800a6a6:	300b      	adds	r0, #11
 800a6a8:	1d23      	adds	r3, r4, #4
 800a6aa:	4390      	bics	r0, r2
 800a6ac:	1ac2      	subs	r2, r0, r3
 800a6ae:	4298      	cmp	r0, r3
 800a6b0:	d0df      	beq.n	800a672 <_malloc_r+0x86>
 800a6b2:	1a1b      	subs	r3, r3, r0
 800a6b4:	50a3      	str	r3, [r4, r2]
 800a6b6:	e7dc      	b.n	800a672 <_malloc_r+0x86>
 800a6b8:	605a      	str	r2, [r3, #4]
 800a6ba:	e7ef      	b.n	800a69c <_malloc_r+0xb0>
 800a6bc:	0023      	movs	r3, r4
 800a6be:	6864      	ldr	r4, [r4, #4]
 800a6c0:	e7a6      	b.n	800a610 <_malloc_r+0x24>
 800a6c2:	9c00      	ldr	r4, [sp, #0]
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	e7ad      	b.n	800a626 <_malloc_r+0x3a>
 800a6ca:	001a      	movs	r2, r3
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	42a3      	cmp	r3, r4
 800a6d0:	d1fb      	bne.n	800a6ca <_malloc_r+0xde>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	e7da      	b.n	800a68c <_malloc_r+0xa0>
 800a6d6:	230c      	movs	r3, #12
 800a6d8:	0028      	movs	r0, r5
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	f000 f80e 	bl	800a6fc <__malloc_unlock>
 800a6e0:	e7c6      	b.n	800a670 <_malloc_r+0x84>
 800a6e2:	6007      	str	r7, [r0, #0]
 800a6e4:	e7da      	b.n	800a69c <_malloc_r+0xb0>
 800a6e6:	46c0      	nop			@ (mov r8, r8)
 800a6e8:	20000a5c 	.word	0x20000a5c

0800a6ec <__malloc_lock>:
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	4802      	ldr	r0, [pc, #8]	@ (800a6f8 <__malloc_lock+0xc>)
 800a6f0:	f7ff f87b 	bl	80097ea <__retarget_lock_acquire_recursive>
 800a6f4:	bd10      	pop	{r4, pc}
 800a6f6:	46c0      	nop			@ (mov r8, r8)
 800a6f8:	20000a54 	.word	0x20000a54

0800a6fc <__malloc_unlock>:
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	4802      	ldr	r0, [pc, #8]	@ (800a708 <__malloc_unlock+0xc>)
 800a700:	f7ff f874 	bl	80097ec <__retarget_lock_release_recursive>
 800a704:	bd10      	pop	{r4, pc}
 800a706:	46c0      	nop			@ (mov r8, r8)
 800a708:	20000a54 	.word	0x20000a54

0800a70c <_Balloc>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	69c5      	ldr	r5, [r0, #28]
 800a710:	0006      	movs	r6, r0
 800a712:	000c      	movs	r4, r1
 800a714:	2d00      	cmp	r5, #0
 800a716:	d10e      	bne.n	800a736 <_Balloc+0x2a>
 800a718:	2010      	movs	r0, #16
 800a71a:	f7ff ff3b 	bl	800a594 <malloc>
 800a71e:	1e02      	subs	r2, r0, #0
 800a720:	61f0      	str	r0, [r6, #28]
 800a722:	d104      	bne.n	800a72e <_Balloc+0x22>
 800a724:	216b      	movs	r1, #107	@ 0x6b
 800a726:	4b19      	ldr	r3, [pc, #100]	@ (800a78c <_Balloc+0x80>)
 800a728:	4819      	ldr	r0, [pc, #100]	@ (800a790 <_Balloc+0x84>)
 800a72a:	f000 fdbf 	bl	800b2ac <__assert_func>
 800a72e:	6045      	str	r5, [r0, #4]
 800a730:	6085      	str	r5, [r0, #8]
 800a732:	6005      	str	r5, [r0, #0]
 800a734:	60c5      	str	r5, [r0, #12]
 800a736:	69f5      	ldr	r5, [r6, #28]
 800a738:	68eb      	ldr	r3, [r5, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d013      	beq.n	800a766 <_Balloc+0x5a>
 800a73e:	69f3      	ldr	r3, [r6, #28]
 800a740:	00a2      	lsls	r2, r4, #2
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	189b      	adds	r3, r3, r2
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	2800      	cmp	r0, #0
 800a74a:	d118      	bne.n	800a77e <_Balloc+0x72>
 800a74c:	2101      	movs	r1, #1
 800a74e:	000d      	movs	r5, r1
 800a750:	40a5      	lsls	r5, r4
 800a752:	1d6a      	adds	r2, r5, #5
 800a754:	0030      	movs	r0, r6
 800a756:	0092      	lsls	r2, r2, #2
 800a758:	f000 fdc6 	bl	800b2e8 <_calloc_r>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d00c      	beq.n	800a77a <_Balloc+0x6e>
 800a760:	6044      	str	r4, [r0, #4]
 800a762:	6085      	str	r5, [r0, #8]
 800a764:	e00d      	b.n	800a782 <_Balloc+0x76>
 800a766:	2221      	movs	r2, #33	@ 0x21
 800a768:	2104      	movs	r1, #4
 800a76a:	0030      	movs	r0, r6
 800a76c:	f000 fdbc 	bl	800b2e8 <_calloc_r>
 800a770:	69f3      	ldr	r3, [r6, #28]
 800a772:	60e8      	str	r0, [r5, #12]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e1      	bne.n	800a73e <_Balloc+0x32>
 800a77a:	2000      	movs	r0, #0
 800a77c:	bd70      	pop	{r4, r5, r6, pc}
 800a77e:	6802      	ldr	r2, [r0, #0]
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	2300      	movs	r3, #0
 800a784:	6103      	str	r3, [r0, #16]
 800a786:	60c3      	str	r3, [r0, #12]
 800a788:	e7f8      	b.n	800a77c <_Balloc+0x70>
 800a78a:	46c0      	nop			@ (mov r8, r8)
 800a78c:	0800e3d5 	.word	0x0800e3d5
 800a790:	0800e455 	.word	0x0800e455

0800a794 <_Bfree>:
 800a794:	b570      	push	{r4, r5, r6, lr}
 800a796:	69c6      	ldr	r6, [r0, #28]
 800a798:	0005      	movs	r5, r0
 800a79a:	000c      	movs	r4, r1
 800a79c:	2e00      	cmp	r6, #0
 800a79e:	d10e      	bne.n	800a7be <_Bfree+0x2a>
 800a7a0:	2010      	movs	r0, #16
 800a7a2:	f7ff fef7 	bl	800a594 <malloc>
 800a7a6:	1e02      	subs	r2, r0, #0
 800a7a8:	61e8      	str	r0, [r5, #28]
 800a7aa:	d104      	bne.n	800a7b6 <_Bfree+0x22>
 800a7ac:	218f      	movs	r1, #143	@ 0x8f
 800a7ae:	4b09      	ldr	r3, [pc, #36]	@ (800a7d4 <_Bfree+0x40>)
 800a7b0:	4809      	ldr	r0, [pc, #36]	@ (800a7d8 <_Bfree+0x44>)
 800a7b2:	f000 fd7b 	bl	800b2ac <__assert_func>
 800a7b6:	6046      	str	r6, [r0, #4]
 800a7b8:	6086      	str	r6, [r0, #8]
 800a7ba:	6006      	str	r6, [r0, #0]
 800a7bc:	60c6      	str	r6, [r0, #12]
 800a7be:	2c00      	cmp	r4, #0
 800a7c0:	d007      	beq.n	800a7d2 <_Bfree+0x3e>
 800a7c2:	69eb      	ldr	r3, [r5, #28]
 800a7c4:	6862      	ldr	r2, [r4, #4]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	0092      	lsls	r2, r2, #2
 800a7ca:	189b      	adds	r3, r3, r2
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	6022      	str	r2, [r4, #0]
 800a7d0:	601c      	str	r4, [r3, #0]
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	0800e3d5 	.word	0x0800e3d5
 800a7d8:	0800e455 	.word	0x0800e455

0800a7dc <__multadd>:
 800a7dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7de:	000f      	movs	r7, r1
 800a7e0:	9001      	str	r0, [sp, #4]
 800a7e2:	000c      	movs	r4, r1
 800a7e4:	001e      	movs	r6, r3
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	690d      	ldr	r5, [r1, #16]
 800a7ea:	3714      	adds	r7, #20
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	b299      	uxth	r1, r3
 800a7f2:	4351      	muls	r1, r2
 800a7f4:	0c1b      	lsrs	r3, r3, #16
 800a7f6:	4353      	muls	r3, r2
 800a7f8:	1989      	adds	r1, r1, r6
 800a7fa:	0c0e      	lsrs	r6, r1, #16
 800a7fc:	199b      	adds	r3, r3, r6
 800a7fe:	0c1e      	lsrs	r6, r3, #16
 800a800:	b289      	uxth	r1, r1
 800a802:	041b      	lsls	r3, r3, #16
 800a804:	185b      	adds	r3, r3, r1
 800a806:	c708      	stmia	r7!, {r3}
 800a808:	4285      	cmp	r5, r0
 800a80a:	dcef      	bgt.n	800a7ec <__multadd+0x10>
 800a80c:	2e00      	cmp	r6, #0
 800a80e:	d022      	beq.n	800a856 <__multadd+0x7a>
 800a810:	68a3      	ldr	r3, [r4, #8]
 800a812:	42ab      	cmp	r3, r5
 800a814:	dc19      	bgt.n	800a84a <__multadd+0x6e>
 800a816:	6861      	ldr	r1, [r4, #4]
 800a818:	9801      	ldr	r0, [sp, #4]
 800a81a:	3101      	adds	r1, #1
 800a81c:	f7ff ff76 	bl	800a70c <_Balloc>
 800a820:	1e07      	subs	r7, r0, #0
 800a822:	d105      	bne.n	800a830 <__multadd+0x54>
 800a824:	003a      	movs	r2, r7
 800a826:	21ba      	movs	r1, #186	@ 0xba
 800a828:	4b0c      	ldr	r3, [pc, #48]	@ (800a85c <__multadd+0x80>)
 800a82a:	480d      	ldr	r0, [pc, #52]	@ (800a860 <__multadd+0x84>)
 800a82c:	f000 fd3e 	bl	800b2ac <__assert_func>
 800a830:	0021      	movs	r1, r4
 800a832:	6922      	ldr	r2, [r4, #16]
 800a834:	310c      	adds	r1, #12
 800a836:	3202      	adds	r2, #2
 800a838:	0092      	lsls	r2, r2, #2
 800a83a:	300c      	adds	r0, #12
 800a83c:	f7fe ffe2 	bl	8009804 <memcpy>
 800a840:	0021      	movs	r1, r4
 800a842:	9801      	ldr	r0, [sp, #4]
 800a844:	f7ff ffa6 	bl	800a794 <_Bfree>
 800a848:	003c      	movs	r4, r7
 800a84a:	1d2b      	adds	r3, r5, #4
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	18e3      	adds	r3, r4, r3
 800a850:	3501      	adds	r5, #1
 800a852:	605e      	str	r6, [r3, #4]
 800a854:	6125      	str	r5, [r4, #16]
 800a856:	0020      	movs	r0, r4
 800a858:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a85a:	46c0      	nop			@ (mov r8, r8)
 800a85c:	0800e444 	.word	0x0800e444
 800a860:	0800e455 	.word	0x0800e455

0800a864 <__hi0bits>:
 800a864:	2280      	movs	r2, #128	@ 0x80
 800a866:	0003      	movs	r3, r0
 800a868:	0252      	lsls	r2, r2, #9
 800a86a:	2000      	movs	r0, #0
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d201      	bcs.n	800a874 <__hi0bits+0x10>
 800a870:	041b      	lsls	r3, r3, #16
 800a872:	3010      	adds	r0, #16
 800a874:	2280      	movs	r2, #128	@ 0x80
 800a876:	0452      	lsls	r2, r2, #17
 800a878:	4293      	cmp	r3, r2
 800a87a:	d201      	bcs.n	800a880 <__hi0bits+0x1c>
 800a87c:	3008      	adds	r0, #8
 800a87e:	021b      	lsls	r3, r3, #8
 800a880:	2280      	movs	r2, #128	@ 0x80
 800a882:	0552      	lsls	r2, r2, #21
 800a884:	4293      	cmp	r3, r2
 800a886:	d201      	bcs.n	800a88c <__hi0bits+0x28>
 800a888:	3004      	adds	r0, #4
 800a88a:	011b      	lsls	r3, r3, #4
 800a88c:	2280      	movs	r2, #128	@ 0x80
 800a88e:	05d2      	lsls	r2, r2, #23
 800a890:	4293      	cmp	r3, r2
 800a892:	d201      	bcs.n	800a898 <__hi0bits+0x34>
 800a894:	3002      	adds	r0, #2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	db03      	blt.n	800a8a4 <__hi0bits+0x40>
 800a89c:	3001      	adds	r0, #1
 800a89e:	4213      	tst	r3, r2
 800a8a0:	d100      	bne.n	800a8a4 <__hi0bits+0x40>
 800a8a2:	2020      	movs	r0, #32
 800a8a4:	4770      	bx	lr

0800a8a6 <__lo0bits>:
 800a8a6:	6803      	ldr	r3, [r0, #0]
 800a8a8:	0001      	movs	r1, r0
 800a8aa:	2207      	movs	r2, #7
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	4010      	ands	r0, r2
 800a8b0:	4213      	tst	r3, r2
 800a8b2:	d00d      	beq.n	800a8d0 <__lo0bits+0x2a>
 800a8b4:	3a06      	subs	r2, #6
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	4213      	tst	r3, r2
 800a8ba:	d105      	bne.n	800a8c8 <__lo0bits+0x22>
 800a8bc:	3002      	adds	r0, #2
 800a8be:	4203      	tst	r3, r0
 800a8c0:	d003      	beq.n	800a8ca <__lo0bits+0x24>
 800a8c2:	40d3      	lsrs	r3, r2
 800a8c4:	0010      	movs	r0, r2
 800a8c6:	600b      	str	r3, [r1, #0]
 800a8c8:	4770      	bx	lr
 800a8ca:	089b      	lsrs	r3, r3, #2
 800a8cc:	600b      	str	r3, [r1, #0]
 800a8ce:	e7fb      	b.n	800a8c8 <__lo0bits+0x22>
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	2a00      	cmp	r2, #0
 800a8d4:	d101      	bne.n	800a8da <__lo0bits+0x34>
 800a8d6:	2010      	movs	r0, #16
 800a8d8:	0c1b      	lsrs	r3, r3, #16
 800a8da:	b2da      	uxtb	r2, r3
 800a8dc:	2a00      	cmp	r2, #0
 800a8de:	d101      	bne.n	800a8e4 <__lo0bits+0x3e>
 800a8e0:	3008      	adds	r0, #8
 800a8e2:	0a1b      	lsrs	r3, r3, #8
 800a8e4:	071a      	lsls	r2, r3, #28
 800a8e6:	d101      	bne.n	800a8ec <__lo0bits+0x46>
 800a8e8:	3004      	adds	r0, #4
 800a8ea:	091b      	lsrs	r3, r3, #4
 800a8ec:	079a      	lsls	r2, r3, #30
 800a8ee:	d101      	bne.n	800a8f4 <__lo0bits+0x4e>
 800a8f0:	3002      	adds	r0, #2
 800a8f2:	089b      	lsrs	r3, r3, #2
 800a8f4:	07da      	lsls	r2, r3, #31
 800a8f6:	d4e9      	bmi.n	800a8cc <__lo0bits+0x26>
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	085b      	lsrs	r3, r3, #1
 800a8fc:	d1e6      	bne.n	800a8cc <__lo0bits+0x26>
 800a8fe:	2020      	movs	r0, #32
 800a900:	e7e2      	b.n	800a8c8 <__lo0bits+0x22>
	...

0800a904 <__i2b>:
 800a904:	b510      	push	{r4, lr}
 800a906:	000c      	movs	r4, r1
 800a908:	2101      	movs	r1, #1
 800a90a:	f7ff feff 	bl	800a70c <_Balloc>
 800a90e:	2800      	cmp	r0, #0
 800a910:	d107      	bne.n	800a922 <__i2b+0x1e>
 800a912:	2146      	movs	r1, #70	@ 0x46
 800a914:	4c05      	ldr	r4, [pc, #20]	@ (800a92c <__i2b+0x28>)
 800a916:	0002      	movs	r2, r0
 800a918:	4b05      	ldr	r3, [pc, #20]	@ (800a930 <__i2b+0x2c>)
 800a91a:	0020      	movs	r0, r4
 800a91c:	31ff      	adds	r1, #255	@ 0xff
 800a91e:	f000 fcc5 	bl	800b2ac <__assert_func>
 800a922:	2301      	movs	r3, #1
 800a924:	6144      	str	r4, [r0, #20]
 800a926:	6103      	str	r3, [r0, #16]
 800a928:	bd10      	pop	{r4, pc}
 800a92a:	46c0      	nop			@ (mov r8, r8)
 800a92c:	0800e455 	.word	0x0800e455
 800a930:	0800e444 	.word	0x0800e444

0800a934 <__multiply>:
 800a934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a936:	0014      	movs	r4, r2
 800a938:	690a      	ldr	r2, [r1, #16]
 800a93a:	6923      	ldr	r3, [r4, #16]
 800a93c:	000d      	movs	r5, r1
 800a93e:	b089      	sub	sp, #36	@ 0x24
 800a940:	429a      	cmp	r2, r3
 800a942:	db02      	blt.n	800a94a <__multiply+0x16>
 800a944:	0023      	movs	r3, r4
 800a946:	000c      	movs	r4, r1
 800a948:	001d      	movs	r5, r3
 800a94a:	6927      	ldr	r7, [r4, #16]
 800a94c:	692e      	ldr	r6, [r5, #16]
 800a94e:	6861      	ldr	r1, [r4, #4]
 800a950:	19bb      	adds	r3, r7, r6
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	68a3      	ldr	r3, [r4, #8]
 800a956:	19ba      	adds	r2, r7, r6
 800a958:	4293      	cmp	r3, r2
 800a95a:	da00      	bge.n	800a95e <__multiply+0x2a>
 800a95c:	3101      	adds	r1, #1
 800a95e:	f7ff fed5 	bl	800a70c <_Balloc>
 800a962:	4684      	mov	ip, r0
 800a964:	2800      	cmp	r0, #0
 800a966:	d106      	bne.n	800a976 <__multiply+0x42>
 800a968:	21b1      	movs	r1, #177	@ 0xb1
 800a96a:	4662      	mov	r2, ip
 800a96c:	4b44      	ldr	r3, [pc, #272]	@ (800aa80 <__multiply+0x14c>)
 800a96e:	4845      	ldr	r0, [pc, #276]	@ (800aa84 <__multiply+0x150>)
 800a970:	0049      	lsls	r1, r1, #1
 800a972:	f000 fc9b 	bl	800b2ac <__assert_func>
 800a976:	0002      	movs	r2, r0
 800a978:	19bb      	adds	r3, r7, r6
 800a97a:	3214      	adds	r2, #20
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	18d3      	adds	r3, r2, r3
 800a980:	9301      	str	r3, [sp, #4]
 800a982:	2100      	movs	r1, #0
 800a984:	0013      	movs	r3, r2
 800a986:	9801      	ldr	r0, [sp, #4]
 800a988:	4283      	cmp	r3, r0
 800a98a:	d328      	bcc.n	800a9de <__multiply+0xaa>
 800a98c:	0023      	movs	r3, r4
 800a98e:	00bf      	lsls	r7, r7, #2
 800a990:	3314      	adds	r3, #20
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	3514      	adds	r5, #20
 800a996:	19db      	adds	r3, r3, r7
 800a998:	00b6      	lsls	r6, r6, #2
 800a99a:	9302      	str	r3, [sp, #8]
 800a99c:	19ab      	adds	r3, r5, r6
 800a99e:	9307      	str	r3, [sp, #28]
 800a9a0:	2304      	movs	r3, #4
 800a9a2:	9305      	str	r3, [sp, #20]
 800a9a4:	0023      	movs	r3, r4
 800a9a6:	9902      	ldr	r1, [sp, #8]
 800a9a8:	3315      	adds	r3, #21
 800a9aa:	4299      	cmp	r1, r3
 800a9ac:	d305      	bcc.n	800a9ba <__multiply+0x86>
 800a9ae:	1b0c      	subs	r4, r1, r4
 800a9b0:	3c15      	subs	r4, #21
 800a9b2:	08a4      	lsrs	r4, r4, #2
 800a9b4:	3401      	adds	r4, #1
 800a9b6:	00a3      	lsls	r3, r4, #2
 800a9b8:	9305      	str	r3, [sp, #20]
 800a9ba:	9b07      	ldr	r3, [sp, #28]
 800a9bc:	429d      	cmp	r5, r3
 800a9be:	d310      	bcc.n	800a9e2 <__multiply+0xae>
 800a9c0:	9b00      	ldr	r3, [sp, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dd05      	ble.n	800a9d2 <__multiply+0x9e>
 800a9c6:	9b01      	ldr	r3, [sp, #4]
 800a9c8:	3b04      	subs	r3, #4
 800a9ca:	9301      	str	r3, [sp, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d052      	beq.n	800aa78 <__multiply+0x144>
 800a9d2:	4663      	mov	r3, ip
 800a9d4:	4660      	mov	r0, ip
 800a9d6:	9a00      	ldr	r2, [sp, #0]
 800a9d8:	611a      	str	r2, [r3, #16]
 800a9da:	b009      	add	sp, #36	@ 0x24
 800a9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9de:	c302      	stmia	r3!, {r1}
 800a9e0:	e7d1      	b.n	800a986 <__multiply+0x52>
 800a9e2:	682c      	ldr	r4, [r5, #0]
 800a9e4:	b2a4      	uxth	r4, r4
 800a9e6:	2c00      	cmp	r4, #0
 800a9e8:	d01f      	beq.n	800aa2a <__multiply+0xf6>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	0017      	movs	r7, r2
 800a9ee:	9e04      	ldr	r6, [sp, #16]
 800a9f0:	9303      	str	r3, [sp, #12]
 800a9f2:	ce08      	ldmia	r6!, {r3}
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	9306      	str	r3, [sp, #24]
 800a9f8:	466b      	mov	r3, sp
 800a9fa:	8b1b      	ldrh	r3, [r3, #24]
 800a9fc:	b288      	uxth	r0, r1
 800a9fe:	4363      	muls	r3, r4
 800aa00:	181b      	adds	r3, r3, r0
 800aa02:	9803      	ldr	r0, [sp, #12]
 800aa04:	0c09      	lsrs	r1, r1, #16
 800aa06:	181b      	adds	r3, r3, r0
 800aa08:	9806      	ldr	r0, [sp, #24]
 800aa0a:	0c00      	lsrs	r0, r0, #16
 800aa0c:	4360      	muls	r0, r4
 800aa0e:	1840      	adds	r0, r0, r1
 800aa10:	0c19      	lsrs	r1, r3, #16
 800aa12:	1841      	adds	r1, r0, r1
 800aa14:	0c08      	lsrs	r0, r1, #16
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	0409      	lsls	r1, r1, #16
 800aa1a:	4319      	orrs	r1, r3
 800aa1c:	9b02      	ldr	r3, [sp, #8]
 800aa1e:	9003      	str	r0, [sp, #12]
 800aa20:	c702      	stmia	r7!, {r1}
 800aa22:	42b3      	cmp	r3, r6
 800aa24:	d8e5      	bhi.n	800a9f2 <__multiply+0xbe>
 800aa26:	9b05      	ldr	r3, [sp, #20]
 800aa28:	50d0      	str	r0, [r2, r3]
 800aa2a:	682c      	ldr	r4, [r5, #0]
 800aa2c:	0c24      	lsrs	r4, r4, #16
 800aa2e:	d020      	beq.n	800aa72 <__multiply+0x13e>
 800aa30:	2100      	movs	r1, #0
 800aa32:	0010      	movs	r0, r2
 800aa34:	6813      	ldr	r3, [r2, #0]
 800aa36:	9e04      	ldr	r6, [sp, #16]
 800aa38:	9103      	str	r1, [sp, #12]
 800aa3a:	6831      	ldr	r1, [r6, #0]
 800aa3c:	6807      	ldr	r7, [r0, #0]
 800aa3e:	b289      	uxth	r1, r1
 800aa40:	4361      	muls	r1, r4
 800aa42:	0c3f      	lsrs	r7, r7, #16
 800aa44:	19c9      	adds	r1, r1, r7
 800aa46:	9f03      	ldr	r7, [sp, #12]
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	19c9      	adds	r1, r1, r7
 800aa4c:	040f      	lsls	r7, r1, #16
 800aa4e:	431f      	orrs	r7, r3
 800aa50:	6007      	str	r7, [r0, #0]
 800aa52:	ce80      	ldmia	r6!, {r7}
 800aa54:	6843      	ldr	r3, [r0, #4]
 800aa56:	0c3f      	lsrs	r7, r7, #16
 800aa58:	4367      	muls	r7, r4
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	0c09      	lsrs	r1, r1, #16
 800aa5e:	18fb      	adds	r3, r7, r3
 800aa60:	185b      	adds	r3, r3, r1
 800aa62:	0c19      	lsrs	r1, r3, #16
 800aa64:	9103      	str	r1, [sp, #12]
 800aa66:	9902      	ldr	r1, [sp, #8]
 800aa68:	3004      	adds	r0, #4
 800aa6a:	42b1      	cmp	r1, r6
 800aa6c:	d8e5      	bhi.n	800aa3a <__multiply+0x106>
 800aa6e:	9905      	ldr	r1, [sp, #20]
 800aa70:	5053      	str	r3, [r2, r1]
 800aa72:	3504      	adds	r5, #4
 800aa74:	3204      	adds	r2, #4
 800aa76:	e7a0      	b.n	800a9ba <__multiply+0x86>
 800aa78:	9b00      	ldr	r3, [sp, #0]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	e79f      	b.n	800a9c0 <__multiply+0x8c>
 800aa80:	0800e444 	.word	0x0800e444
 800aa84:	0800e455 	.word	0x0800e455

0800aa88 <__pow5mult>:
 800aa88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	0015      	movs	r5, r2
 800aa8e:	0007      	movs	r7, r0
 800aa90:	000e      	movs	r6, r1
 800aa92:	401a      	ands	r2, r3
 800aa94:	421d      	tst	r5, r3
 800aa96:	d008      	beq.n	800aaaa <__pow5mult+0x22>
 800aa98:	4925      	ldr	r1, [pc, #148]	@ (800ab30 <__pow5mult+0xa8>)
 800aa9a:	3a01      	subs	r2, #1
 800aa9c:	0092      	lsls	r2, r2, #2
 800aa9e:	5852      	ldr	r2, [r2, r1]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	0031      	movs	r1, r6
 800aaa4:	f7ff fe9a 	bl	800a7dc <__multadd>
 800aaa8:	0006      	movs	r6, r0
 800aaaa:	10ad      	asrs	r5, r5, #2
 800aaac:	d03d      	beq.n	800ab2a <__pow5mult+0xa2>
 800aaae:	69fc      	ldr	r4, [r7, #28]
 800aab0:	2c00      	cmp	r4, #0
 800aab2:	d10f      	bne.n	800aad4 <__pow5mult+0x4c>
 800aab4:	2010      	movs	r0, #16
 800aab6:	f7ff fd6d 	bl	800a594 <malloc>
 800aaba:	1e02      	subs	r2, r0, #0
 800aabc:	61f8      	str	r0, [r7, #28]
 800aabe:	d105      	bne.n	800aacc <__pow5mult+0x44>
 800aac0:	21b4      	movs	r1, #180	@ 0xb4
 800aac2:	4b1c      	ldr	r3, [pc, #112]	@ (800ab34 <__pow5mult+0xac>)
 800aac4:	481c      	ldr	r0, [pc, #112]	@ (800ab38 <__pow5mult+0xb0>)
 800aac6:	31ff      	adds	r1, #255	@ 0xff
 800aac8:	f000 fbf0 	bl	800b2ac <__assert_func>
 800aacc:	6044      	str	r4, [r0, #4]
 800aace:	6084      	str	r4, [r0, #8]
 800aad0:	6004      	str	r4, [r0, #0]
 800aad2:	60c4      	str	r4, [r0, #12]
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	689c      	ldr	r4, [r3, #8]
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	2c00      	cmp	r4, #0
 800aadc:	d108      	bne.n	800aaf0 <__pow5mult+0x68>
 800aade:	0038      	movs	r0, r7
 800aae0:	4916      	ldr	r1, [pc, #88]	@ (800ab3c <__pow5mult+0xb4>)
 800aae2:	f7ff ff0f 	bl	800a904 <__i2b>
 800aae6:	9b01      	ldr	r3, [sp, #4]
 800aae8:	0004      	movs	r4, r0
 800aaea:	6098      	str	r0, [r3, #8]
 800aaec:	2300      	movs	r3, #0
 800aaee:	6003      	str	r3, [r0, #0]
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	421d      	tst	r5, r3
 800aaf4:	d00a      	beq.n	800ab0c <__pow5mult+0x84>
 800aaf6:	0031      	movs	r1, r6
 800aaf8:	0022      	movs	r2, r4
 800aafa:	0038      	movs	r0, r7
 800aafc:	f7ff ff1a 	bl	800a934 <__multiply>
 800ab00:	0031      	movs	r1, r6
 800ab02:	9001      	str	r0, [sp, #4]
 800ab04:	0038      	movs	r0, r7
 800ab06:	f7ff fe45 	bl	800a794 <_Bfree>
 800ab0a:	9e01      	ldr	r6, [sp, #4]
 800ab0c:	106d      	asrs	r5, r5, #1
 800ab0e:	d00c      	beq.n	800ab2a <__pow5mult+0xa2>
 800ab10:	6820      	ldr	r0, [r4, #0]
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d107      	bne.n	800ab26 <__pow5mult+0x9e>
 800ab16:	0022      	movs	r2, r4
 800ab18:	0021      	movs	r1, r4
 800ab1a:	0038      	movs	r0, r7
 800ab1c:	f7ff ff0a 	bl	800a934 <__multiply>
 800ab20:	2300      	movs	r3, #0
 800ab22:	6020      	str	r0, [r4, #0]
 800ab24:	6003      	str	r3, [r0, #0]
 800ab26:	0004      	movs	r4, r0
 800ab28:	e7e2      	b.n	800aaf0 <__pow5mult+0x68>
 800ab2a:	0030      	movs	r0, r6
 800ab2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab2e:	46c0      	nop			@ (mov r8, r8)
 800ab30:	0800e508 	.word	0x0800e508
 800ab34:	0800e3d5 	.word	0x0800e3d5
 800ab38:	0800e455 	.word	0x0800e455
 800ab3c:	00000271 	.word	0x00000271

0800ab40 <__lshift>:
 800ab40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab42:	000c      	movs	r4, r1
 800ab44:	0016      	movs	r6, r2
 800ab46:	6923      	ldr	r3, [r4, #16]
 800ab48:	1157      	asrs	r7, r2, #5
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	18fb      	adds	r3, r7, r3
 800ab4e:	9301      	str	r3, [sp, #4]
 800ab50:	3301      	adds	r3, #1
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	6849      	ldr	r1, [r1, #4]
 800ab56:	68a3      	ldr	r3, [r4, #8]
 800ab58:	9002      	str	r0, [sp, #8]
 800ab5a:	9a00      	ldr	r2, [sp, #0]
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	db10      	blt.n	800ab82 <__lshift+0x42>
 800ab60:	9802      	ldr	r0, [sp, #8]
 800ab62:	f7ff fdd3 	bl	800a70c <_Balloc>
 800ab66:	2300      	movs	r3, #0
 800ab68:	0001      	movs	r1, r0
 800ab6a:	0005      	movs	r5, r0
 800ab6c:	001a      	movs	r2, r3
 800ab6e:	3114      	adds	r1, #20
 800ab70:	4298      	cmp	r0, r3
 800ab72:	d10c      	bne.n	800ab8e <__lshift+0x4e>
 800ab74:	21ef      	movs	r1, #239	@ 0xef
 800ab76:	002a      	movs	r2, r5
 800ab78:	4b25      	ldr	r3, [pc, #148]	@ (800ac10 <__lshift+0xd0>)
 800ab7a:	4826      	ldr	r0, [pc, #152]	@ (800ac14 <__lshift+0xd4>)
 800ab7c:	0049      	lsls	r1, r1, #1
 800ab7e:	f000 fb95 	bl	800b2ac <__assert_func>
 800ab82:	3101      	adds	r1, #1
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	e7e8      	b.n	800ab5a <__lshift+0x1a>
 800ab88:	0098      	lsls	r0, r3, #2
 800ab8a:	500a      	str	r2, [r1, r0]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	42bb      	cmp	r3, r7
 800ab90:	dbfa      	blt.n	800ab88 <__lshift+0x48>
 800ab92:	43fb      	mvns	r3, r7
 800ab94:	17db      	asrs	r3, r3, #31
 800ab96:	401f      	ands	r7, r3
 800ab98:	00bf      	lsls	r7, r7, #2
 800ab9a:	0023      	movs	r3, r4
 800ab9c:	201f      	movs	r0, #31
 800ab9e:	19c9      	adds	r1, r1, r7
 800aba0:	0037      	movs	r7, r6
 800aba2:	6922      	ldr	r2, [r4, #16]
 800aba4:	3314      	adds	r3, #20
 800aba6:	0092      	lsls	r2, r2, #2
 800aba8:	189a      	adds	r2, r3, r2
 800abaa:	4007      	ands	r7, r0
 800abac:	4206      	tst	r6, r0
 800abae:	d029      	beq.n	800ac04 <__lshift+0xc4>
 800abb0:	3001      	adds	r0, #1
 800abb2:	1bc0      	subs	r0, r0, r7
 800abb4:	9003      	str	r0, [sp, #12]
 800abb6:	468c      	mov	ip, r1
 800abb8:	2000      	movs	r0, #0
 800abba:	681e      	ldr	r6, [r3, #0]
 800abbc:	40be      	lsls	r6, r7
 800abbe:	4306      	orrs	r6, r0
 800abc0:	4660      	mov	r0, ip
 800abc2:	c040      	stmia	r0!, {r6}
 800abc4:	4684      	mov	ip, r0
 800abc6:	9e03      	ldr	r6, [sp, #12]
 800abc8:	cb01      	ldmia	r3!, {r0}
 800abca:	40f0      	lsrs	r0, r6
 800abcc:	429a      	cmp	r2, r3
 800abce:	d8f4      	bhi.n	800abba <__lshift+0x7a>
 800abd0:	0026      	movs	r6, r4
 800abd2:	3615      	adds	r6, #21
 800abd4:	2304      	movs	r3, #4
 800abd6:	42b2      	cmp	r2, r6
 800abd8:	d304      	bcc.n	800abe4 <__lshift+0xa4>
 800abda:	1b13      	subs	r3, r2, r4
 800abdc:	3b15      	subs	r3, #21
 800abde:	089b      	lsrs	r3, r3, #2
 800abe0:	3301      	adds	r3, #1
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	50c8      	str	r0, [r1, r3]
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d002      	beq.n	800abf0 <__lshift+0xb0>
 800abea:	9b01      	ldr	r3, [sp, #4]
 800abec:	3302      	adds	r3, #2
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	9b00      	ldr	r3, [sp, #0]
 800abf2:	9802      	ldr	r0, [sp, #8]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	0021      	movs	r1, r4
 800abf8:	612b      	str	r3, [r5, #16]
 800abfa:	f7ff fdcb 	bl	800a794 <_Bfree>
 800abfe:	0028      	movs	r0, r5
 800ac00:	b005      	add	sp, #20
 800ac02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac04:	cb01      	ldmia	r3!, {r0}
 800ac06:	c101      	stmia	r1!, {r0}
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d8fb      	bhi.n	800ac04 <__lshift+0xc4>
 800ac0c:	e7f0      	b.n	800abf0 <__lshift+0xb0>
 800ac0e:	46c0      	nop			@ (mov r8, r8)
 800ac10:	0800e444 	.word	0x0800e444
 800ac14:	0800e455 	.word	0x0800e455

0800ac18 <__mcmp>:
 800ac18:	b530      	push	{r4, r5, lr}
 800ac1a:	690b      	ldr	r3, [r1, #16]
 800ac1c:	6904      	ldr	r4, [r0, #16]
 800ac1e:	0002      	movs	r2, r0
 800ac20:	1ae0      	subs	r0, r4, r3
 800ac22:	429c      	cmp	r4, r3
 800ac24:	d10f      	bne.n	800ac46 <__mcmp+0x2e>
 800ac26:	3214      	adds	r2, #20
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	3114      	adds	r1, #20
 800ac2c:	0014      	movs	r4, r2
 800ac2e:	18c9      	adds	r1, r1, r3
 800ac30:	18d2      	adds	r2, r2, r3
 800ac32:	3a04      	subs	r2, #4
 800ac34:	3904      	subs	r1, #4
 800ac36:	6815      	ldr	r5, [r2, #0]
 800ac38:	680b      	ldr	r3, [r1, #0]
 800ac3a:	429d      	cmp	r5, r3
 800ac3c:	d004      	beq.n	800ac48 <__mcmp+0x30>
 800ac3e:	2001      	movs	r0, #1
 800ac40:	429d      	cmp	r5, r3
 800ac42:	d200      	bcs.n	800ac46 <__mcmp+0x2e>
 800ac44:	3802      	subs	r0, #2
 800ac46:	bd30      	pop	{r4, r5, pc}
 800ac48:	4294      	cmp	r4, r2
 800ac4a:	d3f2      	bcc.n	800ac32 <__mcmp+0x1a>
 800ac4c:	e7fb      	b.n	800ac46 <__mcmp+0x2e>
	...

0800ac50 <__mdiff>:
 800ac50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac52:	000c      	movs	r4, r1
 800ac54:	b087      	sub	sp, #28
 800ac56:	9000      	str	r0, [sp, #0]
 800ac58:	0011      	movs	r1, r2
 800ac5a:	0020      	movs	r0, r4
 800ac5c:	0017      	movs	r7, r2
 800ac5e:	f7ff ffdb 	bl	800ac18 <__mcmp>
 800ac62:	1e05      	subs	r5, r0, #0
 800ac64:	d110      	bne.n	800ac88 <__mdiff+0x38>
 800ac66:	0001      	movs	r1, r0
 800ac68:	9800      	ldr	r0, [sp, #0]
 800ac6a:	f7ff fd4f 	bl	800a70c <_Balloc>
 800ac6e:	1e02      	subs	r2, r0, #0
 800ac70:	d104      	bne.n	800ac7c <__mdiff+0x2c>
 800ac72:	4b40      	ldr	r3, [pc, #256]	@ (800ad74 <__mdiff+0x124>)
 800ac74:	4840      	ldr	r0, [pc, #256]	@ (800ad78 <__mdiff+0x128>)
 800ac76:	4941      	ldr	r1, [pc, #260]	@ (800ad7c <__mdiff+0x12c>)
 800ac78:	f000 fb18 	bl	800b2ac <__assert_func>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	6145      	str	r5, [r0, #20]
 800ac80:	6103      	str	r3, [r0, #16]
 800ac82:	0010      	movs	r0, r2
 800ac84:	b007      	add	sp, #28
 800ac86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac88:	2600      	movs	r6, #0
 800ac8a:	42b0      	cmp	r0, r6
 800ac8c:	da03      	bge.n	800ac96 <__mdiff+0x46>
 800ac8e:	0023      	movs	r3, r4
 800ac90:	003c      	movs	r4, r7
 800ac92:	001f      	movs	r7, r3
 800ac94:	3601      	adds	r6, #1
 800ac96:	6861      	ldr	r1, [r4, #4]
 800ac98:	9800      	ldr	r0, [sp, #0]
 800ac9a:	f7ff fd37 	bl	800a70c <_Balloc>
 800ac9e:	1e02      	subs	r2, r0, #0
 800aca0:	d103      	bne.n	800acaa <__mdiff+0x5a>
 800aca2:	4b34      	ldr	r3, [pc, #208]	@ (800ad74 <__mdiff+0x124>)
 800aca4:	4834      	ldr	r0, [pc, #208]	@ (800ad78 <__mdiff+0x128>)
 800aca6:	4936      	ldr	r1, [pc, #216]	@ (800ad80 <__mdiff+0x130>)
 800aca8:	e7e6      	b.n	800ac78 <__mdiff+0x28>
 800acaa:	6923      	ldr	r3, [r4, #16]
 800acac:	3414      	adds	r4, #20
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	18e3      	adds	r3, r4, r3
 800acb4:	0021      	movs	r1, r4
 800acb6:	9401      	str	r4, [sp, #4]
 800acb8:	003c      	movs	r4, r7
 800acba:	9302      	str	r3, [sp, #8]
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	3414      	adds	r4, #20
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	18e3      	adds	r3, r4, r3
 800acc4:	9303      	str	r3, [sp, #12]
 800acc6:	0003      	movs	r3, r0
 800acc8:	60c6      	str	r6, [r0, #12]
 800acca:	468c      	mov	ip, r1
 800accc:	2000      	movs	r0, #0
 800acce:	3314      	adds	r3, #20
 800acd0:	9304      	str	r3, [sp, #16]
 800acd2:	9305      	str	r3, [sp, #20]
 800acd4:	4663      	mov	r3, ip
 800acd6:	cb20      	ldmia	r3!, {r5}
 800acd8:	b2a9      	uxth	r1, r5
 800acda:	000e      	movs	r6, r1
 800acdc:	469c      	mov	ip, r3
 800acde:	cc08      	ldmia	r4!, {r3}
 800ace0:	0c2d      	lsrs	r5, r5, #16
 800ace2:	b299      	uxth	r1, r3
 800ace4:	1a71      	subs	r1, r6, r1
 800ace6:	1809      	adds	r1, r1, r0
 800ace8:	0c1b      	lsrs	r3, r3, #16
 800acea:	1408      	asrs	r0, r1, #16
 800acec:	1aeb      	subs	r3, r5, r3
 800acee:	181b      	adds	r3, r3, r0
 800acf0:	1418      	asrs	r0, r3, #16
 800acf2:	b289      	uxth	r1, r1
 800acf4:	041b      	lsls	r3, r3, #16
 800acf6:	4319      	orrs	r1, r3
 800acf8:	9b05      	ldr	r3, [sp, #20]
 800acfa:	c302      	stmia	r3!, {r1}
 800acfc:	9305      	str	r3, [sp, #20]
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	d8e7      	bhi.n	800acd4 <__mdiff+0x84>
 800ad04:	0039      	movs	r1, r7
 800ad06:	9c03      	ldr	r4, [sp, #12]
 800ad08:	3115      	adds	r1, #21
 800ad0a:	2304      	movs	r3, #4
 800ad0c:	428c      	cmp	r4, r1
 800ad0e:	d304      	bcc.n	800ad1a <__mdiff+0xca>
 800ad10:	1be3      	subs	r3, r4, r7
 800ad12:	3b15      	subs	r3, #21
 800ad14:	089b      	lsrs	r3, r3, #2
 800ad16:	3301      	adds	r3, #1
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	9901      	ldr	r1, [sp, #4]
 800ad1c:	18cd      	adds	r5, r1, r3
 800ad1e:	9904      	ldr	r1, [sp, #16]
 800ad20:	002e      	movs	r6, r5
 800ad22:	18cb      	adds	r3, r1, r3
 800ad24:	001f      	movs	r7, r3
 800ad26:	9902      	ldr	r1, [sp, #8]
 800ad28:	428e      	cmp	r6, r1
 800ad2a:	d311      	bcc.n	800ad50 <__mdiff+0x100>
 800ad2c:	9c02      	ldr	r4, [sp, #8]
 800ad2e:	1ee9      	subs	r1, r5, #3
 800ad30:	2000      	movs	r0, #0
 800ad32:	428c      	cmp	r4, r1
 800ad34:	d304      	bcc.n	800ad40 <__mdiff+0xf0>
 800ad36:	0021      	movs	r1, r4
 800ad38:	3103      	adds	r1, #3
 800ad3a:	1b49      	subs	r1, r1, r5
 800ad3c:	0889      	lsrs	r1, r1, #2
 800ad3e:	0088      	lsls	r0, r1, #2
 800ad40:	181b      	adds	r3, r3, r0
 800ad42:	3b04      	subs	r3, #4
 800ad44:	6819      	ldr	r1, [r3, #0]
 800ad46:	2900      	cmp	r1, #0
 800ad48:	d010      	beq.n	800ad6c <__mdiff+0x11c>
 800ad4a:	9b00      	ldr	r3, [sp, #0]
 800ad4c:	6113      	str	r3, [r2, #16]
 800ad4e:	e798      	b.n	800ac82 <__mdiff+0x32>
 800ad50:	4684      	mov	ip, r0
 800ad52:	ce02      	ldmia	r6!, {r1}
 800ad54:	b288      	uxth	r0, r1
 800ad56:	4460      	add	r0, ip
 800ad58:	1400      	asrs	r0, r0, #16
 800ad5a:	0c0c      	lsrs	r4, r1, #16
 800ad5c:	1904      	adds	r4, r0, r4
 800ad5e:	4461      	add	r1, ip
 800ad60:	1420      	asrs	r0, r4, #16
 800ad62:	b289      	uxth	r1, r1
 800ad64:	0424      	lsls	r4, r4, #16
 800ad66:	4321      	orrs	r1, r4
 800ad68:	c702      	stmia	r7!, {r1}
 800ad6a:	e7dc      	b.n	800ad26 <__mdiff+0xd6>
 800ad6c:	9900      	ldr	r1, [sp, #0]
 800ad6e:	3901      	subs	r1, #1
 800ad70:	9100      	str	r1, [sp, #0]
 800ad72:	e7e6      	b.n	800ad42 <__mdiff+0xf2>
 800ad74:	0800e444 	.word	0x0800e444
 800ad78:	0800e455 	.word	0x0800e455
 800ad7c:	00000237 	.word	0x00000237
 800ad80:	00000245 	.word	0x00000245

0800ad84 <__d2b>:
 800ad84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad86:	2101      	movs	r1, #1
 800ad88:	0016      	movs	r6, r2
 800ad8a:	001f      	movs	r7, r3
 800ad8c:	f7ff fcbe 	bl	800a70c <_Balloc>
 800ad90:	1e04      	subs	r4, r0, #0
 800ad92:	d105      	bne.n	800ada0 <__d2b+0x1c>
 800ad94:	0022      	movs	r2, r4
 800ad96:	4b25      	ldr	r3, [pc, #148]	@ (800ae2c <__d2b+0xa8>)
 800ad98:	4825      	ldr	r0, [pc, #148]	@ (800ae30 <__d2b+0xac>)
 800ad9a:	4926      	ldr	r1, [pc, #152]	@ (800ae34 <__d2b+0xb0>)
 800ad9c:	f000 fa86 	bl	800b2ac <__assert_func>
 800ada0:	033b      	lsls	r3, r7, #12
 800ada2:	007d      	lsls	r5, r7, #1
 800ada4:	0b1b      	lsrs	r3, r3, #12
 800ada6:	0d6d      	lsrs	r5, r5, #21
 800ada8:	d002      	beq.n	800adb0 <__d2b+0x2c>
 800adaa:	2280      	movs	r2, #128	@ 0x80
 800adac:	0352      	lsls	r2, r2, #13
 800adae:	4313      	orrs	r3, r2
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	2e00      	cmp	r6, #0
 800adb4:	d025      	beq.n	800ae02 <__d2b+0x7e>
 800adb6:	4668      	mov	r0, sp
 800adb8:	9600      	str	r6, [sp, #0]
 800adba:	f7ff fd74 	bl	800a8a6 <__lo0bits>
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	9900      	ldr	r1, [sp, #0]
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d01b      	beq.n	800adfe <__d2b+0x7a>
 800adc6:	2220      	movs	r2, #32
 800adc8:	001e      	movs	r6, r3
 800adca:	1a12      	subs	r2, r2, r0
 800adcc:	4096      	lsls	r6, r2
 800adce:	0032      	movs	r2, r6
 800add0:	40c3      	lsrs	r3, r0
 800add2:	430a      	orrs	r2, r1
 800add4:	6162      	str	r2, [r4, #20]
 800add6:	9301      	str	r3, [sp, #4]
 800add8:	9e01      	ldr	r6, [sp, #4]
 800adda:	61a6      	str	r6, [r4, #24]
 800addc:	1e73      	subs	r3, r6, #1
 800adde:	419e      	sbcs	r6, r3
 800ade0:	3601      	adds	r6, #1
 800ade2:	6126      	str	r6, [r4, #16]
 800ade4:	2d00      	cmp	r5, #0
 800ade6:	d014      	beq.n	800ae12 <__d2b+0x8e>
 800ade8:	2635      	movs	r6, #53	@ 0x35
 800adea:	4b13      	ldr	r3, [pc, #76]	@ (800ae38 <__d2b+0xb4>)
 800adec:	18ed      	adds	r5, r5, r3
 800adee:	9b08      	ldr	r3, [sp, #32]
 800adf0:	182d      	adds	r5, r5, r0
 800adf2:	601d      	str	r5, [r3, #0]
 800adf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adf6:	1a36      	subs	r6, r6, r0
 800adf8:	601e      	str	r6, [r3, #0]
 800adfa:	0020      	movs	r0, r4
 800adfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adfe:	6161      	str	r1, [r4, #20]
 800ae00:	e7ea      	b.n	800add8 <__d2b+0x54>
 800ae02:	a801      	add	r0, sp, #4
 800ae04:	f7ff fd4f 	bl	800a8a6 <__lo0bits>
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	2601      	movs	r6, #1
 800ae0c:	6163      	str	r3, [r4, #20]
 800ae0e:	3020      	adds	r0, #32
 800ae10:	e7e7      	b.n	800ade2 <__d2b+0x5e>
 800ae12:	4b0a      	ldr	r3, [pc, #40]	@ (800ae3c <__d2b+0xb8>)
 800ae14:	18c0      	adds	r0, r0, r3
 800ae16:	9b08      	ldr	r3, [sp, #32]
 800ae18:	6018      	str	r0, [r3, #0]
 800ae1a:	4b09      	ldr	r3, [pc, #36]	@ (800ae40 <__d2b+0xbc>)
 800ae1c:	18f3      	adds	r3, r6, r3
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	18e3      	adds	r3, r4, r3
 800ae22:	6958      	ldr	r0, [r3, #20]
 800ae24:	f7ff fd1e 	bl	800a864 <__hi0bits>
 800ae28:	0176      	lsls	r6, r6, #5
 800ae2a:	e7e3      	b.n	800adf4 <__d2b+0x70>
 800ae2c:	0800e444 	.word	0x0800e444
 800ae30:	0800e455 	.word	0x0800e455
 800ae34:	0000030f 	.word	0x0000030f
 800ae38:	fffffbcd 	.word	0xfffffbcd
 800ae3c:	fffffbce 	.word	0xfffffbce
 800ae40:	3fffffff 	.word	0x3fffffff

0800ae44 <__ssputs_r>:
 800ae44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae46:	688e      	ldr	r6, [r1, #8]
 800ae48:	b085      	sub	sp, #20
 800ae4a:	001f      	movs	r7, r3
 800ae4c:	000c      	movs	r4, r1
 800ae4e:	680b      	ldr	r3, [r1, #0]
 800ae50:	9002      	str	r0, [sp, #8]
 800ae52:	9203      	str	r2, [sp, #12]
 800ae54:	42be      	cmp	r6, r7
 800ae56:	d830      	bhi.n	800aeba <__ssputs_r+0x76>
 800ae58:	210c      	movs	r1, #12
 800ae5a:	5e62      	ldrsh	r2, [r4, r1]
 800ae5c:	2190      	movs	r1, #144	@ 0x90
 800ae5e:	00c9      	lsls	r1, r1, #3
 800ae60:	420a      	tst	r2, r1
 800ae62:	d028      	beq.n	800aeb6 <__ssputs_r+0x72>
 800ae64:	2003      	movs	r0, #3
 800ae66:	6921      	ldr	r1, [r4, #16]
 800ae68:	1a5b      	subs	r3, r3, r1
 800ae6a:	9301      	str	r3, [sp, #4]
 800ae6c:	6963      	ldr	r3, [r4, #20]
 800ae6e:	4343      	muls	r3, r0
 800ae70:	9801      	ldr	r0, [sp, #4]
 800ae72:	0fdd      	lsrs	r5, r3, #31
 800ae74:	18ed      	adds	r5, r5, r3
 800ae76:	1c7b      	adds	r3, r7, #1
 800ae78:	181b      	adds	r3, r3, r0
 800ae7a:	106d      	asrs	r5, r5, #1
 800ae7c:	42ab      	cmp	r3, r5
 800ae7e:	d900      	bls.n	800ae82 <__ssputs_r+0x3e>
 800ae80:	001d      	movs	r5, r3
 800ae82:	0552      	lsls	r2, r2, #21
 800ae84:	d528      	bpl.n	800aed8 <__ssputs_r+0x94>
 800ae86:	0029      	movs	r1, r5
 800ae88:	9802      	ldr	r0, [sp, #8]
 800ae8a:	f7ff fbaf 	bl	800a5ec <_malloc_r>
 800ae8e:	1e06      	subs	r6, r0, #0
 800ae90:	d02c      	beq.n	800aeec <__ssputs_r+0xa8>
 800ae92:	9a01      	ldr	r2, [sp, #4]
 800ae94:	6921      	ldr	r1, [r4, #16]
 800ae96:	f7fe fcb5 	bl	8009804 <memcpy>
 800ae9a:	89a2      	ldrh	r2, [r4, #12]
 800ae9c:	4b18      	ldr	r3, [pc, #96]	@ (800af00 <__ssputs_r+0xbc>)
 800ae9e:	401a      	ands	r2, r3
 800aea0:	2380      	movs	r3, #128	@ 0x80
 800aea2:	4313      	orrs	r3, r2
 800aea4:	81a3      	strh	r3, [r4, #12]
 800aea6:	9b01      	ldr	r3, [sp, #4]
 800aea8:	6126      	str	r6, [r4, #16]
 800aeaa:	18f6      	adds	r6, r6, r3
 800aeac:	6026      	str	r6, [r4, #0]
 800aeae:	003e      	movs	r6, r7
 800aeb0:	6165      	str	r5, [r4, #20]
 800aeb2:	1aed      	subs	r5, r5, r3
 800aeb4:	60a5      	str	r5, [r4, #8]
 800aeb6:	42be      	cmp	r6, r7
 800aeb8:	d900      	bls.n	800aebc <__ssputs_r+0x78>
 800aeba:	003e      	movs	r6, r7
 800aebc:	0032      	movs	r2, r6
 800aebe:	9903      	ldr	r1, [sp, #12]
 800aec0:	6820      	ldr	r0, [r4, #0]
 800aec2:	f000 f9ce 	bl	800b262 <memmove>
 800aec6:	2000      	movs	r0, #0
 800aec8:	68a3      	ldr	r3, [r4, #8]
 800aeca:	1b9b      	subs	r3, r3, r6
 800aecc:	60a3      	str	r3, [r4, #8]
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	199b      	adds	r3, r3, r6
 800aed2:	6023      	str	r3, [r4, #0]
 800aed4:	b005      	add	sp, #20
 800aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed8:	002a      	movs	r2, r5
 800aeda:	9802      	ldr	r0, [sp, #8]
 800aedc:	f000 fa43 	bl	800b366 <_realloc_r>
 800aee0:	1e06      	subs	r6, r0, #0
 800aee2:	d1e0      	bne.n	800aea6 <__ssputs_r+0x62>
 800aee4:	6921      	ldr	r1, [r4, #16]
 800aee6:	9802      	ldr	r0, [sp, #8]
 800aee8:	f7ff fb0a 	bl	800a500 <_free_r>
 800aeec:	230c      	movs	r3, #12
 800aeee:	2001      	movs	r0, #1
 800aef0:	9a02      	ldr	r2, [sp, #8]
 800aef2:	4240      	negs	r0, r0
 800aef4:	6013      	str	r3, [r2, #0]
 800aef6:	89a2      	ldrh	r2, [r4, #12]
 800aef8:	3334      	adds	r3, #52	@ 0x34
 800aefa:	4313      	orrs	r3, r2
 800aefc:	81a3      	strh	r3, [r4, #12]
 800aefe:	e7e9      	b.n	800aed4 <__ssputs_r+0x90>
 800af00:	fffffb7f 	.word	0xfffffb7f

0800af04 <_svfiprintf_r>:
 800af04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af06:	b0a1      	sub	sp, #132	@ 0x84
 800af08:	9003      	str	r0, [sp, #12]
 800af0a:	001d      	movs	r5, r3
 800af0c:	898b      	ldrh	r3, [r1, #12]
 800af0e:	000f      	movs	r7, r1
 800af10:	0016      	movs	r6, r2
 800af12:	061b      	lsls	r3, r3, #24
 800af14:	d511      	bpl.n	800af3a <_svfiprintf_r+0x36>
 800af16:	690b      	ldr	r3, [r1, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10e      	bne.n	800af3a <_svfiprintf_r+0x36>
 800af1c:	2140      	movs	r1, #64	@ 0x40
 800af1e:	f7ff fb65 	bl	800a5ec <_malloc_r>
 800af22:	6038      	str	r0, [r7, #0]
 800af24:	6138      	str	r0, [r7, #16]
 800af26:	2800      	cmp	r0, #0
 800af28:	d105      	bne.n	800af36 <_svfiprintf_r+0x32>
 800af2a:	230c      	movs	r3, #12
 800af2c:	9a03      	ldr	r2, [sp, #12]
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	2001      	movs	r0, #1
 800af32:	4240      	negs	r0, r0
 800af34:	e0cf      	b.n	800b0d6 <_svfiprintf_r+0x1d2>
 800af36:	2340      	movs	r3, #64	@ 0x40
 800af38:	617b      	str	r3, [r7, #20]
 800af3a:	2300      	movs	r3, #0
 800af3c:	ac08      	add	r4, sp, #32
 800af3e:	6163      	str	r3, [r4, #20]
 800af40:	3320      	adds	r3, #32
 800af42:	7663      	strb	r3, [r4, #25]
 800af44:	3310      	adds	r3, #16
 800af46:	76a3      	strb	r3, [r4, #26]
 800af48:	9507      	str	r5, [sp, #28]
 800af4a:	0035      	movs	r5, r6
 800af4c:	782b      	ldrb	r3, [r5, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <_svfiprintf_r+0x52>
 800af52:	2b25      	cmp	r3, #37	@ 0x25
 800af54:	d148      	bne.n	800afe8 <_svfiprintf_r+0xe4>
 800af56:	1bab      	subs	r3, r5, r6
 800af58:	9305      	str	r3, [sp, #20]
 800af5a:	42b5      	cmp	r5, r6
 800af5c:	d00b      	beq.n	800af76 <_svfiprintf_r+0x72>
 800af5e:	0032      	movs	r2, r6
 800af60:	0039      	movs	r1, r7
 800af62:	9803      	ldr	r0, [sp, #12]
 800af64:	f7ff ff6e 	bl	800ae44 <__ssputs_r>
 800af68:	3001      	adds	r0, #1
 800af6a:	d100      	bne.n	800af6e <_svfiprintf_r+0x6a>
 800af6c:	e0ae      	b.n	800b0cc <_svfiprintf_r+0x1c8>
 800af6e:	6963      	ldr	r3, [r4, #20]
 800af70:	9a05      	ldr	r2, [sp, #20]
 800af72:	189b      	adds	r3, r3, r2
 800af74:	6163      	str	r3, [r4, #20]
 800af76:	782b      	ldrb	r3, [r5, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d100      	bne.n	800af7e <_svfiprintf_r+0x7a>
 800af7c:	e0a6      	b.n	800b0cc <_svfiprintf_r+0x1c8>
 800af7e:	2201      	movs	r2, #1
 800af80:	2300      	movs	r3, #0
 800af82:	4252      	negs	r2, r2
 800af84:	6062      	str	r2, [r4, #4]
 800af86:	a904      	add	r1, sp, #16
 800af88:	3254      	adds	r2, #84	@ 0x54
 800af8a:	1852      	adds	r2, r2, r1
 800af8c:	1c6e      	adds	r6, r5, #1
 800af8e:	6023      	str	r3, [r4, #0]
 800af90:	60e3      	str	r3, [r4, #12]
 800af92:	60a3      	str	r3, [r4, #8]
 800af94:	7013      	strb	r3, [r2, #0]
 800af96:	65a3      	str	r3, [r4, #88]	@ 0x58
 800af98:	4b54      	ldr	r3, [pc, #336]	@ (800b0ec <_svfiprintf_r+0x1e8>)
 800af9a:	2205      	movs	r2, #5
 800af9c:	0018      	movs	r0, r3
 800af9e:	7831      	ldrb	r1, [r6, #0]
 800afa0:	9305      	str	r3, [sp, #20]
 800afa2:	f7fe fc24 	bl	80097ee <memchr>
 800afa6:	1c75      	adds	r5, r6, #1
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d11f      	bne.n	800afec <_svfiprintf_r+0xe8>
 800afac:	6822      	ldr	r2, [r4, #0]
 800afae:	06d3      	lsls	r3, r2, #27
 800afb0:	d504      	bpl.n	800afbc <_svfiprintf_r+0xb8>
 800afb2:	2353      	movs	r3, #83	@ 0x53
 800afb4:	a904      	add	r1, sp, #16
 800afb6:	185b      	adds	r3, r3, r1
 800afb8:	2120      	movs	r1, #32
 800afba:	7019      	strb	r1, [r3, #0]
 800afbc:	0713      	lsls	r3, r2, #28
 800afbe:	d504      	bpl.n	800afca <_svfiprintf_r+0xc6>
 800afc0:	2353      	movs	r3, #83	@ 0x53
 800afc2:	a904      	add	r1, sp, #16
 800afc4:	185b      	adds	r3, r3, r1
 800afc6:	212b      	movs	r1, #43	@ 0x2b
 800afc8:	7019      	strb	r1, [r3, #0]
 800afca:	7833      	ldrb	r3, [r6, #0]
 800afcc:	2b2a      	cmp	r3, #42	@ 0x2a
 800afce:	d016      	beq.n	800affe <_svfiprintf_r+0xfa>
 800afd0:	0035      	movs	r5, r6
 800afd2:	2100      	movs	r1, #0
 800afd4:	200a      	movs	r0, #10
 800afd6:	68e3      	ldr	r3, [r4, #12]
 800afd8:	782a      	ldrb	r2, [r5, #0]
 800afda:	1c6e      	adds	r6, r5, #1
 800afdc:	3a30      	subs	r2, #48	@ 0x30
 800afde:	2a09      	cmp	r2, #9
 800afe0:	d950      	bls.n	800b084 <_svfiprintf_r+0x180>
 800afe2:	2900      	cmp	r1, #0
 800afe4:	d111      	bne.n	800b00a <_svfiprintf_r+0x106>
 800afe6:	e017      	b.n	800b018 <_svfiprintf_r+0x114>
 800afe8:	3501      	adds	r5, #1
 800afea:	e7af      	b.n	800af4c <_svfiprintf_r+0x48>
 800afec:	9b05      	ldr	r3, [sp, #20]
 800afee:	6822      	ldr	r2, [r4, #0]
 800aff0:	1ac0      	subs	r0, r0, r3
 800aff2:	2301      	movs	r3, #1
 800aff4:	4083      	lsls	r3, r0
 800aff6:	4313      	orrs	r3, r2
 800aff8:	002e      	movs	r6, r5
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	e7cc      	b.n	800af98 <_svfiprintf_r+0x94>
 800affe:	9b07      	ldr	r3, [sp, #28]
 800b000:	1d19      	adds	r1, r3, #4
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	9107      	str	r1, [sp, #28]
 800b006:	2b00      	cmp	r3, #0
 800b008:	db01      	blt.n	800b00e <_svfiprintf_r+0x10a>
 800b00a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b00c:	e004      	b.n	800b018 <_svfiprintf_r+0x114>
 800b00e:	425b      	negs	r3, r3
 800b010:	60e3      	str	r3, [r4, #12]
 800b012:	2302      	movs	r3, #2
 800b014:	4313      	orrs	r3, r2
 800b016:	6023      	str	r3, [r4, #0]
 800b018:	782b      	ldrb	r3, [r5, #0]
 800b01a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b01c:	d10c      	bne.n	800b038 <_svfiprintf_r+0x134>
 800b01e:	786b      	ldrb	r3, [r5, #1]
 800b020:	2b2a      	cmp	r3, #42	@ 0x2a
 800b022:	d134      	bne.n	800b08e <_svfiprintf_r+0x18a>
 800b024:	9b07      	ldr	r3, [sp, #28]
 800b026:	3502      	adds	r5, #2
 800b028:	1d1a      	adds	r2, r3, #4
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	9207      	str	r2, [sp, #28]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	da01      	bge.n	800b036 <_svfiprintf_r+0x132>
 800b032:	2301      	movs	r3, #1
 800b034:	425b      	negs	r3, r3
 800b036:	9309      	str	r3, [sp, #36]	@ 0x24
 800b038:	4e2d      	ldr	r6, [pc, #180]	@ (800b0f0 <_svfiprintf_r+0x1ec>)
 800b03a:	2203      	movs	r2, #3
 800b03c:	0030      	movs	r0, r6
 800b03e:	7829      	ldrb	r1, [r5, #0]
 800b040:	f7fe fbd5 	bl	80097ee <memchr>
 800b044:	2800      	cmp	r0, #0
 800b046:	d006      	beq.n	800b056 <_svfiprintf_r+0x152>
 800b048:	2340      	movs	r3, #64	@ 0x40
 800b04a:	1b80      	subs	r0, r0, r6
 800b04c:	4083      	lsls	r3, r0
 800b04e:	6822      	ldr	r2, [r4, #0]
 800b050:	3501      	adds	r5, #1
 800b052:	4313      	orrs	r3, r2
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	7829      	ldrb	r1, [r5, #0]
 800b058:	2206      	movs	r2, #6
 800b05a:	4826      	ldr	r0, [pc, #152]	@ (800b0f4 <_svfiprintf_r+0x1f0>)
 800b05c:	1c6e      	adds	r6, r5, #1
 800b05e:	7621      	strb	r1, [r4, #24]
 800b060:	f7fe fbc5 	bl	80097ee <memchr>
 800b064:	2800      	cmp	r0, #0
 800b066:	d038      	beq.n	800b0da <_svfiprintf_r+0x1d6>
 800b068:	4b23      	ldr	r3, [pc, #140]	@ (800b0f8 <_svfiprintf_r+0x1f4>)
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d122      	bne.n	800b0b4 <_svfiprintf_r+0x1b0>
 800b06e:	2207      	movs	r2, #7
 800b070:	9b07      	ldr	r3, [sp, #28]
 800b072:	3307      	adds	r3, #7
 800b074:	4393      	bics	r3, r2
 800b076:	3308      	adds	r3, #8
 800b078:	9307      	str	r3, [sp, #28]
 800b07a:	6963      	ldr	r3, [r4, #20]
 800b07c:	9a04      	ldr	r2, [sp, #16]
 800b07e:	189b      	adds	r3, r3, r2
 800b080:	6163      	str	r3, [r4, #20]
 800b082:	e762      	b.n	800af4a <_svfiprintf_r+0x46>
 800b084:	4343      	muls	r3, r0
 800b086:	0035      	movs	r5, r6
 800b088:	2101      	movs	r1, #1
 800b08a:	189b      	adds	r3, r3, r2
 800b08c:	e7a4      	b.n	800afd8 <_svfiprintf_r+0xd4>
 800b08e:	2300      	movs	r3, #0
 800b090:	200a      	movs	r0, #10
 800b092:	0019      	movs	r1, r3
 800b094:	3501      	adds	r5, #1
 800b096:	6063      	str	r3, [r4, #4]
 800b098:	782a      	ldrb	r2, [r5, #0]
 800b09a:	1c6e      	adds	r6, r5, #1
 800b09c:	3a30      	subs	r2, #48	@ 0x30
 800b09e:	2a09      	cmp	r2, #9
 800b0a0:	d903      	bls.n	800b0aa <_svfiprintf_r+0x1a6>
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d0c8      	beq.n	800b038 <_svfiprintf_r+0x134>
 800b0a6:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0a8:	e7c6      	b.n	800b038 <_svfiprintf_r+0x134>
 800b0aa:	4341      	muls	r1, r0
 800b0ac:	0035      	movs	r5, r6
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	1889      	adds	r1, r1, r2
 800b0b2:	e7f1      	b.n	800b098 <_svfiprintf_r+0x194>
 800b0b4:	aa07      	add	r2, sp, #28
 800b0b6:	9200      	str	r2, [sp, #0]
 800b0b8:	0021      	movs	r1, r4
 800b0ba:	003a      	movs	r2, r7
 800b0bc:	4b0f      	ldr	r3, [pc, #60]	@ (800b0fc <_svfiprintf_r+0x1f8>)
 800b0be:	9803      	ldr	r0, [sp, #12]
 800b0c0:	f7fd fe22 	bl	8008d08 <_printf_float>
 800b0c4:	9004      	str	r0, [sp, #16]
 800b0c6:	9b04      	ldr	r3, [sp, #16]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	d1d6      	bne.n	800b07a <_svfiprintf_r+0x176>
 800b0cc:	89bb      	ldrh	r3, [r7, #12]
 800b0ce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b0d0:	065b      	lsls	r3, r3, #25
 800b0d2:	d500      	bpl.n	800b0d6 <_svfiprintf_r+0x1d2>
 800b0d4:	e72c      	b.n	800af30 <_svfiprintf_r+0x2c>
 800b0d6:	b021      	add	sp, #132	@ 0x84
 800b0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0da:	aa07      	add	r2, sp, #28
 800b0dc:	9200      	str	r2, [sp, #0]
 800b0de:	0021      	movs	r1, r4
 800b0e0:	003a      	movs	r2, r7
 800b0e2:	4b06      	ldr	r3, [pc, #24]	@ (800b0fc <_svfiprintf_r+0x1f8>)
 800b0e4:	9803      	ldr	r0, [sp, #12]
 800b0e6:	f7fe f8bd 	bl	8009264 <_printf_i>
 800b0ea:	e7eb      	b.n	800b0c4 <_svfiprintf_r+0x1c0>
 800b0ec:	0800e4ae 	.word	0x0800e4ae
 800b0f0:	0800e4b4 	.word	0x0800e4b4
 800b0f4:	0800e4b8 	.word	0x0800e4b8
 800b0f8:	08008d09 	.word	0x08008d09
 800b0fc:	0800ae45 	.word	0x0800ae45

0800b100 <__sflush_r>:
 800b100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b102:	220c      	movs	r2, #12
 800b104:	5e8b      	ldrsh	r3, [r1, r2]
 800b106:	0005      	movs	r5, r0
 800b108:	000c      	movs	r4, r1
 800b10a:	071a      	lsls	r2, r3, #28
 800b10c:	d456      	bmi.n	800b1bc <__sflush_r+0xbc>
 800b10e:	684a      	ldr	r2, [r1, #4]
 800b110:	2a00      	cmp	r2, #0
 800b112:	dc02      	bgt.n	800b11a <__sflush_r+0x1a>
 800b114:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800b116:	2a00      	cmp	r2, #0
 800b118:	dd4e      	ble.n	800b1b8 <__sflush_r+0xb8>
 800b11a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b11c:	2f00      	cmp	r7, #0
 800b11e:	d04b      	beq.n	800b1b8 <__sflush_r+0xb8>
 800b120:	2200      	movs	r2, #0
 800b122:	2080      	movs	r0, #128	@ 0x80
 800b124:	682e      	ldr	r6, [r5, #0]
 800b126:	602a      	str	r2, [r5, #0]
 800b128:	001a      	movs	r2, r3
 800b12a:	0140      	lsls	r0, r0, #5
 800b12c:	6a21      	ldr	r1, [r4, #32]
 800b12e:	4002      	ands	r2, r0
 800b130:	4203      	tst	r3, r0
 800b132:	d033      	beq.n	800b19c <__sflush_r+0x9c>
 800b134:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	075b      	lsls	r3, r3, #29
 800b13a:	d506      	bpl.n	800b14a <__sflush_r+0x4a>
 800b13c:	6863      	ldr	r3, [r4, #4]
 800b13e:	1ad2      	subs	r2, r2, r3
 800b140:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <__sflush_r+0x4a>
 800b146:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b148:	1ad2      	subs	r2, r2, r3
 800b14a:	2300      	movs	r3, #0
 800b14c:	0028      	movs	r0, r5
 800b14e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b150:	6a21      	ldr	r1, [r4, #32]
 800b152:	47b8      	blx	r7
 800b154:	89a2      	ldrh	r2, [r4, #12]
 800b156:	1c43      	adds	r3, r0, #1
 800b158:	d106      	bne.n	800b168 <__sflush_r+0x68>
 800b15a:	6829      	ldr	r1, [r5, #0]
 800b15c:	291d      	cmp	r1, #29
 800b15e:	d846      	bhi.n	800b1ee <__sflush_r+0xee>
 800b160:	4b29      	ldr	r3, [pc, #164]	@ (800b208 <__sflush_r+0x108>)
 800b162:	40cb      	lsrs	r3, r1
 800b164:	07db      	lsls	r3, r3, #31
 800b166:	d542      	bpl.n	800b1ee <__sflush_r+0xee>
 800b168:	2300      	movs	r3, #0
 800b16a:	6063      	str	r3, [r4, #4]
 800b16c:	6923      	ldr	r3, [r4, #16]
 800b16e:	6023      	str	r3, [r4, #0]
 800b170:	04d2      	lsls	r2, r2, #19
 800b172:	d505      	bpl.n	800b180 <__sflush_r+0x80>
 800b174:	1c43      	adds	r3, r0, #1
 800b176:	d102      	bne.n	800b17e <__sflush_r+0x7e>
 800b178:	682b      	ldr	r3, [r5, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d100      	bne.n	800b180 <__sflush_r+0x80>
 800b17e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b182:	602e      	str	r6, [r5, #0]
 800b184:	2900      	cmp	r1, #0
 800b186:	d017      	beq.n	800b1b8 <__sflush_r+0xb8>
 800b188:	0023      	movs	r3, r4
 800b18a:	3344      	adds	r3, #68	@ 0x44
 800b18c:	4299      	cmp	r1, r3
 800b18e:	d002      	beq.n	800b196 <__sflush_r+0x96>
 800b190:	0028      	movs	r0, r5
 800b192:	f7ff f9b5 	bl	800a500 <_free_r>
 800b196:	2300      	movs	r3, #0
 800b198:	6363      	str	r3, [r4, #52]	@ 0x34
 800b19a:	e00d      	b.n	800b1b8 <__sflush_r+0xb8>
 800b19c:	2301      	movs	r3, #1
 800b19e:	0028      	movs	r0, r5
 800b1a0:	47b8      	blx	r7
 800b1a2:	0002      	movs	r2, r0
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d1c6      	bne.n	800b136 <__sflush_r+0x36>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d0c3      	beq.n	800b136 <__sflush_r+0x36>
 800b1ae:	2b1d      	cmp	r3, #29
 800b1b0:	d001      	beq.n	800b1b6 <__sflush_r+0xb6>
 800b1b2:	2b16      	cmp	r3, #22
 800b1b4:	d11a      	bne.n	800b1ec <__sflush_r+0xec>
 800b1b6:	602e      	str	r6, [r5, #0]
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	e01e      	b.n	800b1fa <__sflush_r+0xfa>
 800b1bc:	690e      	ldr	r6, [r1, #16]
 800b1be:	2e00      	cmp	r6, #0
 800b1c0:	d0fa      	beq.n	800b1b8 <__sflush_r+0xb8>
 800b1c2:	680f      	ldr	r7, [r1, #0]
 800b1c4:	600e      	str	r6, [r1, #0]
 800b1c6:	1bba      	subs	r2, r7, r6
 800b1c8:	9201      	str	r2, [sp, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	079b      	lsls	r3, r3, #30
 800b1ce:	d100      	bne.n	800b1d2 <__sflush_r+0xd2>
 800b1d0:	694a      	ldr	r2, [r1, #20]
 800b1d2:	60a2      	str	r2, [r4, #8]
 800b1d4:	9b01      	ldr	r3, [sp, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	ddee      	ble.n	800b1b8 <__sflush_r+0xb8>
 800b1da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b1dc:	0032      	movs	r2, r6
 800b1de:	001f      	movs	r7, r3
 800b1e0:	0028      	movs	r0, r5
 800b1e2:	9b01      	ldr	r3, [sp, #4]
 800b1e4:	6a21      	ldr	r1, [r4, #32]
 800b1e6:	47b8      	blx	r7
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	dc07      	bgt.n	800b1fc <__sflush_r+0xfc>
 800b1ec:	89a2      	ldrh	r2, [r4, #12]
 800b1ee:	2340      	movs	r3, #64	@ 0x40
 800b1f0:	2001      	movs	r0, #1
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	b21b      	sxth	r3, r3
 800b1f6:	81a3      	strh	r3, [r4, #12]
 800b1f8:	4240      	negs	r0, r0
 800b1fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1fc:	9b01      	ldr	r3, [sp, #4]
 800b1fe:	1836      	adds	r6, r6, r0
 800b200:	1a1b      	subs	r3, r3, r0
 800b202:	9301      	str	r3, [sp, #4]
 800b204:	e7e6      	b.n	800b1d4 <__sflush_r+0xd4>
 800b206:	46c0      	nop			@ (mov r8, r8)
 800b208:	20400001 	.word	0x20400001

0800b20c <_fflush_r>:
 800b20c:	690b      	ldr	r3, [r1, #16]
 800b20e:	b570      	push	{r4, r5, r6, lr}
 800b210:	0005      	movs	r5, r0
 800b212:	000c      	movs	r4, r1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d102      	bne.n	800b21e <_fflush_r+0x12>
 800b218:	2500      	movs	r5, #0
 800b21a:	0028      	movs	r0, r5
 800b21c:	bd70      	pop	{r4, r5, r6, pc}
 800b21e:	2800      	cmp	r0, #0
 800b220:	d004      	beq.n	800b22c <_fflush_r+0x20>
 800b222:	6a03      	ldr	r3, [r0, #32]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <_fflush_r+0x20>
 800b228:	f7fe f9b8 	bl	800959c <__sinit>
 800b22c:	220c      	movs	r2, #12
 800b22e:	5ea3      	ldrsh	r3, [r4, r2]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0f1      	beq.n	800b218 <_fflush_r+0xc>
 800b234:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b236:	07d2      	lsls	r2, r2, #31
 800b238:	d404      	bmi.n	800b244 <_fflush_r+0x38>
 800b23a:	059b      	lsls	r3, r3, #22
 800b23c:	d402      	bmi.n	800b244 <_fflush_r+0x38>
 800b23e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b240:	f7fe fad3 	bl	80097ea <__retarget_lock_acquire_recursive>
 800b244:	0028      	movs	r0, r5
 800b246:	0021      	movs	r1, r4
 800b248:	f7ff ff5a 	bl	800b100 <__sflush_r>
 800b24c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b24e:	0005      	movs	r5, r0
 800b250:	07db      	lsls	r3, r3, #31
 800b252:	d4e2      	bmi.n	800b21a <_fflush_r+0xe>
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	059b      	lsls	r3, r3, #22
 800b258:	d4df      	bmi.n	800b21a <_fflush_r+0xe>
 800b25a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b25c:	f7fe fac6 	bl	80097ec <__retarget_lock_release_recursive>
 800b260:	e7db      	b.n	800b21a <_fflush_r+0xe>

0800b262 <memmove>:
 800b262:	b510      	push	{r4, lr}
 800b264:	4288      	cmp	r0, r1
 800b266:	d902      	bls.n	800b26e <memmove+0xc>
 800b268:	188b      	adds	r3, r1, r2
 800b26a:	4298      	cmp	r0, r3
 800b26c:	d308      	bcc.n	800b280 <memmove+0x1e>
 800b26e:	2300      	movs	r3, #0
 800b270:	429a      	cmp	r2, r3
 800b272:	d007      	beq.n	800b284 <memmove+0x22>
 800b274:	5ccc      	ldrb	r4, [r1, r3]
 800b276:	54c4      	strb	r4, [r0, r3]
 800b278:	3301      	adds	r3, #1
 800b27a:	e7f9      	b.n	800b270 <memmove+0xe>
 800b27c:	5c8b      	ldrb	r3, [r1, r2]
 800b27e:	5483      	strb	r3, [r0, r2]
 800b280:	3a01      	subs	r2, #1
 800b282:	d2fb      	bcs.n	800b27c <memmove+0x1a>
 800b284:	bd10      	pop	{r4, pc}
	...

0800b288 <_sbrk_r>:
 800b288:	2300      	movs	r3, #0
 800b28a:	b570      	push	{r4, r5, r6, lr}
 800b28c:	4d06      	ldr	r5, [pc, #24]	@ (800b2a8 <_sbrk_r+0x20>)
 800b28e:	0004      	movs	r4, r0
 800b290:	0008      	movs	r0, r1
 800b292:	602b      	str	r3, [r5, #0]
 800b294:	f7fa f95c 	bl	8005550 <_sbrk>
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	d103      	bne.n	800b2a4 <_sbrk_r+0x1c>
 800b29c:	682b      	ldr	r3, [r5, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d000      	beq.n	800b2a4 <_sbrk_r+0x1c>
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	bd70      	pop	{r4, r5, r6, pc}
 800b2a6:	46c0      	nop			@ (mov r8, r8)
 800b2a8:	20000a50 	.word	0x20000a50

0800b2ac <__assert_func>:
 800b2ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b2ae:	0014      	movs	r4, r2
 800b2b0:	001a      	movs	r2, r3
 800b2b2:	4b09      	ldr	r3, [pc, #36]	@ (800b2d8 <__assert_func+0x2c>)
 800b2b4:	0005      	movs	r5, r0
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	000e      	movs	r6, r1
 800b2ba:	68d8      	ldr	r0, [r3, #12]
 800b2bc:	4b07      	ldr	r3, [pc, #28]	@ (800b2dc <__assert_func+0x30>)
 800b2be:	2c00      	cmp	r4, #0
 800b2c0:	d101      	bne.n	800b2c6 <__assert_func+0x1a>
 800b2c2:	4b07      	ldr	r3, [pc, #28]	@ (800b2e0 <__assert_func+0x34>)
 800b2c4:	001c      	movs	r4, r3
 800b2c6:	4907      	ldr	r1, [pc, #28]	@ (800b2e4 <__assert_func+0x38>)
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	9402      	str	r4, [sp, #8]
 800b2cc:	002b      	movs	r3, r5
 800b2ce:	9600      	str	r6, [sp, #0]
 800b2d0:	f000 f886 	bl	800b3e0 <fiprintf>
 800b2d4:	f000 f894 	bl	800b400 <abort>
 800b2d8:	20000038 	.word	0x20000038
 800b2dc:	0800e4c9 	.word	0x0800e4c9
 800b2e0:	0800e504 	.word	0x0800e504
 800b2e4:	0800e4d6 	.word	0x0800e4d6

0800b2e8 <_calloc_r>:
 800b2e8:	b570      	push	{r4, r5, r6, lr}
 800b2ea:	0c0b      	lsrs	r3, r1, #16
 800b2ec:	0c15      	lsrs	r5, r2, #16
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d11e      	bne.n	800b330 <_calloc_r+0x48>
 800b2f2:	2d00      	cmp	r5, #0
 800b2f4:	d10c      	bne.n	800b310 <_calloc_r+0x28>
 800b2f6:	b289      	uxth	r1, r1
 800b2f8:	b294      	uxth	r4, r2
 800b2fa:	434c      	muls	r4, r1
 800b2fc:	0021      	movs	r1, r4
 800b2fe:	f7ff f975 	bl	800a5ec <_malloc_r>
 800b302:	1e05      	subs	r5, r0, #0
 800b304:	d01b      	beq.n	800b33e <_calloc_r+0x56>
 800b306:	0022      	movs	r2, r4
 800b308:	2100      	movs	r1, #0
 800b30a:	f7fe f9e9 	bl	80096e0 <memset>
 800b30e:	e016      	b.n	800b33e <_calloc_r+0x56>
 800b310:	1c2b      	adds	r3, r5, #0
 800b312:	1c0c      	adds	r4, r1, #0
 800b314:	b289      	uxth	r1, r1
 800b316:	b292      	uxth	r2, r2
 800b318:	434a      	muls	r2, r1
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	b2a1      	uxth	r1, r4
 800b31e:	4359      	muls	r1, r3
 800b320:	0c14      	lsrs	r4, r2, #16
 800b322:	190c      	adds	r4, r1, r4
 800b324:	0c23      	lsrs	r3, r4, #16
 800b326:	d107      	bne.n	800b338 <_calloc_r+0x50>
 800b328:	0424      	lsls	r4, r4, #16
 800b32a:	b292      	uxth	r2, r2
 800b32c:	4314      	orrs	r4, r2
 800b32e:	e7e5      	b.n	800b2fc <_calloc_r+0x14>
 800b330:	2d00      	cmp	r5, #0
 800b332:	d101      	bne.n	800b338 <_calloc_r+0x50>
 800b334:	1c14      	adds	r4, r2, #0
 800b336:	e7ed      	b.n	800b314 <_calloc_r+0x2c>
 800b338:	230c      	movs	r3, #12
 800b33a:	2500      	movs	r5, #0
 800b33c:	6003      	str	r3, [r0, #0]
 800b33e:	0028      	movs	r0, r5
 800b340:	bd70      	pop	{r4, r5, r6, pc}

0800b342 <__ascii_mbtowc>:
 800b342:	b082      	sub	sp, #8
 800b344:	2900      	cmp	r1, #0
 800b346:	d100      	bne.n	800b34a <__ascii_mbtowc+0x8>
 800b348:	a901      	add	r1, sp, #4
 800b34a:	1e10      	subs	r0, r2, #0
 800b34c:	d006      	beq.n	800b35c <__ascii_mbtowc+0x1a>
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d006      	beq.n	800b360 <__ascii_mbtowc+0x1e>
 800b352:	7813      	ldrb	r3, [r2, #0]
 800b354:	600b      	str	r3, [r1, #0]
 800b356:	7810      	ldrb	r0, [r2, #0]
 800b358:	1e43      	subs	r3, r0, #1
 800b35a:	4198      	sbcs	r0, r3
 800b35c:	b002      	add	sp, #8
 800b35e:	4770      	bx	lr
 800b360:	2002      	movs	r0, #2
 800b362:	4240      	negs	r0, r0
 800b364:	e7fa      	b.n	800b35c <__ascii_mbtowc+0x1a>

0800b366 <_realloc_r>:
 800b366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b368:	0006      	movs	r6, r0
 800b36a:	000c      	movs	r4, r1
 800b36c:	0015      	movs	r5, r2
 800b36e:	2900      	cmp	r1, #0
 800b370:	d105      	bne.n	800b37e <_realloc_r+0x18>
 800b372:	0011      	movs	r1, r2
 800b374:	f7ff f93a 	bl	800a5ec <_malloc_r>
 800b378:	0004      	movs	r4, r0
 800b37a:	0020      	movs	r0, r4
 800b37c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b37e:	2a00      	cmp	r2, #0
 800b380:	d103      	bne.n	800b38a <_realloc_r+0x24>
 800b382:	f7ff f8bd 	bl	800a500 <_free_r>
 800b386:	002c      	movs	r4, r5
 800b388:	e7f7      	b.n	800b37a <_realloc_r+0x14>
 800b38a:	f000 f840 	bl	800b40e <_malloc_usable_size_r>
 800b38e:	0007      	movs	r7, r0
 800b390:	4285      	cmp	r5, r0
 800b392:	d802      	bhi.n	800b39a <_realloc_r+0x34>
 800b394:	0843      	lsrs	r3, r0, #1
 800b396:	42ab      	cmp	r3, r5
 800b398:	d3ef      	bcc.n	800b37a <_realloc_r+0x14>
 800b39a:	0029      	movs	r1, r5
 800b39c:	0030      	movs	r0, r6
 800b39e:	f7ff f925 	bl	800a5ec <_malloc_r>
 800b3a2:	9001      	str	r0, [sp, #4]
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d101      	bne.n	800b3ac <_realloc_r+0x46>
 800b3a8:	9c01      	ldr	r4, [sp, #4]
 800b3aa:	e7e6      	b.n	800b37a <_realloc_r+0x14>
 800b3ac:	002a      	movs	r2, r5
 800b3ae:	42bd      	cmp	r5, r7
 800b3b0:	d900      	bls.n	800b3b4 <_realloc_r+0x4e>
 800b3b2:	003a      	movs	r2, r7
 800b3b4:	0021      	movs	r1, r4
 800b3b6:	9801      	ldr	r0, [sp, #4]
 800b3b8:	f7fe fa24 	bl	8009804 <memcpy>
 800b3bc:	0021      	movs	r1, r4
 800b3be:	0030      	movs	r0, r6
 800b3c0:	f7ff f89e 	bl	800a500 <_free_r>
 800b3c4:	e7f0      	b.n	800b3a8 <_realloc_r+0x42>

0800b3c6 <__ascii_wctomb>:
 800b3c6:	0003      	movs	r3, r0
 800b3c8:	1e08      	subs	r0, r1, #0
 800b3ca:	d005      	beq.n	800b3d8 <__ascii_wctomb+0x12>
 800b3cc:	2aff      	cmp	r2, #255	@ 0xff
 800b3ce:	d904      	bls.n	800b3da <__ascii_wctomb+0x14>
 800b3d0:	228a      	movs	r2, #138	@ 0x8a
 800b3d2:	2001      	movs	r0, #1
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	4240      	negs	r0, r0
 800b3d8:	4770      	bx	lr
 800b3da:	2001      	movs	r0, #1
 800b3dc:	700a      	strb	r2, [r1, #0]
 800b3de:	e7fb      	b.n	800b3d8 <__ascii_wctomb+0x12>

0800b3e0 <fiprintf>:
 800b3e0:	b40e      	push	{r1, r2, r3}
 800b3e2:	b517      	push	{r0, r1, r2, r4, lr}
 800b3e4:	4c05      	ldr	r4, [pc, #20]	@ (800b3fc <fiprintf+0x1c>)
 800b3e6:	ab05      	add	r3, sp, #20
 800b3e8:	cb04      	ldmia	r3!, {r2}
 800b3ea:	0001      	movs	r1, r0
 800b3ec:	6820      	ldr	r0, [r4, #0]
 800b3ee:	9301      	str	r3, [sp, #4]
 800b3f0:	f000 f83c 	bl	800b46c <_vfiprintf_r>
 800b3f4:	bc1e      	pop	{r1, r2, r3, r4}
 800b3f6:	bc08      	pop	{r3}
 800b3f8:	b003      	add	sp, #12
 800b3fa:	4718      	bx	r3
 800b3fc:	20000038 	.word	0x20000038

0800b400 <abort>:
 800b400:	2006      	movs	r0, #6
 800b402:	b510      	push	{r4, lr}
 800b404:	f000 fa18 	bl	800b838 <raise>
 800b408:	2001      	movs	r0, #1
 800b40a:	f7fa f82f 	bl	800546c <_exit>

0800b40e <_malloc_usable_size_r>:
 800b40e:	1f0b      	subs	r3, r1, #4
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	1f18      	subs	r0, r3, #4
 800b414:	2b00      	cmp	r3, #0
 800b416:	da01      	bge.n	800b41c <_malloc_usable_size_r+0xe>
 800b418:	580b      	ldr	r3, [r1, r0]
 800b41a:	18c0      	adds	r0, r0, r3
 800b41c:	4770      	bx	lr

0800b41e <__sfputc_r>:
 800b41e:	6893      	ldr	r3, [r2, #8]
 800b420:	b510      	push	{r4, lr}
 800b422:	3b01      	subs	r3, #1
 800b424:	6093      	str	r3, [r2, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	da04      	bge.n	800b434 <__sfputc_r+0x16>
 800b42a:	6994      	ldr	r4, [r2, #24]
 800b42c:	42a3      	cmp	r3, r4
 800b42e:	db07      	blt.n	800b440 <__sfputc_r+0x22>
 800b430:	290a      	cmp	r1, #10
 800b432:	d005      	beq.n	800b440 <__sfputc_r+0x22>
 800b434:	6813      	ldr	r3, [r2, #0]
 800b436:	1c58      	adds	r0, r3, #1
 800b438:	6010      	str	r0, [r2, #0]
 800b43a:	7019      	strb	r1, [r3, #0]
 800b43c:	0008      	movs	r0, r1
 800b43e:	bd10      	pop	{r4, pc}
 800b440:	f000 f930 	bl	800b6a4 <__swbuf_r>
 800b444:	0001      	movs	r1, r0
 800b446:	e7f9      	b.n	800b43c <__sfputc_r+0x1e>

0800b448 <__sfputs_r>:
 800b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44a:	0006      	movs	r6, r0
 800b44c:	000f      	movs	r7, r1
 800b44e:	0014      	movs	r4, r2
 800b450:	18d5      	adds	r5, r2, r3
 800b452:	42ac      	cmp	r4, r5
 800b454:	d101      	bne.n	800b45a <__sfputs_r+0x12>
 800b456:	2000      	movs	r0, #0
 800b458:	e007      	b.n	800b46a <__sfputs_r+0x22>
 800b45a:	7821      	ldrb	r1, [r4, #0]
 800b45c:	003a      	movs	r2, r7
 800b45e:	0030      	movs	r0, r6
 800b460:	f7ff ffdd 	bl	800b41e <__sfputc_r>
 800b464:	3401      	adds	r4, #1
 800b466:	1c43      	adds	r3, r0, #1
 800b468:	d1f3      	bne.n	800b452 <__sfputs_r+0xa>
 800b46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b46c <_vfiprintf_r>:
 800b46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b46e:	b0a1      	sub	sp, #132	@ 0x84
 800b470:	000f      	movs	r7, r1
 800b472:	0015      	movs	r5, r2
 800b474:	001e      	movs	r6, r3
 800b476:	9003      	str	r0, [sp, #12]
 800b478:	2800      	cmp	r0, #0
 800b47a:	d004      	beq.n	800b486 <_vfiprintf_r+0x1a>
 800b47c:	6a03      	ldr	r3, [r0, #32]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <_vfiprintf_r+0x1a>
 800b482:	f7fe f88b 	bl	800959c <__sinit>
 800b486:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b488:	07db      	lsls	r3, r3, #31
 800b48a:	d405      	bmi.n	800b498 <_vfiprintf_r+0x2c>
 800b48c:	89bb      	ldrh	r3, [r7, #12]
 800b48e:	059b      	lsls	r3, r3, #22
 800b490:	d402      	bmi.n	800b498 <_vfiprintf_r+0x2c>
 800b492:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b494:	f7fe f9a9 	bl	80097ea <__retarget_lock_acquire_recursive>
 800b498:	89bb      	ldrh	r3, [r7, #12]
 800b49a:	071b      	lsls	r3, r3, #28
 800b49c:	d502      	bpl.n	800b4a4 <_vfiprintf_r+0x38>
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d113      	bne.n	800b4cc <_vfiprintf_r+0x60>
 800b4a4:	0039      	movs	r1, r7
 800b4a6:	9803      	ldr	r0, [sp, #12]
 800b4a8:	f000 f93e 	bl	800b728 <__swsetup_r>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d00d      	beq.n	800b4cc <_vfiprintf_r+0x60>
 800b4b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4b2:	07db      	lsls	r3, r3, #31
 800b4b4:	d503      	bpl.n	800b4be <_vfiprintf_r+0x52>
 800b4b6:	2001      	movs	r0, #1
 800b4b8:	4240      	negs	r0, r0
 800b4ba:	b021      	add	sp, #132	@ 0x84
 800b4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4be:	89bb      	ldrh	r3, [r7, #12]
 800b4c0:	059b      	lsls	r3, r3, #22
 800b4c2:	d4f8      	bmi.n	800b4b6 <_vfiprintf_r+0x4a>
 800b4c4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b4c6:	f7fe f991 	bl	80097ec <__retarget_lock_release_recursive>
 800b4ca:	e7f4      	b.n	800b4b6 <_vfiprintf_r+0x4a>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	ac08      	add	r4, sp, #32
 800b4d0:	6163      	str	r3, [r4, #20]
 800b4d2:	3320      	adds	r3, #32
 800b4d4:	7663      	strb	r3, [r4, #25]
 800b4d6:	3310      	adds	r3, #16
 800b4d8:	76a3      	strb	r3, [r4, #26]
 800b4da:	9607      	str	r6, [sp, #28]
 800b4dc:	002e      	movs	r6, r5
 800b4de:	7833      	ldrb	r3, [r6, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d001      	beq.n	800b4e8 <_vfiprintf_r+0x7c>
 800b4e4:	2b25      	cmp	r3, #37	@ 0x25
 800b4e6:	d148      	bne.n	800b57a <_vfiprintf_r+0x10e>
 800b4e8:	1b73      	subs	r3, r6, r5
 800b4ea:	9305      	str	r3, [sp, #20]
 800b4ec:	42ae      	cmp	r6, r5
 800b4ee:	d00b      	beq.n	800b508 <_vfiprintf_r+0x9c>
 800b4f0:	002a      	movs	r2, r5
 800b4f2:	0039      	movs	r1, r7
 800b4f4:	9803      	ldr	r0, [sp, #12]
 800b4f6:	f7ff ffa7 	bl	800b448 <__sfputs_r>
 800b4fa:	3001      	adds	r0, #1
 800b4fc:	d100      	bne.n	800b500 <_vfiprintf_r+0x94>
 800b4fe:	e0ae      	b.n	800b65e <_vfiprintf_r+0x1f2>
 800b500:	6963      	ldr	r3, [r4, #20]
 800b502:	9a05      	ldr	r2, [sp, #20]
 800b504:	189b      	adds	r3, r3, r2
 800b506:	6163      	str	r3, [r4, #20]
 800b508:	7833      	ldrb	r3, [r6, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d100      	bne.n	800b510 <_vfiprintf_r+0xa4>
 800b50e:	e0a6      	b.n	800b65e <_vfiprintf_r+0x1f2>
 800b510:	2201      	movs	r2, #1
 800b512:	2300      	movs	r3, #0
 800b514:	4252      	negs	r2, r2
 800b516:	6062      	str	r2, [r4, #4]
 800b518:	a904      	add	r1, sp, #16
 800b51a:	3254      	adds	r2, #84	@ 0x54
 800b51c:	1852      	adds	r2, r2, r1
 800b51e:	1c75      	adds	r5, r6, #1
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	60e3      	str	r3, [r4, #12]
 800b524:	60a3      	str	r3, [r4, #8]
 800b526:	7013      	strb	r3, [r2, #0]
 800b528:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b52a:	4b59      	ldr	r3, [pc, #356]	@ (800b690 <_vfiprintf_r+0x224>)
 800b52c:	2205      	movs	r2, #5
 800b52e:	0018      	movs	r0, r3
 800b530:	7829      	ldrb	r1, [r5, #0]
 800b532:	9305      	str	r3, [sp, #20]
 800b534:	f7fe f95b 	bl	80097ee <memchr>
 800b538:	1c6e      	adds	r6, r5, #1
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d11f      	bne.n	800b57e <_vfiprintf_r+0x112>
 800b53e:	6822      	ldr	r2, [r4, #0]
 800b540:	06d3      	lsls	r3, r2, #27
 800b542:	d504      	bpl.n	800b54e <_vfiprintf_r+0xe2>
 800b544:	2353      	movs	r3, #83	@ 0x53
 800b546:	a904      	add	r1, sp, #16
 800b548:	185b      	adds	r3, r3, r1
 800b54a:	2120      	movs	r1, #32
 800b54c:	7019      	strb	r1, [r3, #0]
 800b54e:	0713      	lsls	r3, r2, #28
 800b550:	d504      	bpl.n	800b55c <_vfiprintf_r+0xf0>
 800b552:	2353      	movs	r3, #83	@ 0x53
 800b554:	a904      	add	r1, sp, #16
 800b556:	185b      	adds	r3, r3, r1
 800b558:	212b      	movs	r1, #43	@ 0x2b
 800b55a:	7019      	strb	r1, [r3, #0]
 800b55c:	782b      	ldrb	r3, [r5, #0]
 800b55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b560:	d016      	beq.n	800b590 <_vfiprintf_r+0x124>
 800b562:	002e      	movs	r6, r5
 800b564:	2100      	movs	r1, #0
 800b566:	200a      	movs	r0, #10
 800b568:	68e3      	ldr	r3, [r4, #12]
 800b56a:	7832      	ldrb	r2, [r6, #0]
 800b56c:	1c75      	adds	r5, r6, #1
 800b56e:	3a30      	subs	r2, #48	@ 0x30
 800b570:	2a09      	cmp	r2, #9
 800b572:	d950      	bls.n	800b616 <_vfiprintf_r+0x1aa>
 800b574:	2900      	cmp	r1, #0
 800b576:	d111      	bne.n	800b59c <_vfiprintf_r+0x130>
 800b578:	e017      	b.n	800b5aa <_vfiprintf_r+0x13e>
 800b57a:	3601      	adds	r6, #1
 800b57c:	e7af      	b.n	800b4de <_vfiprintf_r+0x72>
 800b57e:	9b05      	ldr	r3, [sp, #20]
 800b580:	6822      	ldr	r2, [r4, #0]
 800b582:	1ac0      	subs	r0, r0, r3
 800b584:	2301      	movs	r3, #1
 800b586:	4083      	lsls	r3, r0
 800b588:	4313      	orrs	r3, r2
 800b58a:	0035      	movs	r5, r6
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	e7cc      	b.n	800b52a <_vfiprintf_r+0xbe>
 800b590:	9b07      	ldr	r3, [sp, #28]
 800b592:	1d19      	adds	r1, r3, #4
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	9107      	str	r1, [sp, #28]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	db01      	blt.n	800b5a0 <_vfiprintf_r+0x134>
 800b59c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b59e:	e004      	b.n	800b5aa <_vfiprintf_r+0x13e>
 800b5a0:	425b      	negs	r3, r3
 800b5a2:	60e3      	str	r3, [r4, #12]
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	7833      	ldrb	r3, [r6, #0]
 800b5ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5ae:	d10c      	bne.n	800b5ca <_vfiprintf_r+0x15e>
 800b5b0:	7873      	ldrb	r3, [r6, #1]
 800b5b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5b4:	d134      	bne.n	800b620 <_vfiprintf_r+0x1b4>
 800b5b6:	9b07      	ldr	r3, [sp, #28]
 800b5b8:	3602      	adds	r6, #2
 800b5ba:	1d1a      	adds	r2, r3, #4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	9207      	str	r2, [sp, #28]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	da01      	bge.n	800b5c8 <_vfiprintf_r+0x15c>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	425b      	negs	r3, r3
 800b5c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5ca:	4d32      	ldr	r5, [pc, #200]	@ (800b694 <_vfiprintf_r+0x228>)
 800b5cc:	2203      	movs	r2, #3
 800b5ce:	0028      	movs	r0, r5
 800b5d0:	7831      	ldrb	r1, [r6, #0]
 800b5d2:	f7fe f90c 	bl	80097ee <memchr>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d006      	beq.n	800b5e8 <_vfiprintf_r+0x17c>
 800b5da:	2340      	movs	r3, #64	@ 0x40
 800b5dc:	1b40      	subs	r0, r0, r5
 800b5de:	4083      	lsls	r3, r0
 800b5e0:	6822      	ldr	r2, [r4, #0]
 800b5e2:	3601      	adds	r6, #1
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	7831      	ldrb	r1, [r6, #0]
 800b5ea:	2206      	movs	r2, #6
 800b5ec:	482a      	ldr	r0, [pc, #168]	@ (800b698 <_vfiprintf_r+0x22c>)
 800b5ee:	1c75      	adds	r5, r6, #1
 800b5f0:	7621      	strb	r1, [r4, #24]
 800b5f2:	f7fe f8fc 	bl	80097ee <memchr>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d040      	beq.n	800b67c <_vfiprintf_r+0x210>
 800b5fa:	4b28      	ldr	r3, [pc, #160]	@ (800b69c <_vfiprintf_r+0x230>)
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d122      	bne.n	800b646 <_vfiprintf_r+0x1da>
 800b600:	2207      	movs	r2, #7
 800b602:	9b07      	ldr	r3, [sp, #28]
 800b604:	3307      	adds	r3, #7
 800b606:	4393      	bics	r3, r2
 800b608:	3308      	adds	r3, #8
 800b60a:	9307      	str	r3, [sp, #28]
 800b60c:	6963      	ldr	r3, [r4, #20]
 800b60e:	9a04      	ldr	r2, [sp, #16]
 800b610:	189b      	adds	r3, r3, r2
 800b612:	6163      	str	r3, [r4, #20]
 800b614:	e762      	b.n	800b4dc <_vfiprintf_r+0x70>
 800b616:	4343      	muls	r3, r0
 800b618:	002e      	movs	r6, r5
 800b61a:	2101      	movs	r1, #1
 800b61c:	189b      	adds	r3, r3, r2
 800b61e:	e7a4      	b.n	800b56a <_vfiprintf_r+0xfe>
 800b620:	2300      	movs	r3, #0
 800b622:	200a      	movs	r0, #10
 800b624:	0019      	movs	r1, r3
 800b626:	3601      	adds	r6, #1
 800b628:	6063      	str	r3, [r4, #4]
 800b62a:	7832      	ldrb	r2, [r6, #0]
 800b62c:	1c75      	adds	r5, r6, #1
 800b62e:	3a30      	subs	r2, #48	@ 0x30
 800b630:	2a09      	cmp	r2, #9
 800b632:	d903      	bls.n	800b63c <_vfiprintf_r+0x1d0>
 800b634:	2b00      	cmp	r3, #0
 800b636:	d0c8      	beq.n	800b5ca <_vfiprintf_r+0x15e>
 800b638:	9109      	str	r1, [sp, #36]	@ 0x24
 800b63a:	e7c6      	b.n	800b5ca <_vfiprintf_r+0x15e>
 800b63c:	4341      	muls	r1, r0
 800b63e:	002e      	movs	r6, r5
 800b640:	2301      	movs	r3, #1
 800b642:	1889      	adds	r1, r1, r2
 800b644:	e7f1      	b.n	800b62a <_vfiprintf_r+0x1be>
 800b646:	aa07      	add	r2, sp, #28
 800b648:	9200      	str	r2, [sp, #0]
 800b64a:	0021      	movs	r1, r4
 800b64c:	003a      	movs	r2, r7
 800b64e:	4b14      	ldr	r3, [pc, #80]	@ (800b6a0 <_vfiprintf_r+0x234>)
 800b650:	9803      	ldr	r0, [sp, #12]
 800b652:	f7fd fb59 	bl	8008d08 <_printf_float>
 800b656:	9004      	str	r0, [sp, #16]
 800b658:	9b04      	ldr	r3, [sp, #16]
 800b65a:	3301      	adds	r3, #1
 800b65c:	d1d6      	bne.n	800b60c <_vfiprintf_r+0x1a0>
 800b65e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b660:	07db      	lsls	r3, r3, #31
 800b662:	d405      	bmi.n	800b670 <_vfiprintf_r+0x204>
 800b664:	89bb      	ldrh	r3, [r7, #12]
 800b666:	059b      	lsls	r3, r3, #22
 800b668:	d402      	bmi.n	800b670 <_vfiprintf_r+0x204>
 800b66a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b66c:	f7fe f8be 	bl	80097ec <__retarget_lock_release_recursive>
 800b670:	89bb      	ldrh	r3, [r7, #12]
 800b672:	065b      	lsls	r3, r3, #25
 800b674:	d500      	bpl.n	800b678 <_vfiprintf_r+0x20c>
 800b676:	e71e      	b.n	800b4b6 <_vfiprintf_r+0x4a>
 800b678:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b67a:	e71e      	b.n	800b4ba <_vfiprintf_r+0x4e>
 800b67c:	aa07      	add	r2, sp, #28
 800b67e:	9200      	str	r2, [sp, #0]
 800b680:	0021      	movs	r1, r4
 800b682:	003a      	movs	r2, r7
 800b684:	4b06      	ldr	r3, [pc, #24]	@ (800b6a0 <_vfiprintf_r+0x234>)
 800b686:	9803      	ldr	r0, [sp, #12]
 800b688:	f7fd fdec 	bl	8009264 <_printf_i>
 800b68c:	e7e3      	b.n	800b656 <_vfiprintf_r+0x1ea>
 800b68e:	46c0      	nop			@ (mov r8, r8)
 800b690:	0800e4ae 	.word	0x0800e4ae
 800b694:	0800e4b4 	.word	0x0800e4b4
 800b698:	0800e4b8 	.word	0x0800e4b8
 800b69c:	08008d09 	.word	0x08008d09
 800b6a0:	0800b449 	.word	0x0800b449

0800b6a4 <__swbuf_r>:
 800b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a6:	0006      	movs	r6, r0
 800b6a8:	000d      	movs	r5, r1
 800b6aa:	0014      	movs	r4, r2
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d004      	beq.n	800b6ba <__swbuf_r+0x16>
 800b6b0:	6a03      	ldr	r3, [r0, #32]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <__swbuf_r+0x16>
 800b6b6:	f7fd ff71 	bl	800959c <__sinit>
 800b6ba:	69a3      	ldr	r3, [r4, #24]
 800b6bc:	60a3      	str	r3, [r4, #8]
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	071b      	lsls	r3, r3, #28
 800b6c2:	d502      	bpl.n	800b6ca <__swbuf_r+0x26>
 800b6c4:	6923      	ldr	r3, [r4, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d109      	bne.n	800b6de <__swbuf_r+0x3a>
 800b6ca:	0021      	movs	r1, r4
 800b6cc:	0030      	movs	r0, r6
 800b6ce:	f000 f82b 	bl	800b728 <__swsetup_r>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d003      	beq.n	800b6de <__swbuf_r+0x3a>
 800b6d6:	2501      	movs	r5, #1
 800b6d8:	426d      	negs	r5, r5
 800b6da:	0028      	movs	r0, r5
 800b6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	6820      	ldr	r0, [r4, #0]
 800b6e2:	b2ef      	uxtb	r7, r5
 800b6e4:	1ac0      	subs	r0, r0, r3
 800b6e6:	6963      	ldr	r3, [r4, #20]
 800b6e8:	b2ed      	uxtb	r5, r5
 800b6ea:	4283      	cmp	r3, r0
 800b6ec:	dc05      	bgt.n	800b6fa <__swbuf_r+0x56>
 800b6ee:	0021      	movs	r1, r4
 800b6f0:	0030      	movs	r0, r6
 800b6f2:	f7ff fd8b 	bl	800b20c <_fflush_r>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d1ed      	bne.n	800b6d6 <__swbuf_r+0x32>
 800b6fa:	68a3      	ldr	r3, [r4, #8]
 800b6fc:	3001      	adds	r0, #1
 800b6fe:	3b01      	subs	r3, #1
 800b700:	60a3      	str	r3, [r4, #8]
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	1c5a      	adds	r2, r3, #1
 800b706:	6022      	str	r2, [r4, #0]
 800b708:	701f      	strb	r7, [r3, #0]
 800b70a:	6963      	ldr	r3, [r4, #20]
 800b70c:	4283      	cmp	r3, r0
 800b70e:	d004      	beq.n	800b71a <__swbuf_r+0x76>
 800b710:	89a3      	ldrh	r3, [r4, #12]
 800b712:	07db      	lsls	r3, r3, #31
 800b714:	d5e1      	bpl.n	800b6da <__swbuf_r+0x36>
 800b716:	2d0a      	cmp	r5, #10
 800b718:	d1df      	bne.n	800b6da <__swbuf_r+0x36>
 800b71a:	0021      	movs	r1, r4
 800b71c:	0030      	movs	r0, r6
 800b71e:	f7ff fd75 	bl	800b20c <_fflush_r>
 800b722:	2800      	cmp	r0, #0
 800b724:	d0d9      	beq.n	800b6da <__swbuf_r+0x36>
 800b726:	e7d6      	b.n	800b6d6 <__swbuf_r+0x32>

0800b728 <__swsetup_r>:
 800b728:	4b2d      	ldr	r3, [pc, #180]	@ (800b7e0 <__swsetup_r+0xb8>)
 800b72a:	b570      	push	{r4, r5, r6, lr}
 800b72c:	0005      	movs	r5, r0
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	000c      	movs	r4, r1
 800b732:	2800      	cmp	r0, #0
 800b734:	d004      	beq.n	800b740 <__swsetup_r+0x18>
 800b736:	6a03      	ldr	r3, [r0, #32]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <__swsetup_r+0x18>
 800b73c:	f7fd ff2e 	bl	800959c <__sinit>
 800b740:	220c      	movs	r2, #12
 800b742:	5ea3      	ldrsh	r3, [r4, r2]
 800b744:	071a      	lsls	r2, r3, #28
 800b746:	d423      	bmi.n	800b790 <__swsetup_r+0x68>
 800b748:	06da      	lsls	r2, r3, #27
 800b74a:	d407      	bmi.n	800b75c <__swsetup_r+0x34>
 800b74c:	2209      	movs	r2, #9
 800b74e:	602a      	str	r2, [r5, #0]
 800b750:	2240      	movs	r2, #64	@ 0x40
 800b752:	2001      	movs	r0, #1
 800b754:	4313      	orrs	r3, r2
 800b756:	81a3      	strh	r3, [r4, #12]
 800b758:	4240      	negs	r0, r0
 800b75a:	e03a      	b.n	800b7d2 <__swsetup_r+0xaa>
 800b75c:	075b      	lsls	r3, r3, #29
 800b75e:	d513      	bpl.n	800b788 <__swsetup_r+0x60>
 800b760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b762:	2900      	cmp	r1, #0
 800b764:	d008      	beq.n	800b778 <__swsetup_r+0x50>
 800b766:	0023      	movs	r3, r4
 800b768:	3344      	adds	r3, #68	@ 0x44
 800b76a:	4299      	cmp	r1, r3
 800b76c:	d002      	beq.n	800b774 <__swsetup_r+0x4c>
 800b76e:	0028      	movs	r0, r5
 800b770:	f7fe fec6 	bl	800a500 <_free_r>
 800b774:	2300      	movs	r3, #0
 800b776:	6363      	str	r3, [r4, #52]	@ 0x34
 800b778:	2224      	movs	r2, #36	@ 0x24
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	4393      	bics	r3, r2
 800b77e:	81a3      	strh	r3, [r4, #12]
 800b780:	2300      	movs	r3, #0
 800b782:	6063      	str	r3, [r4, #4]
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	6023      	str	r3, [r4, #0]
 800b788:	2308      	movs	r3, #8
 800b78a:	89a2      	ldrh	r2, [r4, #12]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	6923      	ldr	r3, [r4, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10b      	bne.n	800b7ae <__swsetup_r+0x86>
 800b796:	21a0      	movs	r1, #160	@ 0xa0
 800b798:	2280      	movs	r2, #128	@ 0x80
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	0089      	lsls	r1, r1, #2
 800b79e:	0092      	lsls	r2, r2, #2
 800b7a0:	400b      	ands	r3, r1
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d003      	beq.n	800b7ae <__swsetup_r+0x86>
 800b7a6:	0021      	movs	r1, r4
 800b7a8:	0028      	movs	r0, r5
 800b7aa:	f000 f88f 	bl	800b8cc <__smakebuf_r>
 800b7ae:	220c      	movs	r2, #12
 800b7b0:	5ea3      	ldrsh	r3, [r4, r2]
 800b7b2:	2101      	movs	r1, #1
 800b7b4:	001a      	movs	r2, r3
 800b7b6:	400a      	ands	r2, r1
 800b7b8:	420b      	tst	r3, r1
 800b7ba:	d00b      	beq.n	800b7d4 <__swsetup_r+0xac>
 800b7bc:	2200      	movs	r2, #0
 800b7be:	60a2      	str	r2, [r4, #8]
 800b7c0:	6962      	ldr	r2, [r4, #20]
 800b7c2:	4252      	negs	r2, r2
 800b7c4:	61a2      	str	r2, [r4, #24]
 800b7c6:	2000      	movs	r0, #0
 800b7c8:	6922      	ldr	r2, [r4, #16]
 800b7ca:	4282      	cmp	r2, r0
 800b7cc:	d101      	bne.n	800b7d2 <__swsetup_r+0xaa>
 800b7ce:	061a      	lsls	r2, r3, #24
 800b7d0:	d4be      	bmi.n	800b750 <__swsetup_r+0x28>
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	0799      	lsls	r1, r3, #30
 800b7d6:	d400      	bmi.n	800b7da <__swsetup_r+0xb2>
 800b7d8:	6962      	ldr	r2, [r4, #20]
 800b7da:	60a2      	str	r2, [r4, #8]
 800b7dc:	e7f3      	b.n	800b7c6 <__swsetup_r+0x9e>
 800b7de:	46c0      	nop			@ (mov r8, r8)
 800b7e0:	20000038 	.word	0x20000038

0800b7e4 <_raise_r>:
 800b7e4:	b570      	push	{r4, r5, r6, lr}
 800b7e6:	0004      	movs	r4, r0
 800b7e8:	000d      	movs	r5, r1
 800b7ea:	291f      	cmp	r1, #31
 800b7ec:	d904      	bls.n	800b7f8 <_raise_r+0x14>
 800b7ee:	2316      	movs	r3, #22
 800b7f0:	6003      	str	r3, [r0, #0]
 800b7f2:	2001      	movs	r0, #1
 800b7f4:	4240      	negs	r0, r0
 800b7f6:	bd70      	pop	{r4, r5, r6, pc}
 800b7f8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d004      	beq.n	800b808 <_raise_r+0x24>
 800b7fe:	008a      	lsls	r2, r1, #2
 800b800:	189b      	adds	r3, r3, r2
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	2a00      	cmp	r2, #0
 800b806:	d108      	bne.n	800b81a <_raise_r+0x36>
 800b808:	0020      	movs	r0, r4
 800b80a:	f000 f831 	bl	800b870 <_getpid_r>
 800b80e:	002a      	movs	r2, r5
 800b810:	0001      	movs	r1, r0
 800b812:	0020      	movs	r0, r4
 800b814:	f000 f81a 	bl	800b84c <_kill_r>
 800b818:	e7ed      	b.n	800b7f6 <_raise_r+0x12>
 800b81a:	2a01      	cmp	r2, #1
 800b81c:	d009      	beq.n	800b832 <_raise_r+0x4e>
 800b81e:	1c51      	adds	r1, r2, #1
 800b820:	d103      	bne.n	800b82a <_raise_r+0x46>
 800b822:	2316      	movs	r3, #22
 800b824:	6003      	str	r3, [r0, #0]
 800b826:	2001      	movs	r0, #1
 800b828:	e7e5      	b.n	800b7f6 <_raise_r+0x12>
 800b82a:	2100      	movs	r1, #0
 800b82c:	0028      	movs	r0, r5
 800b82e:	6019      	str	r1, [r3, #0]
 800b830:	4790      	blx	r2
 800b832:	2000      	movs	r0, #0
 800b834:	e7df      	b.n	800b7f6 <_raise_r+0x12>
	...

0800b838 <raise>:
 800b838:	b510      	push	{r4, lr}
 800b83a:	4b03      	ldr	r3, [pc, #12]	@ (800b848 <raise+0x10>)
 800b83c:	0001      	movs	r1, r0
 800b83e:	6818      	ldr	r0, [r3, #0]
 800b840:	f7ff ffd0 	bl	800b7e4 <_raise_r>
 800b844:	bd10      	pop	{r4, pc}
 800b846:	46c0      	nop			@ (mov r8, r8)
 800b848:	20000038 	.word	0x20000038

0800b84c <_kill_r>:
 800b84c:	2300      	movs	r3, #0
 800b84e:	b570      	push	{r4, r5, r6, lr}
 800b850:	4d06      	ldr	r5, [pc, #24]	@ (800b86c <_kill_r+0x20>)
 800b852:	0004      	movs	r4, r0
 800b854:	0008      	movs	r0, r1
 800b856:	0011      	movs	r1, r2
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	f7f9 fdf7 	bl	800544c <_kill>
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	d103      	bne.n	800b86a <_kill_r+0x1e>
 800b862:	682b      	ldr	r3, [r5, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d000      	beq.n	800b86a <_kill_r+0x1e>
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	bd70      	pop	{r4, r5, r6, pc}
 800b86c:	20000a50 	.word	0x20000a50

0800b870 <_getpid_r>:
 800b870:	b510      	push	{r4, lr}
 800b872:	f7f9 fde5 	bl	8005440 <_getpid>
 800b876:	bd10      	pop	{r4, pc}

0800b878 <__swhatbuf_r>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	000e      	movs	r6, r1
 800b87c:	001d      	movs	r5, r3
 800b87e:	230e      	movs	r3, #14
 800b880:	5ec9      	ldrsh	r1, [r1, r3]
 800b882:	0014      	movs	r4, r2
 800b884:	b096      	sub	sp, #88	@ 0x58
 800b886:	2900      	cmp	r1, #0
 800b888:	da0c      	bge.n	800b8a4 <__swhatbuf_r+0x2c>
 800b88a:	89b2      	ldrh	r2, [r6, #12]
 800b88c:	2380      	movs	r3, #128	@ 0x80
 800b88e:	0011      	movs	r1, r2
 800b890:	4019      	ands	r1, r3
 800b892:	421a      	tst	r2, r3
 800b894:	d114      	bne.n	800b8c0 <__swhatbuf_r+0x48>
 800b896:	2380      	movs	r3, #128	@ 0x80
 800b898:	00db      	lsls	r3, r3, #3
 800b89a:	2000      	movs	r0, #0
 800b89c:	6029      	str	r1, [r5, #0]
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	b016      	add	sp, #88	@ 0x58
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	466a      	mov	r2, sp
 800b8a6:	f000 f853 	bl	800b950 <_fstat_r>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	dbed      	blt.n	800b88a <__swhatbuf_r+0x12>
 800b8ae:	23f0      	movs	r3, #240	@ 0xf0
 800b8b0:	9901      	ldr	r1, [sp, #4]
 800b8b2:	021b      	lsls	r3, r3, #8
 800b8b4:	4019      	ands	r1, r3
 800b8b6:	4b04      	ldr	r3, [pc, #16]	@ (800b8c8 <__swhatbuf_r+0x50>)
 800b8b8:	18c9      	adds	r1, r1, r3
 800b8ba:	424b      	negs	r3, r1
 800b8bc:	4159      	adcs	r1, r3
 800b8be:	e7ea      	b.n	800b896 <__swhatbuf_r+0x1e>
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	2340      	movs	r3, #64	@ 0x40
 800b8c4:	e7e9      	b.n	800b89a <__swhatbuf_r+0x22>
 800b8c6:	46c0      	nop			@ (mov r8, r8)
 800b8c8:	ffffe000 	.word	0xffffe000

0800b8cc <__smakebuf_r>:
 800b8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ce:	2602      	movs	r6, #2
 800b8d0:	898b      	ldrh	r3, [r1, #12]
 800b8d2:	0005      	movs	r5, r0
 800b8d4:	000c      	movs	r4, r1
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	4233      	tst	r3, r6
 800b8da:	d007      	beq.n	800b8ec <__smakebuf_r+0x20>
 800b8dc:	0023      	movs	r3, r4
 800b8de:	3347      	adds	r3, #71	@ 0x47
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	6123      	str	r3, [r4, #16]
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	6163      	str	r3, [r4, #20]
 800b8e8:	b005      	add	sp, #20
 800b8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ec:	ab03      	add	r3, sp, #12
 800b8ee:	aa02      	add	r2, sp, #8
 800b8f0:	f7ff ffc2 	bl	800b878 <__swhatbuf_r>
 800b8f4:	9f02      	ldr	r7, [sp, #8]
 800b8f6:	9001      	str	r0, [sp, #4]
 800b8f8:	0039      	movs	r1, r7
 800b8fa:	0028      	movs	r0, r5
 800b8fc:	f7fe fe76 	bl	800a5ec <_malloc_r>
 800b900:	2800      	cmp	r0, #0
 800b902:	d108      	bne.n	800b916 <__smakebuf_r+0x4a>
 800b904:	220c      	movs	r2, #12
 800b906:	5ea3      	ldrsh	r3, [r4, r2]
 800b908:	059a      	lsls	r2, r3, #22
 800b90a:	d4ed      	bmi.n	800b8e8 <__smakebuf_r+0x1c>
 800b90c:	2203      	movs	r2, #3
 800b90e:	4393      	bics	r3, r2
 800b910:	431e      	orrs	r6, r3
 800b912:	81a6      	strh	r6, [r4, #12]
 800b914:	e7e2      	b.n	800b8dc <__smakebuf_r+0x10>
 800b916:	2380      	movs	r3, #128	@ 0x80
 800b918:	89a2      	ldrh	r2, [r4, #12]
 800b91a:	6020      	str	r0, [r4, #0]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	81a3      	strh	r3, [r4, #12]
 800b920:	9b03      	ldr	r3, [sp, #12]
 800b922:	6120      	str	r0, [r4, #16]
 800b924:	6167      	str	r7, [r4, #20]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00c      	beq.n	800b944 <__smakebuf_r+0x78>
 800b92a:	0028      	movs	r0, r5
 800b92c:	230e      	movs	r3, #14
 800b92e:	5ee1      	ldrsh	r1, [r4, r3]
 800b930:	f000 f820 	bl	800b974 <_isatty_r>
 800b934:	2800      	cmp	r0, #0
 800b936:	d005      	beq.n	800b944 <__smakebuf_r+0x78>
 800b938:	2303      	movs	r3, #3
 800b93a:	89a2      	ldrh	r2, [r4, #12]
 800b93c:	439a      	bics	r2, r3
 800b93e:	3b02      	subs	r3, #2
 800b940:	4313      	orrs	r3, r2
 800b942:	81a3      	strh	r3, [r4, #12]
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	9a01      	ldr	r2, [sp, #4]
 800b948:	4313      	orrs	r3, r2
 800b94a:	81a3      	strh	r3, [r4, #12]
 800b94c:	e7cc      	b.n	800b8e8 <__smakebuf_r+0x1c>
	...

0800b950 <_fstat_r>:
 800b950:	2300      	movs	r3, #0
 800b952:	b570      	push	{r4, r5, r6, lr}
 800b954:	4d06      	ldr	r5, [pc, #24]	@ (800b970 <_fstat_r+0x20>)
 800b956:	0004      	movs	r4, r0
 800b958:	0008      	movs	r0, r1
 800b95a:	0011      	movs	r1, r2
 800b95c:	602b      	str	r3, [r5, #0]
 800b95e:	f7f9 fdd5 	bl	800550c <_fstat>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	d103      	bne.n	800b96e <_fstat_r+0x1e>
 800b966:	682b      	ldr	r3, [r5, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d000      	beq.n	800b96e <_fstat_r+0x1e>
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	bd70      	pop	{r4, r5, r6, pc}
 800b970:	20000a50 	.word	0x20000a50

0800b974 <_isatty_r>:
 800b974:	2300      	movs	r3, #0
 800b976:	b570      	push	{r4, r5, r6, lr}
 800b978:	4d06      	ldr	r5, [pc, #24]	@ (800b994 <_isatty_r+0x20>)
 800b97a:	0004      	movs	r4, r0
 800b97c:	0008      	movs	r0, r1
 800b97e:	602b      	str	r3, [r5, #0]
 800b980:	f7f9 fdd2 	bl	8005528 <_isatty>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d103      	bne.n	800b990 <_isatty_r+0x1c>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d000      	beq.n	800b990 <_isatty_r+0x1c>
 800b98e:	6023      	str	r3, [r4, #0]
 800b990:	bd70      	pop	{r4, r5, r6, pc}
 800b992:	46c0      	nop			@ (mov r8, r8)
 800b994:	20000a50 	.word	0x20000a50

0800b998 <_init>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	46c0      	nop			@ (mov r8, r8)
 800b99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99e:	bc08      	pop	{r3}
 800b9a0:	469e      	mov	lr, r3
 800b9a2:	4770      	bx	lr

0800b9a4 <_fini>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	46c0      	nop			@ (mov r8, r8)
 800b9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9aa:	bc08      	pop	{r3}
 800b9ac:	469e      	mov	lr, r3
 800b9ae:	4770      	bx	lr
