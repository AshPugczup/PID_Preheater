
PID_Regulator_Preheather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a370  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dac  0800a430  0800a430  0000b430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1dc  0800d1dc  0000f20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800d1dc  0800d1dc  0000f20c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800d1dc  0800d1dc  0000f20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1dc  0800d1dc  0000e1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1e0  0800d1e0  0000e1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800d1e4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  2000020c  0800d3f0  0000f20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a44  0800d3f0  0000fa44  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7e2  00000000  00000000  0000f234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003599  00000000  00000000  0002ba16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000de57  00000000  00000000  0002efaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  0003ce08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b0  00000000  00000000  0003dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000128d8  00000000  00000000  0003f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3ed  00000000  00000000  00051b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006b824  00000000  00000000  00070f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dc769  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004618  00000000  00000000  000dc7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  000e0dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000020c 	.word	0x2000020c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a418 	.word	0x0800a418

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000210 	.word	0x20000210
 8000104:	0800a418 	.word	0x0800a418

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__gnu_thumb1_case_uhi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5a09      	ldrh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f002 f84b 	bl	80024ec <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 ff8f 	bl	8002384 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f83d 	bl	80024ec <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f833 	bl	80024ec <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ffb9 	bl	800240c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 ffaf 	bl	800240c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fbc3 	bl	8000c50 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fb4b 	bl	8000b70 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb5 	bl	8000c50 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fbab 	bl	8000c50 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb59 	bl	8000bc0 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fb4f 	bl	8000bc0 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_f2uiz>:
 8000530:	219e      	movs	r1, #158	@ 0x9e
 8000532:	b510      	push	{r4, lr}
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	1c04      	adds	r4, r0, #0
 8000538:	f7ff fff0 	bl	800051c <__aeabi_fcmpge>
 800053c:	2800      	cmp	r0, #0
 800053e:	d103      	bne.n	8000548 <__aeabi_f2uiz+0x18>
 8000540:	1c20      	adds	r0, r4, #0
 8000542:	f000 ff8b 	bl	800145c <__aeabi_f2iz>
 8000546:	bd10      	pop	{r4, pc}
 8000548:	219e      	movs	r1, #158	@ 0x9e
 800054a:	1c20      	adds	r0, r4, #0
 800054c:	05c9      	lsls	r1, r1, #23
 800054e:	f000 fd21 	bl	8000f94 <__aeabi_fsub>
 8000552:	f000 ff83 	bl	800145c <__aeabi_f2iz>
 8000556:	2380      	movs	r3, #128	@ 0x80
 8000558:	061b      	lsls	r3, r3, #24
 800055a:	469c      	mov	ip, r3
 800055c:	4460      	add	r0, ip
 800055e:	e7f2      	b.n	8000546 <__aeabi_f2uiz+0x16>

08000560 <__aeabi_fadd>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	024b      	lsls	r3, r1, #9
 8000564:	0a5a      	lsrs	r2, r3, #9
 8000566:	4694      	mov	ip, r2
 8000568:	004a      	lsls	r2, r1, #1
 800056a:	0fc9      	lsrs	r1, r1, #31
 800056c:	46ce      	mov	lr, r9
 800056e:	4647      	mov	r7, r8
 8000570:	4689      	mov	r9, r1
 8000572:	0045      	lsls	r5, r0, #1
 8000574:	0246      	lsls	r6, r0, #9
 8000576:	0e2d      	lsrs	r5, r5, #24
 8000578:	0e12      	lsrs	r2, r2, #24
 800057a:	b580      	push	{r7, lr}
 800057c:	0999      	lsrs	r1, r3, #6
 800057e:	0a77      	lsrs	r7, r6, #9
 8000580:	0fc4      	lsrs	r4, r0, #31
 8000582:	09b6      	lsrs	r6, r6, #6
 8000584:	1aab      	subs	r3, r5, r2
 8000586:	454c      	cmp	r4, r9
 8000588:	d020      	beq.n	80005cc <__aeabi_fadd+0x6c>
 800058a:	2b00      	cmp	r3, #0
 800058c:	dd0c      	ble.n	80005a8 <__aeabi_fadd+0x48>
 800058e:	2a00      	cmp	r2, #0
 8000590:	d134      	bne.n	80005fc <__aeabi_fadd+0x9c>
 8000592:	2900      	cmp	r1, #0
 8000594:	d02a      	beq.n	80005ec <__aeabi_fadd+0x8c>
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	2b01      	cmp	r3, #1
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x3e>
 800059c:	e08f      	b.n	80006be <__aeabi_fadd+0x15e>
 800059e:	2bff      	cmp	r3, #255	@ 0xff
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fadd+0x44>
 80005a2:	e0cd      	b.n	8000740 <__aeabi_fadd+0x1e0>
 80005a4:	0013      	movs	r3, r2
 80005a6:	e02f      	b.n	8000608 <__aeabi_fadd+0xa8>
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d060      	beq.n	800066e <__aeabi_fadd+0x10e>
 80005ac:	1b53      	subs	r3, r2, r5
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d000      	beq.n	80005b4 <__aeabi_fadd+0x54>
 80005b2:	e0ee      	b.n	8000792 <__aeabi_fadd+0x232>
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0x5a>
 80005b8:	e13e      	b.n	8000838 <__aeabi_fadd+0x2d8>
 80005ba:	1e5c      	subs	r4, r3, #1
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d100      	bne.n	80005c2 <__aeabi_fadd+0x62>
 80005c0:	e16b      	b.n	800089a <__aeabi_fadd+0x33a>
 80005c2:	2bff      	cmp	r3, #255	@ 0xff
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x68>
 80005c6:	e0b9      	b.n	800073c <__aeabi_fadd+0x1dc>
 80005c8:	0023      	movs	r3, r4
 80005ca:	e0e7      	b.n	800079c <__aeabi_fadd+0x23c>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_fadd+0x72>
 80005d0:	e0a4      	b.n	800071c <__aeabi_fadd+0x1bc>
 80005d2:	2a00      	cmp	r2, #0
 80005d4:	d069      	beq.n	80006aa <__aeabi_fadd+0x14a>
 80005d6:	2dff      	cmp	r5, #255	@ 0xff
 80005d8:	d100      	bne.n	80005dc <__aeabi_fadd+0x7c>
 80005da:	e0b1      	b.n	8000740 <__aeabi_fadd+0x1e0>
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	04d2      	lsls	r2, r2, #19
 80005e0:	4311      	orrs	r1, r2
 80005e2:	2b1b      	cmp	r3, #27
 80005e4:	dc00      	bgt.n	80005e8 <__aeabi_fadd+0x88>
 80005e6:	e0e9      	b.n	80007bc <__aeabi_fadd+0x25c>
 80005e8:	002b      	movs	r3, r5
 80005ea:	3605      	adds	r6, #5
 80005ec:	08f7      	lsrs	r7, r6, #3
 80005ee:	2bff      	cmp	r3, #255	@ 0xff
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fadd+0x94>
 80005f2:	e0a5      	b.n	8000740 <__aeabi_fadd+0x1e0>
 80005f4:	027a      	lsls	r2, r7, #9
 80005f6:	0a52      	lsrs	r2, r2, #9
 80005f8:	b2d8      	uxtb	r0, r3
 80005fa:	e030      	b.n	800065e <__aeabi_fadd+0xfe>
 80005fc:	2dff      	cmp	r5, #255	@ 0xff
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0xa2>
 8000600:	e09e      	b.n	8000740 <__aeabi_fadd+0x1e0>
 8000602:	2280      	movs	r2, #128	@ 0x80
 8000604:	04d2      	lsls	r2, r2, #19
 8000606:	4311      	orrs	r1, r2
 8000608:	2001      	movs	r0, #1
 800060a:	2b1b      	cmp	r3, #27
 800060c:	dc08      	bgt.n	8000620 <__aeabi_fadd+0xc0>
 800060e:	0008      	movs	r0, r1
 8000610:	2220      	movs	r2, #32
 8000612:	40d8      	lsrs	r0, r3
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	4099      	lsls	r1, r3
 8000618:	000b      	movs	r3, r1
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	4193      	sbcs	r3, r2
 800061e:	4318      	orrs	r0, r3
 8000620:	1a36      	subs	r6, r6, r0
 8000622:	0173      	lsls	r3, r6, #5
 8000624:	d400      	bmi.n	8000628 <__aeabi_fadd+0xc8>
 8000626:	e071      	b.n	800070c <__aeabi_fadd+0x1ac>
 8000628:	01b6      	lsls	r6, r6, #6
 800062a:	09b7      	lsrs	r7, r6, #6
 800062c:	0038      	movs	r0, r7
 800062e:	f003 f835 	bl	800369c <__clzsi2>
 8000632:	003b      	movs	r3, r7
 8000634:	3805      	subs	r0, #5
 8000636:	4083      	lsls	r3, r0
 8000638:	4285      	cmp	r5, r0
 800063a:	dd4d      	ble.n	80006d8 <__aeabi_fadd+0x178>
 800063c:	4eb4      	ldr	r6, [pc, #720]	@ (8000910 <__aeabi_fadd+0x3b0>)
 800063e:	1a2d      	subs	r5, r5, r0
 8000640:	401e      	ands	r6, r3
 8000642:	075a      	lsls	r2, r3, #29
 8000644:	d068      	beq.n	8000718 <__aeabi_fadd+0x1b8>
 8000646:	220f      	movs	r2, #15
 8000648:	4013      	ands	r3, r2
 800064a:	2b04      	cmp	r3, #4
 800064c:	d064      	beq.n	8000718 <__aeabi_fadd+0x1b8>
 800064e:	3604      	adds	r6, #4
 8000650:	0173      	lsls	r3, r6, #5
 8000652:	d561      	bpl.n	8000718 <__aeabi_fadd+0x1b8>
 8000654:	1c68      	adds	r0, r5, #1
 8000656:	2dfe      	cmp	r5, #254	@ 0xfe
 8000658:	d154      	bne.n	8000704 <__aeabi_fadd+0x1a4>
 800065a:	20ff      	movs	r0, #255	@ 0xff
 800065c:	2200      	movs	r2, #0
 800065e:	05c0      	lsls	r0, r0, #23
 8000660:	4310      	orrs	r0, r2
 8000662:	07e4      	lsls	r4, r4, #31
 8000664:	4320      	orrs	r0, r4
 8000666:	bcc0      	pop	{r6, r7}
 8000668:	46b9      	mov	r9, r7
 800066a:	46b0      	mov	r8, r6
 800066c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800066e:	22fe      	movs	r2, #254	@ 0xfe
 8000670:	4690      	mov	r8, r2
 8000672:	1c68      	adds	r0, r5, #1
 8000674:	0002      	movs	r2, r0
 8000676:	4640      	mov	r0, r8
 8000678:	4210      	tst	r0, r2
 800067a:	d16b      	bne.n	8000754 <__aeabi_fadd+0x1f4>
 800067c:	2d00      	cmp	r5, #0
 800067e:	d000      	beq.n	8000682 <__aeabi_fadd+0x122>
 8000680:	e0dd      	b.n	800083e <__aeabi_fadd+0x2de>
 8000682:	2e00      	cmp	r6, #0
 8000684:	d100      	bne.n	8000688 <__aeabi_fadd+0x128>
 8000686:	e102      	b.n	800088e <__aeabi_fadd+0x32e>
 8000688:	2900      	cmp	r1, #0
 800068a:	d0b3      	beq.n	80005f4 <__aeabi_fadd+0x94>
 800068c:	2280      	movs	r2, #128	@ 0x80
 800068e:	1a77      	subs	r7, r6, r1
 8000690:	04d2      	lsls	r2, r2, #19
 8000692:	4217      	tst	r7, r2
 8000694:	d100      	bne.n	8000698 <__aeabi_fadd+0x138>
 8000696:	e136      	b.n	8000906 <__aeabi_fadd+0x3a6>
 8000698:	464c      	mov	r4, r9
 800069a:	1b8e      	subs	r6, r1, r6
 800069c:	d061      	beq.n	8000762 <__aeabi_fadd+0x202>
 800069e:	2001      	movs	r0, #1
 80006a0:	4216      	tst	r6, r2
 80006a2:	d130      	bne.n	8000706 <__aeabi_fadd+0x1a6>
 80006a4:	2300      	movs	r3, #0
 80006a6:	08f7      	lsrs	r7, r6, #3
 80006a8:	e7a4      	b.n	80005f4 <__aeabi_fadd+0x94>
 80006aa:	2900      	cmp	r1, #0
 80006ac:	d09e      	beq.n	80005ec <__aeabi_fadd+0x8c>
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0x156>
 80006b4:	e0ca      	b.n	800084c <__aeabi_fadd+0x2ec>
 80006b6:	2bff      	cmp	r3, #255	@ 0xff
 80006b8:	d042      	beq.n	8000740 <__aeabi_fadd+0x1e0>
 80006ba:	0013      	movs	r3, r2
 80006bc:	e791      	b.n	80005e2 <__aeabi_fadd+0x82>
 80006be:	1a71      	subs	r1, r6, r1
 80006c0:	014b      	lsls	r3, r1, #5
 80006c2:	d400      	bmi.n	80006c6 <__aeabi_fadd+0x166>
 80006c4:	e0d1      	b.n	800086a <__aeabi_fadd+0x30a>
 80006c6:	018f      	lsls	r7, r1, #6
 80006c8:	09bf      	lsrs	r7, r7, #6
 80006ca:	0038      	movs	r0, r7
 80006cc:	f002 ffe6 	bl	800369c <__clzsi2>
 80006d0:	003b      	movs	r3, r7
 80006d2:	3805      	subs	r0, #5
 80006d4:	4083      	lsls	r3, r0
 80006d6:	2501      	movs	r5, #1
 80006d8:	2220      	movs	r2, #32
 80006da:	1b40      	subs	r0, r0, r5
 80006dc:	3001      	adds	r0, #1
 80006de:	1a12      	subs	r2, r2, r0
 80006e0:	001e      	movs	r6, r3
 80006e2:	4093      	lsls	r3, r2
 80006e4:	40c6      	lsrs	r6, r0
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	4193      	sbcs	r3, r2
 80006ea:	431e      	orrs	r6, r3
 80006ec:	d039      	beq.n	8000762 <__aeabi_fadd+0x202>
 80006ee:	0773      	lsls	r3, r6, #29
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fadd+0x194>
 80006f2:	e11b      	b.n	800092c <__aeabi_fadd+0x3cc>
 80006f4:	230f      	movs	r3, #15
 80006f6:	2500      	movs	r5, #0
 80006f8:	4033      	ands	r3, r6
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d1a7      	bne.n	800064e <__aeabi_fadd+0xee>
 80006fe:	2001      	movs	r0, #1
 8000700:	0172      	lsls	r2, r6, #5
 8000702:	d57c      	bpl.n	80007fe <__aeabi_fadd+0x29e>
 8000704:	b2c0      	uxtb	r0, r0
 8000706:	01b2      	lsls	r2, r6, #6
 8000708:	0a52      	lsrs	r2, r2, #9
 800070a:	e7a8      	b.n	800065e <__aeabi_fadd+0xfe>
 800070c:	0773      	lsls	r3, r6, #29
 800070e:	d003      	beq.n	8000718 <__aeabi_fadd+0x1b8>
 8000710:	230f      	movs	r3, #15
 8000712:	4033      	ands	r3, r6
 8000714:	2b04      	cmp	r3, #4
 8000716:	d19a      	bne.n	800064e <__aeabi_fadd+0xee>
 8000718:	002b      	movs	r3, r5
 800071a:	e767      	b.n	80005ec <__aeabi_fadd+0x8c>
 800071c:	2b00      	cmp	r3, #0
 800071e:	d023      	beq.n	8000768 <__aeabi_fadd+0x208>
 8000720:	1b53      	subs	r3, r2, r5
 8000722:	2d00      	cmp	r5, #0
 8000724:	d17b      	bne.n	800081e <__aeabi_fadd+0x2be>
 8000726:	2e00      	cmp	r6, #0
 8000728:	d100      	bne.n	800072c <__aeabi_fadd+0x1cc>
 800072a:	e086      	b.n	800083a <__aeabi_fadd+0x2da>
 800072c:	1e5d      	subs	r5, r3, #1
 800072e:	2b01      	cmp	r3, #1
 8000730:	d100      	bne.n	8000734 <__aeabi_fadd+0x1d4>
 8000732:	e08b      	b.n	800084c <__aeabi_fadd+0x2ec>
 8000734:	2bff      	cmp	r3, #255	@ 0xff
 8000736:	d002      	beq.n	800073e <__aeabi_fadd+0x1de>
 8000738:	002b      	movs	r3, r5
 800073a:	e075      	b.n	8000828 <__aeabi_fadd+0x2c8>
 800073c:	464c      	mov	r4, r9
 800073e:	4667      	mov	r7, ip
 8000740:	2f00      	cmp	r7, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x1e6>
 8000744:	e789      	b.n	800065a <__aeabi_fadd+0xfa>
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	03d2      	lsls	r2, r2, #15
 800074a:	433a      	orrs	r2, r7
 800074c:	0252      	lsls	r2, r2, #9
 800074e:	20ff      	movs	r0, #255	@ 0xff
 8000750:	0a52      	lsrs	r2, r2, #9
 8000752:	e784      	b.n	800065e <__aeabi_fadd+0xfe>
 8000754:	1a77      	subs	r7, r6, r1
 8000756:	017b      	lsls	r3, r7, #5
 8000758:	d46b      	bmi.n	8000832 <__aeabi_fadd+0x2d2>
 800075a:	2f00      	cmp	r7, #0
 800075c:	d000      	beq.n	8000760 <__aeabi_fadd+0x200>
 800075e:	e765      	b.n	800062c <__aeabi_fadd+0xcc>
 8000760:	2400      	movs	r4, #0
 8000762:	2000      	movs	r0, #0
 8000764:	2200      	movs	r2, #0
 8000766:	e77a      	b.n	800065e <__aeabi_fadd+0xfe>
 8000768:	22fe      	movs	r2, #254	@ 0xfe
 800076a:	1c6b      	adds	r3, r5, #1
 800076c:	421a      	tst	r2, r3
 800076e:	d149      	bne.n	8000804 <__aeabi_fadd+0x2a4>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0x216>
 8000774:	e09f      	b.n	80008b6 <__aeabi_fadd+0x356>
 8000776:	2e00      	cmp	r6, #0
 8000778:	d100      	bne.n	800077c <__aeabi_fadd+0x21c>
 800077a:	e0ba      	b.n	80008f2 <__aeabi_fadd+0x392>
 800077c:	2900      	cmp	r1, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0x222>
 8000780:	e0cf      	b.n	8000922 <__aeabi_fadd+0x3c2>
 8000782:	1872      	adds	r2, r6, r1
 8000784:	0153      	lsls	r3, r2, #5
 8000786:	d400      	bmi.n	800078a <__aeabi_fadd+0x22a>
 8000788:	e0cd      	b.n	8000926 <__aeabi_fadd+0x3c6>
 800078a:	0192      	lsls	r2, r2, #6
 800078c:	2001      	movs	r0, #1
 800078e:	0a52      	lsrs	r2, r2, #9
 8000790:	e765      	b.n	800065e <__aeabi_fadd+0xfe>
 8000792:	2aff      	cmp	r2, #255	@ 0xff
 8000794:	d0d2      	beq.n	800073c <__aeabi_fadd+0x1dc>
 8000796:	2080      	movs	r0, #128	@ 0x80
 8000798:	04c0      	lsls	r0, r0, #19
 800079a:	4306      	orrs	r6, r0
 800079c:	2001      	movs	r0, #1
 800079e:	2b1b      	cmp	r3, #27
 80007a0:	dc08      	bgt.n	80007b4 <__aeabi_fadd+0x254>
 80007a2:	0030      	movs	r0, r6
 80007a4:	2420      	movs	r4, #32
 80007a6:	40d8      	lsrs	r0, r3
 80007a8:	1ae3      	subs	r3, r4, r3
 80007aa:	409e      	lsls	r6, r3
 80007ac:	0033      	movs	r3, r6
 80007ae:	1e5c      	subs	r4, r3, #1
 80007b0:	41a3      	sbcs	r3, r4
 80007b2:	4318      	orrs	r0, r3
 80007b4:	464c      	mov	r4, r9
 80007b6:	0015      	movs	r5, r2
 80007b8:	1a0e      	subs	r6, r1, r0
 80007ba:	e732      	b.n	8000622 <__aeabi_fadd+0xc2>
 80007bc:	0008      	movs	r0, r1
 80007be:	2220      	movs	r2, #32
 80007c0:	40d8      	lsrs	r0, r3
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	4099      	lsls	r1, r3
 80007c6:	000b      	movs	r3, r1
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	4193      	sbcs	r3, r2
 80007cc:	4303      	orrs	r3, r0
 80007ce:	18f6      	adds	r6, r6, r3
 80007d0:	0173      	lsls	r3, r6, #5
 80007d2:	d59b      	bpl.n	800070c <__aeabi_fadd+0x1ac>
 80007d4:	3501      	adds	r5, #1
 80007d6:	2dff      	cmp	r5, #255	@ 0xff
 80007d8:	d100      	bne.n	80007dc <__aeabi_fadd+0x27c>
 80007da:	e73e      	b.n	800065a <__aeabi_fadd+0xfa>
 80007dc:	2301      	movs	r3, #1
 80007de:	494d      	ldr	r1, [pc, #308]	@ (8000914 <__aeabi_fadd+0x3b4>)
 80007e0:	0872      	lsrs	r2, r6, #1
 80007e2:	4033      	ands	r3, r6
 80007e4:	400a      	ands	r2, r1
 80007e6:	431a      	orrs	r2, r3
 80007e8:	0016      	movs	r6, r2
 80007ea:	0753      	lsls	r3, r2, #29
 80007ec:	d004      	beq.n	80007f8 <__aeabi_fadd+0x298>
 80007ee:	230f      	movs	r3, #15
 80007f0:	4013      	ands	r3, r2
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fadd+0x298>
 80007f6:	e72a      	b.n	800064e <__aeabi_fadd+0xee>
 80007f8:	0173      	lsls	r3, r6, #5
 80007fa:	d500      	bpl.n	80007fe <__aeabi_fadd+0x29e>
 80007fc:	e72a      	b.n	8000654 <__aeabi_fadd+0xf4>
 80007fe:	002b      	movs	r3, r5
 8000800:	08f7      	lsrs	r7, r6, #3
 8000802:	e6f7      	b.n	80005f4 <__aeabi_fadd+0x94>
 8000804:	2bff      	cmp	r3, #255	@ 0xff
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x2aa>
 8000808:	e727      	b.n	800065a <__aeabi_fadd+0xfa>
 800080a:	1871      	adds	r1, r6, r1
 800080c:	0849      	lsrs	r1, r1, #1
 800080e:	074a      	lsls	r2, r1, #29
 8000810:	d02f      	beq.n	8000872 <__aeabi_fadd+0x312>
 8000812:	220f      	movs	r2, #15
 8000814:	400a      	ands	r2, r1
 8000816:	2a04      	cmp	r2, #4
 8000818:	d02b      	beq.n	8000872 <__aeabi_fadd+0x312>
 800081a:	1d0e      	adds	r6, r1, #4
 800081c:	e6e6      	b.n	80005ec <__aeabi_fadd+0x8c>
 800081e:	2aff      	cmp	r2, #255	@ 0xff
 8000820:	d08d      	beq.n	800073e <__aeabi_fadd+0x1de>
 8000822:	2080      	movs	r0, #128	@ 0x80
 8000824:	04c0      	lsls	r0, r0, #19
 8000826:	4306      	orrs	r6, r0
 8000828:	2b1b      	cmp	r3, #27
 800082a:	dd24      	ble.n	8000876 <__aeabi_fadd+0x316>
 800082c:	0013      	movs	r3, r2
 800082e:	1d4e      	adds	r6, r1, #5
 8000830:	e6dc      	b.n	80005ec <__aeabi_fadd+0x8c>
 8000832:	464c      	mov	r4, r9
 8000834:	1b8f      	subs	r7, r1, r6
 8000836:	e6f9      	b.n	800062c <__aeabi_fadd+0xcc>
 8000838:	464c      	mov	r4, r9
 800083a:	000e      	movs	r6, r1
 800083c:	e6d6      	b.n	80005ec <__aeabi_fadd+0x8c>
 800083e:	2e00      	cmp	r6, #0
 8000840:	d149      	bne.n	80008d6 <__aeabi_fadd+0x376>
 8000842:	2900      	cmp	r1, #0
 8000844:	d068      	beq.n	8000918 <__aeabi_fadd+0x3b8>
 8000846:	4667      	mov	r7, ip
 8000848:	464c      	mov	r4, r9
 800084a:	e77c      	b.n	8000746 <__aeabi_fadd+0x1e6>
 800084c:	1870      	adds	r0, r6, r1
 800084e:	0143      	lsls	r3, r0, #5
 8000850:	d574      	bpl.n	800093c <__aeabi_fadd+0x3dc>
 8000852:	4930      	ldr	r1, [pc, #192]	@ (8000914 <__aeabi_fadd+0x3b4>)
 8000854:	0840      	lsrs	r0, r0, #1
 8000856:	4001      	ands	r1, r0
 8000858:	0743      	lsls	r3, r0, #29
 800085a:	d009      	beq.n	8000870 <__aeabi_fadd+0x310>
 800085c:	230f      	movs	r3, #15
 800085e:	4003      	ands	r3, r0
 8000860:	2b04      	cmp	r3, #4
 8000862:	d005      	beq.n	8000870 <__aeabi_fadd+0x310>
 8000864:	2302      	movs	r3, #2
 8000866:	1d0e      	adds	r6, r1, #4
 8000868:	e6c0      	b.n	80005ec <__aeabi_fadd+0x8c>
 800086a:	2301      	movs	r3, #1
 800086c:	08cf      	lsrs	r7, r1, #3
 800086e:	e6c1      	b.n	80005f4 <__aeabi_fadd+0x94>
 8000870:	2302      	movs	r3, #2
 8000872:	08cf      	lsrs	r7, r1, #3
 8000874:	e6be      	b.n	80005f4 <__aeabi_fadd+0x94>
 8000876:	2520      	movs	r5, #32
 8000878:	0030      	movs	r0, r6
 800087a:	40d8      	lsrs	r0, r3
 800087c:	1aeb      	subs	r3, r5, r3
 800087e:	409e      	lsls	r6, r3
 8000880:	0033      	movs	r3, r6
 8000882:	1e5d      	subs	r5, r3, #1
 8000884:	41ab      	sbcs	r3, r5
 8000886:	4303      	orrs	r3, r0
 8000888:	0015      	movs	r5, r2
 800088a:	185e      	adds	r6, r3, r1
 800088c:	e7a0      	b.n	80007d0 <__aeabi_fadd+0x270>
 800088e:	2900      	cmp	r1, #0
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x334>
 8000892:	e765      	b.n	8000760 <__aeabi_fadd+0x200>
 8000894:	464c      	mov	r4, r9
 8000896:	4667      	mov	r7, ip
 8000898:	e6ac      	b.n	80005f4 <__aeabi_fadd+0x94>
 800089a:	1b8f      	subs	r7, r1, r6
 800089c:	017b      	lsls	r3, r7, #5
 800089e:	d52e      	bpl.n	80008fe <__aeabi_fadd+0x39e>
 80008a0:	01bf      	lsls	r7, r7, #6
 80008a2:	09bf      	lsrs	r7, r7, #6
 80008a4:	0038      	movs	r0, r7
 80008a6:	f002 fef9 	bl	800369c <__clzsi2>
 80008aa:	003b      	movs	r3, r7
 80008ac:	3805      	subs	r0, #5
 80008ae:	4083      	lsls	r3, r0
 80008b0:	464c      	mov	r4, r9
 80008b2:	3501      	adds	r5, #1
 80008b4:	e710      	b.n	80006d8 <__aeabi_fadd+0x178>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_fadd+0x35c>
 80008ba:	e740      	b.n	800073e <__aeabi_fadd+0x1de>
 80008bc:	2900      	cmp	r1, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x362>
 80008c0:	e741      	b.n	8000746 <__aeabi_fadd+0x1e6>
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	03db      	lsls	r3, r3, #15
 80008c6:	429f      	cmp	r7, r3
 80008c8:	d200      	bcs.n	80008cc <__aeabi_fadd+0x36c>
 80008ca:	e73c      	b.n	8000746 <__aeabi_fadd+0x1e6>
 80008cc:	459c      	cmp	ip, r3
 80008ce:	d300      	bcc.n	80008d2 <__aeabi_fadd+0x372>
 80008d0:	e739      	b.n	8000746 <__aeabi_fadd+0x1e6>
 80008d2:	4667      	mov	r7, ip
 80008d4:	e737      	b.n	8000746 <__aeabi_fadd+0x1e6>
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x37c>
 80008da:	e734      	b.n	8000746 <__aeabi_fadd+0x1e6>
 80008dc:	2380      	movs	r3, #128	@ 0x80
 80008de:	03db      	lsls	r3, r3, #15
 80008e0:	429f      	cmp	r7, r3
 80008e2:	d200      	bcs.n	80008e6 <__aeabi_fadd+0x386>
 80008e4:	e72f      	b.n	8000746 <__aeabi_fadd+0x1e6>
 80008e6:	459c      	cmp	ip, r3
 80008e8:	d300      	bcc.n	80008ec <__aeabi_fadd+0x38c>
 80008ea:	e72c      	b.n	8000746 <__aeabi_fadd+0x1e6>
 80008ec:	464c      	mov	r4, r9
 80008ee:	4667      	mov	r7, ip
 80008f0:	e729      	b.n	8000746 <__aeabi_fadd+0x1e6>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x398>
 80008f6:	e734      	b.n	8000762 <__aeabi_fadd+0x202>
 80008f8:	2300      	movs	r3, #0
 80008fa:	08cf      	lsrs	r7, r1, #3
 80008fc:	e67a      	b.n	80005f4 <__aeabi_fadd+0x94>
 80008fe:	464c      	mov	r4, r9
 8000900:	2301      	movs	r3, #1
 8000902:	08ff      	lsrs	r7, r7, #3
 8000904:	e676      	b.n	80005f4 <__aeabi_fadd+0x94>
 8000906:	2f00      	cmp	r7, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fadd+0x3ac>
 800090a:	e729      	b.n	8000760 <__aeabi_fadd+0x200>
 800090c:	08ff      	lsrs	r7, r7, #3
 800090e:	e671      	b.n	80005f4 <__aeabi_fadd+0x94>
 8000910:	fbffffff 	.word	0xfbffffff
 8000914:	7dffffff 	.word	0x7dffffff
 8000918:	2280      	movs	r2, #128	@ 0x80
 800091a:	2400      	movs	r4, #0
 800091c:	20ff      	movs	r0, #255	@ 0xff
 800091e:	03d2      	lsls	r2, r2, #15
 8000920:	e69d      	b.n	800065e <__aeabi_fadd+0xfe>
 8000922:	2300      	movs	r3, #0
 8000924:	e666      	b.n	80005f4 <__aeabi_fadd+0x94>
 8000926:	2300      	movs	r3, #0
 8000928:	08d7      	lsrs	r7, r2, #3
 800092a:	e663      	b.n	80005f4 <__aeabi_fadd+0x94>
 800092c:	2001      	movs	r0, #1
 800092e:	0172      	lsls	r2, r6, #5
 8000930:	d500      	bpl.n	8000934 <__aeabi_fadd+0x3d4>
 8000932:	e6e7      	b.n	8000704 <__aeabi_fadd+0x1a4>
 8000934:	0031      	movs	r1, r6
 8000936:	2300      	movs	r3, #0
 8000938:	08cf      	lsrs	r7, r1, #3
 800093a:	e65b      	b.n	80005f4 <__aeabi_fadd+0x94>
 800093c:	2301      	movs	r3, #1
 800093e:	08c7      	lsrs	r7, r0, #3
 8000940:	e658      	b.n	80005f4 <__aeabi_fadd+0x94>
 8000942:	46c0      	nop			@ (mov r8, r8)

08000944 <__aeabi_fdiv>:
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	4646      	mov	r6, r8
 8000948:	464f      	mov	r7, r9
 800094a:	46d6      	mov	lr, sl
 800094c:	0245      	lsls	r5, r0, #9
 800094e:	b5c0      	push	{r6, r7, lr}
 8000950:	0fc3      	lsrs	r3, r0, #31
 8000952:	0047      	lsls	r7, r0, #1
 8000954:	4698      	mov	r8, r3
 8000956:	1c0e      	adds	r6, r1, #0
 8000958:	0a6d      	lsrs	r5, r5, #9
 800095a:	0e3f      	lsrs	r7, r7, #24
 800095c:	d05b      	beq.n	8000a16 <__aeabi_fdiv+0xd2>
 800095e:	2fff      	cmp	r7, #255	@ 0xff
 8000960:	d021      	beq.n	80009a6 <__aeabi_fdiv+0x62>
 8000962:	2380      	movs	r3, #128	@ 0x80
 8000964:	00ed      	lsls	r5, r5, #3
 8000966:	04db      	lsls	r3, r3, #19
 8000968:	431d      	orrs	r5, r3
 800096a:	2300      	movs	r3, #0
 800096c:	4699      	mov	r9, r3
 800096e:	469a      	mov	sl, r3
 8000970:	3f7f      	subs	r7, #127	@ 0x7f
 8000972:	0274      	lsls	r4, r6, #9
 8000974:	0073      	lsls	r3, r6, #1
 8000976:	0a64      	lsrs	r4, r4, #9
 8000978:	0e1b      	lsrs	r3, r3, #24
 800097a:	0ff6      	lsrs	r6, r6, #31
 800097c:	2b00      	cmp	r3, #0
 800097e:	d020      	beq.n	80009c2 <__aeabi_fdiv+0x7e>
 8000980:	2bff      	cmp	r3, #255	@ 0xff
 8000982:	d043      	beq.n	8000a0c <__aeabi_fdiv+0xc8>
 8000984:	2280      	movs	r2, #128	@ 0x80
 8000986:	2000      	movs	r0, #0
 8000988:	00e4      	lsls	r4, r4, #3
 800098a:	04d2      	lsls	r2, r2, #19
 800098c:	4314      	orrs	r4, r2
 800098e:	3b7f      	subs	r3, #127	@ 0x7f
 8000990:	4642      	mov	r2, r8
 8000992:	1aff      	subs	r7, r7, r3
 8000994:	464b      	mov	r3, r9
 8000996:	4072      	eors	r2, r6
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d900      	bls.n	800099e <__aeabi_fdiv+0x5a>
 800099c:	e09d      	b.n	8000ada <__aeabi_fdiv+0x196>
 800099e:	4971      	ldr	r1, [pc, #452]	@ (8000b64 <__aeabi_fdiv+0x220>)
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	58cb      	ldr	r3, [r1, r3]
 80009a4:	469f      	mov	pc, r3
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d15a      	bne.n	8000a60 <__aeabi_fdiv+0x11c>
 80009aa:	2308      	movs	r3, #8
 80009ac:	4699      	mov	r9, r3
 80009ae:	3b06      	subs	r3, #6
 80009b0:	0274      	lsls	r4, r6, #9
 80009b2:	469a      	mov	sl, r3
 80009b4:	0073      	lsls	r3, r6, #1
 80009b6:	27ff      	movs	r7, #255	@ 0xff
 80009b8:	0a64      	lsrs	r4, r4, #9
 80009ba:	0e1b      	lsrs	r3, r3, #24
 80009bc:	0ff6      	lsrs	r6, r6, #31
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1de      	bne.n	8000980 <__aeabi_fdiv+0x3c>
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d13b      	bne.n	8000a3e <__aeabi_fdiv+0xfa>
 80009c6:	2301      	movs	r3, #1
 80009c8:	4642      	mov	r2, r8
 80009ca:	4649      	mov	r1, r9
 80009cc:	4072      	eors	r2, r6
 80009ce:	4319      	orrs	r1, r3
 80009d0:	290e      	cmp	r1, #14
 80009d2:	d818      	bhi.n	8000a06 <__aeabi_fdiv+0xc2>
 80009d4:	4864      	ldr	r0, [pc, #400]	@ (8000b68 <__aeabi_fdiv+0x224>)
 80009d6:	0089      	lsls	r1, r1, #2
 80009d8:	5841      	ldr	r1, [r0, r1]
 80009da:	468f      	mov	pc, r1
 80009dc:	4653      	mov	r3, sl
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fdiv+0xa0>
 80009e2:	e0b8      	b.n	8000b56 <__aeabi_fdiv+0x212>
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d06e      	beq.n	8000ac6 <__aeabi_fdiv+0x182>
 80009e8:	4642      	mov	r2, r8
 80009ea:	002c      	movs	r4, r5
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d140      	bne.n	8000a72 <__aeabi_fdiv+0x12e>
 80009f0:	2000      	movs	r0, #0
 80009f2:	2400      	movs	r4, #0
 80009f4:	05c0      	lsls	r0, r0, #23
 80009f6:	4320      	orrs	r0, r4
 80009f8:	07d2      	lsls	r2, r2, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	bce0      	pop	{r5, r6, r7}
 80009fe:	46ba      	mov	sl, r7
 8000a00:	46b1      	mov	r9, r6
 8000a02:	46a8      	mov	r8, r5
 8000a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a06:	20ff      	movs	r0, #255	@ 0xff
 8000a08:	2400      	movs	r4, #0
 8000a0a:	e7f3      	b.n	80009f4 <__aeabi_fdiv+0xb0>
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d120      	bne.n	8000a52 <__aeabi_fdiv+0x10e>
 8000a10:	2302      	movs	r3, #2
 8000a12:	3fff      	subs	r7, #255	@ 0xff
 8000a14:	e7d8      	b.n	80009c8 <__aeabi_fdiv+0x84>
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d105      	bne.n	8000a26 <__aeabi_fdiv+0xe2>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	3b03      	subs	r3, #3
 8000a20:	2700      	movs	r7, #0
 8000a22:	469a      	mov	sl, r3
 8000a24:	e7a5      	b.n	8000972 <__aeabi_fdiv+0x2e>
 8000a26:	0028      	movs	r0, r5
 8000a28:	f002 fe38 	bl	800369c <__clzsi2>
 8000a2c:	2776      	movs	r7, #118	@ 0x76
 8000a2e:	1f43      	subs	r3, r0, #5
 8000a30:	409d      	lsls	r5, r3
 8000a32:	2300      	movs	r3, #0
 8000a34:	427f      	negs	r7, r7
 8000a36:	4699      	mov	r9, r3
 8000a38:	469a      	mov	sl, r3
 8000a3a:	1a3f      	subs	r7, r7, r0
 8000a3c:	e799      	b.n	8000972 <__aeabi_fdiv+0x2e>
 8000a3e:	0020      	movs	r0, r4
 8000a40:	f002 fe2c 	bl	800369c <__clzsi2>
 8000a44:	1f43      	subs	r3, r0, #5
 8000a46:	409c      	lsls	r4, r3
 8000a48:	2376      	movs	r3, #118	@ 0x76
 8000a4a:	425b      	negs	r3, r3
 8000a4c:	1a1b      	subs	r3, r3, r0
 8000a4e:	2000      	movs	r0, #0
 8000a50:	e79e      	b.n	8000990 <__aeabi_fdiv+0x4c>
 8000a52:	2303      	movs	r3, #3
 8000a54:	464a      	mov	r2, r9
 8000a56:	431a      	orrs	r2, r3
 8000a58:	4691      	mov	r9, r2
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	33fc      	adds	r3, #252	@ 0xfc
 8000a5e:	e797      	b.n	8000990 <__aeabi_fdiv+0x4c>
 8000a60:	230c      	movs	r3, #12
 8000a62:	4699      	mov	r9, r3
 8000a64:	3b09      	subs	r3, #9
 8000a66:	27ff      	movs	r7, #255	@ 0xff
 8000a68:	469a      	mov	sl, r3
 8000a6a:	e782      	b.n	8000972 <__aeabi_fdiv+0x2e>
 8000a6c:	2803      	cmp	r0, #3
 8000a6e:	d02c      	beq.n	8000aca <__aeabi_fdiv+0x186>
 8000a70:	0032      	movs	r2, r6
 8000a72:	0038      	movs	r0, r7
 8000a74:	307f      	adds	r0, #127	@ 0x7f
 8000a76:	2800      	cmp	r0, #0
 8000a78:	dd47      	ble.n	8000b0a <__aeabi_fdiv+0x1c6>
 8000a7a:	0763      	lsls	r3, r4, #29
 8000a7c:	d004      	beq.n	8000a88 <__aeabi_fdiv+0x144>
 8000a7e:	230f      	movs	r3, #15
 8000a80:	4023      	ands	r3, r4
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d000      	beq.n	8000a88 <__aeabi_fdiv+0x144>
 8000a86:	3404      	adds	r4, #4
 8000a88:	0123      	lsls	r3, r4, #4
 8000a8a:	d503      	bpl.n	8000a94 <__aeabi_fdiv+0x150>
 8000a8c:	0038      	movs	r0, r7
 8000a8e:	4b37      	ldr	r3, [pc, #220]	@ (8000b6c <__aeabi_fdiv+0x228>)
 8000a90:	3080      	adds	r0, #128	@ 0x80
 8000a92:	401c      	ands	r4, r3
 8000a94:	28fe      	cmp	r0, #254	@ 0xfe
 8000a96:	dcb6      	bgt.n	8000a06 <__aeabi_fdiv+0xc2>
 8000a98:	01a4      	lsls	r4, r4, #6
 8000a9a:	0a64      	lsrs	r4, r4, #9
 8000a9c:	b2c0      	uxtb	r0, r0
 8000a9e:	e7a9      	b.n	80009f4 <__aeabi_fdiv+0xb0>
 8000aa0:	2480      	movs	r4, #128	@ 0x80
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	20ff      	movs	r0, #255	@ 0xff
 8000aa6:	03e4      	lsls	r4, r4, #15
 8000aa8:	e7a4      	b.n	80009f4 <__aeabi_fdiv+0xb0>
 8000aaa:	2380      	movs	r3, #128	@ 0x80
 8000aac:	03db      	lsls	r3, r3, #15
 8000aae:	421d      	tst	r5, r3
 8000ab0:	d001      	beq.n	8000ab6 <__aeabi_fdiv+0x172>
 8000ab2:	421c      	tst	r4, r3
 8000ab4:	d00b      	beq.n	8000ace <__aeabi_fdiv+0x18a>
 8000ab6:	2480      	movs	r4, #128	@ 0x80
 8000ab8:	03e4      	lsls	r4, r4, #15
 8000aba:	432c      	orrs	r4, r5
 8000abc:	0264      	lsls	r4, r4, #9
 8000abe:	4642      	mov	r2, r8
 8000ac0:	20ff      	movs	r0, #255	@ 0xff
 8000ac2:	0a64      	lsrs	r4, r4, #9
 8000ac4:	e796      	b.n	80009f4 <__aeabi_fdiv+0xb0>
 8000ac6:	4646      	mov	r6, r8
 8000ac8:	002c      	movs	r4, r5
 8000aca:	2380      	movs	r3, #128	@ 0x80
 8000acc:	03db      	lsls	r3, r3, #15
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	0264      	lsls	r4, r4, #9
 8000ad2:	0032      	movs	r2, r6
 8000ad4:	20ff      	movs	r0, #255	@ 0xff
 8000ad6:	0a64      	lsrs	r4, r4, #9
 8000ad8:	e78c      	b.n	80009f4 <__aeabi_fdiv+0xb0>
 8000ada:	016d      	lsls	r5, r5, #5
 8000adc:	0160      	lsls	r0, r4, #5
 8000ade:	4285      	cmp	r5, r0
 8000ae0:	d22d      	bcs.n	8000b3e <__aeabi_fdiv+0x1fa>
 8000ae2:	231b      	movs	r3, #27
 8000ae4:	2400      	movs	r4, #0
 8000ae6:	3f01      	subs	r7, #1
 8000ae8:	2601      	movs	r6, #1
 8000aea:	0029      	movs	r1, r5
 8000aec:	0064      	lsls	r4, r4, #1
 8000aee:	006d      	lsls	r5, r5, #1
 8000af0:	2900      	cmp	r1, #0
 8000af2:	db01      	blt.n	8000af8 <__aeabi_fdiv+0x1b4>
 8000af4:	4285      	cmp	r5, r0
 8000af6:	d301      	bcc.n	8000afc <__aeabi_fdiv+0x1b8>
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	4334      	orrs	r4, r6
 8000afc:	3b01      	subs	r3, #1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1f3      	bne.n	8000aea <__aeabi_fdiv+0x1a6>
 8000b02:	1e6b      	subs	r3, r5, #1
 8000b04:	419d      	sbcs	r5, r3
 8000b06:	432c      	orrs	r4, r5
 8000b08:	e7b3      	b.n	8000a72 <__aeabi_fdiv+0x12e>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	1a1b      	subs	r3, r3, r0
 8000b0e:	2b1b      	cmp	r3, #27
 8000b10:	dd00      	ble.n	8000b14 <__aeabi_fdiv+0x1d0>
 8000b12:	e76d      	b.n	80009f0 <__aeabi_fdiv+0xac>
 8000b14:	0021      	movs	r1, r4
 8000b16:	379e      	adds	r7, #158	@ 0x9e
 8000b18:	40d9      	lsrs	r1, r3
 8000b1a:	40bc      	lsls	r4, r7
 8000b1c:	000b      	movs	r3, r1
 8000b1e:	1e61      	subs	r1, r4, #1
 8000b20:	418c      	sbcs	r4, r1
 8000b22:	4323      	orrs	r3, r4
 8000b24:	0759      	lsls	r1, r3, #29
 8000b26:	d004      	beq.n	8000b32 <__aeabi_fdiv+0x1ee>
 8000b28:	210f      	movs	r1, #15
 8000b2a:	4019      	ands	r1, r3
 8000b2c:	2904      	cmp	r1, #4
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_fdiv+0x1ee>
 8000b30:	3304      	adds	r3, #4
 8000b32:	0159      	lsls	r1, r3, #5
 8000b34:	d413      	bmi.n	8000b5e <__aeabi_fdiv+0x21a>
 8000b36:	019b      	lsls	r3, r3, #6
 8000b38:	2000      	movs	r0, #0
 8000b3a:	0a5c      	lsrs	r4, r3, #9
 8000b3c:	e75a      	b.n	80009f4 <__aeabi_fdiv+0xb0>
 8000b3e:	231a      	movs	r3, #26
 8000b40:	2401      	movs	r4, #1
 8000b42:	1a2d      	subs	r5, r5, r0
 8000b44:	e7d0      	b.n	8000ae8 <__aeabi_fdiv+0x1a4>
 8000b46:	1e98      	subs	r0, r3, #2
 8000b48:	4243      	negs	r3, r0
 8000b4a:	4158      	adcs	r0, r3
 8000b4c:	4240      	negs	r0, r0
 8000b4e:	0032      	movs	r2, r6
 8000b50:	2400      	movs	r4, #0
 8000b52:	b2c0      	uxtb	r0, r0
 8000b54:	e74e      	b.n	80009f4 <__aeabi_fdiv+0xb0>
 8000b56:	4642      	mov	r2, r8
 8000b58:	20ff      	movs	r0, #255	@ 0xff
 8000b5a:	2400      	movs	r4, #0
 8000b5c:	e74a      	b.n	80009f4 <__aeabi_fdiv+0xb0>
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2400      	movs	r4, #0
 8000b62:	e747      	b.n	80009f4 <__aeabi_fdiv+0xb0>
 8000b64:	0800a430 	.word	0x0800a430
 8000b68:	0800a470 	.word	0x0800a470
 8000b6c:	f7ffffff 	.word	0xf7ffffff

08000b70 <__eqsf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	024e      	lsls	r6, r1, #9
 8000b76:	004c      	lsls	r4, r1, #1
 8000b78:	0245      	lsls	r5, r0, #9
 8000b7a:	0a6d      	lsrs	r5, r5, #9
 8000b7c:	0e12      	lsrs	r2, r2, #24
 8000b7e:	0fc3      	lsrs	r3, r0, #31
 8000b80:	0a76      	lsrs	r6, r6, #9
 8000b82:	0e24      	lsrs	r4, r4, #24
 8000b84:	0fc9      	lsrs	r1, r1, #31
 8000b86:	2aff      	cmp	r2, #255	@ 0xff
 8000b88:	d010      	beq.n	8000bac <__eqsf2+0x3c>
 8000b8a:	2cff      	cmp	r4, #255	@ 0xff
 8000b8c:	d00c      	beq.n	8000ba8 <__eqsf2+0x38>
 8000b8e:	2001      	movs	r0, #1
 8000b90:	42a2      	cmp	r2, r4
 8000b92:	d10a      	bne.n	8000baa <__eqsf2+0x3a>
 8000b94:	42b5      	cmp	r5, r6
 8000b96:	d108      	bne.n	8000baa <__eqsf2+0x3a>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d00f      	beq.n	8000bbc <__eqsf2+0x4c>
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	d104      	bne.n	8000baa <__eqsf2+0x3a>
 8000ba0:	0028      	movs	r0, r5
 8000ba2:	1e43      	subs	r3, r0, #1
 8000ba4:	4198      	sbcs	r0, r3
 8000ba6:	e000      	b.n	8000baa <__eqsf2+0x3a>
 8000ba8:	2001      	movs	r0, #1
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	2001      	movs	r0, #1
 8000bae:	2cff      	cmp	r4, #255	@ 0xff
 8000bb0:	d1fb      	bne.n	8000baa <__eqsf2+0x3a>
 8000bb2:	4335      	orrs	r5, r6
 8000bb4:	d1f9      	bne.n	8000baa <__eqsf2+0x3a>
 8000bb6:	404b      	eors	r3, r1
 8000bb8:	0018      	movs	r0, r3
 8000bba:	e7f6      	b.n	8000baa <__eqsf2+0x3a>
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7f4      	b.n	8000baa <__eqsf2+0x3a>

08000bc0 <__gesf2>:
 8000bc0:	b530      	push	{r4, r5, lr}
 8000bc2:	0042      	lsls	r2, r0, #1
 8000bc4:	0244      	lsls	r4, r0, #9
 8000bc6:	024d      	lsls	r5, r1, #9
 8000bc8:	0fc3      	lsrs	r3, r0, #31
 8000bca:	0048      	lsls	r0, r1, #1
 8000bcc:	0a64      	lsrs	r4, r4, #9
 8000bce:	0e12      	lsrs	r2, r2, #24
 8000bd0:	0a6d      	lsrs	r5, r5, #9
 8000bd2:	0e00      	lsrs	r0, r0, #24
 8000bd4:	0fc9      	lsrs	r1, r1, #31
 8000bd6:	2aff      	cmp	r2, #255	@ 0xff
 8000bd8:	d018      	beq.n	8000c0c <__gesf2+0x4c>
 8000bda:	28ff      	cmp	r0, #255	@ 0xff
 8000bdc:	d00a      	beq.n	8000bf4 <__gesf2+0x34>
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d11e      	bne.n	8000c20 <__gesf2+0x60>
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d10a      	bne.n	8000bfc <__gesf2+0x3c>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d029      	beq.n	8000c3e <__gesf2+0x7e>
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d12d      	bne.n	8000c4a <__gesf2+0x8a>
 8000bee:	0048      	lsls	r0, r1, #1
 8000bf0:	3801      	subs	r0, #1
 8000bf2:	bd30      	pop	{r4, r5, pc}
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d125      	bne.n	8000c44 <__gesf2+0x84>
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	d101      	bne.n	8000c00 <__gesf2+0x40>
 8000bfc:	2c00      	cmp	r4, #0
 8000bfe:	d0f6      	beq.n	8000bee <__gesf2+0x2e>
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d019      	beq.n	8000c38 <__gesf2+0x78>
 8000c04:	2001      	movs	r0, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	4318      	orrs	r0, r3
 8000c0a:	e7f2      	b.n	8000bf2 <__gesf2+0x32>
 8000c0c:	2c00      	cmp	r4, #0
 8000c0e:	d119      	bne.n	8000c44 <__gesf2+0x84>
 8000c10:	28ff      	cmp	r0, #255	@ 0xff
 8000c12:	d1f7      	bne.n	8000c04 <__gesf2+0x44>
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d115      	bne.n	8000c44 <__gesf2+0x84>
 8000c18:	2000      	movs	r0, #0
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d1f2      	bne.n	8000c04 <__gesf2+0x44>
 8000c1e:	e7e8      	b.n	8000bf2 <__gesf2+0x32>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d0ef      	beq.n	8000c04 <__gesf2+0x44>
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d1ed      	bne.n	8000c04 <__gesf2+0x44>
 8000c28:	4282      	cmp	r2, r0
 8000c2a:	dceb      	bgt.n	8000c04 <__gesf2+0x44>
 8000c2c:	db04      	blt.n	8000c38 <__gesf2+0x78>
 8000c2e:	42ac      	cmp	r4, r5
 8000c30:	d8e8      	bhi.n	8000c04 <__gesf2+0x44>
 8000c32:	2000      	movs	r0, #0
 8000c34:	42ac      	cmp	r4, r5
 8000c36:	d2dc      	bcs.n	8000bf2 <__gesf2+0x32>
 8000c38:	0058      	lsls	r0, r3, #1
 8000c3a:	3801      	subs	r0, #1
 8000c3c:	e7d9      	b.n	8000bf2 <__gesf2+0x32>
 8000c3e:	2c00      	cmp	r4, #0
 8000c40:	d0d7      	beq.n	8000bf2 <__gesf2+0x32>
 8000c42:	e7df      	b.n	8000c04 <__gesf2+0x44>
 8000c44:	2002      	movs	r0, #2
 8000c46:	4240      	negs	r0, r0
 8000c48:	e7d3      	b.n	8000bf2 <__gesf2+0x32>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d1da      	bne.n	8000c04 <__gesf2+0x44>
 8000c4e:	e7ee      	b.n	8000c2e <__gesf2+0x6e>

08000c50 <__lesf2>:
 8000c50:	b530      	push	{r4, r5, lr}
 8000c52:	0042      	lsls	r2, r0, #1
 8000c54:	0244      	lsls	r4, r0, #9
 8000c56:	024d      	lsls	r5, r1, #9
 8000c58:	0fc3      	lsrs	r3, r0, #31
 8000c5a:	0048      	lsls	r0, r1, #1
 8000c5c:	0a64      	lsrs	r4, r4, #9
 8000c5e:	0e12      	lsrs	r2, r2, #24
 8000c60:	0a6d      	lsrs	r5, r5, #9
 8000c62:	0e00      	lsrs	r0, r0, #24
 8000c64:	0fc9      	lsrs	r1, r1, #31
 8000c66:	2aff      	cmp	r2, #255	@ 0xff
 8000c68:	d017      	beq.n	8000c9a <__lesf2+0x4a>
 8000c6a:	28ff      	cmp	r0, #255	@ 0xff
 8000c6c:	d00a      	beq.n	8000c84 <__lesf2+0x34>
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d11b      	bne.n	8000caa <__lesf2+0x5a>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d10a      	bne.n	8000c8c <__lesf2+0x3c>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d01d      	beq.n	8000cb6 <__lesf2+0x66>
 8000c7a:	2c00      	cmp	r4, #0
 8000c7c:	d12d      	bne.n	8000cda <__lesf2+0x8a>
 8000c7e:	0048      	lsls	r0, r1, #1
 8000c80:	3801      	subs	r0, #1
 8000c82:	e011      	b.n	8000ca8 <__lesf2+0x58>
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d10e      	bne.n	8000ca6 <__lesf2+0x56>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d101      	bne.n	8000c90 <__lesf2+0x40>
 8000c8c:	2c00      	cmp	r4, #0
 8000c8e:	d0f6      	beq.n	8000c7e <__lesf2+0x2e>
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d10c      	bne.n	8000cae <__lesf2+0x5e>
 8000c94:	0058      	lsls	r0, r3, #1
 8000c96:	3801      	subs	r0, #1
 8000c98:	e006      	b.n	8000ca8 <__lesf2+0x58>
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	d103      	bne.n	8000ca6 <__lesf2+0x56>
 8000c9e:	28ff      	cmp	r0, #255	@ 0xff
 8000ca0:	d105      	bne.n	8000cae <__lesf2+0x5e>
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	d015      	beq.n	8000cd2 <__lesf2+0x82>
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	bd30      	pop	{r4, r5, pc}
 8000caa:	2800      	cmp	r0, #0
 8000cac:	d106      	bne.n	8000cbc <__lesf2+0x6c>
 8000cae:	2001      	movs	r0, #1
 8000cb0:	425b      	negs	r3, r3
 8000cb2:	4318      	orrs	r0, r3
 8000cb4:	e7f8      	b.n	8000ca8 <__lesf2+0x58>
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	d0f6      	beq.n	8000ca8 <__lesf2+0x58>
 8000cba:	e7f8      	b.n	8000cae <__lesf2+0x5e>
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d1f6      	bne.n	8000cae <__lesf2+0x5e>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	dcf4      	bgt.n	8000cae <__lesf2+0x5e>
 8000cc4:	dbe6      	blt.n	8000c94 <__lesf2+0x44>
 8000cc6:	42ac      	cmp	r4, r5
 8000cc8:	d8f1      	bhi.n	8000cae <__lesf2+0x5e>
 8000cca:	2000      	movs	r0, #0
 8000ccc:	42ac      	cmp	r4, r5
 8000cce:	d2eb      	bcs.n	8000ca8 <__lesf2+0x58>
 8000cd0:	e7e0      	b.n	8000c94 <__lesf2+0x44>
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	d1ea      	bne.n	8000cae <__lesf2+0x5e>
 8000cd8:	e7e6      	b.n	8000ca8 <__lesf2+0x58>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d1e7      	bne.n	8000cae <__lesf2+0x5e>
 8000cde:	e7f2      	b.n	8000cc6 <__lesf2+0x76>

08000ce0 <__aeabi_fmul>:
 8000ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce2:	464f      	mov	r7, r9
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	46d6      	mov	lr, sl
 8000ce8:	0044      	lsls	r4, r0, #1
 8000cea:	b5c0      	push	{r6, r7, lr}
 8000cec:	0246      	lsls	r6, r0, #9
 8000cee:	1c0f      	adds	r7, r1, #0
 8000cf0:	0a76      	lsrs	r6, r6, #9
 8000cf2:	0e24      	lsrs	r4, r4, #24
 8000cf4:	0fc5      	lsrs	r5, r0, #31
 8000cf6:	2c00      	cmp	r4, #0
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fmul+0x1c>
 8000cfa:	e0da      	b.n	8000eb2 <__aeabi_fmul+0x1d2>
 8000cfc:	2cff      	cmp	r4, #255	@ 0xff
 8000cfe:	d074      	beq.n	8000dea <__aeabi_fmul+0x10a>
 8000d00:	2380      	movs	r3, #128	@ 0x80
 8000d02:	00f6      	lsls	r6, r6, #3
 8000d04:	04db      	lsls	r3, r3, #19
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	469a      	mov	sl, r3
 8000d0e:	3c7f      	subs	r4, #127	@ 0x7f
 8000d10:	027b      	lsls	r3, r7, #9
 8000d12:	0a5b      	lsrs	r3, r3, #9
 8000d14:	4698      	mov	r8, r3
 8000d16:	007b      	lsls	r3, r7, #1
 8000d18:	0e1b      	lsrs	r3, r3, #24
 8000d1a:	0fff      	lsrs	r7, r7, #31
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d074      	beq.n	8000e0a <__aeabi_fmul+0x12a>
 8000d20:	2bff      	cmp	r3, #255	@ 0xff
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fmul+0x46>
 8000d24:	e08e      	b.n	8000e44 <__aeabi_fmul+0x164>
 8000d26:	4642      	mov	r2, r8
 8000d28:	2180      	movs	r1, #128	@ 0x80
 8000d2a:	00d2      	lsls	r2, r2, #3
 8000d2c:	04c9      	lsls	r1, r1, #19
 8000d2e:	4311      	orrs	r1, r2
 8000d30:	3b7f      	subs	r3, #127	@ 0x7f
 8000d32:	002a      	movs	r2, r5
 8000d34:	18e4      	adds	r4, r4, r3
 8000d36:	464b      	mov	r3, r9
 8000d38:	407a      	eors	r2, r7
 8000d3a:	4688      	mov	r8, r1
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	2b0a      	cmp	r3, #10
 8000d40:	dc75      	bgt.n	8000e2e <__aeabi_fmul+0x14e>
 8000d42:	464b      	mov	r3, r9
 8000d44:	2000      	movs	r0, #0
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	dd0f      	ble.n	8000d6a <__aeabi_fmul+0x8a>
 8000d4a:	4649      	mov	r1, r9
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	408b      	lsls	r3, r1
 8000d50:	21a6      	movs	r1, #166	@ 0xa6
 8000d52:	00c9      	lsls	r1, r1, #3
 8000d54:	420b      	tst	r3, r1
 8000d56:	d169      	bne.n	8000e2c <__aeabi_fmul+0x14c>
 8000d58:	2190      	movs	r1, #144	@ 0x90
 8000d5a:	0089      	lsls	r1, r1, #2
 8000d5c:	420b      	tst	r3, r1
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_fmul+0x82>
 8000d60:	e100      	b.n	8000f64 <__aeabi_fmul+0x284>
 8000d62:	2188      	movs	r1, #136	@ 0x88
 8000d64:	4219      	tst	r1, r3
 8000d66:	d000      	beq.n	8000d6a <__aeabi_fmul+0x8a>
 8000d68:	e0f5      	b.n	8000f56 <__aeabi_fmul+0x276>
 8000d6a:	4641      	mov	r1, r8
 8000d6c:	0409      	lsls	r1, r1, #16
 8000d6e:	0c09      	lsrs	r1, r1, #16
 8000d70:	4643      	mov	r3, r8
 8000d72:	0008      	movs	r0, r1
 8000d74:	0c35      	lsrs	r5, r6, #16
 8000d76:	0436      	lsls	r6, r6, #16
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	0c36      	lsrs	r6, r6, #16
 8000d7c:	4370      	muls	r0, r6
 8000d7e:	4369      	muls	r1, r5
 8000d80:	435e      	muls	r6, r3
 8000d82:	435d      	muls	r5, r3
 8000d84:	1876      	adds	r6, r6, r1
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	199b      	adds	r3, r3, r6
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	d903      	bls.n	8000d96 <__aeabi_fmul+0xb6>
 8000d8e:	2180      	movs	r1, #128	@ 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	468c      	mov	ip, r1
 8000d94:	4465      	add	r5, ip
 8000d96:	0400      	lsls	r0, r0, #16
 8000d98:	0419      	lsls	r1, r3, #16
 8000d9a:	0c00      	lsrs	r0, r0, #16
 8000d9c:	1809      	adds	r1, r1, r0
 8000d9e:	018e      	lsls	r6, r1, #6
 8000da0:	1e70      	subs	r0, r6, #1
 8000da2:	4186      	sbcs	r6, r0
 8000da4:	0c1b      	lsrs	r3, r3, #16
 8000da6:	0e89      	lsrs	r1, r1, #26
 8000da8:	195b      	adds	r3, r3, r5
 8000daa:	430e      	orrs	r6, r1
 8000dac:	019b      	lsls	r3, r3, #6
 8000dae:	431e      	orrs	r6, r3
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	d46c      	bmi.n	8000e8e <__aeabi_fmul+0x1ae>
 8000db4:	0023      	movs	r3, r4
 8000db6:	337f      	adds	r3, #127	@ 0x7f
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_fmul+0xde>
 8000dbc:	e0b1      	b.n	8000f22 <__aeabi_fmul+0x242>
 8000dbe:	0015      	movs	r5, r2
 8000dc0:	0771      	lsls	r1, r6, #29
 8000dc2:	d00b      	beq.n	8000ddc <__aeabi_fmul+0xfc>
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	0021      	movs	r1, r4
 8000dc8:	4030      	ands	r0, r6
 8000dca:	2804      	cmp	r0, #4
 8000dcc:	d006      	beq.n	8000ddc <__aeabi_fmul+0xfc>
 8000dce:	3604      	adds	r6, #4
 8000dd0:	0132      	lsls	r2, r6, #4
 8000dd2:	d503      	bpl.n	8000ddc <__aeabi_fmul+0xfc>
 8000dd4:	4b6e      	ldr	r3, [pc, #440]	@ (8000f90 <__aeabi_fmul+0x2b0>)
 8000dd6:	401e      	ands	r6, r3
 8000dd8:	000b      	movs	r3, r1
 8000dda:	3380      	adds	r3, #128	@ 0x80
 8000ddc:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dde:	dd00      	ble.n	8000de2 <__aeabi_fmul+0x102>
 8000de0:	e0bd      	b.n	8000f5e <__aeabi_fmul+0x27e>
 8000de2:	01b2      	lsls	r2, r6, #6
 8000de4:	0a52      	lsrs	r2, r2, #9
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	e048      	b.n	8000e7c <__aeabi_fmul+0x19c>
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d000      	beq.n	8000df0 <__aeabi_fmul+0x110>
 8000dee:	e092      	b.n	8000f16 <__aeabi_fmul+0x236>
 8000df0:	2308      	movs	r3, #8
 8000df2:	4699      	mov	r9, r3
 8000df4:	3b06      	subs	r3, #6
 8000df6:	469a      	mov	sl, r3
 8000df8:	027b      	lsls	r3, r7, #9
 8000dfa:	0a5b      	lsrs	r3, r3, #9
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	007b      	lsls	r3, r7, #1
 8000e00:	24ff      	movs	r4, #255	@ 0xff
 8000e02:	0e1b      	lsrs	r3, r3, #24
 8000e04:	0fff      	lsrs	r7, r7, #31
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d18a      	bne.n	8000d20 <__aeabi_fmul+0x40>
 8000e0a:	4642      	mov	r2, r8
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d164      	bne.n	8000eda <__aeabi_fmul+0x1fa>
 8000e10:	4649      	mov	r1, r9
 8000e12:	3201      	adds	r2, #1
 8000e14:	4311      	orrs	r1, r2
 8000e16:	4689      	mov	r9, r1
 8000e18:	290a      	cmp	r1, #10
 8000e1a:	dc08      	bgt.n	8000e2e <__aeabi_fmul+0x14e>
 8000e1c:	407d      	eors	r5, r7
 8000e1e:	2001      	movs	r0, #1
 8000e20:	b2ea      	uxtb	r2, r5
 8000e22:	2902      	cmp	r1, #2
 8000e24:	dc91      	bgt.n	8000d4a <__aeabi_fmul+0x6a>
 8000e26:	0015      	movs	r5, r2
 8000e28:	2200      	movs	r2, #0
 8000e2a:	e027      	b.n	8000e7c <__aeabi_fmul+0x19c>
 8000e2c:	0015      	movs	r5, r2
 8000e2e:	4653      	mov	r3, sl
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d100      	bne.n	8000e36 <__aeabi_fmul+0x156>
 8000e34:	e093      	b.n	8000f5e <__aeabi_fmul+0x27e>
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d01a      	beq.n	8000e70 <__aeabi_fmul+0x190>
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d12c      	bne.n	8000e98 <__aeabi_fmul+0x1b8>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2200      	movs	r2, #0
 8000e42:	e01b      	b.n	8000e7c <__aeabi_fmul+0x19c>
 8000e44:	4643      	mov	r3, r8
 8000e46:	34ff      	adds	r4, #255	@ 0xff
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d055      	beq.n	8000ef8 <__aeabi_fmul+0x218>
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	464b      	mov	r3, r9
 8000e50:	430b      	orrs	r3, r1
 8000e52:	0019      	movs	r1, r3
 8000e54:	2b0a      	cmp	r3, #10
 8000e56:	dc00      	bgt.n	8000e5a <__aeabi_fmul+0x17a>
 8000e58:	e092      	b.n	8000f80 <__aeabi_fmul+0x2a0>
 8000e5a:	2b0f      	cmp	r3, #15
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fmul+0x180>
 8000e5e:	e08c      	b.n	8000f7a <__aeabi_fmul+0x29a>
 8000e60:	2280      	movs	r2, #128	@ 0x80
 8000e62:	03d2      	lsls	r2, r2, #15
 8000e64:	4216      	tst	r6, r2
 8000e66:	d003      	beq.n	8000e70 <__aeabi_fmul+0x190>
 8000e68:	4643      	mov	r3, r8
 8000e6a:	4213      	tst	r3, r2
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_fmul+0x190>
 8000e6e:	e07d      	b.n	8000f6c <__aeabi_fmul+0x28c>
 8000e70:	2280      	movs	r2, #128	@ 0x80
 8000e72:	03d2      	lsls	r2, r2, #15
 8000e74:	4332      	orrs	r2, r6
 8000e76:	0252      	lsls	r2, r2, #9
 8000e78:	0a52      	lsrs	r2, r2, #9
 8000e7a:	23ff      	movs	r3, #255	@ 0xff
 8000e7c:	05d8      	lsls	r0, r3, #23
 8000e7e:	07ed      	lsls	r5, r5, #31
 8000e80:	4310      	orrs	r0, r2
 8000e82:	4328      	orrs	r0, r5
 8000e84:	bce0      	pop	{r5, r6, r7}
 8000e86:	46ba      	mov	sl, r7
 8000e88:	46b1      	mov	r9, r6
 8000e8a:	46a8      	mov	r8, r5
 8000e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e8e:	2301      	movs	r3, #1
 8000e90:	0015      	movs	r5, r2
 8000e92:	0871      	lsrs	r1, r6, #1
 8000e94:	401e      	ands	r6, r3
 8000e96:	430e      	orrs	r6, r1
 8000e98:	0023      	movs	r3, r4
 8000e9a:	3380      	adds	r3, #128	@ 0x80
 8000e9c:	1c61      	adds	r1, r4, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	dd41      	ble.n	8000f26 <__aeabi_fmul+0x246>
 8000ea2:	0772      	lsls	r2, r6, #29
 8000ea4:	d094      	beq.n	8000dd0 <__aeabi_fmul+0xf0>
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	4032      	ands	r2, r6
 8000eaa:	2a04      	cmp	r2, #4
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_fmul+0x1d0>
 8000eae:	e78e      	b.n	8000dce <__aeabi_fmul+0xee>
 8000eb0:	e78e      	b.n	8000dd0 <__aeabi_fmul+0xf0>
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d105      	bne.n	8000ec2 <__aeabi_fmul+0x1e2>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	4699      	mov	r9, r3
 8000eba:	3b03      	subs	r3, #3
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	469a      	mov	sl, r3
 8000ec0:	e726      	b.n	8000d10 <__aeabi_fmul+0x30>
 8000ec2:	0030      	movs	r0, r6
 8000ec4:	f002 fbea 	bl	800369c <__clzsi2>
 8000ec8:	2476      	movs	r4, #118	@ 0x76
 8000eca:	1f43      	subs	r3, r0, #5
 8000ecc:	409e      	lsls	r6, r3
 8000ece:	2300      	movs	r3, #0
 8000ed0:	4264      	negs	r4, r4
 8000ed2:	4699      	mov	r9, r3
 8000ed4:	469a      	mov	sl, r3
 8000ed6:	1a24      	subs	r4, r4, r0
 8000ed8:	e71a      	b.n	8000d10 <__aeabi_fmul+0x30>
 8000eda:	4640      	mov	r0, r8
 8000edc:	f002 fbde 	bl	800369c <__clzsi2>
 8000ee0:	464b      	mov	r3, r9
 8000ee2:	1a24      	subs	r4, r4, r0
 8000ee4:	3c76      	subs	r4, #118	@ 0x76
 8000ee6:	2b0a      	cmp	r3, #10
 8000ee8:	dca1      	bgt.n	8000e2e <__aeabi_fmul+0x14e>
 8000eea:	4643      	mov	r3, r8
 8000eec:	3805      	subs	r0, #5
 8000eee:	4083      	lsls	r3, r0
 8000ef0:	407d      	eors	r5, r7
 8000ef2:	4698      	mov	r8, r3
 8000ef4:	b2ea      	uxtb	r2, r5
 8000ef6:	e724      	b.n	8000d42 <__aeabi_fmul+0x62>
 8000ef8:	464a      	mov	r2, r9
 8000efa:	3302      	adds	r3, #2
 8000efc:	4313      	orrs	r3, r2
 8000efe:	002a      	movs	r2, r5
 8000f00:	407a      	eors	r2, r7
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	2b0a      	cmp	r3, #10
 8000f06:	dc92      	bgt.n	8000e2e <__aeabi_fmul+0x14e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	0015      	movs	r5, r2
 8000f0c:	2900      	cmp	r1, #0
 8000f0e:	d026      	beq.n	8000f5e <__aeabi_fmul+0x27e>
 8000f10:	4699      	mov	r9, r3
 8000f12:	2002      	movs	r0, #2
 8000f14:	e719      	b.n	8000d4a <__aeabi_fmul+0x6a>
 8000f16:	230c      	movs	r3, #12
 8000f18:	4699      	mov	r9, r3
 8000f1a:	3b09      	subs	r3, #9
 8000f1c:	24ff      	movs	r4, #255	@ 0xff
 8000f1e:	469a      	mov	sl, r3
 8000f20:	e6f6      	b.n	8000d10 <__aeabi_fmul+0x30>
 8000f22:	0015      	movs	r5, r2
 8000f24:	0021      	movs	r1, r4
 8000f26:	2201      	movs	r2, #1
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b1b      	cmp	r3, #27
 8000f2c:	dd00      	ble.n	8000f30 <__aeabi_fmul+0x250>
 8000f2e:	e786      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f30:	319e      	adds	r1, #158	@ 0x9e
 8000f32:	0032      	movs	r2, r6
 8000f34:	408e      	lsls	r6, r1
 8000f36:	40da      	lsrs	r2, r3
 8000f38:	1e73      	subs	r3, r6, #1
 8000f3a:	419e      	sbcs	r6, r3
 8000f3c:	4332      	orrs	r2, r6
 8000f3e:	0753      	lsls	r3, r2, #29
 8000f40:	d004      	beq.n	8000f4c <__aeabi_fmul+0x26c>
 8000f42:	230f      	movs	r3, #15
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fmul+0x26c>
 8000f4a:	3204      	adds	r2, #4
 8000f4c:	0153      	lsls	r3, r2, #5
 8000f4e:	d510      	bpl.n	8000f72 <__aeabi_fmul+0x292>
 8000f50:	2301      	movs	r3, #1
 8000f52:	2200      	movs	r2, #0
 8000f54:	e792      	b.n	8000e7c <__aeabi_fmul+0x19c>
 8000f56:	003d      	movs	r5, r7
 8000f58:	4646      	mov	r6, r8
 8000f5a:	4682      	mov	sl, r0
 8000f5c:	e767      	b.n	8000e2e <__aeabi_fmul+0x14e>
 8000f5e:	23ff      	movs	r3, #255	@ 0xff
 8000f60:	2200      	movs	r2, #0
 8000f62:	e78b      	b.n	8000e7c <__aeabi_fmul+0x19c>
 8000f64:	2280      	movs	r2, #128	@ 0x80
 8000f66:	2500      	movs	r5, #0
 8000f68:	03d2      	lsls	r2, r2, #15
 8000f6a:	e786      	b.n	8000e7a <__aeabi_fmul+0x19a>
 8000f6c:	003d      	movs	r5, r7
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	e783      	b.n	8000e7a <__aeabi_fmul+0x19a>
 8000f72:	0192      	lsls	r2, r2, #6
 8000f74:	2300      	movs	r3, #0
 8000f76:	0a52      	lsrs	r2, r2, #9
 8000f78:	e780      	b.n	8000e7c <__aeabi_fmul+0x19c>
 8000f7a:	003d      	movs	r5, r7
 8000f7c:	4646      	mov	r6, r8
 8000f7e:	e777      	b.n	8000e70 <__aeabi_fmul+0x190>
 8000f80:	002a      	movs	r2, r5
 8000f82:	2301      	movs	r3, #1
 8000f84:	407a      	eors	r2, r7
 8000f86:	408b      	lsls	r3, r1
 8000f88:	2003      	movs	r0, #3
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	e6e9      	b.n	8000d62 <__aeabi_fmul+0x82>
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	f7ffffff 	.word	0xf7ffffff

08000f94 <__aeabi_fsub>:
 8000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f96:	4647      	mov	r7, r8
 8000f98:	46ce      	mov	lr, r9
 8000f9a:	0243      	lsls	r3, r0, #9
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	0a5f      	lsrs	r7, r3, #9
 8000fa0:	099b      	lsrs	r3, r3, #6
 8000fa2:	0045      	lsls	r5, r0, #1
 8000fa4:	004a      	lsls	r2, r1, #1
 8000fa6:	469c      	mov	ip, r3
 8000fa8:	024b      	lsls	r3, r1, #9
 8000faa:	0fc4      	lsrs	r4, r0, #31
 8000fac:	0fce      	lsrs	r6, r1, #31
 8000fae:	0e2d      	lsrs	r5, r5, #24
 8000fb0:	0a58      	lsrs	r0, r3, #9
 8000fb2:	0e12      	lsrs	r2, r2, #24
 8000fb4:	0999      	lsrs	r1, r3, #6
 8000fb6:	2aff      	cmp	r2, #255	@ 0xff
 8000fb8:	d06b      	beq.n	8001092 <__aeabi_fsub+0xfe>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	405e      	eors	r6, r3
 8000fbe:	1aab      	subs	r3, r5, r2
 8000fc0:	42b4      	cmp	r4, r6
 8000fc2:	d04b      	beq.n	800105c <__aeabi_fsub+0xc8>
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dc00      	bgt.n	8000fca <__aeabi_fsub+0x36>
 8000fc8:	e0ff      	b.n	80011ca <__aeabi_fsub+0x236>
 8000fca:	2a00      	cmp	r2, #0
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_fsub+0x3c>
 8000fce:	e088      	b.n	80010e2 <__aeabi_fsub+0x14e>
 8000fd0:	2dff      	cmp	r5, #255	@ 0xff
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x42>
 8000fd4:	e0ef      	b.n	80011b6 <__aeabi_fsub+0x222>
 8000fd6:	2280      	movs	r2, #128	@ 0x80
 8000fd8:	04d2      	lsls	r2, r2, #19
 8000fda:	4311      	orrs	r1, r2
 8000fdc:	2001      	movs	r0, #1
 8000fde:	2b1b      	cmp	r3, #27
 8000fe0:	dc08      	bgt.n	8000ff4 <__aeabi_fsub+0x60>
 8000fe2:	0008      	movs	r0, r1
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	40d8      	lsrs	r0, r3
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	4099      	lsls	r1, r3
 8000fec:	000b      	movs	r3, r1
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	4193      	sbcs	r3, r2
 8000ff2:	4318      	orrs	r0, r3
 8000ff4:	4663      	mov	r3, ip
 8000ff6:	1a1b      	subs	r3, r3, r0
 8000ff8:	469c      	mov	ip, r3
 8000ffa:	4663      	mov	r3, ip
 8000ffc:	015b      	lsls	r3, r3, #5
 8000ffe:	d400      	bmi.n	8001002 <__aeabi_fsub+0x6e>
 8001000:	e0cd      	b.n	800119e <__aeabi_fsub+0x20a>
 8001002:	4663      	mov	r3, ip
 8001004:	019f      	lsls	r7, r3, #6
 8001006:	09bf      	lsrs	r7, r7, #6
 8001008:	0038      	movs	r0, r7
 800100a:	f002 fb47 	bl	800369c <__clzsi2>
 800100e:	003b      	movs	r3, r7
 8001010:	3805      	subs	r0, #5
 8001012:	4083      	lsls	r3, r0
 8001014:	4285      	cmp	r5, r0
 8001016:	dc00      	bgt.n	800101a <__aeabi_fsub+0x86>
 8001018:	e0a2      	b.n	8001160 <__aeabi_fsub+0x1cc>
 800101a:	4ab7      	ldr	r2, [pc, #732]	@ (80012f8 <__aeabi_fsub+0x364>)
 800101c:	1a2d      	subs	r5, r5, r0
 800101e:	401a      	ands	r2, r3
 8001020:	4694      	mov	ip, r2
 8001022:	075a      	lsls	r2, r3, #29
 8001024:	d100      	bne.n	8001028 <__aeabi_fsub+0x94>
 8001026:	e0c3      	b.n	80011b0 <__aeabi_fsub+0x21c>
 8001028:	220f      	movs	r2, #15
 800102a:	4013      	ands	r3, r2
 800102c:	2b04      	cmp	r3, #4
 800102e:	d100      	bne.n	8001032 <__aeabi_fsub+0x9e>
 8001030:	e0be      	b.n	80011b0 <__aeabi_fsub+0x21c>
 8001032:	2304      	movs	r3, #4
 8001034:	4698      	mov	r8, r3
 8001036:	44c4      	add	ip, r8
 8001038:	4663      	mov	r3, ip
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	d400      	bmi.n	8001040 <__aeabi_fsub+0xac>
 800103e:	e0b7      	b.n	80011b0 <__aeabi_fsub+0x21c>
 8001040:	1c68      	adds	r0, r5, #1
 8001042:	2dfe      	cmp	r5, #254	@ 0xfe
 8001044:	d000      	beq.n	8001048 <__aeabi_fsub+0xb4>
 8001046:	e0a5      	b.n	8001194 <__aeabi_fsub+0x200>
 8001048:	20ff      	movs	r0, #255	@ 0xff
 800104a:	2200      	movs	r2, #0
 800104c:	05c0      	lsls	r0, r0, #23
 800104e:	4310      	orrs	r0, r2
 8001050:	07e4      	lsls	r4, r4, #31
 8001052:	4320      	orrs	r0, r4
 8001054:	bcc0      	pop	{r6, r7}
 8001056:	46b9      	mov	r9, r7
 8001058:	46b0      	mov	r8, r6
 800105a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800105c:	2b00      	cmp	r3, #0
 800105e:	dc00      	bgt.n	8001062 <__aeabi_fsub+0xce>
 8001060:	e1eb      	b.n	800143a <__aeabi_fsub+0x4a6>
 8001062:	2a00      	cmp	r2, #0
 8001064:	d046      	beq.n	80010f4 <__aeabi_fsub+0x160>
 8001066:	2dff      	cmp	r5, #255	@ 0xff
 8001068:	d100      	bne.n	800106c <__aeabi_fsub+0xd8>
 800106a:	e0a4      	b.n	80011b6 <__aeabi_fsub+0x222>
 800106c:	2280      	movs	r2, #128	@ 0x80
 800106e:	04d2      	lsls	r2, r2, #19
 8001070:	4311      	orrs	r1, r2
 8001072:	2b1b      	cmp	r3, #27
 8001074:	dc00      	bgt.n	8001078 <__aeabi_fsub+0xe4>
 8001076:	e0fb      	b.n	8001270 <__aeabi_fsub+0x2dc>
 8001078:	2305      	movs	r3, #5
 800107a:	4698      	mov	r8, r3
 800107c:	002b      	movs	r3, r5
 800107e:	44c4      	add	ip, r8
 8001080:	4662      	mov	r2, ip
 8001082:	08d7      	lsrs	r7, r2, #3
 8001084:	2bff      	cmp	r3, #255	@ 0xff
 8001086:	d100      	bne.n	800108a <__aeabi_fsub+0xf6>
 8001088:	e095      	b.n	80011b6 <__aeabi_fsub+0x222>
 800108a:	027a      	lsls	r2, r7, #9
 800108c:	0a52      	lsrs	r2, r2, #9
 800108e:	b2d8      	uxtb	r0, r3
 8001090:	e7dc      	b.n	800104c <__aeabi_fsub+0xb8>
 8001092:	002b      	movs	r3, r5
 8001094:	3bff      	subs	r3, #255	@ 0xff
 8001096:	4699      	mov	r9, r3
 8001098:	2900      	cmp	r1, #0
 800109a:	d118      	bne.n	80010ce <__aeabi_fsub+0x13a>
 800109c:	2301      	movs	r3, #1
 800109e:	405e      	eors	r6, r3
 80010a0:	42b4      	cmp	r4, r6
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x112>
 80010a4:	e0ca      	b.n	800123c <__aeabi_fsub+0x2a8>
 80010a6:	464b      	mov	r3, r9
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d02d      	beq.n	8001108 <__aeabi_fsub+0x174>
 80010ac:	2d00      	cmp	r5, #0
 80010ae:	d000      	beq.n	80010b2 <__aeabi_fsub+0x11e>
 80010b0:	e13c      	b.n	800132c <__aeabi_fsub+0x398>
 80010b2:	23ff      	movs	r3, #255	@ 0xff
 80010b4:	4664      	mov	r4, ip
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_fsub+0x128>
 80010ba:	e15f      	b.n	800137c <__aeabi_fsub+0x3e8>
 80010bc:	1e5d      	subs	r5, r3, #1
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d100      	bne.n	80010c4 <__aeabi_fsub+0x130>
 80010c2:	e174      	b.n	80013ae <__aeabi_fsub+0x41a>
 80010c4:	0034      	movs	r4, r6
 80010c6:	2bff      	cmp	r3, #255	@ 0xff
 80010c8:	d074      	beq.n	80011b4 <__aeabi_fsub+0x220>
 80010ca:	002b      	movs	r3, r5
 80010cc:	e103      	b.n	80012d6 <__aeabi_fsub+0x342>
 80010ce:	42b4      	cmp	r4, r6
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fsub+0x140>
 80010d2:	e09c      	b.n	800120e <__aeabi_fsub+0x27a>
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d017      	beq.n	8001108 <__aeabi_fsub+0x174>
 80010d8:	2d00      	cmp	r5, #0
 80010da:	d0ea      	beq.n	80010b2 <__aeabi_fsub+0x11e>
 80010dc:	0007      	movs	r7, r0
 80010de:	0034      	movs	r4, r6
 80010e0:	e06c      	b.n	80011bc <__aeabi_fsub+0x228>
 80010e2:	2900      	cmp	r1, #0
 80010e4:	d0cc      	beq.n	8001080 <__aeabi_fsub+0xec>
 80010e6:	1e5a      	subs	r2, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d02b      	beq.n	8001144 <__aeabi_fsub+0x1b0>
 80010ec:	2bff      	cmp	r3, #255	@ 0xff
 80010ee:	d062      	beq.n	80011b6 <__aeabi_fsub+0x222>
 80010f0:	0013      	movs	r3, r2
 80010f2:	e773      	b.n	8000fdc <__aeabi_fsub+0x48>
 80010f4:	2900      	cmp	r1, #0
 80010f6:	d0c3      	beq.n	8001080 <__aeabi_fsub+0xec>
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d100      	bne.n	8001100 <__aeabi_fsub+0x16c>
 80010fe:	e11e      	b.n	800133e <__aeabi_fsub+0x3aa>
 8001100:	2bff      	cmp	r3, #255	@ 0xff
 8001102:	d058      	beq.n	80011b6 <__aeabi_fsub+0x222>
 8001104:	0013      	movs	r3, r2
 8001106:	e7b4      	b.n	8001072 <__aeabi_fsub+0xde>
 8001108:	22fe      	movs	r2, #254	@ 0xfe
 800110a:	1c6b      	adds	r3, r5, #1
 800110c:	421a      	tst	r2, r3
 800110e:	d10d      	bne.n	800112c <__aeabi_fsub+0x198>
 8001110:	2d00      	cmp	r5, #0
 8001112:	d060      	beq.n	80011d6 <__aeabi_fsub+0x242>
 8001114:	4663      	mov	r3, ip
 8001116:	2b00      	cmp	r3, #0
 8001118:	d000      	beq.n	800111c <__aeabi_fsub+0x188>
 800111a:	e120      	b.n	800135e <__aeabi_fsub+0x3ca>
 800111c:	2900      	cmp	r1, #0
 800111e:	d000      	beq.n	8001122 <__aeabi_fsub+0x18e>
 8001120:	e128      	b.n	8001374 <__aeabi_fsub+0x3e0>
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	2400      	movs	r4, #0
 8001126:	20ff      	movs	r0, #255	@ 0xff
 8001128:	03d2      	lsls	r2, r2, #15
 800112a:	e78f      	b.n	800104c <__aeabi_fsub+0xb8>
 800112c:	4663      	mov	r3, ip
 800112e:	1a5f      	subs	r7, r3, r1
 8001130:	017b      	lsls	r3, r7, #5
 8001132:	d500      	bpl.n	8001136 <__aeabi_fsub+0x1a2>
 8001134:	e0fe      	b.n	8001334 <__aeabi_fsub+0x3a0>
 8001136:	2f00      	cmp	r7, #0
 8001138:	d000      	beq.n	800113c <__aeabi_fsub+0x1a8>
 800113a:	e765      	b.n	8001008 <__aeabi_fsub+0x74>
 800113c:	2400      	movs	r4, #0
 800113e:	2000      	movs	r0, #0
 8001140:	2200      	movs	r2, #0
 8001142:	e783      	b.n	800104c <__aeabi_fsub+0xb8>
 8001144:	4663      	mov	r3, ip
 8001146:	1a59      	subs	r1, r3, r1
 8001148:	014b      	lsls	r3, r1, #5
 800114a:	d400      	bmi.n	800114e <__aeabi_fsub+0x1ba>
 800114c:	e119      	b.n	8001382 <__aeabi_fsub+0x3ee>
 800114e:	018f      	lsls	r7, r1, #6
 8001150:	09bf      	lsrs	r7, r7, #6
 8001152:	0038      	movs	r0, r7
 8001154:	f002 faa2 	bl	800369c <__clzsi2>
 8001158:	003b      	movs	r3, r7
 800115a:	3805      	subs	r0, #5
 800115c:	4083      	lsls	r3, r0
 800115e:	2501      	movs	r5, #1
 8001160:	2220      	movs	r2, #32
 8001162:	1b40      	subs	r0, r0, r5
 8001164:	3001      	adds	r0, #1
 8001166:	1a12      	subs	r2, r2, r0
 8001168:	0019      	movs	r1, r3
 800116a:	4093      	lsls	r3, r2
 800116c:	40c1      	lsrs	r1, r0
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	4193      	sbcs	r3, r2
 8001172:	4319      	orrs	r1, r3
 8001174:	468c      	mov	ip, r1
 8001176:	1e0b      	subs	r3, r1, #0
 8001178:	d0e1      	beq.n	800113e <__aeabi_fsub+0x1aa>
 800117a:	075b      	lsls	r3, r3, #29
 800117c:	d100      	bne.n	8001180 <__aeabi_fsub+0x1ec>
 800117e:	e152      	b.n	8001426 <__aeabi_fsub+0x492>
 8001180:	230f      	movs	r3, #15
 8001182:	2500      	movs	r5, #0
 8001184:	400b      	ands	r3, r1
 8001186:	2b04      	cmp	r3, #4
 8001188:	d000      	beq.n	800118c <__aeabi_fsub+0x1f8>
 800118a:	e752      	b.n	8001032 <__aeabi_fsub+0x9e>
 800118c:	2001      	movs	r0, #1
 800118e:	014a      	lsls	r2, r1, #5
 8001190:	d400      	bmi.n	8001194 <__aeabi_fsub+0x200>
 8001192:	e092      	b.n	80012ba <__aeabi_fsub+0x326>
 8001194:	b2c0      	uxtb	r0, r0
 8001196:	4663      	mov	r3, ip
 8001198:	019a      	lsls	r2, r3, #6
 800119a:	0a52      	lsrs	r2, r2, #9
 800119c:	e756      	b.n	800104c <__aeabi_fsub+0xb8>
 800119e:	4663      	mov	r3, ip
 80011a0:	075b      	lsls	r3, r3, #29
 80011a2:	d005      	beq.n	80011b0 <__aeabi_fsub+0x21c>
 80011a4:	230f      	movs	r3, #15
 80011a6:	4662      	mov	r2, ip
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fsub+0x21c>
 80011ae:	e740      	b.n	8001032 <__aeabi_fsub+0x9e>
 80011b0:	002b      	movs	r3, r5
 80011b2:	e765      	b.n	8001080 <__aeabi_fsub+0xec>
 80011b4:	0007      	movs	r7, r0
 80011b6:	2f00      	cmp	r7, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_fsub+0x228>
 80011ba:	e745      	b.n	8001048 <__aeabi_fsub+0xb4>
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	03d2      	lsls	r2, r2, #15
 80011c0:	433a      	orrs	r2, r7
 80011c2:	0252      	lsls	r2, r2, #9
 80011c4:	20ff      	movs	r0, #255	@ 0xff
 80011c6:	0a52      	lsrs	r2, r2, #9
 80011c8:	e740      	b.n	800104c <__aeabi_fsub+0xb8>
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d179      	bne.n	80012c2 <__aeabi_fsub+0x32e>
 80011ce:	22fe      	movs	r2, #254	@ 0xfe
 80011d0:	1c6b      	adds	r3, r5, #1
 80011d2:	421a      	tst	r2, r3
 80011d4:	d1aa      	bne.n	800112c <__aeabi_fsub+0x198>
 80011d6:	4663      	mov	r3, ip
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d100      	bne.n	80011de <__aeabi_fsub+0x24a>
 80011dc:	e0f5      	b.n	80013ca <__aeabi_fsub+0x436>
 80011de:	2900      	cmp	r1, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_fsub+0x250>
 80011e2:	e0d1      	b.n	8001388 <__aeabi_fsub+0x3f4>
 80011e4:	1a5f      	subs	r7, r3, r1
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	04db      	lsls	r3, r3, #19
 80011ea:	421f      	tst	r7, r3
 80011ec:	d100      	bne.n	80011f0 <__aeabi_fsub+0x25c>
 80011ee:	e10e      	b.n	800140e <__aeabi_fsub+0x47a>
 80011f0:	4662      	mov	r2, ip
 80011f2:	2401      	movs	r4, #1
 80011f4:	1a8a      	subs	r2, r1, r2
 80011f6:	4694      	mov	ip, r2
 80011f8:	2000      	movs	r0, #0
 80011fa:	4034      	ands	r4, r6
 80011fc:	2a00      	cmp	r2, #0
 80011fe:	d100      	bne.n	8001202 <__aeabi_fsub+0x26e>
 8001200:	e724      	b.n	800104c <__aeabi_fsub+0xb8>
 8001202:	2001      	movs	r0, #1
 8001204:	421a      	tst	r2, r3
 8001206:	d1c6      	bne.n	8001196 <__aeabi_fsub+0x202>
 8001208:	2300      	movs	r3, #0
 800120a:	08d7      	lsrs	r7, r2, #3
 800120c:	e73d      	b.n	800108a <__aeabi_fsub+0xf6>
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <__aeabi_fsub+0x2ae>
 8001212:	2d00      	cmp	r5, #0
 8001214:	d000      	beq.n	8001218 <__aeabi_fsub+0x284>
 8001216:	e0af      	b.n	8001378 <__aeabi_fsub+0x3e4>
 8001218:	23ff      	movs	r3, #255	@ 0xff
 800121a:	4665      	mov	r5, ip
 800121c:	2d00      	cmp	r5, #0
 800121e:	d100      	bne.n	8001222 <__aeabi_fsub+0x28e>
 8001220:	e0ad      	b.n	800137e <__aeabi_fsub+0x3ea>
 8001222:	1e5e      	subs	r6, r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	d100      	bne.n	800122a <__aeabi_fsub+0x296>
 8001228:	e089      	b.n	800133e <__aeabi_fsub+0x3aa>
 800122a:	2bff      	cmp	r3, #255	@ 0xff
 800122c:	d0c2      	beq.n	80011b4 <__aeabi_fsub+0x220>
 800122e:	2e1b      	cmp	r6, #27
 8001230:	dc00      	bgt.n	8001234 <__aeabi_fsub+0x2a0>
 8001232:	e0ab      	b.n	800138c <__aeabi_fsub+0x3f8>
 8001234:	1d4b      	adds	r3, r1, #5
 8001236:	469c      	mov	ip, r3
 8001238:	0013      	movs	r3, r2
 800123a:	e721      	b.n	8001080 <__aeabi_fsub+0xec>
 800123c:	464b      	mov	r3, r9
 800123e:	2b00      	cmp	r3, #0
 8001240:	d170      	bne.n	8001324 <__aeabi_fsub+0x390>
 8001242:	22fe      	movs	r2, #254	@ 0xfe
 8001244:	1c6b      	adds	r3, r5, #1
 8001246:	421a      	tst	r2, r3
 8001248:	d15e      	bne.n	8001308 <__aeabi_fsub+0x374>
 800124a:	2d00      	cmp	r5, #0
 800124c:	d000      	beq.n	8001250 <__aeabi_fsub+0x2bc>
 800124e:	e0c3      	b.n	80013d8 <__aeabi_fsub+0x444>
 8001250:	4663      	mov	r3, ip
 8001252:	2b00      	cmp	r3, #0
 8001254:	d100      	bne.n	8001258 <__aeabi_fsub+0x2c4>
 8001256:	e0d0      	b.n	80013fa <__aeabi_fsub+0x466>
 8001258:	2900      	cmp	r1, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x2ca>
 800125c:	e094      	b.n	8001388 <__aeabi_fsub+0x3f4>
 800125e:	000a      	movs	r2, r1
 8001260:	4462      	add	r2, ip
 8001262:	0153      	lsls	r3, r2, #5
 8001264:	d400      	bmi.n	8001268 <__aeabi_fsub+0x2d4>
 8001266:	e0d8      	b.n	800141a <__aeabi_fsub+0x486>
 8001268:	0192      	lsls	r2, r2, #6
 800126a:	2001      	movs	r0, #1
 800126c:	0a52      	lsrs	r2, r2, #9
 800126e:	e6ed      	b.n	800104c <__aeabi_fsub+0xb8>
 8001270:	0008      	movs	r0, r1
 8001272:	2220      	movs	r2, #32
 8001274:	40d8      	lsrs	r0, r3
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	4099      	lsls	r1, r3
 800127a:	000b      	movs	r3, r1
 800127c:	1e5a      	subs	r2, r3, #1
 800127e:	4193      	sbcs	r3, r2
 8001280:	4303      	orrs	r3, r0
 8001282:	449c      	add	ip, r3
 8001284:	4663      	mov	r3, ip
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	d589      	bpl.n	800119e <__aeabi_fsub+0x20a>
 800128a:	3501      	adds	r5, #1
 800128c:	2dff      	cmp	r5, #255	@ 0xff
 800128e:	d100      	bne.n	8001292 <__aeabi_fsub+0x2fe>
 8001290:	e6da      	b.n	8001048 <__aeabi_fsub+0xb4>
 8001292:	4662      	mov	r2, ip
 8001294:	2301      	movs	r3, #1
 8001296:	4919      	ldr	r1, [pc, #100]	@ (80012fc <__aeabi_fsub+0x368>)
 8001298:	4013      	ands	r3, r2
 800129a:	0852      	lsrs	r2, r2, #1
 800129c:	400a      	ands	r2, r1
 800129e:	431a      	orrs	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	4694      	mov	ip, r2
 80012a4:	075b      	lsls	r3, r3, #29
 80012a6:	d004      	beq.n	80012b2 <__aeabi_fsub+0x31e>
 80012a8:	230f      	movs	r3, #15
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d000      	beq.n	80012b2 <__aeabi_fsub+0x31e>
 80012b0:	e6bf      	b.n	8001032 <__aeabi_fsub+0x9e>
 80012b2:	4663      	mov	r3, ip
 80012b4:	015b      	lsls	r3, r3, #5
 80012b6:	d500      	bpl.n	80012ba <__aeabi_fsub+0x326>
 80012b8:	e6c2      	b.n	8001040 <__aeabi_fsub+0xac>
 80012ba:	4663      	mov	r3, ip
 80012bc:	08df      	lsrs	r7, r3, #3
 80012be:	002b      	movs	r3, r5
 80012c0:	e6e3      	b.n	800108a <__aeabi_fsub+0xf6>
 80012c2:	1b53      	subs	r3, r2, r5
 80012c4:	2d00      	cmp	r5, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_fsub+0x336>
 80012c8:	e6f4      	b.n	80010b4 <__aeabi_fsub+0x120>
 80012ca:	2080      	movs	r0, #128	@ 0x80
 80012cc:	4664      	mov	r4, ip
 80012ce:	04c0      	lsls	r0, r0, #19
 80012d0:	4304      	orrs	r4, r0
 80012d2:	46a4      	mov	ip, r4
 80012d4:	0034      	movs	r4, r6
 80012d6:	2001      	movs	r0, #1
 80012d8:	2b1b      	cmp	r3, #27
 80012da:	dc09      	bgt.n	80012f0 <__aeabi_fsub+0x35c>
 80012dc:	2520      	movs	r5, #32
 80012de:	4660      	mov	r0, ip
 80012e0:	40d8      	lsrs	r0, r3
 80012e2:	1aeb      	subs	r3, r5, r3
 80012e4:	4665      	mov	r5, ip
 80012e6:	409d      	lsls	r5, r3
 80012e8:	002b      	movs	r3, r5
 80012ea:	1e5d      	subs	r5, r3, #1
 80012ec:	41ab      	sbcs	r3, r5
 80012ee:	4318      	orrs	r0, r3
 80012f0:	1a0b      	subs	r3, r1, r0
 80012f2:	469c      	mov	ip, r3
 80012f4:	0015      	movs	r5, r2
 80012f6:	e680      	b.n	8000ffa <__aeabi_fsub+0x66>
 80012f8:	fbffffff 	.word	0xfbffffff
 80012fc:	7dffffff 	.word	0x7dffffff
 8001300:	22fe      	movs	r2, #254	@ 0xfe
 8001302:	1c6b      	adds	r3, r5, #1
 8001304:	4213      	tst	r3, r2
 8001306:	d0a3      	beq.n	8001250 <__aeabi_fsub+0x2bc>
 8001308:	2bff      	cmp	r3, #255	@ 0xff
 800130a:	d100      	bne.n	800130e <__aeabi_fsub+0x37a>
 800130c:	e69c      	b.n	8001048 <__aeabi_fsub+0xb4>
 800130e:	4461      	add	r1, ip
 8001310:	0849      	lsrs	r1, r1, #1
 8001312:	074a      	lsls	r2, r1, #29
 8001314:	d049      	beq.n	80013aa <__aeabi_fsub+0x416>
 8001316:	220f      	movs	r2, #15
 8001318:	400a      	ands	r2, r1
 800131a:	2a04      	cmp	r2, #4
 800131c:	d045      	beq.n	80013aa <__aeabi_fsub+0x416>
 800131e:	1d0a      	adds	r2, r1, #4
 8001320:	4694      	mov	ip, r2
 8001322:	e6ad      	b.n	8001080 <__aeabi_fsub+0xec>
 8001324:	2d00      	cmp	r5, #0
 8001326:	d100      	bne.n	800132a <__aeabi_fsub+0x396>
 8001328:	e776      	b.n	8001218 <__aeabi_fsub+0x284>
 800132a:	e68d      	b.n	8001048 <__aeabi_fsub+0xb4>
 800132c:	0034      	movs	r4, r6
 800132e:	20ff      	movs	r0, #255	@ 0xff
 8001330:	2200      	movs	r2, #0
 8001332:	e68b      	b.n	800104c <__aeabi_fsub+0xb8>
 8001334:	4663      	mov	r3, ip
 8001336:	2401      	movs	r4, #1
 8001338:	1acf      	subs	r7, r1, r3
 800133a:	4034      	ands	r4, r6
 800133c:	e664      	b.n	8001008 <__aeabi_fsub+0x74>
 800133e:	4461      	add	r1, ip
 8001340:	014b      	lsls	r3, r1, #5
 8001342:	d56d      	bpl.n	8001420 <__aeabi_fsub+0x48c>
 8001344:	0848      	lsrs	r0, r1, #1
 8001346:	4944      	ldr	r1, [pc, #272]	@ (8001458 <__aeabi_fsub+0x4c4>)
 8001348:	4001      	ands	r1, r0
 800134a:	0743      	lsls	r3, r0, #29
 800134c:	d02c      	beq.n	80013a8 <__aeabi_fsub+0x414>
 800134e:	230f      	movs	r3, #15
 8001350:	4003      	ands	r3, r0
 8001352:	2b04      	cmp	r3, #4
 8001354:	d028      	beq.n	80013a8 <__aeabi_fsub+0x414>
 8001356:	1d0b      	adds	r3, r1, #4
 8001358:	469c      	mov	ip, r3
 800135a:	2302      	movs	r3, #2
 800135c:	e690      	b.n	8001080 <__aeabi_fsub+0xec>
 800135e:	2900      	cmp	r1, #0
 8001360:	d100      	bne.n	8001364 <__aeabi_fsub+0x3d0>
 8001362:	e72b      	b.n	80011bc <__aeabi_fsub+0x228>
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	03db      	lsls	r3, r3, #15
 8001368:	429f      	cmp	r7, r3
 800136a:	d200      	bcs.n	800136e <__aeabi_fsub+0x3da>
 800136c:	e726      	b.n	80011bc <__aeabi_fsub+0x228>
 800136e:	4298      	cmp	r0, r3
 8001370:	d300      	bcc.n	8001374 <__aeabi_fsub+0x3e0>
 8001372:	e723      	b.n	80011bc <__aeabi_fsub+0x228>
 8001374:	2401      	movs	r4, #1
 8001376:	4034      	ands	r4, r6
 8001378:	0007      	movs	r7, r0
 800137a:	e71f      	b.n	80011bc <__aeabi_fsub+0x228>
 800137c:	0034      	movs	r4, r6
 800137e:	468c      	mov	ip, r1
 8001380:	e67e      	b.n	8001080 <__aeabi_fsub+0xec>
 8001382:	2301      	movs	r3, #1
 8001384:	08cf      	lsrs	r7, r1, #3
 8001386:	e680      	b.n	800108a <__aeabi_fsub+0xf6>
 8001388:	2300      	movs	r3, #0
 800138a:	e67e      	b.n	800108a <__aeabi_fsub+0xf6>
 800138c:	2020      	movs	r0, #32
 800138e:	4665      	mov	r5, ip
 8001390:	1b80      	subs	r0, r0, r6
 8001392:	4085      	lsls	r5, r0
 8001394:	4663      	mov	r3, ip
 8001396:	0028      	movs	r0, r5
 8001398:	40f3      	lsrs	r3, r6
 800139a:	1e45      	subs	r5, r0, #1
 800139c:	41a8      	sbcs	r0, r5
 800139e:	4303      	orrs	r3, r0
 80013a0:	469c      	mov	ip, r3
 80013a2:	0015      	movs	r5, r2
 80013a4:	448c      	add	ip, r1
 80013a6:	e76d      	b.n	8001284 <__aeabi_fsub+0x2f0>
 80013a8:	2302      	movs	r3, #2
 80013aa:	08cf      	lsrs	r7, r1, #3
 80013ac:	e66d      	b.n	800108a <__aeabi_fsub+0xf6>
 80013ae:	1b0f      	subs	r7, r1, r4
 80013b0:	017b      	lsls	r3, r7, #5
 80013b2:	d528      	bpl.n	8001406 <__aeabi_fsub+0x472>
 80013b4:	01bf      	lsls	r7, r7, #6
 80013b6:	09bf      	lsrs	r7, r7, #6
 80013b8:	0038      	movs	r0, r7
 80013ba:	f002 f96f 	bl	800369c <__clzsi2>
 80013be:	003b      	movs	r3, r7
 80013c0:	3805      	subs	r0, #5
 80013c2:	4083      	lsls	r3, r0
 80013c4:	0034      	movs	r4, r6
 80013c6:	2501      	movs	r5, #1
 80013c8:	e6ca      	b.n	8001160 <__aeabi_fsub+0x1cc>
 80013ca:	2900      	cmp	r1, #0
 80013cc:	d100      	bne.n	80013d0 <__aeabi_fsub+0x43c>
 80013ce:	e6b5      	b.n	800113c <__aeabi_fsub+0x1a8>
 80013d0:	2401      	movs	r4, #1
 80013d2:	0007      	movs	r7, r0
 80013d4:	4034      	ands	r4, r6
 80013d6:	e658      	b.n	800108a <__aeabi_fsub+0xf6>
 80013d8:	4663      	mov	r3, ip
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d100      	bne.n	80013e0 <__aeabi_fsub+0x44c>
 80013de:	e6e9      	b.n	80011b4 <__aeabi_fsub+0x220>
 80013e0:	2900      	cmp	r1, #0
 80013e2:	d100      	bne.n	80013e6 <__aeabi_fsub+0x452>
 80013e4:	e6ea      	b.n	80011bc <__aeabi_fsub+0x228>
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	03db      	lsls	r3, r3, #15
 80013ea:	429f      	cmp	r7, r3
 80013ec:	d200      	bcs.n	80013f0 <__aeabi_fsub+0x45c>
 80013ee:	e6e5      	b.n	80011bc <__aeabi_fsub+0x228>
 80013f0:	4298      	cmp	r0, r3
 80013f2:	d300      	bcc.n	80013f6 <__aeabi_fsub+0x462>
 80013f4:	e6e2      	b.n	80011bc <__aeabi_fsub+0x228>
 80013f6:	0007      	movs	r7, r0
 80013f8:	e6e0      	b.n	80011bc <__aeabi_fsub+0x228>
 80013fa:	2900      	cmp	r1, #0
 80013fc:	d100      	bne.n	8001400 <__aeabi_fsub+0x46c>
 80013fe:	e69e      	b.n	800113e <__aeabi_fsub+0x1aa>
 8001400:	2300      	movs	r3, #0
 8001402:	08cf      	lsrs	r7, r1, #3
 8001404:	e641      	b.n	800108a <__aeabi_fsub+0xf6>
 8001406:	0034      	movs	r4, r6
 8001408:	2301      	movs	r3, #1
 800140a:	08ff      	lsrs	r7, r7, #3
 800140c:	e63d      	b.n	800108a <__aeabi_fsub+0xf6>
 800140e:	2f00      	cmp	r7, #0
 8001410:	d100      	bne.n	8001414 <__aeabi_fsub+0x480>
 8001412:	e693      	b.n	800113c <__aeabi_fsub+0x1a8>
 8001414:	2300      	movs	r3, #0
 8001416:	08ff      	lsrs	r7, r7, #3
 8001418:	e637      	b.n	800108a <__aeabi_fsub+0xf6>
 800141a:	2300      	movs	r3, #0
 800141c:	08d7      	lsrs	r7, r2, #3
 800141e:	e634      	b.n	800108a <__aeabi_fsub+0xf6>
 8001420:	2301      	movs	r3, #1
 8001422:	08cf      	lsrs	r7, r1, #3
 8001424:	e631      	b.n	800108a <__aeabi_fsub+0xf6>
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	000b      	movs	r3, r1
 800142a:	04d2      	lsls	r2, r2, #19
 800142c:	2001      	movs	r0, #1
 800142e:	4013      	ands	r3, r2
 8001430:	4211      	tst	r1, r2
 8001432:	d000      	beq.n	8001436 <__aeabi_fsub+0x4a2>
 8001434:	e6ae      	b.n	8001194 <__aeabi_fsub+0x200>
 8001436:	08cf      	lsrs	r7, r1, #3
 8001438:	e627      	b.n	800108a <__aeabi_fsub+0xf6>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d100      	bne.n	8001440 <__aeabi_fsub+0x4ac>
 800143e:	e75f      	b.n	8001300 <__aeabi_fsub+0x36c>
 8001440:	1b56      	subs	r6, r2, r5
 8001442:	2d00      	cmp	r5, #0
 8001444:	d101      	bne.n	800144a <__aeabi_fsub+0x4b6>
 8001446:	0033      	movs	r3, r6
 8001448:	e6e7      	b.n	800121a <__aeabi_fsub+0x286>
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	4660      	mov	r0, ip
 800144e:	04db      	lsls	r3, r3, #19
 8001450:	4318      	orrs	r0, r3
 8001452:	4684      	mov	ip, r0
 8001454:	e6eb      	b.n	800122e <__aeabi_fsub+0x29a>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	7dffffff 	.word	0x7dffffff

0800145c <__aeabi_f2iz>:
 800145c:	0241      	lsls	r1, r0, #9
 800145e:	0042      	lsls	r2, r0, #1
 8001460:	0fc3      	lsrs	r3, r0, #31
 8001462:	0a49      	lsrs	r1, r1, #9
 8001464:	2000      	movs	r0, #0
 8001466:	0e12      	lsrs	r2, r2, #24
 8001468:	2a7e      	cmp	r2, #126	@ 0x7e
 800146a:	dd03      	ble.n	8001474 <__aeabi_f2iz+0x18>
 800146c:	2a9d      	cmp	r2, #157	@ 0x9d
 800146e:	dd02      	ble.n	8001476 <__aeabi_f2iz+0x1a>
 8001470:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <__aeabi_f2iz+0x3c>)
 8001472:	1898      	adds	r0, r3, r2
 8001474:	4770      	bx	lr
 8001476:	2080      	movs	r0, #128	@ 0x80
 8001478:	0400      	lsls	r0, r0, #16
 800147a:	4301      	orrs	r1, r0
 800147c:	2a95      	cmp	r2, #149	@ 0x95
 800147e:	dc07      	bgt.n	8001490 <__aeabi_f2iz+0x34>
 8001480:	2096      	movs	r0, #150	@ 0x96
 8001482:	1a82      	subs	r2, r0, r2
 8001484:	40d1      	lsrs	r1, r2
 8001486:	4248      	negs	r0, r1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f3      	bne.n	8001474 <__aeabi_f2iz+0x18>
 800148c:	0008      	movs	r0, r1
 800148e:	e7f1      	b.n	8001474 <__aeabi_f2iz+0x18>
 8001490:	3a96      	subs	r2, #150	@ 0x96
 8001492:	4091      	lsls	r1, r2
 8001494:	e7f7      	b.n	8001486 <__aeabi_f2iz+0x2a>
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	7fffffff 	.word	0x7fffffff

0800149c <__aeabi_i2f>:
 800149c:	b570      	push	{r4, r5, r6, lr}
 800149e:	2800      	cmp	r0, #0
 80014a0:	d012      	beq.n	80014c8 <__aeabi_i2f+0x2c>
 80014a2:	17c3      	asrs	r3, r0, #31
 80014a4:	18c5      	adds	r5, r0, r3
 80014a6:	405d      	eors	r5, r3
 80014a8:	0fc4      	lsrs	r4, r0, #31
 80014aa:	0028      	movs	r0, r5
 80014ac:	f002 f8f6 	bl	800369c <__clzsi2>
 80014b0:	239e      	movs	r3, #158	@ 0x9e
 80014b2:	1a1b      	subs	r3, r3, r0
 80014b4:	2b96      	cmp	r3, #150	@ 0x96
 80014b6:	dc0f      	bgt.n	80014d8 <__aeabi_i2f+0x3c>
 80014b8:	2808      	cmp	r0, #8
 80014ba:	d038      	beq.n	800152e <__aeabi_i2f+0x92>
 80014bc:	3808      	subs	r0, #8
 80014be:	4085      	lsls	r5, r0
 80014c0:	026d      	lsls	r5, r5, #9
 80014c2:	0a6d      	lsrs	r5, r5, #9
 80014c4:	b2d8      	uxtb	r0, r3
 80014c6:	e002      	b.n	80014ce <__aeabi_i2f+0x32>
 80014c8:	2400      	movs	r4, #0
 80014ca:	2000      	movs	r0, #0
 80014cc:	2500      	movs	r5, #0
 80014ce:	05c0      	lsls	r0, r0, #23
 80014d0:	4328      	orrs	r0, r5
 80014d2:	07e4      	lsls	r4, r4, #31
 80014d4:	4320      	orrs	r0, r4
 80014d6:	bd70      	pop	{r4, r5, r6, pc}
 80014d8:	2b99      	cmp	r3, #153	@ 0x99
 80014da:	dc14      	bgt.n	8001506 <__aeabi_i2f+0x6a>
 80014dc:	1f42      	subs	r2, r0, #5
 80014de:	4095      	lsls	r5, r2
 80014e0:	002a      	movs	r2, r5
 80014e2:	4915      	ldr	r1, [pc, #84]	@ (8001538 <__aeabi_i2f+0x9c>)
 80014e4:	4011      	ands	r1, r2
 80014e6:	0755      	lsls	r5, r2, #29
 80014e8:	d01c      	beq.n	8001524 <__aeabi_i2f+0x88>
 80014ea:	250f      	movs	r5, #15
 80014ec:	402a      	ands	r2, r5
 80014ee:	2a04      	cmp	r2, #4
 80014f0:	d018      	beq.n	8001524 <__aeabi_i2f+0x88>
 80014f2:	3104      	adds	r1, #4
 80014f4:	08ca      	lsrs	r2, r1, #3
 80014f6:	0149      	lsls	r1, r1, #5
 80014f8:	d515      	bpl.n	8001526 <__aeabi_i2f+0x8a>
 80014fa:	239f      	movs	r3, #159	@ 0x9f
 80014fc:	0252      	lsls	r2, r2, #9
 80014fe:	1a18      	subs	r0, r3, r0
 8001500:	0a55      	lsrs	r5, r2, #9
 8001502:	b2c0      	uxtb	r0, r0
 8001504:	e7e3      	b.n	80014ce <__aeabi_i2f+0x32>
 8001506:	2205      	movs	r2, #5
 8001508:	0029      	movs	r1, r5
 800150a:	1a12      	subs	r2, r2, r0
 800150c:	40d1      	lsrs	r1, r2
 800150e:	0002      	movs	r2, r0
 8001510:	321b      	adds	r2, #27
 8001512:	4095      	lsls	r5, r2
 8001514:	002a      	movs	r2, r5
 8001516:	1e55      	subs	r5, r2, #1
 8001518:	41aa      	sbcs	r2, r5
 800151a:	430a      	orrs	r2, r1
 800151c:	4906      	ldr	r1, [pc, #24]	@ (8001538 <__aeabi_i2f+0x9c>)
 800151e:	4011      	ands	r1, r2
 8001520:	0755      	lsls	r5, r2, #29
 8001522:	d1e2      	bne.n	80014ea <__aeabi_i2f+0x4e>
 8001524:	08ca      	lsrs	r2, r1, #3
 8001526:	0252      	lsls	r2, r2, #9
 8001528:	0a55      	lsrs	r5, r2, #9
 800152a:	b2d8      	uxtb	r0, r3
 800152c:	e7cf      	b.n	80014ce <__aeabi_i2f+0x32>
 800152e:	026d      	lsls	r5, r5, #9
 8001530:	0a6d      	lsrs	r5, r5, #9
 8001532:	308e      	adds	r0, #142	@ 0x8e
 8001534:	e7cb      	b.n	80014ce <__aeabi_i2f+0x32>
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	fbffffff 	.word	0xfbffffff

0800153c <__aeabi_ui2f>:
 800153c:	b510      	push	{r4, lr}
 800153e:	1e04      	subs	r4, r0, #0
 8001540:	d00d      	beq.n	800155e <__aeabi_ui2f+0x22>
 8001542:	f002 f8ab 	bl	800369c <__clzsi2>
 8001546:	239e      	movs	r3, #158	@ 0x9e
 8001548:	1a1b      	subs	r3, r3, r0
 800154a:	2b96      	cmp	r3, #150	@ 0x96
 800154c:	dc0c      	bgt.n	8001568 <__aeabi_ui2f+0x2c>
 800154e:	2808      	cmp	r0, #8
 8001550:	d034      	beq.n	80015bc <__aeabi_ui2f+0x80>
 8001552:	3808      	subs	r0, #8
 8001554:	4084      	lsls	r4, r0
 8001556:	0264      	lsls	r4, r4, #9
 8001558:	0a64      	lsrs	r4, r4, #9
 800155a:	b2d8      	uxtb	r0, r3
 800155c:	e001      	b.n	8001562 <__aeabi_ui2f+0x26>
 800155e:	2000      	movs	r0, #0
 8001560:	2400      	movs	r4, #0
 8001562:	05c0      	lsls	r0, r0, #23
 8001564:	4320      	orrs	r0, r4
 8001566:	bd10      	pop	{r4, pc}
 8001568:	2b99      	cmp	r3, #153	@ 0x99
 800156a:	dc13      	bgt.n	8001594 <__aeabi_ui2f+0x58>
 800156c:	1f42      	subs	r2, r0, #5
 800156e:	4094      	lsls	r4, r2
 8001570:	4a14      	ldr	r2, [pc, #80]	@ (80015c4 <__aeabi_ui2f+0x88>)
 8001572:	4022      	ands	r2, r4
 8001574:	0761      	lsls	r1, r4, #29
 8001576:	d01c      	beq.n	80015b2 <__aeabi_ui2f+0x76>
 8001578:	210f      	movs	r1, #15
 800157a:	4021      	ands	r1, r4
 800157c:	2904      	cmp	r1, #4
 800157e:	d018      	beq.n	80015b2 <__aeabi_ui2f+0x76>
 8001580:	3204      	adds	r2, #4
 8001582:	08d4      	lsrs	r4, r2, #3
 8001584:	0152      	lsls	r2, r2, #5
 8001586:	d515      	bpl.n	80015b4 <__aeabi_ui2f+0x78>
 8001588:	239f      	movs	r3, #159	@ 0x9f
 800158a:	0264      	lsls	r4, r4, #9
 800158c:	1a18      	subs	r0, r3, r0
 800158e:	0a64      	lsrs	r4, r4, #9
 8001590:	b2c0      	uxtb	r0, r0
 8001592:	e7e6      	b.n	8001562 <__aeabi_ui2f+0x26>
 8001594:	0002      	movs	r2, r0
 8001596:	0021      	movs	r1, r4
 8001598:	321b      	adds	r2, #27
 800159a:	4091      	lsls	r1, r2
 800159c:	000a      	movs	r2, r1
 800159e:	1e51      	subs	r1, r2, #1
 80015a0:	418a      	sbcs	r2, r1
 80015a2:	2105      	movs	r1, #5
 80015a4:	1a09      	subs	r1, r1, r0
 80015a6:	40cc      	lsrs	r4, r1
 80015a8:	4314      	orrs	r4, r2
 80015aa:	4a06      	ldr	r2, [pc, #24]	@ (80015c4 <__aeabi_ui2f+0x88>)
 80015ac:	4022      	ands	r2, r4
 80015ae:	0761      	lsls	r1, r4, #29
 80015b0:	d1e2      	bne.n	8001578 <__aeabi_ui2f+0x3c>
 80015b2:	08d4      	lsrs	r4, r2, #3
 80015b4:	0264      	lsls	r4, r4, #9
 80015b6:	0a64      	lsrs	r4, r4, #9
 80015b8:	b2d8      	uxtb	r0, r3
 80015ba:	e7d2      	b.n	8001562 <__aeabi_ui2f+0x26>
 80015bc:	0264      	lsls	r4, r4, #9
 80015be:	0a64      	lsrs	r4, r4, #9
 80015c0:	308e      	adds	r0, #142	@ 0x8e
 80015c2:	e7ce      	b.n	8001562 <__aeabi_ui2f+0x26>
 80015c4:	fbffffff 	.word	0xfbffffff

080015c8 <__aeabi_dadd>:
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	464f      	mov	r7, r9
 80015cc:	4646      	mov	r6, r8
 80015ce:	46d6      	mov	lr, sl
 80015d0:	b5c0      	push	{r6, r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	9000      	str	r0, [sp, #0]
 80015d6:	9101      	str	r1, [sp, #4]
 80015d8:	030e      	lsls	r6, r1, #12
 80015da:	004c      	lsls	r4, r1, #1
 80015dc:	0fcd      	lsrs	r5, r1, #31
 80015de:	0a71      	lsrs	r1, r6, #9
 80015e0:	9e00      	ldr	r6, [sp, #0]
 80015e2:	005f      	lsls	r7, r3, #1
 80015e4:	0f76      	lsrs	r6, r6, #29
 80015e6:	430e      	orrs	r6, r1
 80015e8:	9900      	ldr	r1, [sp, #0]
 80015ea:	9200      	str	r2, [sp, #0]
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	00c9      	lsls	r1, r1, #3
 80015f0:	4689      	mov	r9, r1
 80015f2:	0319      	lsls	r1, r3, #12
 80015f4:	0d7b      	lsrs	r3, r7, #21
 80015f6:	4698      	mov	r8, r3
 80015f8:	9b01      	ldr	r3, [sp, #4]
 80015fa:	0a49      	lsrs	r1, r1, #9
 80015fc:	0fdb      	lsrs	r3, r3, #31
 80015fe:	469c      	mov	ip, r3
 8001600:	9b00      	ldr	r3, [sp, #0]
 8001602:	9a00      	ldr	r2, [sp, #0]
 8001604:	0f5b      	lsrs	r3, r3, #29
 8001606:	430b      	orrs	r3, r1
 8001608:	4641      	mov	r1, r8
 800160a:	0d64      	lsrs	r4, r4, #21
 800160c:	00d2      	lsls	r2, r2, #3
 800160e:	1a61      	subs	r1, r4, r1
 8001610:	4565      	cmp	r5, ip
 8001612:	d100      	bne.n	8001616 <__aeabi_dadd+0x4e>
 8001614:	e0a6      	b.n	8001764 <__aeabi_dadd+0x19c>
 8001616:	2900      	cmp	r1, #0
 8001618:	dd72      	ble.n	8001700 <__aeabi_dadd+0x138>
 800161a:	4647      	mov	r7, r8
 800161c:	2f00      	cmp	r7, #0
 800161e:	d100      	bne.n	8001622 <__aeabi_dadd+0x5a>
 8001620:	e0dd      	b.n	80017de <__aeabi_dadd+0x216>
 8001622:	4fcc      	ldr	r7, [pc, #816]	@ (8001954 <__aeabi_dadd+0x38c>)
 8001624:	42bc      	cmp	r4, r7
 8001626:	d100      	bne.n	800162a <__aeabi_dadd+0x62>
 8001628:	e19a      	b.n	8001960 <__aeabi_dadd+0x398>
 800162a:	2701      	movs	r7, #1
 800162c:	2938      	cmp	r1, #56	@ 0x38
 800162e:	dc17      	bgt.n	8001660 <__aeabi_dadd+0x98>
 8001630:	2780      	movs	r7, #128	@ 0x80
 8001632:	043f      	lsls	r7, r7, #16
 8001634:	433b      	orrs	r3, r7
 8001636:	291f      	cmp	r1, #31
 8001638:	dd00      	ble.n	800163c <__aeabi_dadd+0x74>
 800163a:	e1dd      	b.n	80019f8 <__aeabi_dadd+0x430>
 800163c:	2720      	movs	r7, #32
 800163e:	1a78      	subs	r0, r7, r1
 8001640:	001f      	movs	r7, r3
 8001642:	4087      	lsls	r7, r0
 8001644:	46ba      	mov	sl, r7
 8001646:	0017      	movs	r7, r2
 8001648:	40cf      	lsrs	r7, r1
 800164a:	4684      	mov	ip, r0
 800164c:	0038      	movs	r0, r7
 800164e:	4657      	mov	r7, sl
 8001650:	4307      	orrs	r7, r0
 8001652:	4660      	mov	r0, ip
 8001654:	4082      	lsls	r2, r0
 8001656:	40cb      	lsrs	r3, r1
 8001658:	1e50      	subs	r0, r2, #1
 800165a:	4182      	sbcs	r2, r0
 800165c:	1af6      	subs	r6, r6, r3
 800165e:	4317      	orrs	r7, r2
 8001660:	464b      	mov	r3, r9
 8001662:	1bdf      	subs	r7, r3, r7
 8001664:	45b9      	cmp	r9, r7
 8001666:	4180      	sbcs	r0, r0
 8001668:	4240      	negs	r0, r0
 800166a:	1a36      	subs	r6, r6, r0
 800166c:	0233      	lsls	r3, r6, #8
 800166e:	d400      	bmi.n	8001672 <__aeabi_dadd+0xaa>
 8001670:	e0ff      	b.n	8001872 <__aeabi_dadd+0x2aa>
 8001672:	0276      	lsls	r6, r6, #9
 8001674:	0a76      	lsrs	r6, r6, #9
 8001676:	2e00      	cmp	r6, #0
 8001678:	d100      	bne.n	800167c <__aeabi_dadd+0xb4>
 800167a:	e13c      	b.n	80018f6 <__aeabi_dadd+0x32e>
 800167c:	0030      	movs	r0, r6
 800167e:	f002 f80d 	bl	800369c <__clzsi2>
 8001682:	0003      	movs	r3, r0
 8001684:	3b08      	subs	r3, #8
 8001686:	2120      	movs	r1, #32
 8001688:	0038      	movs	r0, r7
 800168a:	1aca      	subs	r2, r1, r3
 800168c:	40d0      	lsrs	r0, r2
 800168e:	409e      	lsls	r6, r3
 8001690:	0002      	movs	r2, r0
 8001692:	409f      	lsls	r7, r3
 8001694:	4332      	orrs	r2, r6
 8001696:	429c      	cmp	r4, r3
 8001698:	dd00      	ble.n	800169c <__aeabi_dadd+0xd4>
 800169a:	e1a6      	b.n	80019ea <__aeabi_dadd+0x422>
 800169c:	1b18      	subs	r0, r3, r4
 800169e:	3001      	adds	r0, #1
 80016a0:	1a09      	subs	r1, r1, r0
 80016a2:	003e      	movs	r6, r7
 80016a4:	408f      	lsls	r7, r1
 80016a6:	40c6      	lsrs	r6, r0
 80016a8:	1e7b      	subs	r3, r7, #1
 80016aa:	419f      	sbcs	r7, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	408b      	lsls	r3, r1
 80016b0:	4337      	orrs	r7, r6
 80016b2:	431f      	orrs	r7, r3
 80016b4:	40c2      	lsrs	r2, r0
 80016b6:	003b      	movs	r3, r7
 80016b8:	0016      	movs	r6, r2
 80016ba:	2400      	movs	r4, #0
 80016bc:	4313      	orrs	r3, r2
 80016be:	d100      	bne.n	80016c2 <__aeabi_dadd+0xfa>
 80016c0:	e1df      	b.n	8001a82 <__aeabi_dadd+0x4ba>
 80016c2:	077b      	lsls	r3, r7, #29
 80016c4:	d100      	bne.n	80016c8 <__aeabi_dadd+0x100>
 80016c6:	e332      	b.n	8001d2e <__aeabi_dadd+0x766>
 80016c8:	230f      	movs	r3, #15
 80016ca:	003a      	movs	r2, r7
 80016cc:	403b      	ands	r3, r7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d004      	beq.n	80016dc <__aeabi_dadd+0x114>
 80016d2:	1d3a      	adds	r2, r7, #4
 80016d4:	42ba      	cmp	r2, r7
 80016d6:	41bf      	sbcs	r7, r7
 80016d8:	427f      	negs	r7, r7
 80016da:	19f6      	adds	r6, r6, r7
 80016dc:	0233      	lsls	r3, r6, #8
 80016de:	d400      	bmi.n	80016e2 <__aeabi_dadd+0x11a>
 80016e0:	e323      	b.n	8001d2a <__aeabi_dadd+0x762>
 80016e2:	4b9c      	ldr	r3, [pc, #624]	@ (8001954 <__aeabi_dadd+0x38c>)
 80016e4:	3401      	adds	r4, #1
 80016e6:	429c      	cmp	r4, r3
 80016e8:	d100      	bne.n	80016ec <__aeabi_dadd+0x124>
 80016ea:	e0b4      	b.n	8001856 <__aeabi_dadd+0x28e>
 80016ec:	4b9a      	ldr	r3, [pc, #616]	@ (8001958 <__aeabi_dadd+0x390>)
 80016ee:	0564      	lsls	r4, r4, #21
 80016f0:	401e      	ands	r6, r3
 80016f2:	0d64      	lsrs	r4, r4, #21
 80016f4:	0777      	lsls	r7, r6, #29
 80016f6:	08d2      	lsrs	r2, r2, #3
 80016f8:	0276      	lsls	r6, r6, #9
 80016fa:	4317      	orrs	r7, r2
 80016fc:	0b36      	lsrs	r6, r6, #12
 80016fe:	e0ac      	b.n	800185a <__aeabi_dadd+0x292>
 8001700:	2900      	cmp	r1, #0
 8001702:	d100      	bne.n	8001706 <__aeabi_dadd+0x13e>
 8001704:	e07e      	b.n	8001804 <__aeabi_dadd+0x23c>
 8001706:	4641      	mov	r1, r8
 8001708:	1b09      	subs	r1, r1, r4
 800170a:	2c00      	cmp	r4, #0
 800170c:	d000      	beq.n	8001710 <__aeabi_dadd+0x148>
 800170e:	e160      	b.n	80019d2 <__aeabi_dadd+0x40a>
 8001710:	0034      	movs	r4, r6
 8001712:	4648      	mov	r0, r9
 8001714:	4304      	orrs	r4, r0
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x152>
 8001718:	e1c9      	b.n	8001aae <__aeabi_dadd+0x4e6>
 800171a:	1e4c      	subs	r4, r1, #1
 800171c:	2901      	cmp	r1, #1
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0x15a>
 8001720:	e22e      	b.n	8001b80 <__aeabi_dadd+0x5b8>
 8001722:	4d8c      	ldr	r5, [pc, #560]	@ (8001954 <__aeabi_dadd+0x38c>)
 8001724:	42a9      	cmp	r1, r5
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x162>
 8001728:	e224      	b.n	8001b74 <__aeabi_dadd+0x5ac>
 800172a:	2701      	movs	r7, #1
 800172c:	2c38      	cmp	r4, #56	@ 0x38
 800172e:	dc11      	bgt.n	8001754 <__aeabi_dadd+0x18c>
 8001730:	0021      	movs	r1, r4
 8001732:	291f      	cmp	r1, #31
 8001734:	dd00      	ble.n	8001738 <__aeabi_dadd+0x170>
 8001736:	e20b      	b.n	8001b50 <__aeabi_dadd+0x588>
 8001738:	2420      	movs	r4, #32
 800173a:	0037      	movs	r7, r6
 800173c:	4648      	mov	r0, r9
 800173e:	1a64      	subs	r4, r4, r1
 8001740:	40a7      	lsls	r7, r4
 8001742:	40c8      	lsrs	r0, r1
 8001744:	4307      	orrs	r7, r0
 8001746:	4648      	mov	r0, r9
 8001748:	40a0      	lsls	r0, r4
 800174a:	40ce      	lsrs	r6, r1
 800174c:	1e44      	subs	r4, r0, #1
 800174e:	41a0      	sbcs	r0, r4
 8001750:	1b9b      	subs	r3, r3, r6
 8001752:	4307      	orrs	r7, r0
 8001754:	1bd7      	subs	r7, r2, r7
 8001756:	42ba      	cmp	r2, r7
 8001758:	4192      	sbcs	r2, r2
 800175a:	4252      	negs	r2, r2
 800175c:	4665      	mov	r5, ip
 800175e:	4644      	mov	r4, r8
 8001760:	1a9e      	subs	r6, r3, r2
 8001762:	e783      	b.n	800166c <__aeabi_dadd+0xa4>
 8001764:	2900      	cmp	r1, #0
 8001766:	dc00      	bgt.n	800176a <__aeabi_dadd+0x1a2>
 8001768:	e09c      	b.n	80018a4 <__aeabi_dadd+0x2dc>
 800176a:	4647      	mov	r7, r8
 800176c:	2f00      	cmp	r7, #0
 800176e:	d167      	bne.n	8001840 <__aeabi_dadd+0x278>
 8001770:	001f      	movs	r7, r3
 8001772:	4317      	orrs	r7, r2
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x1b0>
 8001776:	e0e4      	b.n	8001942 <__aeabi_dadd+0x37a>
 8001778:	1e48      	subs	r0, r1, #1
 800177a:	2901      	cmp	r1, #1
 800177c:	d100      	bne.n	8001780 <__aeabi_dadd+0x1b8>
 800177e:	e19b      	b.n	8001ab8 <__aeabi_dadd+0x4f0>
 8001780:	4f74      	ldr	r7, [pc, #464]	@ (8001954 <__aeabi_dadd+0x38c>)
 8001782:	42b9      	cmp	r1, r7
 8001784:	d100      	bne.n	8001788 <__aeabi_dadd+0x1c0>
 8001786:	e0eb      	b.n	8001960 <__aeabi_dadd+0x398>
 8001788:	2701      	movs	r7, #1
 800178a:	0001      	movs	r1, r0
 800178c:	2838      	cmp	r0, #56	@ 0x38
 800178e:	dc11      	bgt.n	80017b4 <__aeabi_dadd+0x1ec>
 8001790:	291f      	cmp	r1, #31
 8001792:	dd00      	ble.n	8001796 <__aeabi_dadd+0x1ce>
 8001794:	e1c7      	b.n	8001b26 <__aeabi_dadd+0x55e>
 8001796:	2720      	movs	r7, #32
 8001798:	1a78      	subs	r0, r7, r1
 800179a:	001f      	movs	r7, r3
 800179c:	4684      	mov	ip, r0
 800179e:	4087      	lsls	r7, r0
 80017a0:	0010      	movs	r0, r2
 80017a2:	40c8      	lsrs	r0, r1
 80017a4:	4307      	orrs	r7, r0
 80017a6:	4660      	mov	r0, ip
 80017a8:	4082      	lsls	r2, r0
 80017aa:	40cb      	lsrs	r3, r1
 80017ac:	1e50      	subs	r0, r2, #1
 80017ae:	4182      	sbcs	r2, r0
 80017b0:	18f6      	adds	r6, r6, r3
 80017b2:	4317      	orrs	r7, r2
 80017b4:	444f      	add	r7, r9
 80017b6:	454f      	cmp	r7, r9
 80017b8:	4180      	sbcs	r0, r0
 80017ba:	4240      	negs	r0, r0
 80017bc:	1836      	adds	r6, r6, r0
 80017be:	0233      	lsls	r3, r6, #8
 80017c0:	d557      	bpl.n	8001872 <__aeabi_dadd+0x2aa>
 80017c2:	4b64      	ldr	r3, [pc, #400]	@ (8001954 <__aeabi_dadd+0x38c>)
 80017c4:	3401      	adds	r4, #1
 80017c6:	429c      	cmp	r4, r3
 80017c8:	d045      	beq.n	8001856 <__aeabi_dadd+0x28e>
 80017ca:	2101      	movs	r1, #1
 80017cc:	4b62      	ldr	r3, [pc, #392]	@ (8001958 <__aeabi_dadd+0x390>)
 80017ce:	087a      	lsrs	r2, r7, #1
 80017d0:	401e      	ands	r6, r3
 80017d2:	4039      	ands	r1, r7
 80017d4:	430a      	orrs	r2, r1
 80017d6:	07f7      	lsls	r7, r6, #31
 80017d8:	4317      	orrs	r7, r2
 80017da:	0876      	lsrs	r6, r6, #1
 80017dc:	e771      	b.n	80016c2 <__aeabi_dadd+0xfa>
 80017de:	001f      	movs	r7, r3
 80017e0:	4317      	orrs	r7, r2
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dadd+0x21e>
 80017e4:	e0ad      	b.n	8001942 <__aeabi_dadd+0x37a>
 80017e6:	1e4f      	subs	r7, r1, #1
 80017e8:	46bc      	mov	ip, r7
 80017ea:	2901      	cmp	r1, #1
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dadd+0x228>
 80017ee:	e182      	b.n	8001af6 <__aeabi_dadd+0x52e>
 80017f0:	4f58      	ldr	r7, [pc, #352]	@ (8001954 <__aeabi_dadd+0x38c>)
 80017f2:	42b9      	cmp	r1, r7
 80017f4:	d100      	bne.n	80017f8 <__aeabi_dadd+0x230>
 80017f6:	e190      	b.n	8001b1a <__aeabi_dadd+0x552>
 80017f8:	4661      	mov	r1, ip
 80017fa:	2701      	movs	r7, #1
 80017fc:	2938      	cmp	r1, #56	@ 0x38
 80017fe:	dd00      	ble.n	8001802 <__aeabi_dadd+0x23a>
 8001800:	e72e      	b.n	8001660 <__aeabi_dadd+0x98>
 8001802:	e718      	b.n	8001636 <__aeabi_dadd+0x6e>
 8001804:	4f55      	ldr	r7, [pc, #340]	@ (800195c <__aeabi_dadd+0x394>)
 8001806:	1c61      	adds	r1, r4, #1
 8001808:	4239      	tst	r1, r7
 800180a:	d000      	beq.n	800180e <__aeabi_dadd+0x246>
 800180c:	e0d0      	b.n	80019b0 <__aeabi_dadd+0x3e8>
 800180e:	0031      	movs	r1, r6
 8001810:	4648      	mov	r0, r9
 8001812:	001f      	movs	r7, r3
 8001814:	4301      	orrs	r1, r0
 8001816:	4317      	orrs	r7, r2
 8001818:	2c00      	cmp	r4, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dadd+0x256>
 800181c:	e13d      	b.n	8001a9a <__aeabi_dadd+0x4d2>
 800181e:	2900      	cmp	r1, #0
 8001820:	d100      	bne.n	8001824 <__aeabi_dadd+0x25c>
 8001822:	e1bc      	b.n	8001b9e <__aeabi_dadd+0x5d6>
 8001824:	2f00      	cmp	r7, #0
 8001826:	d000      	beq.n	800182a <__aeabi_dadd+0x262>
 8001828:	e1bf      	b.n	8001baa <__aeabi_dadd+0x5e2>
 800182a:	464b      	mov	r3, r9
 800182c:	2100      	movs	r1, #0
 800182e:	08d8      	lsrs	r0, r3, #3
 8001830:	0777      	lsls	r7, r6, #29
 8001832:	4307      	orrs	r7, r0
 8001834:	08f0      	lsrs	r0, r6, #3
 8001836:	0306      	lsls	r6, r0, #12
 8001838:	054c      	lsls	r4, r1, #21
 800183a:	0b36      	lsrs	r6, r6, #12
 800183c:	0d64      	lsrs	r4, r4, #21
 800183e:	e00c      	b.n	800185a <__aeabi_dadd+0x292>
 8001840:	4f44      	ldr	r7, [pc, #272]	@ (8001954 <__aeabi_dadd+0x38c>)
 8001842:	42bc      	cmp	r4, r7
 8001844:	d100      	bne.n	8001848 <__aeabi_dadd+0x280>
 8001846:	e08b      	b.n	8001960 <__aeabi_dadd+0x398>
 8001848:	2701      	movs	r7, #1
 800184a:	2938      	cmp	r1, #56	@ 0x38
 800184c:	dcb2      	bgt.n	80017b4 <__aeabi_dadd+0x1ec>
 800184e:	2780      	movs	r7, #128	@ 0x80
 8001850:	043f      	lsls	r7, r7, #16
 8001852:	433b      	orrs	r3, r7
 8001854:	e79c      	b.n	8001790 <__aeabi_dadd+0x1c8>
 8001856:	2600      	movs	r6, #0
 8001858:	2700      	movs	r7, #0
 800185a:	0524      	lsls	r4, r4, #20
 800185c:	4334      	orrs	r4, r6
 800185e:	07ed      	lsls	r5, r5, #31
 8001860:	432c      	orrs	r4, r5
 8001862:	0038      	movs	r0, r7
 8001864:	0021      	movs	r1, r4
 8001866:	b002      	add	sp, #8
 8001868:	bce0      	pop	{r5, r6, r7}
 800186a:	46ba      	mov	sl, r7
 800186c:	46b1      	mov	r9, r6
 800186e:	46a8      	mov	r8, r5
 8001870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001872:	077b      	lsls	r3, r7, #29
 8001874:	d004      	beq.n	8001880 <__aeabi_dadd+0x2b8>
 8001876:	230f      	movs	r3, #15
 8001878:	403b      	ands	r3, r7
 800187a:	2b04      	cmp	r3, #4
 800187c:	d000      	beq.n	8001880 <__aeabi_dadd+0x2b8>
 800187e:	e728      	b.n	80016d2 <__aeabi_dadd+0x10a>
 8001880:	08f8      	lsrs	r0, r7, #3
 8001882:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <__aeabi_dadd+0x38c>)
 8001884:	0777      	lsls	r7, r6, #29
 8001886:	4307      	orrs	r7, r0
 8001888:	08f0      	lsrs	r0, r6, #3
 800188a:	429c      	cmp	r4, r3
 800188c:	d000      	beq.n	8001890 <__aeabi_dadd+0x2c8>
 800188e:	e24a      	b.n	8001d26 <__aeabi_dadd+0x75e>
 8001890:	003b      	movs	r3, r7
 8001892:	4303      	orrs	r3, r0
 8001894:	d059      	beq.n	800194a <__aeabi_dadd+0x382>
 8001896:	2680      	movs	r6, #128	@ 0x80
 8001898:	0336      	lsls	r6, r6, #12
 800189a:	4306      	orrs	r6, r0
 800189c:	0336      	lsls	r6, r6, #12
 800189e:	4c2d      	ldr	r4, [pc, #180]	@ (8001954 <__aeabi_dadd+0x38c>)
 80018a0:	0b36      	lsrs	r6, r6, #12
 80018a2:	e7da      	b.n	800185a <__aeabi_dadd+0x292>
 80018a4:	2900      	cmp	r1, #0
 80018a6:	d061      	beq.n	800196c <__aeabi_dadd+0x3a4>
 80018a8:	4641      	mov	r1, r8
 80018aa:	1b09      	subs	r1, r1, r4
 80018ac:	2c00      	cmp	r4, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x2ea>
 80018b0:	e0b9      	b.n	8001a26 <__aeabi_dadd+0x45e>
 80018b2:	4c28      	ldr	r4, [pc, #160]	@ (8001954 <__aeabi_dadd+0x38c>)
 80018b4:	45a0      	cmp	r8, r4
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x2f2>
 80018b8:	e1a5      	b.n	8001c06 <__aeabi_dadd+0x63e>
 80018ba:	2701      	movs	r7, #1
 80018bc:	2938      	cmp	r1, #56	@ 0x38
 80018be:	dc13      	bgt.n	80018e8 <__aeabi_dadd+0x320>
 80018c0:	2480      	movs	r4, #128	@ 0x80
 80018c2:	0424      	lsls	r4, r4, #16
 80018c4:	4326      	orrs	r6, r4
 80018c6:	291f      	cmp	r1, #31
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dadd+0x304>
 80018ca:	e1c8      	b.n	8001c5e <__aeabi_dadd+0x696>
 80018cc:	2420      	movs	r4, #32
 80018ce:	0037      	movs	r7, r6
 80018d0:	4648      	mov	r0, r9
 80018d2:	1a64      	subs	r4, r4, r1
 80018d4:	40a7      	lsls	r7, r4
 80018d6:	40c8      	lsrs	r0, r1
 80018d8:	4307      	orrs	r7, r0
 80018da:	4648      	mov	r0, r9
 80018dc:	40a0      	lsls	r0, r4
 80018de:	40ce      	lsrs	r6, r1
 80018e0:	1e44      	subs	r4, r0, #1
 80018e2:	41a0      	sbcs	r0, r4
 80018e4:	199b      	adds	r3, r3, r6
 80018e6:	4307      	orrs	r7, r0
 80018e8:	18bf      	adds	r7, r7, r2
 80018ea:	4297      	cmp	r7, r2
 80018ec:	4192      	sbcs	r2, r2
 80018ee:	4252      	negs	r2, r2
 80018f0:	4644      	mov	r4, r8
 80018f2:	18d6      	adds	r6, r2, r3
 80018f4:	e763      	b.n	80017be <__aeabi_dadd+0x1f6>
 80018f6:	0038      	movs	r0, r7
 80018f8:	f001 fed0 	bl	800369c <__clzsi2>
 80018fc:	0003      	movs	r3, r0
 80018fe:	3318      	adds	r3, #24
 8001900:	2b1f      	cmp	r3, #31
 8001902:	dc00      	bgt.n	8001906 <__aeabi_dadd+0x33e>
 8001904:	e6bf      	b.n	8001686 <__aeabi_dadd+0xbe>
 8001906:	003a      	movs	r2, r7
 8001908:	3808      	subs	r0, #8
 800190a:	4082      	lsls	r2, r0
 800190c:	429c      	cmp	r4, r3
 800190e:	dd00      	ble.n	8001912 <__aeabi_dadd+0x34a>
 8001910:	e083      	b.n	8001a1a <__aeabi_dadd+0x452>
 8001912:	1b1b      	subs	r3, r3, r4
 8001914:	1c58      	adds	r0, r3, #1
 8001916:	281f      	cmp	r0, #31
 8001918:	dc00      	bgt.n	800191c <__aeabi_dadd+0x354>
 800191a:	e1b4      	b.n	8001c86 <__aeabi_dadd+0x6be>
 800191c:	0017      	movs	r7, r2
 800191e:	3b1f      	subs	r3, #31
 8001920:	40df      	lsrs	r7, r3
 8001922:	2820      	cmp	r0, #32
 8001924:	d005      	beq.n	8001932 <__aeabi_dadd+0x36a>
 8001926:	2340      	movs	r3, #64	@ 0x40
 8001928:	1a1b      	subs	r3, r3, r0
 800192a:	409a      	lsls	r2, r3
 800192c:	1e53      	subs	r3, r2, #1
 800192e:	419a      	sbcs	r2, r3
 8001930:	4317      	orrs	r7, r2
 8001932:	2400      	movs	r4, #0
 8001934:	2f00      	cmp	r7, #0
 8001936:	d00a      	beq.n	800194e <__aeabi_dadd+0x386>
 8001938:	077b      	lsls	r3, r7, #29
 800193a:	d000      	beq.n	800193e <__aeabi_dadd+0x376>
 800193c:	e6c4      	b.n	80016c8 <__aeabi_dadd+0x100>
 800193e:	0026      	movs	r6, r4
 8001940:	e79e      	b.n	8001880 <__aeabi_dadd+0x2b8>
 8001942:	464b      	mov	r3, r9
 8001944:	000c      	movs	r4, r1
 8001946:	08d8      	lsrs	r0, r3, #3
 8001948:	e79b      	b.n	8001882 <__aeabi_dadd+0x2ba>
 800194a:	2700      	movs	r7, #0
 800194c:	4c01      	ldr	r4, [pc, #4]	@ (8001954 <__aeabi_dadd+0x38c>)
 800194e:	2600      	movs	r6, #0
 8001950:	e783      	b.n	800185a <__aeabi_dadd+0x292>
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	000007ff 	.word	0x000007ff
 8001958:	ff7fffff 	.word	0xff7fffff
 800195c:	000007fe 	.word	0x000007fe
 8001960:	464b      	mov	r3, r9
 8001962:	0777      	lsls	r7, r6, #29
 8001964:	08d8      	lsrs	r0, r3, #3
 8001966:	4307      	orrs	r7, r0
 8001968:	08f0      	lsrs	r0, r6, #3
 800196a:	e791      	b.n	8001890 <__aeabi_dadd+0x2c8>
 800196c:	4fcd      	ldr	r7, [pc, #820]	@ (8001ca4 <__aeabi_dadd+0x6dc>)
 800196e:	1c61      	adds	r1, r4, #1
 8001970:	4239      	tst	r1, r7
 8001972:	d16b      	bne.n	8001a4c <__aeabi_dadd+0x484>
 8001974:	0031      	movs	r1, r6
 8001976:	4648      	mov	r0, r9
 8001978:	4301      	orrs	r1, r0
 800197a:	2c00      	cmp	r4, #0
 800197c:	d000      	beq.n	8001980 <__aeabi_dadd+0x3b8>
 800197e:	e14b      	b.n	8001c18 <__aeabi_dadd+0x650>
 8001980:	001f      	movs	r7, r3
 8001982:	4317      	orrs	r7, r2
 8001984:	2900      	cmp	r1, #0
 8001986:	d100      	bne.n	800198a <__aeabi_dadd+0x3c2>
 8001988:	e181      	b.n	8001c8e <__aeabi_dadd+0x6c6>
 800198a:	2f00      	cmp	r7, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dadd+0x3c8>
 800198e:	e74c      	b.n	800182a <__aeabi_dadd+0x262>
 8001990:	444a      	add	r2, r9
 8001992:	454a      	cmp	r2, r9
 8001994:	4180      	sbcs	r0, r0
 8001996:	18f6      	adds	r6, r6, r3
 8001998:	4240      	negs	r0, r0
 800199a:	1836      	adds	r6, r6, r0
 800199c:	0233      	lsls	r3, r6, #8
 800199e:	d500      	bpl.n	80019a2 <__aeabi_dadd+0x3da>
 80019a0:	e1b0      	b.n	8001d04 <__aeabi_dadd+0x73c>
 80019a2:	0017      	movs	r7, r2
 80019a4:	4691      	mov	r9, r2
 80019a6:	4337      	orrs	r7, r6
 80019a8:	d000      	beq.n	80019ac <__aeabi_dadd+0x3e4>
 80019aa:	e73e      	b.n	800182a <__aeabi_dadd+0x262>
 80019ac:	2600      	movs	r6, #0
 80019ae:	e754      	b.n	800185a <__aeabi_dadd+0x292>
 80019b0:	4649      	mov	r1, r9
 80019b2:	1a89      	subs	r1, r1, r2
 80019b4:	4688      	mov	r8, r1
 80019b6:	45c1      	cmp	r9, r8
 80019b8:	41bf      	sbcs	r7, r7
 80019ba:	1af1      	subs	r1, r6, r3
 80019bc:	427f      	negs	r7, r7
 80019be:	1bc9      	subs	r1, r1, r7
 80019c0:	020f      	lsls	r7, r1, #8
 80019c2:	d461      	bmi.n	8001a88 <__aeabi_dadd+0x4c0>
 80019c4:	4647      	mov	r7, r8
 80019c6:	430f      	orrs	r7, r1
 80019c8:	d100      	bne.n	80019cc <__aeabi_dadd+0x404>
 80019ca:	e0bd      	b.n	8001b48 <__aeabi_dadd+0x580>
 80019cc:	000e      	movs	r6, r1
 80019ce:	4647      	mov	r7, r8
 80019d0:	e651      	b.n	8001676 <__aeabi_dadd+0xae>
 80019d2:	4cb5      	ldr	r4, [pc, #724]	@ (8001ca8 <__aeabi_dadd+0x6e0>)
 80019d4:	45a0      	cmp	r8, r4
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x412>
 80019d8:	e100      	b.n	8001bdc <__aeabi_dadd+0x614>
 80019da:	2701      	movs	r7, #1
 80019dc:	2938      	cmp	r1, #56	@ 0x38
 80019de:	dd00      	ble.n	80019e2 <__aeabi_dadd+0x41a>
 80019e0:	e6b8      	b.n	8001754 <__aeabi_dadd+0x18c>
 80019e2:	2480      	movs	r4, #128	@ 0x80
 80019e4:	0424      	lsls	r4, r4, #16
 80019e6:	4326      	orrs	r6, r4
 80019e8:	e6a3      	b.n	8001732 <__aeabi_dadd+0x16a>
 80019ea:	4eb0      	ldr	r6, [pc, #704]	@ (8001cac <__aeabi_dadd+0x6e4>)
 80019ec:	1ae4      	subs	r4, r4, r3
 80019ee:	4016      	ands	r6, r2
 80019f0:	077b      	lsls	r3, r7, #29
 80019f2:	d000      	beq.n	80019f6 <__aeabi_dadd+0x42e>
 80019f4:	e73f      	b.n	8001876 <__aeabi_dadd+0x2ae>
 80019f6:	e743      	b.n	8001880 <__aeabi_dadd+0x2b8>
 80019f8:	000f      	movs	r7, r1
 80019fa:	0018      	movs	r0, r3
 80019fc:	3f20      	subs	r7, #32
 80019fe:	40f8      	lsrs	r0, r7
 8001a00:	4684      	mov	ip, r0
 8001a02:	2920      	cmp	r1, #32
 8001a04:	d003      	beq.n	8001a0e <__aeabi_dadd+0x446>
 8001a06:	2740      	movs	r7, #64	@ 0x40
 8001a08:	1a79      	subs	r1, r7, r1
 8001a0a:	408b      	lsls	r3, r1
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	1e53      	subs	r3, r2, #1
 8001a10:	419a      	sbcs	r2, r3
 8001a12:	4663      	mov	r3, ip
 8001a14:	0017      	movs	r7, r2
 8001a16:	431f      	orrs	r7, r3
 8001a18:	e622      	b.n	8001660 <__aeabi_dadd+0x98>
 8001a1a:	48a4      	ldr	r0, [pc, #656]	@ (8001cac <__aeabi_dadd+0x6e4>)
 8001a1c:	1ae1      	subs	r1, r4, r3
 8001a1e:	4010      	ands	r0, r2
 8001a20:	0747      	lsls	r7, r0, #29
 8001a22:	08c0      	lsrs	r0, r0, #3
 8001a24:	e707      	b.n	8001836 <__aeabi_dadd+0x26e>
 8001a26:	0034      	movs	r4, r6
 8001a28:	4648      	mov	r0, r9
 8001a2a:	4304      	orrs	r4, r0
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dadd+0x468>
 8001a2e:	e0fa      	b.n	8001c26 <__aeabi_dadd+0x65e>
 8001a30:	1e4c      	subs	r4, r1, #1
 8001a32:	2901      	cmp	r1, #1
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dadd+0x470>
 8001a36:	e0d7      	b.n	8001be8 <__aeabi_dadd+0x620>
 8001a38:	4f9b      	ldr	r7, [pc, #620]	@ (8001ca8 <__aeabi_dadd+0x6e0>)
 8001a3a:	42b9      	cmp	r1, r7
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dadd+0x478>
 8001a3e:	e0e2      	b.n	8001c06 <__aeabi_dadd+0x63e>
 8001a40:	2701      	movs	r7, #1
 8001a42:	2c38      	cmp	r4, #56	@ 0x38
 8001a44:	dd00      	ble.n	8001a48 <__aeabi_dadd+0x480>
 8001a46:	e74f      	b.n	80018e8 <__aeabi_dadd+0x320>
 8001a48:	0021      	movs	r1, r4
 8001a4a:	e73c      	b.n	80018c6 <__aeabi_dadd+0x2fe>
 8001a4c:	4c96      	ldr	r4, [pc, #600]	@ (8001ca8 <__aeabi_dadd+0x6e0>)
 8001a4e:	42a1      	cmp	r1, r4
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x48c>
 8001a52:	e0dd      	b.n	8001c10 <__aeabi_dadd+0x648>
 8001a54:	444a      	add	r2, r9
 8001a56:	454a      	cmp	r2, r9
 8001a58:	4180      	sbcs	r0, r0
 8001a5a:	18f3      	adds	r3, r6, r3
 8001a5c:	4240      	negs	r0, r0
 8001a5e:	1818      	adds	r0, r3, r0
 8001a60:	07c7      	lsls	r7, r0, #31
 8001a62:	0852      	lsrs	r2, r2, #1
 8001a64:	4317      	orrs	r7, r2
 8001a66:	0846      	lsrs	r6, r0, #1
 8001a68:	0752      	lsls	r2, r2, #29
 8001a6a:	d005      	beq.n	8001a78 <__aeabi_dadd+0x4b0>
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	000c      	movs	r4, r1
 8001a70:	403a      	ands	r2, r7
 8001a72:	2a04      	cmp	r2, #4
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dadd+0x4b0>
 8001a76:	e62c      	b.n	80016d2 <__aeabi_dadd+0x10a>
 8001a78:	0776      	lsls	r6, r6, #29
 8001a7a:	08ff      	lsrs	r7, r7, #3
 8001a7c:	4337      	orrs	r7, r6
 8001a7e:	0900      	lsrs	r0, r0, #4
 8001a80:	e6d9      	b.n	8001836 <__aeabi_dadd+0x26e>
 8001a82:	2700      	movs	r7, #0
 8001a84:	2600      	movs	r6, #0
 8001a86:	e6e8      	b.n	800185a <__aeabi_dadd+0x292>
 8001a88:	4649      	mov	r1, r9
 8001a8a:	1a57      	subs	r7, r2, r1
 8001a8c:	42ba      	cmp	r2, r7
 8001a8e:	4192      	sbcs	r2, r2
 8001a90:	1b9e      	subs	r6, r3, r6
 8001a92:	4252      	negs	r2, r2
 8001a94:	4665      	mov	r5, ip
 8001a96:	1ab6      	subs	r6, r6, r2
 8001a98:	e5ed      	b.n	8001676 <__aeabi_dadd+0xae>
 8001a9a:	2900      	cmp	r1, #0
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dadd+0x4d8>
 8001a9e:	e0c6      	b.n	8001c2e <__aeabi_dadd+0x666>
 8001aa0:	2f00      	cmp	r7, #0
 8001aa2:	d167      	bne.n	8001b74 <__aeabi_dadd+0x5ac>
 8001aa4:	2680      	movs	r6, #128	@ 0x80
 8001aa6:	2500      	movs	r5, #0
 8001aa8:	4c7f      	ldr	r4, [pc, #508]	@ (8001ca8 <__aeabi_dadd+0x6e0>)
 8001aaa:	0336      	lsls	r6, r6, #12
 8001aac:	e6d5      	b.n	800185a <__aeabi_dadd+0x292>
 8001aae:	4665      	mov	r5, ip
 8001ab0:	000c      	movs	r4, r1
 8001ab2:	001e      	movs	r6, r3
 8001ab4:	08d0      	lsrs	r0, r2, #3
 8001ab6:	e6e4      	b.n	8001882 <__aeabi_dadd+0x2ba>
 8001ab8:	444a      	add	r2, r9
 8001aba:	454a      	cmp	r2, r9
 8001abc:	4180      	sbcs	r0, r0
 8001abe:	18f3      	adds	r3, r6, r3
 8001ac0:	4240      	negs	r0, r0
 8001ac2:	1818      	adds	r0, r3, r0
 8001ac4:	0011      	movs	r1, r2
 8001ac6:	0203      	lsls	r3, r0, #8
 8001ac8:	d400      	bmi.n	8001acc <__aeabi_dadd+0x504>
 8001aca:	e096      	b.n	8001bfa <__aeabi_dadd+0x632>
 8001acc:	4b77      	ldr	r3, [pc, #476]	@ (8001cac <__aeabi_dadd+0x6e4>)
 8001ace:	0849      	lsrs	r1, r1, #1
 8001ad0:	4018      	ands	r0, r3
 8001ad2:	07c3      	lsls	r3, r0, #31
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	0844      	lsrs	r4, r0, #1
 8001ad8:	0749      	lsls	r1, r1, #29
 8001ada:	d100      	bne.n	8001ade <__aeabi_dadd+0x516>
 8001adc:	e129      	b.n	8001d32 <__aeabi_dadd+0x76a>
 8001ade:	220f      	movs	r2, #15
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	2a04      	cmp	r2, #4
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dadd+0x520>
 8001ae6:	e0ea      	b.n	8001cbe <__aeabi_dadd+0x6f6>
 8001ae8:	1d1f      	adds	r7, r3, #4
 8001aea:	429f      	cmp	r7, r3
 8001aec:	41b6      	sbcs	r6, r6
 8001aee:	4276      	negs	r6, r6
 8001af0:	1936      	adds	r6, r6, r4
 8001af2:	2402      	movs	r4, #2
 8001af4:	e6c4      	b.n	8001880 <__aeabi_dadd+0x2b8>
 8001af6:	4649      	mov	r1, r9
 8001af8:	1a8f      	subs	r7, r1, r2
 8001afa:	45b9      	cmp	r9, r7
 8001afc:	4180      	sbcs	r0, r0
 8001afe:	1af6      	subs	r6, r6, r3
 8001b00:	4240      	negs	r0, r0
 8001b02:	1a36      	subs	r6, r6, r0
 8001b04:	0233      	lsls	r3, r6, #8
 8001b06:	d406      	bmi.n	8001b16 <__aeabi_dadd+0x54e>
 8001b08:	0773      	lsls	r3, r6, #29
 8001b0a:	08ff      	lsrs	r7, r7, #3
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	431f      	orrs	r7, r3
 8001b10:	08f0      	lsrs	r0, r6, #3
 8001b12:	e690      	b.n	8001836 <__aeabi_dadd+0x26e>
 8001b14:	4665      	mov	r5, ip
 8001b16:	2401      	movs	r4, #1
 8001b18:	e5ab      	b.n	8001672 <__aeabi_dadd+0xaa>
 8001b1a:	464b      	mov	r3, r9
 8001b1c:	0777      	lsls	r7, r6, #29
 8001b1e:	08d8      	lsrs	r0, r3, #3
 8001b20:	4307      	orrs	r7, r0
 8001b22:	08f0      	lsrs	r0, r6, #3
 8001b24:	e6b4      	b.n	8001890 <__aeabi_dadd+0x2c8>
 8001b26:	000f      	movs	r7, r1
 8001b28:	0018      	movs	r0, r3
 8001b2a:	3f20      	subs	r7, #32
 8001b2c:	40f8      	lsrs	r0, r7
 8001b2e:	4684      	mov	ip, r0
 8001b30:	2920      	cmp	r1, #32
 8001b32:	d003      	beq.n	8001b3c <__aeabi_dadd+0x574>
 8001b34:	2740      	movs	r7, #64	@ 0x40
 8001b36:	1a79      	subs	r1, r7, r1
 8001b38:	408b      	lsls	r3, r1
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	1e53      	subs	r3, r2, #1
 8001b3e:	419a      	sbcs	r2, r3
 8001b40:	4663      	mov	r3, ip
 8001b42:	0017      	movs	r7, r2
 8001b44:	431f      	orrs	r7, r3
 8001b46:	e635      	b.n	80017b4 <__aeabi_dadd+0x1ec>
 8001b48:	2500      	movs	r5, #0
 8001b4a:	2400      	movs	r4, #0
 8001b4c:	2600      	movs	r6, #0
 8001b4e:	e684      	b.n	800185a <__aeabi_dadd+0x292>
 8001b50:	000c      	movs	r4, r1
 8001b52:	0035      	movs	r5, r6
 8001b54:	3c20      	subs	r4, #32
 8001b56:	40e5      	lsrs	r5, r4
 8001b58:	2920      	cmp	r1, #32
 8001b5a:	d005      	beq.n	8001b68 <__aeabi_dadd+0x5a0>
 8001b5c:	2440      	movs	r4, #64	@ 0x40
 8001b5e:	1a61      	subs	r1, r4, r1
 8001b60:	408e      	lsls	r6, r1
 8001b62:	4649      	mov	r1, r9
 8001b64:	4331      	orrs	r1, r6
 8001b66:	4689      	mov	r9, r1
 8001b68:	4648      	mov	r0, r9
 8001b6a:	1e41      	subs	r1, r0, #1
 8001b6c:	4188      	sbcs	r0, r1
 8001b6e:	0007      	movs	r7, r0
 8001b70:	432f      	orrs	r7, r5
 8001b72:	e5ef      	b.n	8001754 <__aeabi_dadd+0x18c>
 8001b74:	08d2      	lsrs	r2, r2, #3
 8001b76:	075f      	lsls	r7, r3, #29
 8001b78:	4665      	mov	r5, ip
 8001b7a:	4317      	orrs	r7, r2
 8001b7c:	08d8      	lsrs	r0, r3, #3
 8001b7e:	e687      	b.n	8001890 <__aeabi_dadd+0x2c8>
 8001b80:	1a17      	subs	r7, r2, r0
 8001b82:	42ba      	cmp	r2, r7
 8001b84:	4192      	sbcs	r2, r2
 8001b86:	1b9e      	subs	r6, r3, r6
 8001b88:	4252      	negs	r2, r2
 8001b8a:	1ab6      	subs	r6, r6, r2
 8001b8c:	0233      	lsls	r3, r6, #8
 8001b8e:	d4c1      	bmi.n	8001b14 <__aeabi_dadd+0x54c>
 8001b90:	0773      	lsls	r3, r6, #29
 8001b92:	08ff      	lsrs	r7, r7, #3
 8001b94:	4665      	mov	r5, ip
 8001b96:	2101      	movs	r1, #1
 8001b98:	431f      	orrs	r7, r3
 8001b9a:	08f0      	lsrs	r0, r6, #3
 8001b9c:	e64b      	b.n	8001836 <__aeabi_dadd+0x26e>
 8001b9e:	2f00      	cmp	r7, #0
 8001ba0:	d07b      	beq.n	8001c9a <__aeabi_dadd+0x6d2>
 8001ba2:	4665      	mov	r5, ip
 8001ba4:	001e      	movs	r6, r3
 8001ba6:	4691      	mov	r9, r2
 8001ba8:	e63f      	b.n	800182a <__aeabi_dadd+0x262>
 8001baa:	1a81      	subs	r1, r0, r2
 8001bac:	4688      	mov	r8, r1
 8001bae:	45c1      	cmp	r9, r8
 8001bb0:	41a4      	sbcs	r4, r4
 8001bb2:	1af1      	subs	r1, r6, r3
 8001bb4:	4264      	negs	r4, r4
 8001bb6:	1b09      	subs	r1, r1, r4
 8001bb8:	2480      	movs	r4, #128	@ 0x80
 8001bba:	0424      	lsls	r4, r4, #16
 8001bbc:	4221      	tst	r1, r4
 8001bbe:	d077      	beq.n	8001cb0 <__aeabi_dadd+0x6e8>
 8001bc0:	1a10      	subs	r0, r2, r0
 8001bc2:	4282      	cmp	r2, r0
 8001bc4:	4192      	sbcs	r2, r2
 8001bc6:	0007      	movs	r7, r0
 8001bc8:	1b9e      	subs	r6, r3, r6
 8001bca:	4252      	negs	r2, r2
 8001bcc:	1ab6      	subs	r6, r6, r2
 8001bce:	4337      	orrs	r7, r6
 8001bd0:	d000      	beq.n	8001bd4 <__aeabi_dadd+0x60c>
 8001bd2:	e0a0      	b.n	8001d16 <__aeabi_dadd+0x74e>
 8001bd4:	4665      	mov	r5, ip
 8001bd6:	2400      	movs	r4, #0
 8001bd8:	2600      	movs	r6, #0
 8001bda:	e63e      	b.n	800185a <__aeabi_dadd+0x292>
 8001bdc:	075f      	lsls	r7, r3, #29
 8001bde:	08d2      	lsrs	r2, r2, #3
 8001be0:	4665      	mov	r5, ip
 8001be2:	4317      	orrs	r7, r2
 8001be4:	08d8      	lsrs	r0, r3, #3
 8001be6:	e653      	b.n	8001890 <__aeabi_dadd+0x2c8>
 8001be8:	1881      	adds	r1, r0, r2
 8001bea:	4291      	cmp	r1, r2
 8001bec:	4192      	sbcs	r2, r2
 8001bee:	18f0      	adds	r0, r6, r3
 8001bf0:	4252      	negs	r2, r2
 8001bf2:	1880      	adds	r0, r0, r2
 8001bf4:	0203      	lsls	r3, r0, #8
 8001bf6:	d500      	bpl.n	8001bfa <__aeabi_dadd+0x632>
 8001bf8:	e768      	b.n	8001acc <__aeabi_dadd+0x504>
 8001bfa:	0747      	lsls	r7, r0, #29
 8001bfc:	08c9      	lsrs	r1, r1, #3
 8001bfe:	430f      	orrs	r7, r1
 8001c00:	08c0      	lsrs	r0, r0, #3
 8001c02:	2101      	movs	r1, #1
 8001c04:	e617      	b.n	8001836 <__aeabi_dadd+0x26e>
 8001c06:	08d2      	lsrs	r2, r2, #3
 8001c08:	075f      	lsls	r7, r3, #29
 8001c0a:	4317      	orrs	r7, r2
 8001c0c:	08d8      	lsrs	r0, r3, #3
 8001c0e:	e63f      	b.n	8001890 <__aeabi_dadd+0x2c8>
 8001c10:	000c      	movs	r4, r1
 8001c12:	2600      	movs	r6, #0
 8001c14:	2700      	movs	r7, #0
 8001c16:	e620      	b.n	800185a <__aeabi_dadd+0x292>
 8001c18:	2900      	cmp	r1, #0
 8001c1a:	d156      	bne.n	8001cca <__aeabi_dadd+0x702>
 8001c1c:	075f      	lsls	r7, r3, #29
 8001c1e:	08d2      	lsrs	r2, r2, #3
 8001c20:	4317      	orrs	r7, r2
 8001c22:	08d8      	lsrs	r0, r3, #3
 8001c24:	e634      	b.n	8001890 <__aeabi_dadd+0x2c8>
 8001c26:	000c      	movs	r4, r1
 8001c28:	001e      	movs	r6, r3
 8001c2a:	08d0      	lsrs	r0, r2, #3
 8001c2c:	e629      	b.n	8001882 <__aeabi_dadd+0x2ba>
 8001c2e:	08c1      	lsrs	r1, r0, #3
 8001c30:	0770      	lsls	r0, r6, #29
 8001c32:	4301      	orrs	r1, r0
 8001c34:	08f0      	lsrs	r0, r6, #3
 8001c36:	2f00      	cmp	r7, #0
 8001c38:	d062      	beq.n	8001d00 <__aeabi_dadd+0x738>
 8001c3a:	2480      	movs	r4, #128	@ 0x80
 8001c3c:	0324      	lsls	r4, r4, #12
 8001c3e:	4220      	tst	r0, r4
 8001c40:	d007      	beq.n	8001c52 <__aeabi_dadd+0x68a>
 8001c42:	08de      	lsrs	r6, r3, #3
 8001c44:	4226      	tst	r6, r4
 8001c46:	d104      	bne.n	8001c52 <__aeabi_dadd+0x68a>
 8001c48:	4665      	mov	r5, ip
 8001c4a:	0030      	movs	r0, r6
 8001c4c:	08d1      	lsrs	r1, r2, #3
 8001c4e:	075b      	lsls	r3, r3, #29
 8001c50:	4319      	orrs	r1, r3
 8001c52:	0f4f      	lsrs	r7, r1, #29
 8001c54:	00c9      	lsls	r1, r1, #3
 8001c56:	08c9      	lsrs	r1, r1, #3
 8001c58:	077f      	lsls	r7, r7, #29
 8001c5a:	430f      	orrs	r7, r1
 8001c5c:	e618      	b.n	8001890 <__aeabi_dadd+0x2c8>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	0030      	movs	r0, r6
 8001c62:	3c20      	subs	r4, #32
 8001c64:	40e0      	lsrs	r0, r4
 8001c66:	4684      	mov	ip, r0
 8001c68:	2920      	cmp	r1, #32
 8001c6a:	d005      	beq.n	8001c78 <__aeabi_dadd+0x6b0>
 8001c6c:	2440      	movs	r4, #64	@ 0x40
 8001c6e:	1a61      	subs	r1, r4, r1
 8001c70:	408e      	lsls	r6, r1
 8001c72:	4649      	mov	r1, r9
 8001c74:	4331      	orrs	r1, r6
 8001c76:	4689      	mov	r9, r1
 8001c78:	4648      	mov	r0, r9
 8001c7a:	1e41      	subs	r1, r0, #1
 8001c7c:	4188      	sbcs	r0, r1
 8001c7e:	4661      	mov	r1, ip
 8001c80:	0007      	movs	r7, r0
 8001c82:	430f      	orrs	r7, r1
 8001c84:	e630      	b.n	80018e8 <__aeabi_dadd+0x320>
 8001c86:	2120      	movs	r1, #32
 8001c88:	2700      	movs	r7, #0
 8001c8a:	1a09      	subs	r1, r1, r0
 8001c8c:	e50e      	b.n	80016ac <__aeabi_dadd+0xe4>
 8001c8e:	001e      	movs	r6, r3
 8001c90:	2f00      	cmp	r7, #0
 8001c92:	d000      	beq.n	8001c96 <__aeabi_dadd+0x6ce>
 8001c94:	e522      	b.n	80016dc <__aeabi_dadd+0x114>
 8001c96:	2400      	movs	r4, #0
 8001c98:	e758      	b.n	8001b4c <__aeabi_dadd+0x584>
 8001c9a:	2500      	movs	r5, #0
 8001c9c:	2400      	movs	r4, #0
 8001c9e:	2600      	movs	r6, #0
 8001ca0:	e5db      	b.n	800185a <__aeabi_dadd+0x292>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007fe 	.word	0x000007fe
 8001ca8:	000007ff 	.word	0x000007ff
 8001cac:	ff7fffff 	.word	0xff7fffff
 8001cb0:	4647      	mov	r7, r8
 8001cb2:	430f      	orrs	r7, r1
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dadd+0x6f0>
 8001cb6:	e747      	b.n	8001b48 <__aeabi_dadd+0x580>
 8001cb8:	000e      	movs	r6, r1
 8001cba:	46c1      	mov	r9, r8
 8001cbc:	e5b5      	b.n	800182a <__aeabi_dadd+0x262>
 8001cbe:	08df      	lsrs	r7, r3, #3
 8001cc0:	0764      	lsls	r4, r4, #29
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4327      	orrs	r7, r4
 8001cc6:	0900      	lsrs	r0, r0, #4
 8001cc8:	e5b5      	b.n	8001836 <__aeabi_dadd+0x26e>
 8001cca:	0019      	movs	r1, r3
 8001ccc:	08c0      	lsrs	r0, r0, #3
 8001cce:	0777      	lsls	r7, r6, #29
 8001cd0:	4307      	orrs	r7, r0
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	08f0      	lsrs	r0, r6, #3
 8001cd6:	2900      	cmp	r1, #0
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dadd+0x714>
 8001cda:	e5d9      	b.n	8001890 <__aeabi_dadd+0x2c8>
 8001cdc:	2180      	movs	r1, #128	@ 0x80
 8001cde:	0309      	lsls	r1, r1, #12
 8001ce0:	4208      	tst	r0, r1
 8001ce2:	d007      	beq.n	8001cf4 <__aeabi_dadd+0x72c>
 8001ce4:	08dc      	lsrs	r4, r3, #3
 8001ce6:	420c      	tst	r4, r1
 8001ce8:	d104      	bne.n	8001cf4 <__aeabi_dadd+0x72c>
 8001cea:	08d2      	lsrs	r2, r2, #3
 8001cec:	075b      	lsls	r3, r3, #29
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	0017      	movs	r7, r2
 8001cf2:	0020      	movs	r0, r4
 8001cf4:	0f7b      	lsrs	r3, r7, #29
 8001cf6:	00ff      	lsls	r7, r7, #3
 8001cf8:	08ff      	lsrs	r7, r7, #3
 8001cfa:	075b      	lsls	r3, r3, #29
 8001cfc:	431f      	orrs	r7, r3
 8001cfe:	e5c7      	b.n	8001890 <__aeabi_dadd+0x2c8>
 8001d00:	000f      	movs	r7, r1
 8001d02:	e5c5      	b.n	8001890 <__aeabi_dadd+0x2c8>
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <__aeabi_dadd+0x788>)
 8001d06:	08d2      	lsrs	r2, r2, #3
 8001d08:	4033      	ands	r3, r6
 8001d0a:	075f      	lsls	r7, r3, #29
 8001d0c:	025b      	lsls	r3, r3, #9
 8001d0e:	2401      	movs	r4, #1
 8001d10:	4317      	orrs	r7, r2
 8001d12:	0b1e      	lsrs	r6, r3, #12
 8001d14:	e5a1      	b.n	800185a <__aeabi_dadd+0x292>
 8001d16:	4226      	tst	r6, r4
 8001d18:	d012      	beq.n	8001d40 <__aeabi_dadd+0x778>
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <__aeabi_dadd+0x788>)
 8001d1c:	4665      	mov	r5, ip
 8001d1e:	0002      	movs	r2, r0
 8001d20:	2401      	movs	r4, #1
 8001d22:	401e      	ands	r6, r3
 8001d24:	e4e6      	b.n	80016f4 <__aeabi_dadd+0x12c>
 8001d26:	0021      	movs	r1, r4
 8001d28:	e585      	b.n	8001836 <__aeabi_dadd+0x26e>
 8001d2a:	0017      	movs	r7, r2
 8001d2c:	e5a8      	b.n	8001880 <__aeabi_dadd+0x2b8>
 8001d2e:	003a      	movs	r2, r7
 8001d30:	e4d4      	b.n	80016dc <__aeabi_dadd+0x114>
 8001d32:	08db      	lsrs	r3, r3, #3
 8001d34:	0764      	lsls	r4, r4, #29
 8001d36:	431c      	orrs	r4, r3
 8001d38:	0027      	movs	r7, r4
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	0900      	lsrs	r0, r0, #4
 8001d3e:	e57a      	b.n	8001836 <__aeabi_dadd+0x26e>
 8001d40:	08c0      	lsrs	r0, r0, #3
 8001d42:	0777      	lsls	r7, r6, #29
 8001d44:	4307      	orrs	r7, r0
 8001d46:	4665      	mov	r5, ip
 8001d48:	2100      	movs	r1, #0
 8001d4a:	08f0      	lsrs	r0, r6, #3
 8001d4c:	e573      	b.n	8001836 <__aeabi_dadd+0x26e>
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	ff7fffff 	.word	0xff7fffff

08001d54 <__aeabi_ddiv>:
 8001d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d56:	46de      	mov	lr, fp
 8001d58:	4645      	mov	r5, r8
 8001d5a:	4657      	mov	r7, sl
 8001d5c:	464e      	mov	r6, r9
 8001d5e:	b5e0      	push	{r5, r6, r7, lr}
 8001d60:	b087      	sub	sp, #28
 8001d62:	9200      	str	r2, [sp, #0]
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	030b      	lsls	r3, r1, #12
 8001d68:	0b1b      	lsrs	r3, r3, #12
 8001d6a:	469b      	mov	fp, r3
 8001d6c:	0fca      	lsrs	r2, r1, #31
 8001d6e:	004b      	lsls	r3, r1, #1
 8001d70:	0004      	movs	r4, r0
 8001d72:	4680      	mov	r8, r0
 8001d74:	0d5b      	lsrs	r3, r3, #21
 8001d76:	9202      	str	r2, [sp, #8]
 8001d78:	d100      	bne.n	8001d7c <__aeabi_ddiv+0x28>
 8001d7a:	e098      	b.n	8001eae <__aeabi_ddiv+0x15a>
 8001d7c:	4a7c      	ldr	r2, [pc, #496]	@ (8001f70 <__aeabi_ddiv+0x21c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d037      	beq.n	8001df2 <__aeabi_ddiv+0x9e>
 8001d82:	4659      	mov	r1, fp
 8001d84:	0f42      	lsrs	r2, r0, #29
 8001d86:	00c9      	lsls	r1, r1, #3
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	2180      	movs	r1, #128	@ 0x80
 8001d8c:	0409      	lsls	r1, r1, #16
 8001d8e:	4311      	orrs	r1, r2
 8001d90:	00c2      	lsls	r2, r0, #3
 8001d92:	4690      	mov	r8, r2
 8001d94:	4a77      	ldr	r2, [pc, #476]	@ (8001f74 <__aeabi_ddiv+0x220>)
 8001d96:	4689      	mov	r9, r1
 8001d98:	4692      	mov	sl, r2
 8001d9a:	449a      	add	sl, r3
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2400      	movs	r4, #0
 8001da0:	9303      	str	r3, [sp, #12]
 8001da2:	9e00      	ldr	r6, [sp, #0]
 8001da4:	9f01      	ldr	r7, [sp, #4]
 8001da6:	033b      	lsls	r3, r7, #12
 8001da8:	0b1b      	lsrs	r3, r3, #12
 8001daa:	469b      	mov	fp, r3
 8001dac:	007b      	lsls	r3, r7, #1
 8001dae:	0030      	movs	r0, r6
 8001db0:	0d5b      	lsrs	r3, r3, #21
 8001db2:	0ffd      	lsrs	r5, r7, #31
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d059      	beq.n	8001e6c <__aeabi_ddiv+0x118>
 8001db8:	4a6d      	ldr	r2, [pc, #436]	@ (8001f70 <__aeabi_ddiv+0x21c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d048      	beq.n	8001e50 <__aeabi_ddiv+0xfc>
 8001dbe:	4659      	mov	r1, fp
 8001dc0:	0f72      	lsrs	r2, r6, #29
 8001dc2:	00c9      	lsls	r1, r1, #3
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	0409      	lsls	r1, r1, #16
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	468b      	mov	fp, r1
 8001dce:	4969      	ldr	r1, [pc, #420]	@ (8001f74 <__aeabi_ddiv+0x220>)
 8001dd0:	00f2      	lsls	r2, r6, #3
 8001dd2:	468c      	mov	ip, r1
 8001dd4:	4651      	mov	r1, sl
 8001dd6:	4463      	add	r3, ip
 8001dd8:	1acb      	subs	r3, r1, r3
 8001dda:	469a      	mov	sl, r3
 8001ddc:	2100      	movs	r1, #0
 8001dde:	9e02      	ldr	r6, [sp, #8]
 8001de0:	406e      	eors	r6, r5
 8001de2:	b2f6      	uxtb	r6, r6
 8001de4:	2c0f      	cmp	r4, #15
 8001de6:	d900      	bls.n	8001dea <__aeabi_ddiv+0x96>
 8001de8:	e0ce      	b.n	8001f88 <__aeabi_ddiv+0x234>
 8001dea:	4b63      	ldr	r3, [pc, #396]	@ (8001f78 <__aeabi_ddiv+0x224>)
 8001dec:	00a4      	lsls	r4, r4, #2
 8001dee:	591b      	ldr	r3, [r3, r4]
 8001df0:	469f      	mov	pc, r3
 8001df2:	465a      	mov	r2, fp
 8001df4:	4302      	orrs	r2, r0
 8001df6:	4691      	mov	r9, r2
 8001df8:	d000      	beq.n	8001dfc <__aeabi_ddiv+0xa8>
 8001dfa:	e090      	b.n	8001f1e <__aeabi_ddiv+0x1ca>
 8001dfc:	469a      	mov	sl, r3
 8001dfe:	2302      	movs	r3, #2
 8001e00:	4690      	mov	r8, r2
 8001e02:	2408      	movs	r4, #8
 8001e04:	9303      	str	r3, [sp, #12]
 8001e06:	e7cc      	b.n	8001da2 <__aeabi_ddiv+0x4e>
 8001e08:	46cb      	mov	fp, r9
 8001e0a:	4642      	mov	r2, r8
 8001e0c:	9d02      	ldr	r5, [sp, #8]
 8001e0e:	9903      	ldr	r1, [sp, #12]
 8001e10:	2902      	cmp	r1, #2
 8001e12:	d100      	bne.n	8001e16 <__aeabi_ddiv+0xc2>
 8001e14:	e1de      	b.n	80021d4 <__aeabi_ddiv+0x480>
 8001e16:	2903      	cmp	r1, #3
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0xc8>
 8001e1a:	e08d      	b.n	8001f38 <__aeabi_ddiv+0x1e4>
 8001e1c:	2901      	cmp	r1, #1
 8001e1e:	d000      	beq.n	8001e22 <__aeabi_ddiv+0xce>
 8001e20:	e179      	b.n	8002116 <__aeabi_ddiv+0x3c2>
 8001e22:	002e      	movs	r6, r5
 8001e24:	2200      	movs	r2, #0
 8001e26:	2300      	movs	r3, #0
 8001e28:	2400      	movs	r4, #0
 8001e2a:	4690      	mov	r8, r2
 8001e2c:	051b      	lsls	r3, r3, #20
 8001e2e:	4323      	orrs	r3, r4
 8001e30:	07f6      	lsls	r6, r6, #31
 8001e32:	4333      	orrs	r3, r6
 8001e34:	4640      	mov	r0, r8
 8001e36:	0019      	movs	r1, r3
 8001e38:	b007      	add	sp, #28
 8001e3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e3c:	46bb      	mov	fp, r7
 8001e3e:	46b2      	mov	sl, r6
 8001e40:	46a9      	mov	r9, r5
 8001e42:	46a0      	mov	r8, r4
 8001e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e46:	2200      	movs	r2, #0
 8001e48:	2400      	movs	r4, #0
 8001e4a:	4690      	mov	r8, r2
 8001e4c:	4b48      	ldr	r3, [pc, #288]	@ (8001f70 <__aeabi_ddiv+0x21c>)
 8001e4e:	e7ed      	b.n	8001e2c <__aeabi_ddiv+0xd8>
 8001e50:	465a      	mov	r2, fp
 8001e52:	9b00      	ldr	r3, [sp, #0]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	4b49      	ldr	r3, [pc, #292]	@ (8001f7c <__aeabi_ddiv+0x228>)
 8001e58:	469c      	mov	ip, r3
 8001e5a:	44e2      	add	sl, ip
 8001e5c:	2a00      	cmp	r2, #0
 8001e5e:	d159      	bne.n	8001f14 <__aeabi_ddiv+0x1c0>
 8001e60:	2302      	movs	r3, #2
 8001e62:	431c      	orrs	r4, r3
 8001e64:	2300      	movs	r3, #0
 8001e66:	2102      	movs	r1, #2
 8001e68:	469b      	mov	fp, r3
 8001e6a:	e7b8      	b.n	8001dde <__aeabi_ddiv+0x8a>
 8001e6c:	465a      	mov	r2, fp
 8001e6e:	9b00      	ldr	r3, [sp, #0]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	d049      	beq.n	8001f08 <__aeabi_ddiv+0x1b4>
 8001e74:	465b      	mov	r3, fp
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d100      	bne.n	8001e7c <__aeabi_ddiv+0x128>
 8001e7a:	e19c      	b.n	80021b6 <__aeabi_ddiv+0x462>
 8001e7c:	4658      	mov	r0, fp
 8001e7e:	f001 fc0d 	bl	800369c <__clzsi2>
 8001e82:	0002      	movs	r2, r0
 8001e84:	0003      	movs	r3, r0
 8001e86:	3a0b      	subs	r2, #11
 8001e88:	271d      	movs	r7, #29
 8001e8a:	9e00      	ldr	r6, [sp, #0]
 8001e8c:	1aba      	subs	r2, r7, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	4658      	mov	r0, fp
 8001e92:	40d6      	lsrs	r6, r2
 8001e94:	3908      	subs	r1, #8
 8001e96:	4088      	lsls	r0, r1
 8001e98:	0032      	movs	r2, r6
 8001e9a:	4302      	orrs	r2, r0
 8001e9c:	4693      	mov	fp, r2
 8001e9e:	9a00      	ldr	r2, [sp, #0]
 8001ea0:	408a      	lsls	r2, r1
 8001ea2:	4937      	ldr	r1, [pc, #220]	@ (8001f80 <__aeabi_ddiv+0x22c>)
 8001ea4:	4453      	add	r3, sl
 8001ea6:	468a      	mov	sl, r1
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	449a      	add	sl, r3
 8001eac:	e797      	b.n	8001dde <__aeabi_ddiv+0x8a>
 8001eae:	465b      	mov	r3, fp
 8001eb0:	4303      	orrs	r3, r0
 8001eb2:	4699      	mov	r9, r3
 8001eb4:	d021      	beq.n	8001efa <__aeabi_ddiv+0x1a6>
 8001eb6:	465b      	mov	r3, fp
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d100      	bne.n	8001ebe <__aeabi_ddiv+0x16a>
 8001ebc:	e169      	b.n	8002192 <__aeabi_ddiv+0x43e>
 8001ebe:	4658      	mov	r0, fp
 8001ec0:	f001 fbec 	bl	800369c <__clzsi2>
 8001ec4:	230b      	movs	r3, #11
 8001ec6:	425b      	negs	r3, r3
 8001ec8:	469c      	mov	ip, r3
 8001eca:	0002      	movs	r2, r0
 8001ecc:	4484      	add	ip, r0
 8001ece:	4666      	mov	r6, ip
 8001ed0:	231d      	movs	r3, #29
 8001ed2:	1b9b      	subs	r3, r3, r6
 8001ed4:	0026      	movs	r6, r4
 8001ed6:	0011      	movs	r1, r2
 8001ed8:	4658      	mov	r0, fp
 8001eda:	40de      	lsrs	r6, r3
 8001edc:	3908      	subs	r1, #8
 8001ede:	4088      	lsls	r0, r1
 8001ee0:	0033      	movs	r3, r6
 8001ee2:	4303      	orrs	r3, r0
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	0023      	movs	r3, r4
 8001ee8:	408b      	lsls	r3, r1
 8001eea:	4698      	mov	r8, r3
 8001eec:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <__aeabi_ddiv+0x230>)
 8001eee:	2400      	movs	r4, #0
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	469a      	mov	sl, r3
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9303      	str	r3, [sp, #12]
 8001ef8:	e753      	b.n	8001da2 <__aeabi_ddiv+0x4e>
 8001efa:	2300      	movs	r3, #0
 8001efc:	4698      	mov	r8, r3
 8001efe:	469a      	mov	sl, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	2404      	movs	r4, #4
 8001f04:	9303      	str	r3, [sp, #12]
 8001f06:	e74c      	b.n	8001da2 <__aeabi_ddiv+0x4e>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	431c      	orrs	r4, r3
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2101      	movs	r1, #1
 8001f10:	469b      	mov	fp, r3
 8001f12:	e764      	b.n	8001dde <__aeabi_ddiv+0x8a>
 8001f14:	2303      	movs	r3, #3
 8001f16:	0032      	movs	r2, r6
 8001f18:	2103      	movs	r1, #3
 8001f1a:	431c      	orrs	r4, r3
 8001f1c:	e75f      	b.n	8001dde <__aeabi_ddiv+0x8a>
 8001f1e:	469a      	mov	sl, r3
 8001f20:	2303      	movs	r3, #3
 8001f22:	46d9      	mov	r9, fp
 8001f24:	240c      	movs	r4, #12
 8001f26:	9303      	str	r3, [sp, #12]
 8001f28:	e73b      	b.n	8001da2 <__aeabi_ddiv+0x4e>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2480      	movs	r4, #128	@ 0x80
 8001f2e:	4698      	mov	r8, r3
 8001f30:	2600      	movs	r6, #0
 8001f32:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <__aeabi_ddiv+0x21c>)
 8001f34:	0324      	lsls	r4, r4, #12
 8001f36:	e779      	b.n	8001e2c <__aeabi_ddiv+0xd8>
 8001f38:	2480      	movs	r4, #128	@ 0x80
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	0324      	lsls	r4, r4, #12
 8001f3e:	431c      	orrs	r4, r3
 8001f40:	0324      	lsls	r4, r4, #12
 8001f42:	002e      	movs	r6, r5
 8001f44:	4690      	mov	r8, r2
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <__aeabi_ddiv+0x21c>)
 8001f48:	0b24      	lsrs	r4, r4, #12
 8001f4a:	e76f      	b.n	8001e2c <__aeabi_ddiv+0xd8>
 8001f4c:	2480      	movs	r4, #128	@ 0x80
 8001f4e:	464b      	mov	r3, r9
 8001f50:	0324      	lsls	r4, r4, #12
 8001f52:	4223      	tst	r3, r4
 8001f54:	d002      	beq.n	8001f5c <__aeabi_ddiv+0x208>
 8001f56:	465b      	mov	r3, fp
 8001f58:	4223      	tst	r3, r4
 8001f5a:	d0f0      	beq.n	8001f3e <__aeabi_ddiv+0x1ea>
 8001f5c:	2480      	movs	r4, #128	@ 0x80
 8001f5e:	464b      	mov	r3, r9
 8001f60:	0324      	lsls	r4, r4, #12
 8001f62:	431c      	orrs	r4, r3
 8001f64:	0324      	lsls	r4, r4, #12
 8001f66:	9e02      	ldr	r6, [sp, #8]
 8001f68:	4b01      	ldr	r3, [pc, #4]	@ (8001f70 <__aeabi_ddiv+0x21c>)
 8001f6a:	0b24      	lsrs	r4, r4, #12
 8001f6c:	e75e      	b.n	8001e2c <__aeabi_ddiv+0xd8>
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	000007ff 	.word	0x000007ff
 8001f74:	fffffc01 	.word	0xfffffc01
 8001f78:	0800a4ac 	.word	0x0800a4ac
 8001f7c:	fffff801 	.word	0xfffff801
 8001f80:	000003f3 	.word	0x000003f3
 8001f84:	fffffc0d 	.word	0xfffffc0d
 8001f88:	45cb      	cmp	fp, r9
 8001f8a:	d200      	bcs.n	8001f8e <__aeabi_ddiv+0x23a>
 8001f8c:	e0f8      	b.n	8002180 <__aeabi_ddiv+0x42c>
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_ddiv+0x23e>
 8001f90:	e0f3      	b.n	800217a <__aeabi_ddiv+0x426>
 8001f92:	2301      	movs	r3, #1
 8001f94:	425b      	negs	r3, r3
 8001f96:	469c      	mov	ip, r3
 8001f98:	4644      	mov	r4, r8
 8001f9a:	4648      	mov	r0, r9
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	44e2      	add	sl, ip
 8001fa0:	465b      	mov	r3, fp
 8001fa2:	0e17      	lsrs	r7, r2, #24
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	431f      	orrs	r7, r3
 8001fa8:	0c19      	lsrs	r1, r3, #16
 8001faa:	043b      	lsls	r3, r7, #16
 8001fac:	0212      	lsls	r2, r2, #8
 8001fae:	9700      	str	r7, [sp, #0]
 8001fb0:	0c1f      	lsrs	r7, r3, #16
 8001fb2:	4691      	mov	r9, r2
 8001fb4:	9102      	str	r1, [sp, #8]
 8001fb6:	9703      	str	r7, [sp, #12]
 8001fb8:	f7fe f952 	bl	8000260 <__aeabi_uidivmod>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	437a      	muls	r2, r7
 8001fc0:	040b      	lsls	r3, r1, #16
 8001fc2:	0c21      	lsrs	r1, r4, #16
 8001fc4:	4680      	mov	r8, r0
 8001fc6:	4319      	orrs	r1, r3
 8001fc8:	428a      	cmp	r2, r1
 8001fca:	d909      	bls.n	8001fe0 <__aeabi_ddiv+0x28c>
 8001fcc:	9f00      	ldr	r7, [sp, #0]
 8001fce:	2301      	movs	r3, #1
 8001fd0:	46bc      	mov	ip, r7
 8001fd2:	425b      	negs	r3, r3
 8001fd4:	4461      	add	r1, ip
 8001fd6:	469c      	mov	ip, r3
 8001fd8:	44e0      	add	r8, ip
 8001fda:	428f      	cmp	r7, r1
 8001fdc:	d800      	bhi.n	8001fe0 <__aeabi_ddiv+0x28c>
 8001fde:	e15c      	b.n	800229a <__aeabi_ddiv+0x546>
 8001fe0:	1a88      	subs	r0, r1, r2
 8001fe2:	9902      	ldr	r1, [sp, #8]
 8001fe4:	f7fe f93c 	bl	8000260 <__aeabi_uidivmod>
 8001fe8:	9a03      	ldr	r2, [sp, #12]
 8001fea:	0424      	lsls	r4, r4, #16
 8001fec:	4342      	muls	r2, r0
 8001fee:	0409      	lsls	r1, r1, #16
 8001ff0:	0c24      	lsrs	r4, r4, #16
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	430c      	orrs	r4, r1
 8001ff6:	42a2      	cmp	r2, r4
 8001ff8:	d906      	bls.n	8002008 <__aeabi_ddiv+0x2b4>
 8001ffa:	9900      	ldr	r1, [sp, #0]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	468c      	mov	ip, r1
 8002000:	4464      	add	r4, ip
 8002002:	42a1      	cmp	r1, r4
 8002004:	d800      	bhi.n	8002008 <__aeabi_ddiv+0x2b4>
 8002006:	e142      	b.n	800228e <__aeabi_ddiv+0x53a>
 8002008:	1aa0      	subs	r0, r4, r2
 800200a:	4642      	mov	r2, r8
 800200c:	0412      	lsls	r2, r2, #16
 800200e:	431a      	orrs	r2, r3
 8002010:	4693      	mov	fp, r2
 8002012:	464b      	mov	r3, r9
 8002014:	4659      	mov	r1, fp
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	001f      	movs	r7, r3
 800201a:	9304      	str	r3, [sp, #16]
 800201c:	040b      	lsls	r3, r1, #16
 800201e:	4649      	mov	r1, r9
 8002020:	0409      	lsls	r1, r1, #16
 8002022:	0c09      	lsrs	r1, r1, #16
 8002024:	000c      	movs	r4, r1
 8002026:	0c1b      	lsrs	r3, r3, #16
 8002028:	435c      	muls	r4, r3
 800202a:	0c12      	lsrs	r2, r2, #16
 800202c:	437b      	muls	r3, r7
 800202e:	4688      	mov	r8, r1
 8002030:	4351      	muls	r1, r2
 8002032:	437a      	muls	r2, r7
 8002034:	0c27      	lsrs	r7, r4, #16
 8002036:	46bc      	mov	ip, r7
 8002038:	185b      	adds	r3, r3, r1
 800203a:	4463      	add	r3, ip
 800203c:	4299      	cmp	r1, r3
 800203e:	d903      	bls.n	8002048 <__aeabi_ddiv+0x2f4>
 8002040:	2180      	movs	r1, #128	@ 0x80
 8002042:	0249      	lsls	r1, r1, #9
 8002044:	468c      	mov	ip, r1
 8002046:	4462      	add	r2, ip
 8002048:	0c19      	lsrs	r1, r3, #16
 800204a:	0424      	lsls	r4, r4, #16
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	0c24      	lsrs	r4, r4, #16
 8002050:	188a      	adds	r2, r1, r2
 8002052:	191c      	adds	r4, r3, r4
 8002054:	4290      	cmp	r0, r2
 8002056:	d302      	bcc.n	800205e <__aeabi_ddiv+0x30a>
 8002058:	d116      	bne.n	8002088 <__aeabi_ddiv+0x334>
 800205a:	42a5      	cmp	r5, r4
 800205c:	d214      	bcs.n	8002088 <__aeabi_ddiv+0x334>
 800205e:	465b      	mov	r3, fp
 8002060:	9f00      	ldr	r7, [sp, #0]
 8002062:	3b01      	subs	r3, #1
 8002064:	444d      	add	r5, r9
 8002066:	9305      	str	r3, [sp, #20]
 8002068:	454d      	cmp	r5, r9
 800206a:	419b      	sbcs	r3, r3
 800206c:	46bc      	mov	ip, r7
 800206e:	425b      	negs	r3, r3
 8002070:	4463      	add	r3, ip
 8002072:	18c0      	adds	r0, r0, r3
 8002074:	4287      	cmp	r7, r0
 8002076:	d300      	bcc.n	800207a <__aeabi_ddiv+0x326>
 8002078:	e102      	b.n	8002280 <__aeabi_ddiv+0x52c>
 800207a:	4282      	cmp	r2, r0
 800207c:	d900      	bls.n	8002080 <__aeabi_ddiv+0x32c>
 800207e:	e129      	b.n	80022d4 <__aeabi_ddiv+0x580>
 8002080:	d100      	bne.n	8002084 <__aeabi_ddiv+0x330>
 8002082:	e124      	b.n	80022ce <__aeabi_ddiv+0x57a>
 8002084:	9b05      	ldr	r3, [sp, #20]
 8002086:	469b      	mov	fp, r3
 8002088:	1b2c      	subs	r4, r5, r4
 800208a:	42a5      	cmp	r5, r4
 800208c:	41ad      	sbcs	r5, r5
 800208e:	9b00      	ldr	r3, [sp, #0]
 8002090:	1a80      	subs	r0, r0, r2
 8002092:	426d      	negs	r5, r5
 8002094:	1b40      	subs	r0, r0, r5
 8002096:	4283      	cmp	r3, r0
 8002098:	d100      	bne.n	800209c <__aeabi_ddiv+0x348>
 800209a:	e10f      	b.n	80022bc <__aeabi_ddiv+0x568>
 800209c:	9902      	ldr	r1, [sp, #8]
 800209e:	f7fe f8df 	bl	8000260 <__aeabi_uidivmod>
 80020a2:	9a03      	ldr	r2, [sp, #12]
 80020a4:	040b      	lsls	r3, r1, #16
 80020a6:	4342      	muls	r2, r0
 80020a8:	0c21      	lsrs	r1, r4, #16
 80020aa:	0005      	movs	r5, r0
 80020ac:	4319      	orrs	r1, r3
 80020ae:	428a      	cmp	r2, r1
 80020b0:	d900      	bls.n	80020b4 <__aeabi_ddiv+0x360>
 80020b2:	e0cb      	b.n	800224c <__aeabi_ddiv+0x4f8>
 80020b4:	1a88      	subs	r0, r1, r2
 80020b6:	9902      	ldr	r1, [sp, #8]
 80020b8:	f7fe f8d2 	bl	8000260 <__aeabi_uidivmod>
 80020bc:	9a03      	ldr	r2, [sp, #12]
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	4342      	muls	r2, r0
 80020c2:	0409      	lsls	r1, r1, #16
 80020c4:	0c24      	lsrs	r4, r4, #16
 80020c6:	0003      	movs	r3, r0
 80020c8:	430c      	orrs	r4, r1
 80020ca:	42a2      	cmp	r2, r4
 80020cc:	d900      	bls.n	80020d0 <__aeabi_ddiv+0x37c>
 80020ce:	e0ca      	b.n	8002266 <__aeabi_ddiv+0x512>
 80020d0:	4641      	mov	r1, r8
 80020d2:	1aa4      	subs	r4, r4, r2
 80020d4:	042a      	lsls	r2, r5, #16
 80020d6:	431a      	orrs	r2, r3
 80020d8:	9f04      	ldr	r7, [sp, #16]
 80020da:	0413      	lsls	r3, r2, #16
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	4359      	muls	r1, r3
 80020e0:	4640      	mov	r0, r8
 80020e2:	437b      	muls	r3, r7
 80020e4:	469c      	mov	ip, r3
 80020e6:	0c15      	lsrs	r5, r2, #16
 80020e8:	4368      	muls	r0, r5
 80020ea:	0c0b      	lsrs	r3, r1, #16
 80020ec:	4484      	add	ip, r0
 80020ee:	4463      	add	r3, ip
 80020f0:	437d      	muls	r5, r7
 80020f2:	4298      	cmp	r0, r3
 80020f4:	d903      	bls.n	80020fe <__aeabi_ddiv+0x3aa>
 80020f6:	2080      	movs	r0, #128	@ 0x80
 80020f8:	0240      	lsls	r0, r0, #9
 80020fa:	4684      	mov	ip, r0
 80020fc:	4465      	add	r5, ip
 80020fe:	0c18      	lsrs	r0, r3, #16
 8002100:	0409      	lsls	r1, r1, #16
 8002102:	041b      	lsls	r3, r3, #16
 8002104:	0c09      	lsrs	r1, r1, #16
 8002106:	1940      	adds	r0, r0, r5
 8002108:	185b      	adds	r3, r3, r1
 800210a:	4284      	cmp	r4, r0
 800210c:	d327      	bcc.n	800215e <__aeabi_ddiv+0x40a>
 800210e:	d023      	beq.n	8002158 <__aeabi_ddiv+0x404>
 8002110:	2301      	movs	r3, #1
 8002112:	0035      	movs	r5, r6
 8002114:	431a      	orrs	r2, r3
 8002116:	4b94      	ldr	r3, [pc, #592]	@ (8002368 <__aeabi_ddiv+0x614>)
 8002118:	4453      	add	r3, sl
 800211a:	2b00      	cmp	r3, #0
 800211c:	dd60      	ble.n	80021e0 <__aeabi_ddiv+0x48c>
 800211e:	0751      	lsls	r1, r2, #29
 8002120:	d000      	beq.n	8002124 <__aeabi_ddiv+0x3d0>
 8002122:	e086      	b.n	8002232 <__aeabi_ddiv+0x4de>
 8002124:	002e      	movs	r6, r5
 8002126:	08d1      	lsrs	r1, r2, #3
 8002128:	465a      	mov	r2, fp
 800212a:	01d2      	lsls	r2, r2, #7
 800212c:	d506      	bpl.n	800213c <__aeabi_ddiv+0x3e8>
 800212e:	465a      	mov	r2, fp
 8002130:	4b8e      	ldr	r3, [pc, #568]	@ (800236c <__aeabi_ddiv+0x618>)
 8002132:	401a      	ands	r2, r3
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	4693      	mov	fp, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4453      	add	r3, sl
 800213c:	4a8c      	ldr	r2, [pc, #560]	@ (8002370 <__aeabi_ddiv+0x61c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	dd00      	ble.n	8002144 <__aeabi_ddiv+0x3f0>
 8002142:	e680      	b.n	8001e46 <__aeabi_ddiv+0xf2>
 8002144:	465a      	mov	r2, fp
 8002146:	0752      	lsls	r2, r2, #29
 8002148:	430a      	orrs	r2, r1
 800214a:	4690      	mov	r8, r2
 800214c:	465a      	mov	r2, fp
 800214e:	055b      	lsls	r3, r3, #21
 8002150:	0254      	lsls	r4, r2, #9
 8002152:	0b24      	lsrs	r4, r4, #12
 8002154:	0d5b      	lsrs	r3, r3, #21
 8002156:	e669      	b.n	8001e2c <__aeabi_ddiv+0xd8>
 8002158:	0035      	movs	r5, r6
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0db      	beq.n	8002116 <__aeabi_ddiv+0x3c2>
 800215e:	9d00      	ldr	r5, [sp, #0]
 8002160:	1e51      	subs	r1, r2, #1
 8002162:	46ac      	mov	ip, r5
 8002164:	4464      	add	r4, ip
 8002166:	42ac      	cmp	r4, r5
 8002168:	d200      	bcs.n	800216c <__aeabi_ddiv+0x418>
 800216a:	e09e      	b.n	80022aa <__aeabi_ddiv+0x556>
 800216c:	4284      	cmp	r4, r0
 800216e:	d200      	bcs.n	8002172 <__aeabi_ddiv+0x41e>
 8002170:	e0e1      	b.n	8002336 <__aeabi_ddiv+0x5e2>
 8002172:	d100      	bne.n	8002176 <__aeabi_ddiv+0x422>
 8002174:	e0ee      	b.n	8002354 <__aeabi_ddiv+0x600>
 8002176:	000a      	movs	r2, r1
 8002178:	e7ca      	b.n	8002110 <__aeabi_ddiv+0x3bc>
 800217a:	4542      	cmp	r2, r8
 800217c:	d900      	bls.n	8002180 <__aeabi_ddiv+0x42c>
 800217e:	e708      	b.n	8001f92 <__aeabi_ddiv+0x23e>
 8002180:	464b      	mov	r3, r9
 8002182:	07dc      	lsls	r4, r3, #31
 8002184:	0858      	lsrs	r0, r3, #1
 8002186:	4643      	mov	r3, r8
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	431c      	orrs	r4, r3
 800218c:	4643      	mov	r3, r8
 800218e:	07dd      	lsls	r5, r3, #31
 8002190:	e706      	b.n	8001fa0 <__aeabi_ddiv+0x24c>
 8002192:	f001 fa83 	bl	800369c <__clzsi2>
 8002196:	2315      	movs	r3, #21
 8002198:	469c      	mov	ip, r3
 800219a:	4484      	add	ip, r0
 800219c:	0002      	movs	r2, r0
 800219e:	4663      	mov	r3, ip
 80021a0:	3220      	adds	r2, #32
 80021a2:	2b1c      	cmp	r3, #28
 80021a4:	dc00      	bgt.n	80021a8 <__aeabi_ddiv+0x454>
 80021a6:	e692      	b.n	8001ece <__aeabi_ddiv+0x17a>
 80021a8:	0023      	movs	r3, r4
 80021aa:	3808      	subs	r0, #8
 80021ac:	4083      	lsls	r3, r0
 80021ae:	4699      	mov	r9, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	4698      	mov	r8, r3
 80021b4:	e69a      	b.n	8001eec <__aeabi_ddiv+0x198>
 80021b6:	f001 fa71 	bl	800369c <__clzsi2>
 80021ba:	0002      	movs	r2, r0
 80021bc:	0003      	movs	r3, r0
 80021be:	3215      	adds	r2, #21
 80021c0:	3320      	adds	r3, #32
 80021c2:	2a1c      	cmp	r2, #28
 80021c4:	dc00      	bgt.n	80021c8 <__aeabi_ddiv+0x474>
 80021c6:	e65f      	b.n	8001e88 <__aeabi_ddiv+0x134>
 80021c8:	9900      	ldr	r1, [sp, #0]
 80021ca:	3808      	subs	r0, #8
 80021cc:	4081      	lsls	r1, r0
 80021ce:	2200      	movs	r2, #0
 80021d0:	468b      	mov	fp, r1
 80021d2:	e666      	b.n	8001ea2 <__aeabi_ddiv+0x14e>
 80021d4:	2200      	movs	r2, #0
 80021d6:	002e      	movs	r6, r5
 80021d8:	2400      	movs	r4, #0
 80021da:	4690      	mov	r8, r2
 80021dc:	4b65      	ldr	r3, [pc, #404]	@ (8002374 <__aeabi_ddiv+0x620>)
 80021de:	e625      	b.n	8001e2c <__aeabi_ddiv+0xd8>
 80021e0:	002e      	movs	r6, r5
 80021e2:	2101      	movs	r1, #1
 80021e4:	1ac9      	subs	r1, r1, r3
 80021e6:	2938      	cmp	r1, #56	@ 0x38
 80021e8:	dd00      	ble.n	80021ec <__aeabi_ddiv+0x498>
 80021ea:	e61b      	b.n	8001e24 <__aeabi_ddiv+0xd0>
 80021ec:	291f      	cmp	r1, #31
 80021ee:	dc7e      	bgt.n	80022ee <__aeabi_ddiv+0x59a>
 80021f0:	4861      	ldr	r0, [pc, #388]	@ (8002378 <__aeabi_ddiv+0x624>)
 80021f2:	0014      	movs	r4, r2
 80021f4:	4450      	add	r0, sl
 80021f6:	465b      	mov	r3, fp
 80021f8:	4082      	lsls	r2, r0
 80021fa:	4083      	lsls	r3, r0
 80021fc:	40cc      	lsrs	r4, r1
 80021fe:	1e50      	subs	r0, r2, #1
 8002200:	4182      	sbcs	r2, r0
 8002202:	4323      	orrs	r3, r4
 8002204:	431a      	orrs	r2, r3
 8002206:	465b      	mov	r3, fp
 8002208:	40cb      	lsrs	r3, r1
 800220a:	0751      	lsls	r1, r2, #29
 800220c:	d009      	beq.n	8002222 <__aeabi_ddiv+0x4ce>
 800220e:	210f      	movs	r1, #15
 8002210:	4011      	ands	r1, r2
 8002212:	2904      	cmp	r1, #4
 8002214:	d005      	beq.n	8002222 <__aeabi_ddiv+0x4ce>
 8002216:	1d11      	adds	r1, r2, #4
 8002218:	4291      	cmp	r1, r2
 800221a:	4192      	sbcs	r2, r2
 800221c:	4252      	negs	r2, r2
 800221e:	189b      	adds	r3, r3, r2
 8002220:	000a      	movs	r2, r1
 8002222:	0219      	lsls	r1, r3, #8
 8002224:	d400      	bmi.n	8002228 <__aeabi_ddiv+0x4d4>
 8002226:	e09b      	b.n	8002360 <__aeabi_ddiv+0x60c>
 8002228:	2200      	movs	r2, #0
 800222a:	2301      	movs	r3, #1
 800222c:	2400      	movs	r4, #0
 800222e:	4690      	mov	r8, r2
 8002230:	e5fc      	b.n	8001e2c <__aeabi_ddiv+0xd8>
 8002232:	210f      	movs	r1, #15
 8002234:	4011      	ands	r1, r2
 8002236:	2904      	cmp	r1, #4
 8002238:	d100      	bne.n	800223c <__aeabi_ddiv+0x4e8>
 800223a:	e773      	b.n	8002124 <__aeabi_ddiv+0x3d0>
 800223c:	1d11      	adds	r1, r2, #4
 800223e:	4291      	cmp	r1, r2
 8002240:	4192      	sbcs	r2, r2
 8002242:	4252      	negs	r2, r2
 8002244:	002e      	movs	r6, r5
 8002246:	08c9      	lsrs	r1, r1, #3
 8002248:	4493      	add	fp, r2
 800224a:	e76d      	b.n	8002128 <__aeabi_ddiv+0x3d4>
 800224c:	9b00      	ldr	r3, [sp, #0]
 800224e:	3d01      	subs	r5, #1
 8002250:	469c      	mov	ip, r3
 8002252:	4461      	add	r1, ip
 8002254:	428b      	cmp	r3, r1
 8002256:	d900      	bls.n	800225a <__aeabi_ddiv+0x506>
 8002258:	e72c      	b.n	80020b4 <__aeabi_ddiv+0x360>
 800225a:	428a      	cmp	r2, r1
 800225c:	d800      	bhi.n	8002260 <__aeabi_ddiv+0x50c>
 800225e:	e729      	b.n	80020b4 <__aeabi_ddiv+0x360>
 8002260:	1e85      	subs	r5, r0, #2
 8002262:	4461      	add	r1, ip
 8002264:	e726      	b.n	80020b4 <__aeabi_ddiv+0x360>
 8002266:	9900      	ldr	r1, [sp, #0]
 8002268:	3b01      	subs	r3, #1
 800226a:	468c      	mov	ip, r1
 800226c:	4464      	add	r4, ip
 800226e:	42a1      	cmp	r1, r4
 8002270:	d900      	bls.n	8002274 <__aeabi_ddiv+0x520>
 8002272:	e72d      	b.n	80020d0 <__aeabi_ddiv+0x37c>
 8002274:	42a2      	cmp	r2, r4
 8002276:	d800      	bhi.n	800227a <__aeabi_ddiv+0x526>
 8002278:	e72a      	b.n	80020d0 <__aeabi_ddiv+0x37c>
 800227a:	1e83      	subs	r3, r0, #2
 800227c:	4464      	add	r4, ip
 800227e:	e727      	b.n	80020d0 <__aeabi_ddiv+0x37c>
 8002280:	4287      	cmp	r7, r0
 8002282:	d000      	beq.n	8002286 <__aeabi_ddiv+0x532>
 8002284:	e6fe      	b.n	8002084 <__aeabi_ddiv+0x330>
 8002286:	45a9      	cmp	r9, r5
 8002288:	d900      	bls.n	800228c <__aeabi_ddiv+0x538>
 800228a:	e6fb      	b.n	8002084 <__aeabi_ddiv+0x330>
 800228c:	e6f5      	b.n	800207a <__aeabi_ddiv+0x326>
 800228e:	42a2      	cmp	r2, r4
 8002290:	d800      	bhi.n	8002294 <__aeabi_ddiv+0x540>
 8002292:	e6b9      	b.n	8002008 <__aeabi_ddiv+0x2b4>
 8002294:	1e83      	subs	r3, r0, #2
 8002296:	4464      	add	r4, ip
 8002298:	e6b6      	b.n	8002008 <__aeabi_ddiv+0x2b4>
 800229a:	428a      	cmp	r2, r1
 800229c:	d800      	bhi.n	80022a0 <__aeabi_ddiv+0x54c>
 800229e:	e69f      	b.n	8001fe0 <__aeabi_ddiv+0x28c>
 80022a0:	46bc      	mov	ip, r7
 80022a2:	1e83      	subs	r3, r0, #2
 80022a4:	4698      	mov	r8, r3
 80022a6:	4461      	add	r1, ip
 80022a8:	e69a      	b.n	8001fe0 <__aeabi_ddiv+0x28c>
 80022aa:	000a      	movs	r2, r1
 80022ac:	4284      	cmp	r4, r0
 80022ae:	d000      	beq.n	80022b2 <__aeabi_ddiv+0x55e>
 80022b0:	e72e      	b.n	8002110 <__aeabi_ddiv+0x3bc>
 80022b2:	454b      	cmp	r3, r9
 80022b4:	d000      	beq.n	80022b8 <__aeabi_ddiv+0x564>
 80022b6:	e72b      	b.n	8002110 <__aeabi_ddiv+0x3bc>
 80022b8:	0035      	movs	r5, r6
 80022ba:	e72c      	b.n	8002116 <__aeabi_ddiv+0x3c2>
 80022bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002368 <__aeabi_ddiv+0x614>)
 80022be:	4a2f      	ldr	r2, [pc, #188]	@ (800237c <__aeabi_ddiv+0x628>)
 80022c0:	4453      	add	r3, sl
 80022c2:	4592      	cmp	sl, r2
 80022c4:	db43      	blt.n	800234e <__aeabi_ddiv+0x5fa>
 80022c6:	2201      	movs	r2, #1
 80022c8:	2100      	movs	r1, #0
 80022ca:	4493      	add	fp, r2
 80022cc:	e72c      	b.n	8002128 <__aeabi_ddiv+0x3d4>
 80022ce:	42ac      	cmp	r4, r5
 80022d0:	d800      	bhi.n	80022d4 <__aeabi_ddiv+0x580>
 80022d2:	e6d7      	b.n	8002084 <__aeabi_ddiv+0x330>
 80022d4:	2302      	movs	r3, #2
 80022d6:	425b      	negs	r3, r3
 80022d8:	469c      	mov	ip, r3
 80022da:	9900      	ldr	r1, [sp, #0]
 80022dc:	444d      	add	r5, r9
 80022de:	454d      	cmp	r5, r9
 80022e0:	419b      	sbcs	r3, r3
 80022e2:	44e3      	add	fp, ip
 80022e4:	468c      	mov	ip, r1
 80022e6:	425b      	negs	r3, r3
 80022e8:	4463      	add	r3, ip
 80022ea:	18c0      	adds	r0, r0, r3
 80022ec:	e6cc      	b.n	8002088 <__aeabi_ddiv+0x334>
 80022ee:	201f      	movs	r0, #31
 80022f0:	4240      	negs	r0, r0
 80022f2:	1ac3      	subs	r3, r0, r3
 80022f4:	4658      	mov	r0, fp
 80022f6:	40d8      	lsrs	r0, r3
 80022f8:	2920      	cmp	r1, #32
 80022fa:	d004      	beq.n	8002306 <__aeabi_ddiv+0x5b2>
 80022fc:	4659      	mov	r1, fp
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <__aeabi_ddiv+0x62c>)
 8002300:	4453      	add	r3, sl
 8002302:	4099      	lsls	r1, r3
 8002304:	430a      	orrs	r2, r1
 8002306:	1e53      	subs	r3, r2, #1
 8002308:	419a      	sbcs	r2, r3
 800230a:	2307      	movs	r3, #7
 800230c:	0019      	movs	r1, r3
 800230e:	4302      	orrs	r2, r0
 8002310:	2400      	movs	r4, #0
 8002312:	4011      	ands	r1, r2
 8002314:	4213      	tst	r3, r2
 8002316:	d009      	beq.n	800232c <__aeabi_ddiv+0x5d8>
 8002318:	3308      	adds	r3, #8
 800231a:	4013      	ands	r3, r2
 800231c:	2b04      	cmp	r3, #4
 800231e:	d01d      	beq.n	800235c <__aeabi_ddiv+0x608>
 8002320:	1d13      	adds	r3, r2, #4
 8002322:	4293      	cmp	r3, r2
 8002324:	4189      	sbcs	r1, r1
 8002326:	001a      	movs	r2, r3
 8002328:	4249      	negs	r1, r1
 800232a:	0749      	lsls	r1, r1, #29
 800232c:	08d2      	lsrs	r2, r2, #3
 800232e:	430a      	orrs	r2, r1
 8002330:	4690      	mov	r8, r2
 8002332:	2300      	movs	r3, #0
 8002334:	e57a      	b.n	8001e2c <__aeabi_ddiv+0xd8>
 8002336:	4649      	mov	r1, r9
 8002338:	9f00      	ldr	r7, [sp, #0]
 800233a:	004d      	lsls	r5, r1, #1
 800233c:	454d      	cmp	r5, r9
 800233e:	4189      	sbcs	r1, r1
 8002340:	46bc      	mov	ip, r7
 8002342:	4249      	negs	r1, r1
 8002344:	4461      	add	r1, ip
 8002346:	46a9      	mov	r9, r5
 8002348:	3a02      	subs	r2, #2
 800234a:	1864      	adds	r4, r4, r1
 800234c:	e7ae      	b.n	80022ac <__aeabi_ddiv+0x558>
 800234e:	2201      	movs	r2, #1
 8002350:	4252      	negs	r2, r2
 8002352:	e746      	b.n	80021e2 <__aeabi_ddiv+0x48e>
 8002354:	4599      	cmp	r9, r3
 8002356:	d3ee      	bcc.n	8002336 <__aeabi_ddiv+0x5e2>
 8002358:	000a      	movs	r2, r1
 800235a:	e7aa      	b.n	80022b2 <__aeabi_ddiv+0x55e>
 800235c:	2100      	movs	r1, #0
 800235e:	e7e5      	b.n	800232c <__aeabi_ddiv+0x5d8>
 8002360:	0759      	lsls	r1, r3, #29
 8002362:	025b      	lsls	r3, r3, #9
 8002364:	0b1c      	lsrs	r4, r3, #12
 8002366:	e7e1      	b.n	800232c <__aeabi_ddiv+0x5d8>
 8002368:	000003ff 	.word	0x000003ff
 800236c:	feffffff 	.word	0xfeffffff
 8002370:	000007fe 	.word	0x000007fe
 8002374:	000007ff 	.word	0x000007ff
 8002378:	0000041e 	.word	0x0000041e
 800237c:	fffffc02 	.word	0xfffffc02
 8002380:	0000043e 	.word	0x0000043e

08002384 <__eqdf2>:
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	4657      	mov	r7, sl
 8002388:	46de      	mov	lr, fp
 800238a:	464e      	mov	r6, r9
 800238c:	4645      	mov	r5, r8
 800238e:	b5e0      	push	{r5, r6, r7, lr}
 8002390:	000d      	movs	r5, r1
 8002392:	0004      	movs	r4, r0
 8002394:	0fe8      	lsrs	r0, r5, #31
 8002396:	4683      	mov	fp, r0
 8002398:	0309      	lsls	r1, r1, #12
 800239a:	0fd8      	lsrs	r0, r3, #31
 800239c:	0b09      	lsrs	r1, r1, #12
 800239e:	4682      	mov	sl, r0
 80023a0:	4819      	ldr	r0, [pc, #100]	@ (8002408 <__eqdf2+0x84>)
 80023a2:	468c      	mov	ip, r1
 80023a4:	031f      	lsls	r7, r3, #12
 80023a6:	0069      	lsls	r1, r5, #1
 80023a8:	005e      	lsls	r6, r3, #1
 80023aa:	0d49      	lsrs	r1, r1, #21
 80023ac:	0b3f      	lsrs	r7, r7, #12
 80023ae:	0d76      	lsrs	r6, r6, #21
 80023b0:	4281      	cmp	r1, r0
 80023b2:	d018      	beq.n	80023e6 <__eqdf2+0x62>
 80023b4:	4286      	cmp	r6, r0
 80023b6:	d00f      	beq.n	80023d8 <__eqdf2+0x54>
 80023b8:	2001      	movs	r0, #1
 80023ba:	42b1      	cmp	r1, r6
 80023bc:	d10d      	bne.n	80023da <__eqdf2+0x56>
 80023be:	45bc      	cmp	ip, r7
 80023c0:	d10b      	bne.n	80023da <__eqdf2+0x56>
 80023c2:	4294      	cmp	r4, r2
 80023c4:	d109      	bne.n	80023da <__eqdf2+0x56>
 80023c6:	45d3      	cmp	fp, sl
 80023c8:	d01c      	beq.n	8002404 <__eqdf2+0x80>
 80023ca:	2900      	cmp	r1, #0
 80023cc:	d105      	bne.n	80023da <__eqdf2+0x56>
 80023ce:	4660      	mov	r0, ip
 80023d0:	4320      	orrs	r0, r4
 80023d2:	1e43      	subs	r3, r0, #1
 80023d4:	4198      	sbcs	r0, r3
 80023d6:	e000      	b.n	80023da <__eqdf2+0x56>
 80023d8:	2001      	movs	r0, #1
 80023da:	bcf0      	pop	{r4, r5, r6, r7}
 80023dc:	46bb      	mov	fp, r7
 80023de:	46b2      	mov	sl, r6
 80023e0:	46a9      	mov	r9, r5
 80023e2:	46a0      	mov	r8, r4
 80023e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e6:	2001      	movs	r0, #1
 80023e8:	428e      	cmp	r6, r1
 80023ea:	d1f6      	bne.n	80023da <__eqdf2+0x56>
 80023ec:	4661      	mov	r1, ip
 80023ee:	4339      	orrs	r1, r7
 80023f0:	000f      	movs	r7, r1
 80023f2:	4317      	orrs	r7, r2
 80023f4:	4327      	orrs	r7, r4
 80023f6:	d1f0      	bne.n	80023da <__eqdf2+0x56>
 80023f8:	465b      	mov	r3, fp
 80023fa:	4652      	mov	r2, sl
 80023fc:	1a98      	subs	r0, r3, r2
 80023fe:	1e43      	subs	r3, r0, #1
 8002400:	4198      	sbcs	r0, r3
 8002402:	e7ea      	b.n	80023da <__eqdf2+0x56>
 8002404:	2000      	movs	r0, #0
 8002406:	e7e8      	b.n	80023da <__eqdf2+0x56>
 8002408:	000007ff 	.word	0x000007ff

0800240c <__gedf2>:
 800240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240e:	4657      	mov	r7, sl
 8002410:	464e      	mov	r6, r9
 8002412:	4645      	mov	r5, r8
 8002414:	46de      	mov	lr, fp
 8002416:	b5e0      	push	{r5, r6, r7, lr}
 8002418:	000d      	movs	r5, r1
 800241a:	030e      	lsls	r6, r1, #12
 800241c:	0049      	lsls	r1, r1, #1
 800241e:	0d49      	lsrs	r1, r1, #21
 8002420:	468a      	mov	sl, r1
 8002422:	0fdf      	lsrs	r7, r3, #31
 8002424:	0fe9      	lsrs	r1, r5, #31
 8002426:	46bc      	mov	ip, r7
 8002428:	b083      	sub	sp, #12
 800242a:	4f2f      	ldr	r7, [pc, #188]	@ (80024e8 <__gedf2+0xdc>)
 800242c:	0004      	movs	r4, r0
 800242e:	4680      	mov	r8, r0
 8002430:	9101      	str	r1, [sp, #4]
 8002432:	0058      	lsls	r0, r3, #1
 8002434:	0319      	lsls	r1, r3, #12
 8002436:	4691      	mov	r9, r2
 8002438:	0b36      	lsrs	r6, r6, #12
 800243a:	0b09      	lsrs	r1, r1, #12
 800243c:	0d40      	lsrs	r0, r0, #21
 800243e:	45ba      	cmp	sl, r7
 8002440:	d01d      	beq.n	800247e <__gedf2+0x72>
 8002442:	42b8      	cmp	r0, r7
 8002444:	d00d      	beq.n	8002462 <__gedf2+0x56>
 8002446:	4657      	mov	r7, sl
 8002448:	2f00      	cmp	r7, #0
 800244a:	d12a      	bne.n	80024a2 <__gedf2+0x96>
 800244c:	4334      	orrs	r4, r6
 800244e:	2800      	cmp	r0, #0
 8002450:	d124      	bne.n	800249c <__gedf2+0x90>
 8002452:	430a      	orrs	r2, r1
 8002454:	d036      	beq.n	80024c4 <__gedf2+0xb8>
 8002456:	2c00      	cmp	r4, #0
 8002458:	d141      	bne.n	80024de <__gedf2+0xd2>
 800245a:	4663      	mov	r3, ip
 800245c:	0058      	lsls	r0, r3, #1
 800245e:	3801      	subs	r0, #1
 8002460:	e015      	b.n	800248e <__gedf2+0x82>
 8002462:	4311      	orrs	r1, r2
 8002464:	d138      	bne.n	80024d8 <__gedf2+0xcc>
 8002466:	4653      	mov	r3, sl
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <__gedf2+0x64>
 800246c:	4326      	orrs	r6, r4
 800246e:	d0f4      	beq.n	800245a <__gedf2+0x4e>
 8002470:	9b01      	ldr	r3, [sp, #4]
 8002472:	4563      	cmp	r3, ip
 8002474:	d107      	bne.n	8002486 <__gedf2+0x7a>
 8002476:	9b01      	ldr	r3, [sp, #4]
 8002478:	0058      	lsls	r0, r3, #1
 800247a:	3801      	subs	r0, #1
 800247c:	e007      	b.n	800248e <__gedf2+0x82>
 800247e:	4326      	orrs	r6, r4
 8002480:	d12a      	bne.n	80024d8 <__gedf2+0xcc>
 8002482:	4550      	cmp	r0, sl
 8002484:	d021      	beq.n	80024ca <__gedf2+0xbe>
 8002486:	2001      	movs	r0, #1
 8002488:	9b01      	ldr	r3, [sp, #4]
 800248a:	425f      	negs	r7, r3
 800248c:	4338      	orrs	r0, r7
 800248e:	b003      	add	sp, #12
 8002490:	bcf0      	pop	{r4, r5, r6, r7}
 8002492:	46bb      	mov	fp, r7
 8002494:	46b2      	mov	sl, r6
 8002496:	46a9      	mov	r9, r5
 8002498:	46a0      	mov	r8, r4
 800249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800249c:	2c00      	cmp	r4, #0
 800249e:	d0dc      	beq.n	800245a <__gedf2+0x4e>
 80024a0:	e7e6      	b.n	8002470 <__gedf2+0x64>
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d0ef      	beq.n	8002486 <__gedf2+0x7a>
 80024a6:	9b01      	ldr	r3, [sp, #4]
 80024a8:	4563      	cmp	r3, ip
 80024aa:	d1ec      	bne.n	8002486 <__gedf2+0x7a>
 80024ac:	4582      	cmp	sl, r0
 80024ae:	dcea      	bgt.n	8002486 <__gedf2+0x7a>
 80024b0:	dbe1      	blt.n	8002476 <__gedf2+0x6a>
 80024b2:	428e      	cmp	r6, r1
 80024b4:	d8e7      	bhi.n	8002486 <__gedf2+0x7a>
 80024b6:	d1de      	bne.n	8002476 <__gedf2+0x6a>
 80024b8:	45c8      	cmp	r8, r9
 80024ba:	d8e4      	bhi.n	8002486 <__gedf2+0x7a>
 80024bc:	2000      	movs	r0, #0
 80024be:	45c8      	cmp	r8, r9
 80024c0:	d2e5      	bcs.n	800248e <__gedf2+0x82>
 80024c2:	e7d8      	b.n	8002476 <__gedf2+0x6a>
 80024c4:	2c00      	cmp	r4, #0
 80024c6:	d0e2      	beq.n	800248e <__gedf2+0x82>
 80024c8:	e7dd      	b.n	8002486 <__gedf2+0x7a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d104      	bne.n	80024d8 <__gedf2+0xcc>
 80024ce:	9b01      	ldr	r3, [sp, #4]
 80024d0:	4563      	cmp	r3, ip
 80024d2:	d1d8      	bne.n	8002486 <__gedf2+0x7a>
 80024d4:	2000      	movs	r0, #0
 80024d6:	e7da      	b.n	800248e <__gedf2+0x82>
 80024d8:	2002      	movs	r0, #2
 80024da:	4240      	negs	r0, r0
 80024dc:	e7d7      	b.n	800248e <__gedf2+0x82>
 80024de:	9b01      	ldr	r3, [sp, #4]
 80024e0:	4563      	cmp	r3, ip
 80024e2:	d0e6      	beq.n	80024b2 <__gedf2+0xa6>
 80024e4:	e7cf      	b.n	8002486 <__gedf2+0x7a>
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	000007ff 	.word	0x000007ff

080024ec <__ledf2>:
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ee:	4657      	mov	r7, sl
 80024f0:	464e      	mov	r6, r9
 80024f2:	4645      	mov	r5, r8
 80024f4:	46de      	mov	lr, fp
 80024f6:	b5e0      	push	{r5, r6, r7, lr}
 80024f8:	000d      	movs	r5, r1
 80024fa:	030e      	lsls	r6, r1, #12
 80024fc:	0049      	lsls	r1, r1, #1
 80024fe:	0d49      	lsrs	r1, r1, #21
 8002500:	468a      	mov	sl, r1
 8002502:	0fdf      	lsrs	r7, r3, #31
 8002504:	0fe9      	lsrs	r1, r5, #31
 8002506:	46bc      	mov	ip, r7
 8002508:	b083      	sub	sp, #12
 800250a:	4f2e      	ldr	r7, [pc, #184]	@ (80025c4 <__ledf2+0xd8>)
 800250c:	0004      	movs	r4, r0
 800250e:	4680      	mov	r8, r0
 8002510:	9101      	str	r1, [sp, #4]
 8002512:	0058      	lsls	r0, r3, #1
 8002514:	0319      	lsls	r1, r3, #12
 8002516:	4691      	mov	r9, r2
 8002518:	0b36      	lsrs	r6, r6, #12
 800251a:	0b09      	lsrs	r1, r1, #12
 800251c:	0d40      	lsrs	r0, r0, #21
 800251e:	45ba      	cmp	sl, r7
 8002520:	d01e      	beq.n	8002560 <__ledf2+0x74>
 8002522:	42b8      	cmp	r0, r7
 8002524:	d00d      	beq.n	8002542 <__ledf2+0x56>
 8002526:	4657      	mov	r7, sl
 8002528:	2f00      	cmp	r7, #0
 800252a:	d127      	bne.n	800257c <__ledf2+0x90>
 800252c:	4334      	orrs	r4, r6
 800252e:	2800      	cmp	r0, #0
 8002530:	d133      	bne.n	800259a <__ledf2+0xae>
 8002532:	430a      	orrs	r2, r1
 8002534:	d034      	beq.n	80025a0 <__ledf2+0xb4>
 8002536:	2c00      	cmp	r4, #0
 8002538:	d140      	bne.n	80025bc <__ledf2+0xd0>
 800253a:	4663      	mov	r3, ip
 800253c:	0058      	lsls	r0, r3, #1
 800253e:	3801      	subs	r0, #1
 8002540:	e015      	b.n	800256e <__ledf2+0x82>
 8002542:	4311      	orrs	r1, r2
 8002544:	d112      	bne.n	800256c <__ledf2+0x80>
 8002546:	4653      	mov	r3, sl
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <__ledf2+0x64>
 800254c:	4326      	orrs	r6, r4
 800254e:	d0f4      	beq.n	800253a <__ledf2+0x4e>
 8002550:	9b01      	ldr	r3, [sp, #4]
 8002552:	4563      	cmp	r3, ip
 8002554:	d01d      	beq.n	8002592 <__ledf2+0xa6>
 8002556:	2001      	movs	r0, #1
 8002558:	9b01      	ldr	r3, [sp, #4]
 800255a:	425f      	negs	r7, r3
 800255c:	4338      	orrs	r0, r7
 800255e:	e006      	b.n	800256e <__ledf2+0x82>
 8002560:	4326      	orrs	r6, r4
 8002562:	d103      	bne.n	800256c <__ledf2+0x80>
 8002564:	4550      	cmp	r0, sl
 8002566:	d1f6      	bne.n	8002556 <__ledf2+0x6a>
 8002568:	4311      	orrs	r1, r2
 800256a:	d01c      	beq.n	80025a6 <__ledf2+0xba>
 800256c:	2002      	movs	r0, #2
 800256e:	b003      	add	sp, #12
 8002570:	bcf0      	pop	{r4, r5, r6, r7}
 8002572:	46bb      	mov	fp, r7
 8002574:	46b2      	mov	sl, r6
 8002576:	46a9      	mov	r9, r5
 8002578:	46a0      	mov	r8, r4
 800257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800257c:	2800      	cmp	r0, #0
 800257e:	d0ea      	beq.n	8002556 <__ledf2+0x6a>
 8002580:	9b01      	ldr	r3, [sp, #4]
 8002582:	4563      	cmp	r3, ip
 8002584:	d1e7      	bne.n	8002556 <__ledf2+0x6a>
 8002586:	4582      	cmp	sl, r0
 8002588:	dce5      	bgt.n	8002556 <__ledf2+0x6a>
 800258a:	db02      	blt.n	8002592 <__ledf2+0xa6>
 800258c:	428e      	cmp	r6, r1
 800258e:	d8e2      	bhi.n	8002556 <__ledf2+0x6a>
 8002590:	d00e      	beq.n	80025b0 <__ledf2+0xc4>
 8002592:	9b01      	ldr	r3, [sp, #4]
 8002594:	0058      	lsls	r0, r3, #1
 8002596:	3801      	subs	r0, #1
 8002598:	e7e9      	b.n	800256e <__ledf2+0x82>
 800259a:	2c00      	cmp	r4, #0
 800259c:	d0cd      	beq.n	800253a <__ledf2+0x4e>
 800259e:	e7d7      	b.n	8002550 <__ledf2+0x64>
 80025a0:	2c00      	cmp	r4, #0
 80025a2:	d0e4      	beq.n	800256e <__ledf2+0x82>
 80025a4:	e7d7      	b.n	8002556 <__ledf2+0x6a>
 80025a6:	9b01      	ldr	r3, [sp, #4]
 80025a8:	2000      	movs	r0, #0
 80025aa:	4563      	cmp	r3, ip
 80025ac:	d0df      	beq.n	800256e <__ledf2+0x82>
 80025ae:	e7d2      	b.n	8002556 <__ledf2+0x6a>
 80025b0:	45c8      	cmp	r8, r9
 80025b2:	d8d0      	bhi.n	8002556 <__ledf2+0x6a>
 80025b4:	2000      	movs	r0, #0
 80025b6:	45c8      	cmp	r8, r9
 80025b8:	d2d9      	bcs.n	800256e <__ledf2+0x82>
 80025ba:	e7ea      	b.n	8002592 <__ledf2+0xa6>
 80025bc:	9b01      	ldr	r3, [sp, #4]
 80025be:	4563      	cmp	r3, ip
 80025c0:	d0e4      	beq.n	800258c <__ledf2+0xa0>
 80025c2:	e7c8      	b.n	8002556 <__ledf2+0x6a>
 80025c4:	000007ff 	.word	0x000007ff

080025c8 <__aeabi_dmul>:
 80025c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ca:	4657      	mov	r7, sl
 80025cc:	464e      	mov	r6, r9
 80025ce:	46de      	mov	lr, fp
 80025d0:	4645      	mov	r5, r8
 80025d2:	b5e0      	push	{r5, r6, r7, lr}
 80025d4:	001f      	movs	r7, r3
 80025d6:	030b      	lsls	r3, r1, #12
 80025d8:	0b1b      	lsrs	r3, r3, #12
 80025da:	0016      	movs	r6, r2
 80025dc:	469a      	mov	sl, r3
 80025de:	0fca      	lsrs	r2, r1, #31
 80025e0:	004b      	lsls	r3, r1, #1
 80025e2:	0004      	movs	r4, r0
 80025e4:	4691      	mov	r9, r2
 80025e6:	b085      	sub	sp, #20
 80025e8:	0d5b      	lsrs	r3, r3, #21
 80025ea:	d100      	bne.n	80025ee <__aeabi_dmul+0x26>
 80025ec:	e1cf      	b.n	800298e <__aeabi_dmul+0x3c6>
 80025ee:	4acd      	ldr	r2, [pc, #820]	@ (8002924 <__aeabi_dmul+0x35c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d055      	beq.n	80026a0 <__aeabi_dmul+0xd8>
 80025f4:	4651      	mov	r1, sl
 80025f6:	0f42      	lsrs	r2, r0, #29
 80025f8:	00c9      	lsls	r1, r1, #3
 80025fa:	430a      	orrs	r2, r1
 80025fc:	2180      	movs	r1, #128	@ 0x80
 80025fe:	0409      	lsls	r1, r1, #16
 8002600:	4311      	orrs	r1, r2
 8002602:	00c2      	lsls	r2, r0, #3
 8002604:	4690      	mov	r8, r2
 8002606:	4ac8      	ldr	r2, [pc, #800]	@ (8002928 <__aeabi_dmul+0x360>)
 8002608:	468a      	mov	sl, r1
 800260a:	4693      	mov	fp, r2
 800260c:	449b      	add	fp, r3
 800260e:	2300      	movs	r3, #0
 8002610:	2500      	movs	r5, #0
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	033c      	lsls	r4, r7, #12
 8002616:	007b      	lsls	r3, r7, #1
 8002618:	0ffa      	lsrs	r2, r7, #31
 800261a:	9601      	str	r6, [sp, #4]
 800261c:	0b24      	lsrs	r4, r4, #12
 800261e:	0d5b      	lsrs	r3, r3, #21
 8002620:	9200      	str	r2, [sp, #0]
 8002622:	d100      	bne.n	8002626 <__aeabi_dmul+0x5e>
 8002624:	e188      	b.n	8002938 <__aeabi_dmul+0x370>
 8002626:	4abf      	ldr	r2, [pc, #764]	@ (8002924 <__aeabi_dmul+0x35c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d100      	bne.n	800262e <__aeabi_dmul+0x66>
 800262c:	e092      	b.n	8002754 <__aeabi_dmul+0x18c>
 800262e:	4abe      	ldr	r2, [pc, #760]	@ (8002928 <__aeabi_dmul+0x360>)
 8002630:	4694      	mov	ip, r2
 8002632:	4463      	add	r3, ip
 8002634:	449b      	add	fp, r3
 8002636:	2d0a      	cmp	r5, #10
 8002638:	dc42      	bgt.n	80026c0 <__aeabi_dmul+0xf8>
 800263a:	00e4      	lsls	r4, r4, #3
 800263c:	0f73      	lsrs	r3, r6, #29
 800263e:	4323      	orrs	r3, r4
 8002640:	2480      	movs	r4, #128	@ 0x80
 8002642:	4649      	mov	r1, r9
 8002644:	0424      	lsls	r4, r4, #16
 8002646:	431c      	orrs	r4, r3
 8002648:	00f3      	lsls	r3, r6, #3
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	9b00      	ldr	r3, [sp, #0]
 800264e:	2000      	movs	r0, #0
 8002650:	4059      	eors	r1, r3
 8002652:	b2cb      	uxtb	r3, r1
 8002654:	9303      	str	r3, [sp, #12]
 8002656:	2d02      	cmp	r5, #2
 8002658:	dc00      	bgt.n	800265c <__aeabi_dmul+0x94>
 800265a:	e094      	b.n	8002786 <__aeabi_dmul+0x1be>
 800265c:	2301      	movs	r3, #1
 800265e:	40ab      	lsls	r3, r5
 8002660:	001d      	movs	r5, r3
 8002662:	23a6      	movs	r3, #166	@ 0xa6
 8002664:	002a      	movs	r2, r5
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	401a      	ands	r2, r3
 800266a:	421d      	tst	r5, r3
 800266c:	d000      	beq.n	8002670 <__aeabi_dmul+0xa8>
 800266e:	e229      	b.n	8002ac4 <__aeabi_dmul+0x4fc>
 8002670:	2390      	movs	r3, #144	@ 0x90
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	421d      	tst	r5, r3
 8002676:	d100      	bne.n	800267a <__aeabi_dmul+0xb2>
 8002678:	e24d      	b.n	8002b16 <__aeabi_dmul+0x54e>
 800267a:	2300      	movs	r3, #0
 800267c:	2480      	movs	r4, #128	@ 0x80
 800267e:	4699      	mov	r9, r3
 8002680:	0324      	lsls	r4, r4, #12
 8002682:	4ba8      	ldr	r3, [pc, #672]	@ (8002924 <__aeabi_dmul+0x35c>)
 8002684:	0010      	movs	r0, r2
 8002686:	464a      	mov	r2, r9
 8002688:	051b      	lsls	r3, r3, #20
 800268a:	4323      	orrs	r3, r4
 800268c:	07d2      	lsls	r2, r2, #31
 800268e:	4313      	orrs	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	b005      	add	sp, #20
 8002694:	bcf0      	pop	{r4, r5, r6, r7}
 8002696:	46bb      	mov	fp, r7
 8002698:	46b2      	mov	sl, r6
 800269a:	46a9      	mov	r9, r5
 800269c:	46a0      	mov	r8, r4
 800269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a0:	4652      	mov	r2, sl
 80026a2:	4302      	orrs	r2, r0
 80026a4:	4690      	mov	r8, r2
 80026a6:	d000      	beq.n	80026aa <__aeabi_dmul+0xe2>
 80026a8:	e1ac      	b.n	8002a04 <__aeabi_dmul+0x43c>
 80026aa:	469b      	mov	fp, r3
 80026ac:	2302      	movs	r3, #2
 80026ae:	4692      	mov	sl, r2
 80026b0:	2508      	movs	r5, #8
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	e7ae      	b.n	8002614 <__aeabi_dmul+0x4c>
 80026b6:	9b00      	ldr	r3, [sp, #0]
 80026b8:	46a2      	mov	sl, r4
 80026ba:	4699      	mov	r9, r3
 80026bc:	9b01      	ldr	r3, [sp, #4]
 80026be:	4698      	mov	r8, r3
 80026c0:	9b02      	ldr	r3, [sp, #8]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d100      	bne.n	80026c8 <__aeabi_dmul+0x100>
 80026c6:	e1ca      	b.n	8002a5e <__aeabi_dmul+0x496>
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d100      	bne.n	80026ce <__aeabi_dmul+0x106>
 80026cc:	e192      	b.n	80029f4 <__aeabi_dmul+0x42c>
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d110      	bne.n	80026f4 <__aeabi_dmul+0x12c>
 80026d2:	2300      	movs	r3, #0
 80026d4:	2400      	movs	r4, #0
 80026d6:	2200      	movs	r2, #0
 80026d8:	e7d4      	b.n	8002684 <__aeabi_dmul+0xbc>
 80026da:	2201      	movs	r2, #1
 80026dc:	087b      	lsrs	r3, r7, #1
 80026de:	403a      	ands	r2, r7
 80026e0:	4313      	orrs	r3, r2
 80026e2:	4652      	mov	r2, sl
 80026e4:	07d2      	lsls	r2, r2, #31
 80026e6:	4313      	orrs	r3, r2
 80026e8:	4698      	mov	r8, r3
 80026ea:	4653      	mov	r3, sl
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	469a      	mov	sl, r3
 80026f0:	9b03      	ldr	r3, [sp, #12]
 80026f2:	4699      	mov	r9, r3
 80026f4:	465b      	mov	r3, fp
 80026f6:	1c58      	adds	r0, r3, #1
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	445b      	add	r3, fp
 80026fe:	2b00      	cmp	r3, #0
 8002700:	dc00      	bgt.n	8002704 <__aeabi_dmul+0x13c>
 8002702:	e1b1      	b.n	8002a68 <__aeabi_dmul+0x4a0>
 8002704:	4642      	mov	r2, r8
 8002706:	0752      	lsls	r2, r2, #29
 8002708:	d00b      	beq.n	8002722 <__aeabi_dmul+0x15a>
 800270a:	220f      	movs	r2, #15
 800270c:	4641      	mov	r1, r8
 800270e:	400a      	ands	r2, r1
 8002710:	2a04      	cmp	r2, #4
 8002712:	d006      	beq.n	8002722 <__aeabi_dmul+0x15a>
 8002714:	4642      	mov	r2, r8
 8002716:	1d11      	adds	r1, r2, #4
 8002718:	4541      	cmp	r1, r8
 800271a:	4192      	sbcs	r2, r2
 800271c:	4688      	mov	r8, r1
 800271e:	4252      	negs	r2, r2
 8002720:	4492      	add	sl, r2
 8002722:	4652      	mov	r2, sl
 8002724:	01d2      	lsls	r2, r2, #7
 8002726:	d506      	bpl.n	8002736 <__aeabi_dmul+0x16e>
 8002728:	4652      	mov	r2, sl
 800272a:	4b80      	ldr	r3, [pc, #512]	@ (800292c <__aeabi_dmul+0x364>)
 800272c:	401a      	ands	r2, r3
 800272e:	2380      	movs	r3, #128	@ 0x80
 8002730:	4692      	mov	sl, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	18c3      	adds	r3, r0, r3
 8002736:	4a7e      	ldr	r2, [pc, #504]	@ (8002930 <__aeabi_dmul+0x368>)
 8002738:	4293      	cmp	r3, r2
 800273a:	dd00      	ble.n	800273e <__aeabi_dmul+0x176>
 800273c:	e18f      	b.n	8002a5e <__aeabi_dmul+0x496>
 800273e:	4642      	mov	r2, r8
 8002740:	08d1      	lsrs	r1, r2, #3
 8002742:	4652      	mov	r2, sl
 8002744:	0752      	lsls	r2, r2, #29
 8002746:	430a      	orrs	r2, r1
 8002748:	4651      	mov	r1, sl
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	024c      	lsls	r4, r1, #9
 800274e:	0b24      	lsrs	r4, r4, #12
 8002750:	0d5b      	lsrs	r3, r3, #21
 8002752:	e797      	b.n	8002684 <__aeabi_dmul+0xbc>
 8002754:	4b73      	ldr	r3, [pc, #460]	@ (8002924 <__aeabi_dmul+0x35c>)
 8002756:	4326      	orrs	r6, r4
 8002758:	469c      	mov	ip, r3
 800275a:	44e3      	add	fp, ip
 800275c:	2e00      	cmp	r6, #0
 800275e:	d100      	bne.n	8002762 <__aeabi_dmul+0x19a>
 8002760:	e16f      	b.n	8002a42 <__aeabi_dmul+0x47a>
 8002762:	2303      	movs	r3, #3
 8002764:	4649      	mov	r1, r9
 8002766:	431d      	orrs	r5, r3
 8002768:	9b00      	ldr	r3, [sp, #0]
 800276a:	4059      	eors	r1, r3
 800276c:	b2cb      	uxtb	r3, r1
 800276e:	9303      	str	r3, [sp, #12]
 8002770:	2d0a      	cmp	r5, #10
 8002772:	dd00      	ble.n	8002776 <__aeabi_dmul+0x1ae>
 8002774:	e133      	b.n	80029de <__aeabi_dmul+0x416>
 8002776:	2301      	movs	r3, #1
 8002778:	40ab      	lsls	r3, r5
 800277a:	001d      	movs	r5, r3
 800277c:	2303      	movs	r3, #3
 800277e:	9302      	str	r3, [sp, #8]
 8002780:	2288      	movs	r2, #136	@ 0x88
 8002782:	422a      	tst	r2, r5
 8002784:	d197      	bne.n	80026b6 <__aeabi_dmul+0xee>
 8002786:	4642      	mov	r2, r8
 8002788:	4643      	mov	r3, r8
 800278a:	0412      	lsls	r2, r2, #16
 800278c:	0c12      	lsrs	r2, r2, #16
 800278e:	0016      	movs	r6, r2
 8002790:	9801      	ldr	r0, [sp, #4]
 8002792:	0c1d      	lsrs	r5, r3, #16
 8002794:	0c03      	lsrs	r3, r0, #16
 8002796:	0400      	lsls	r0, r0, #16
 8002798:	0c00      	lsrs	r0, r0, #16
 800279a:	4346      	muls	r6, r0
 800279c:	46b4      	mov	ip, r6
 800279e:	001e      	movs	r6, r3
 80027a0:	436e      	muls	r6, r5
 80027a2:	9600      	str	r6, [sp, #0]
 80027a4:	0016      	movs	r6, r2
 80027a6:	0007      	movs	r7, r0
 80027a8:	435e      	muls	r6, r3
 80027aa:	4661      	mov	r1, ip
 80027ac:	46b0      	mov	r8, r6
 80027ae:	436f      	muls	r7, r5
 80027b0:	0c0e      	lsrs	r6, r1, #16
 80027b2:	44b8      	add	r8, r7
 80027b4:	4446      	add	r6, r8
 80027b6:	42b7      	cmp	r7, r6
 80027b8:	d905      	bls.n	80027c6 <__aeabi_dmul+0x1fe>
 80027ba:	2180      	movs	r1, #128	@ 0x80
 80027bc:	0249      	lsls	r1, r1, #9
 80027be:	4688      	mov	r8, r1
 80027c0:	9f00      	ldr	r7, [sp, #0]
 80027c2:	4447      	add	r7, r8
 80027c4:	9700      	str	r7, [sp, #0]
 80027c6:	4661      	mov	r1, ip
 80027c8:	0409      	lsls	r1, r1, #16
 80027ca:	0c09      	lsrs	r1, r1, #16
 80027cc:	0c37      	lsrs	r7, r6, #16
 80027ce:	0436      	lsls	r6, r6, #16
 80027d0:	468c      	mov	ip, r1
 80027d2:	0031      	movs	r1, r6
 80027d4:	4461      	add	r1, ip
 80027d6:	9101      	str	r1, [sp, #4]
 80027d8:	0011      	movs	r1, r2
 80027da:	0c26      	lsrs	r6, r4, #16
 80027dc:	0424      	lsls	r4, r4, #16
 80027de:	0c24      	lsrs	r4, r4, #16
 80027e0:	4361      	muls	r1, r4
 80027e2:	468c      	mov	ip, r1
 80027e4:	0021      	movs	r1, r4
 80027e6:	4369      	muls	r1, r5
 80027e8:	4689      	mov	r9, r1
 80027ea:	4661      	mov	r1, ip
 80027ec:	0c09      	lsrs	r1, r1, #16
 80027ee:	4688      	mov	r8, r1
 80027f0:	4372      	muls	r2, r6
 80027f2:	444a      	add	r2, r9
 80027f4:	4442      	add	r2, r8
 80027f6:	4375      	muls	r5, r6
 80027f8:	4591      	cmp	r9, r2
 80027fa:	d903      	bls.n	8002804 <__aeabi_dmul+0x23c>
 80027fc:	2180      	movs	r1, #128	@ 0x80
 80027fe:	0249      	lsls	r1, r1, #9
 8002800:	4688      	mov	r8, r1
 8002802:	4445      	add	r5, r8
 8002804:	0c11      	lsrs	r1, r2, #16
 8002806:	4688      	mov	r8, r1
 8002808:	4661      	mov	r1, ip
 800280a:	0409      	lsls	r1, r1, #16
 800280c:	0c09      	lsrs	r1, r1, #16
 800280e:	468c      	mov	ip, r1
 8002810:	0412      	lsls	r2, r2, #16
 8002812:	4462      	add	r2, ip
 8002814:	18b9      	adds	r1, r7, r2
 8002816:	9102      	str	r1, [sp, #8]
 8002818:	4651      	mov	r1, sl
 800281a:	0c09      	lsrs	r1, r1, #16
 800281c:	468c      	mov	ip, r1
 800281e:	4651      	mov	r1, sl
 8002820:	040f      	lsls	r7, r1, #16
 8002822:	0c3f      	lsrs	r7, r7, #16
 8002824:	0039      	movs	r1, r7
 8002826:	4341      	muls	r1, r0
 8002828:	4445      	add	r5, r8
 800282a:	4688      	mov	r8, r1
 800282c:	4661      	mov	r1, ip
 800282e:	4341      	muls	r1, r0
 8002830:	468a      	mov	sl, r1
 8002832:	4641      	mov	r1, r8
 8002834:	4660      	mov	r0, ip
 8002836:	0c09      	lsrs	r1, r1, #16
 8002838:	4689      	mov	r9, r1
 800283a:	4358      	muls	r0, r3
 800283c:	437b      	muls	r3, r7
 800283e:	4453      	add	r3, sl
 8002840:	444b      	add	r3, r9
 8002842:	459a      	cmp	sl, r3
 8002844:	d903      	bls.n	800284e <__aeabi_dmul+0x286>
 8002846:	2180      	movs	r1, #128	@ 0x80
 8002848:	0249      	lsls	r1, r1, #9
 800284a:	4689      	mov	r9, r1
 800284c:	4448      	add	r0, r9
 800284e:	0c19      	lsrs	r1, r3, #16
 8002850:	4689      	mov	r9, r1
 8002852:	4641      	mov	r1, r8
 8002854:	0409      	lsls	r1, r1, #16
 8002856:	0c09      	lsrs	r1, r1, #16
 8002858:	4688      	mov	r8, r1
 800285a:	0039      	movs	r1, r7
 800285c:	4361      	muls	r1, r4
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	4443      	add	r3, r8
 8002862:	4688      	mov	r8, r1
 8002864:	4661      	mov	r1, ip
 8002866:	434c      	muls	r4, r1
 8002868:	4371      	muls	r1, r6
 800286a:	468c      	mov	ip, r1
 800286c:	4641      	mov	r1, r8
 800286e:	4377      	muls	r7, r6
 8002870:	0c0e      	lsrs	r6, r1, #16
 8002872:	193f      	adds	r7, r7, r4
 8002874:	19f6      	adds	r6, r6, r7
 8002876:	4448      	add	r0, r9
 8002878:	42b4      	cmp	r4, r6
 800287a:	d903      	bls.n	8002884 <__aeabi_dmul+0x2bc>
 800287c:	2180      	movs	r1, #128	@ 0x80
 800287e:	0249      	lsls	r1, r1, #9
 8002880:	4689      	mov	r9, r1
 8002882:	44cc      	add	ip, r9
 8002884:	9902      	ldr	r1, [sp, #8]
 8002886:	9f00      	ldr	r7, [sp, #0]
 8002888:	4689      	mov	r9, r1
 800288a:	0431      	lsls	r1, r6, #16
 800288c:	444f      	add	r7, r9
 800288e:	4689      	mov	r9, r1
 8002890:	4641      	mov	r1, r8
 8002892:	4297      	cmp	r7, r2
 8002894:	4192      	sbcs	r2, r2
 8002896:	040c      	lsls	r4, r1, #16
 8002898:	0c24      	lsrs	r4, r4, #16
 800289a:	444c      	add	r4, r9
 800289c:	18ff      	adds	r7, r7, r3
 800289e:	4252      	negs	r2, r2
 80028a0:	1964      	adds	r4, r4, r5
 80028a2:	18a1      	adds	r1, r4, r2
 80028a4:	429f      	cmp	r7, r3
 80028a6:	419b      	sbcs	r3, r3
 80028a8:	4688      	mov	r8, r1
 80028aa:	4682      	mov	sl, r0
 80028ac:	425b      	negs	r3, r3
 80028ae:	4699      	mov	r9, r3
 80028b0:	4590      	cmp	r8, r2
 80028b2:	4192      	sbcs	r2, r2
 80028b4:	42ac      	cmp	r4, r5
 80028b6:	41a4      	sbcs	r4, r4
 80028b8:	44c2      	add	sl, r8
 80028ba:	44d1      	add	r9, sl
 80028bc:	4252      	negs	r2, r2
 80028be:	4264      	negs	r4, r4
 80028c0:	4314      	orrs	r4, r2
 80028c2:	4599      	cmp	r9, r3
 80028c4:	419b      	sbcs	r3, r3
 80028c6:	4582      	cmp	sl, r0
 80028c8:	4192      	sbcs	r2, r2
 80028ca:	425b      	negs	r3, r3
 80028cc:	4252      	negs	r2, r2
 80028ce:	4313      	orrs	r3, r2
 80028d0:	464a      	mov	r2, r9
 80028d2:	0c36      	lsrs	r6, r6, #16
 80028d4:	19a4      	adds	r4, r4, r6
 80028d6:	18e3      	adds	r3, r4, r3
 80028d8:	4463      	add	r3, ip
 80028da:	025b      	lsls	r3, r3, #9
 80028dc:	0dd2      	lsrs	r2, r2, #23
 80028de:	431a      	orrs	r2, r3
 80028e0:	9901      	ldr	r1, [sp, #4]
 80028e2:	4692      	mov	sl, r2
 80028e4:	027a      	lsls	r2, r7, #9
 80028e6:	430a      	orrs	r2, r1
 80028e8:	1e50      	subs	r0, r2, #1
 80028ea:	4182      	sbcs	r2, r0
 80028ec:	0dff      	lsrs	r7, r7, #23
 80028ee:	4317      	orrs	r7, r2
 80028f0:	464a      	mov	r2, r9
 80028f2:	0252      	lsls	r2, r2, #9
 80028f4:	4317      	orrs	r7, r2
 80028f6:	46b8      	mov	r8, r7
 80028f8:	01db      	lsls	r3, r3, #7
 80028fa:	d500      	bpl.n	80028fe <__aeabi_dmul+0x336>
 80028fc:	e6ed      	b.n	80026da <__aeabi_dmul+0x112>
 80028fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002934 <__aeabi_dmul+0x36c>)
 8002900:	9a03      	ldr	r2, [sp, #12]
 8002902:	445b      	add	r3, fp
 8002904:	4691      	mov	r9, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	dc00      	bgt.n	800290c <__aeabi_dmul+0x344>
 800290a:	e0ac      	b.n	8002a66 <__aeabi_dmul+0x49e>
 800290c:	003a      	movs	r2, r7
 800290e:	0752      	lsls	r2, r2, #29
 8002910:	d100      	bne.n	8002914 <__aeabi_dmul+0x34c>
 8002912:	e710      	b.n	8002736 <__aeabi_dmul+0x16e>
 8002914:	220f      	movs	r2, #15
 8002916:	4658      	mov	r0, fp
 8002918:	403a      	ands	r2, r7
 800291a:	2a04      	cmp	r2, #4
 800291c:	d000      	beq.n	8002920 <__aeabi_dmul+0x358>
 800291e:	e6f9      	b.n	8002714 <__aeabi_dmul+0x14c>
 8002920:	e709      	b.n	8002736 <__aeabi_dmul+0x16e>
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	000007ff 	.word	0x000007ff
 8002928:	fffffc01 	.word	0xfffffc01
 800292c:	feffffff 	.word	0xfeffffff
 8002930:	000007fe 	.word	0x000007fe
 8002934:	000003ff 	.word	0x000003ff
 8002938:	0022      	movs	r2, r4
 800293a:	4332      	orrs	r2, r6
 800293c:	d06f      	beq.n	8002a1e <__aeabi_dmul+0x456>
 800293e:	2c00      	cmp	r4, #0
 8002940:	d100      	bne.n	8002944 <__aeabi_dmul+0x37c>
 8002942:	e0c2      	b.n	8002aca <__aeabi_dmul+0x502>
 8002944:	0020      	movs	r0, r4
 8002946:	f000 fea9 	bl	800369c <__clzsi2>
 800294a:	0002      	movs	r2, r0
 800294c:	0003      	movs	r3, r0
 800294e:	3a0b      	subs	r2, #11
 8002950:	201d      	movs	r0, #29
 8002952:	1a82      	subs	r2, r0, r2
 8002954:	0030      	movs	r0, r6
 8002956:	0019      	movs	r1, r3
 8002958:	40d0      	lsrs	r0, r2
 800295a:	3908      	subs	r1, #8
 800295c:	408c      	lsls	r4, r1
 800295e:	0002      	movs	r2, r0
 8002960:	4322      	orrs	r2, r4
 8002962:	0034      	movs	r4, r6
 8002964:	408c      	lsls	r4, r1
 8002966:	4659      	mov	r1, fp
 8002968:	1acb      	subs	r3, r1, r3
 800296a:	4986      	ldr	r1, [pc, #536]	@ (8002b84 <__aeabi_dmul+0x5bc>)
 800296c:	468b      	mov	fp, r1
 800296e:	449b      	add	fp, r3
 8002970:	2d0a      	cmp	r5, #10
 8002972:	dd00      	ble.n	8002976 <__aeabi_dmul+0x3ae>
 8002974:	e6a4      	b.n	80026c0 <__aeabi_dmul+0xf8>
 8002976:	4649      	mov	r1, r9
 8002978:	9b00      	ldr	r3, [sp, #0]
 800297a:	9401      	str	r4, [sp, #4]
 800297c:	4059      	eors	r1, r3
 800297e:	b2cb      	uxtb	r3, r1
 8002980:	0014      	movs	r4, r2
 8002982:	2000      	movs	r0, #0
 8002984:	9303      	str	r3, [sp, #12]
 8002986:	2d02      	cmp	r5, #2
 8002988:	dd00      	ble.n	800298c <__aeabi_dmul+0x3c4>
 800298a:	e667      	b.n	800265c <__aeabi_dmul+0x94>
 800298c:	e6fb      	b.n	8002786 <__aeabi_dmul+0x1be>
 800298e:	4653      	mov	r3, sl
 8002990:	4303      	orrs	r3, r0
 8002992:	4698      	mov	r8, r3
 8002994:	d03c      	beq.n	8002a10 <__aeabi_dmul+0x448>
 8002996:	4653      	mov	r3, sl
 8002998:	2b00      	cmp	r3, #0
 800299a:	d100      	bne.n	800299e <__aeabi_dmul+0x3d6>
 800299c:	e0a3      	b.n	8002ae6 <__aeabi_dmul+0x51e>
 800299e:	4650      	mov	r0, sl
 80029a0:	f000 fe7c 	bl	800369c <__clzsi2>
 80029a4:	230b      	movs	r3, #11
 80029a6:	425b      	negs	r3, r3
 80029a8:	469c      	mov	ip, r3
 80029aa:	0002      	movs	r2, r0
 80029ac:	4484      	add	ip, r0
 80029ae:	0011      	movs	r1, r2
 80029b0:	4650      	mov	r0, sl
 80029b2:	3908      	subs	r1, #8
 80029b4:	4088      	lsls	r0, r1
 80029b6:	231d      	movs	r3, #29
 80029b8:	4680      	mov	r8, r0
 80029ba:	4660      	mov	r0, ip
 80029bc:	1a1b      	subs	r3, r3, r0
 80029be:	0020      	movs	r0, r4
 80029c0:	40d8      	lsrs	r0, r3
 80029c2:	0003      	movs	r3, r0
 80029c4:	4640      	mov	r0, r8
 80029c6:	4303      	orrs	r3, r0
 80029c8:	469a      	mov	sl, r3
 80029ca:	0023      	movs	r3, r4
 80029cc:	408b      	lsls	r3, r1
 80029ce:	4698      	mov	r8, r3
 80029d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b84 <__aeabi_dmul+0x5bc>)
 80029d2:	2500      	movs	r5, #0
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	469b      	mov	fp, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	9302      	str	r3, [sp, #8]
 80029dc:	e61a      	b.n	8002614 <__aeabi_dmul+0x4c>
 80029de:	2d0f      	cmp	r5, #15
 80029e0:	d000      	beq.n	80029e4 <__aeabi_dmul+0x41c>
 80029e2:	e0c9      	b.n	8002b78 <__aeabi_dmul+0x5b0>
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	4652      	mov	r2, sl
 80029e8:	031b      	lsls	r3, r3, #12
 80029ea:	421a      	tst	r2, r3
 80029ec:	d002      	beq.n	80029f4 <__aeabi_dmul+0x42c>
 80029ee:	421c      	tst	r4, r3
 80029f0:	d100      	bne.n	80029f4 <__aeabi_dmul+0x42c>
 80029f2:	e092      	b.n	8002b1a <__aeabi_dmul+0x552>
 80029f4:	2480      	movs	r4, #128	@ 0x80
 80029f6:	4653      	mov	r3, sl
 80029f8:	0324      	lsls	r4, r4, #12
 80029fa:	431c      	orrs	r4, r3
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	4642      	mov	r2, r8
 8002a00:	0b24      	lsrs	r4, r4, #12
 8002a02:	e63e      	b.n	8002682 <__aeabi_dmul+0xba>
 8002a04:	469b      	mov	fp, r3
 8002a06:	2303      	movs	r3, #3
 8002a08:	4680      	mov	r8, r0
 8002a0a:	250c      	movs	r5, #12
 8002a0c:	9302      	str	r3, [sp, #8]
 8002a0e:	e601      	b.n	8002614 <__aeabi_dmul+0x4c>
 8002a10:	2300      	movs	r3, #0
 8002a12:	469a      	mov	sl, r3
 8002a14:	469b      	mov	fp, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	2504      	movs	r5, #4
 8002a1a:	9302      	str	r3, [sp, #8]
 8002a1c:	e5fa      	b.n	8002614 <__aeabi_dmul+0x4c>
 8002a1e:	2101      	movs	r1, #1
 8002a20:	430d      	orrs	r5, r1
 8002a22:	2d0a      	cmp	r5, #10
 8002a24:	dd00      	ble.n	8002a28 <__aeabi_dmul+0x460>
 8002a26:	e64b      	b.n	80026c0 <__aeabi_dmul+0xf8>
 8002a28:	4649      	mov	r1, r9
 8002a2a:	9800      	ldr	r0, [sp, #0]
 8002a2c:	4041      	eors	r1, r0
 8002a2e:	b2c9      	uxtb	r1, r1
 8002a30:	9103      	str	r1, [sp, #12]
 8002a32:	2d02      	cmp	r5, #2
 8002a34:	dc00      	bgt.n	8002a38 <__aeabi_dmul+0x470>
 8002a36:	e096      	b.n	8002b66 <__aeabi_dmul+0x59e>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2400      	movs	r4, #0
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	e60c      	b.n	800265c <__aeabi_dmul+0x94>
 8002a42:	4649      	mov	r1, r9
 8002a44:	2302      	movs	r3, #2
 8002a46:	9a00      	ldr	r2, [sp, #0]
 8002a48:	432b      	orrs	r3, r5
 8002a4a:	4051      	eors	r1, r2
 8002a4c:	b2ca      	uxtb	r2, r1
 8002a4e:	9203      	str	r2, [sp, #12]
 8002a50:	2b0a      	cmp	r3, #10
 8002a52:	dd00      	ble.n	8002a56 <__aeabi_dmul+0x48e>
 8002a54:	e634      	b.n	80026c0 <__aeabi_dmul+0xf8>
 8002a56:	2d00      	cmp	r5, #0
 8002a58:	d157      	bne.n	8002b0a <__aeabi_dmul+0x542>
 8002a5a:	9b03      	ldr	r3, [sp, #12]
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	2400      	movs	r4, #0
 8002a60:	2200      	movs	r2, #0
 8002a62:	4b49      	ldr	r3, [pc, #292]	@ (8002b88 <__aeabi_dmul+0x5c0>)
 8002a64:	e60e      	b.n	8002684 <__aeabi_dmul+0xbc>
 8002a66:	4658      	mov	r0, fp
 8002a68:	2101      	movs	r1, #1
 8002a6a:	1ac9      	subs	r1, r1, r3
 8002a6c:	2938      	cmp	r1, #56	@ 0x38
 8002a6e:	dd00      	ble.n	8002a72 <__aeabi_dmul+0x4aa>
 8002a70:	e62f      	b.n	80026d2 <__aeabi_dmul+0x10a>
 8002a72:	291f      	cmp	r1, #31
 8002a74:	dd56      	ble.n	8002b24 <__aeabi_dmul+0x55c>
 8002a76:	221f      	movs	r2, #31
 8002a78:	4654      	mov	r4, sl
 8002a7a:	4252      	negs	r2, r2
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	40dc      	lsrs	r4, r3
 8002a80:	2920      	cmp	r1, #32
 8002a82:	d007      	beq.n	8002a94 <__aeabi_dmul+0x4cc>
 8002a84:	4b41      	ldr	r3, [pc, #260]	@ (8002b8c <__aeabi_dmul+0x5c4>)
 8002a86:	4642      	mov	r2, r8
 8002a88:	469c      	mov	ip, r3
 8002a8a:	4653      	mov	r3, sl
 8002a8c:	4460      	add	r0, ip
 8002a8e:	4083      	lsls	r3, r0
 8002a90:	431a      	orrs	r2, r3
 8002a92:	4690      	mov	r8, r2
 8002a94:	4642      	mov	r2, r8
 8002a96:	2107      	movs	r1, #7
 8002a98:	1e53      	subs	r3, r2, #1
 8002a9a:	419a      	sbcs	r2, r3
 8002a9c:	000b      	movs	r3, r1
 8002a9e:	4322      	orrs	r2, r4
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2400      	movs	r4, #0
 8002aa4:	4211      	tst	r1, r2
 8002aa6:	d009      	beq.n	8002abc <__aeabi_dmul+0x4f4>
 8002aa8:	230f      	movs	r3, #15
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d05d      	beq.n	8002b6c <__aeabi_dmul+0x5a4>
 8002ab0:	1d11      	adds	r1, r2, #4
 8002ab2:	4291      	cmp	r1, r2
 8002ab4:	419b      	sbcs	r3, r3
 8002ab6:	000a      	movs	r2, r1
 8002ab8:	425b      	negs	r3, r3
 8002aba:	075b      	lsls	r3, r3, #29
 8002abc:	08d2      	lsrs	r2, r2, #3
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e5df      	b.n	8002684 <__aeabi_dmul+0xbc>
 8002ac4:	9b03      	ldr	r3, [sp, #12]
 8002ac6:	4699      	mov	r9, r3
 8002ac8:	e5fa      	b.n	80026c0 <__aeabi_dmul+0xf8>
 8002aca:	9801      	ldr	r0, [sp, #4]
 8002acc:	f000 fde6 	bl	800369c <__clzsi2>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	3215      	adds	r2, #21
 8002ad6:	3320      	adds	r3, #32
 8002ad8:	2a1c      	cmp	r2, #28
 8002ada:	dc00      	bgt.n	8002ade <__aeabi_dmul+0x516>
 8002adc:	e738      	b.n	8002950 <__aeabi_dmul+0x388>
 8002ade:	9a01      	ldr	r2, [sp, #4]
 8002ae0:	3808      	subs	r0, #8
 8002ae2:	4082      	lsls	r2, r0
 8002ae4:	e73f      	b.n	8002966 <__aeabi_dmul+0x39e>
 8002ae6:	f000 fdd9 	bl	800369c <__clzsi2>
 8002aea:	2315      	movs	r3, #21
 8002aec:	469c      	mov	ip, r3
 8002aee:	4484      	add	ip, r0
 8002af0:	0002      	movs	r2, r0
 8002af2:	4663      	mov	r3, ip
 8002af4:	3220      	adds	r2, #32
 8002af6:	2b1c      	cmp	r3, #28
 8002af8:	dc00      	bgt.n	8002afc <__aeabi_dmul+0x534>
 8002afa:	e758      	b.n	80029ae <__aeabi_dmul+0x3e6>
 8002afc:	2300      	movs	r3, #0
 8002afe:	4698      	mov	r8, r3
 8002b00:	0023      	movs	r3, r4
 8002b02:	3808      	subs	r0, #8
 8002b04:	4083      	lsls	r3, r0
 8002b06:	469a      	mov	sl, r3
 8002b08:	e762      	b.n	80029d0 <__aeabi_dmul+0x408>
 8002b0a:	001d      	movs	r5, r3
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	2400      	movs	r4, #0
 8002b10:	2002      	movs	r0, #2
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	e5a2      	b.n	800265c <__aeabi_dmul+0x94>
 8002b16:	9002      	str	r0, [sp, #8]
 8002b18:	e632      	b.n	8002780 <__aeabi_dmul+0x1b8>
 8002b1a:	431c      	orrs	r4, r3
 8002b1c:	9b00      	ldr	r3, [sp, #0]
 8002b1e:	9a01      	ldr	r2, [sp, #4]
 8002b20:	4699      	mov	r9, r3
 8002b22:	e5ae      	b.n	8002682 <__aeabi_dmul+0xba>
 8002b24:	4b1a      	ldr	r3, [pc, #104]	@ (8002b90 <__aeabi_dmul+0x5c8>)
 8002b26:	4652      	mov	r2, sl
 8002b28:	18c3      	adds	r3, r0, r3
 8002b2a:	4640      	mov	r0, r8
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	40c8      	lsrs	r0, r1
 8002b30:	4302      	orrs	r2, r0
 8002b32:	4640      	mov	r0, r8
 8002b34:	4098      	lsls	r0, r3
 8002b36:	0003      	movs	r3, r0
 8002b38:	1e58      	subs	r0, r3, #1
 8002b3a:	4183      	sbcs	r3, r0
 8002b3c:	4654      	mov	r4, sl
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	40cc      	lsrs	r4, r1
 8002b42:	0753      	lsls	r3, r2, #29
 8002b44:	d009      	beq.n	8002b5a <__aeabi_dmul+0x592>
 8002b46:	230f      	movs	r3, #15
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d005      	beq.n	8002b5a <__aeabi_dmul+0x592>
 8002b4e:	1d13      	adds	r3, r2, #4
 8002b50:	4293      	cmp	r3, r2
 8002b52:	4192      	sbcs	r2, r2
 8002b54:	4252      	negs	r2, r2
 8002b56:	18a4      	adds	r4, r4, r2
 8002b58:	001a      	movs	r2, r3
 8002b5a:	0223      	lsls	r3, r4, #8
 8002b5c:	d508      	bpl.n	8002b70 <__aeabi_dmul+0x5a8>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	2400      	movs	r4, #0
 8002b62:	2200      	movs	r2, #0
 8002b64:	e58e      	b.n	8002684 <__aeabi_dmul+0xbc>
 8002b66:	4689      	mov	r9, r1
 8002b68:	2400      	movs	r4, #0
 8002b6a:	e58b      	b.n	8002684 <__aeabi_dmul+0xbc>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e7a5      	b.n	8002abc <__aeabi_dmul+0x4f4>
 8002b70:	0763      	lsls	r3, r4, #29
 8002b72:	0264      	lsls	r4, r4, #9
 8002b74:	0b24      	lsrs	r4, r4, #12
 8002b76:	e7a1      	b.n	8002abc <__aeabi_dmul+0x4f4>
 8002b78:	9b00      	ldr	r3, [sp, #0]
 8002b7a:	46a2      	mov	sl, r4
 8002b7c:	4699      	mov	r9, r3
 8002b7e:	9b01      	ldr	r3, [sp, #4]
 8002b80:	4698      	mov	r8, r3
 8002b82:	e737      	b.n	80029f4 <__aeabi_dmul+0x42c>
 8002b84:	fffffc0d 	.word	0xfffffc0d
 8002b88:	000007ff 	.word	0x000007ff
 8002b8c:	0000043e 	.word	0x0000043e
 8002b90:	0000041e 	.word	0x0000041e

08002b94 <__aeabi_dsub>:
 8002b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b96:	4657      	mov	r7, sl
 8002b98:	464e      	mov	r6, r9
 8002b9a:	4645      	mov	r5, r8
 8002b9c:	46de      	mov	lr, fp
 8002b9e:	b5e0      	push	{r5, r6, r7, lr}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	9000      	str	r0, [sp, #0]
 8002ba4:	9101      	str	r1, [sp, #4]
 8002ba6:	030c      	lsls	r4, r1, #12
 8002ba8:	004d      	lsls	r5, r1, #1
 8002baa:	0fce      	lsrs	r6, r1, #31
 8002bac:	0a61      	lsrs	r1, r4, #9
 8002bae:	9c00      	ldr	r4, [sp, #0]
 8002bb0:	005f      	lsls	r7, r3, #1
 8002bb2:	0f64      	lsrs	r4, r4, #29
 8002bb4:	430c      	orrs	r4, r1
 8002bb6:	9900      	ldr	r1, [sp, #0]
 8002bb8:	9200      	str	r2, [sp, #0]
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	00c8      	lsls	r0, r1, #3
 8002bbe:	0319      	lsls	r1, r3, #12
 8002bc0:	0d7b      	lsrs	r3, r7, #21
 8002bc2:	4699      	mov	r9, r3
 8002bc4:	9b01      	ldr	r3, [sp, #4]
 8002bc6:	4fcc      	ldr	r7, [pc, #816]	@ (8002ef8 <__aeabi_dsub+0x364>)
 8002bc8:	0fdb      	lsrs	r3, r3, #31
 8002bca:	469c      	mov	ip, r3
 8002bcc:	0a4b      	lsrs	r3, r1, #9
 8002bce:	9900      	ldr	r1, [sp, #0]
 8002bd0:	4680      	mov	r8, r0
 8002bd2:	0f49      	lsrs	r1, r1, #29
 8002bd4:	4319      	orrs	r1, r3
 8002bd6:	9b00      	ldr	r3, [sp, #0]
 8002bd8:	468b      	mov	fp, r1
 8002bda:	00da      	lsls	r2, r3, #3
 8002bdc:	4692      	mov	sl, r2
 8002bde:	0d6d      	lsrs	r5, r5, #21
 8002be0:	45b9      	cmp	r9, r7
 8002be2:	d100      	bne.n	8002be6 <__aeabi_dsub+0x52>
 8002be4:	e0bf      	b.n	8002d66 <__aeabi_dsub+0x1d2>
 8002be6:	2301      	movs	r3, #1
 8002be8:	4661      	mov	r1, ip
 8002bea:	4059      	eors	r1, r3
 8002bec:	464b      	mov	r3, r9
 8002bee:	468c      	mov	ip, r1
 8002bf0:	1aeb      	subs	r3, r5, r3
 8002bf2:	428e      	cmp	r6, r1
 8002bf4:	d075      	beq.n	8002ce2 <__aeabi_dsub+0x14e>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	dc00      	bgt.n	8002bfc <__aeabi_dsub+0x68>
 8002bfa:	e2a3      	b.n	8003144 <__aeabi_dsub+0x5b0>
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	2900      	cmp	r1, #0
 8002c00:	d100      	bne.n	8002c04 <__aeabi_dsub+0x70>
 8002c02:	e0ce      	b.n	8002da2 <__aeabi_dsub+0x20e>
 8002c04:	42bd      	cmp	r5, r7
 8002c06:	d100      	bne.n	8002c0a <__aeabi_dsub+0x76>
 8002c08:	e200      	b.n	800300c <__aeabi_dsub+0x478>
 8002c0a:	2701      	movs	r7, #1
 8002c0c:	2b38      	cmp	r3, #56	@ 0x38
 8002c0e:	dc19      	bgt.n	8002c44 <__aeabi_dsub+0xb0>
 8002c10:	2780      	movs	r7, #128	@ 0x80
 8002c12:	4659      	mov	r1, fp
 8002c14:	043f      	lsls	r7, r7, #16
 8002c16:	4339      	orrs	r1, r7
 8002c18:	468b      	mov	fp, r1
 8002c1a:	2b1f      	cmp	r3, #31
 8002c1c:	dd00      	ble.n	8002c20 <__aeabi_dsub+0x8c>
 8002c1e:	e1fa      	b.n	8003016 <__aeabi_dsub+0x482>
 8002c20:	2720      	movs	r7, #32
 8002c22:	1af9      	subs	r1, r7, r3
 8002c24:	468c      	mov	ip, r1
 8002c26:	4659      	mov	r1, fp
 8002c28:	4667      	mov	r7, ip
 8002c2a:	40b9      	lsls	r1, r7
 8002c2c:	000f      	movs	r7, r1
 8002c2e:	0011      	movs	r1, r2
 8002c30:	40d9      	lsrs	r1, r3
 8002c32:	430f      	orrs	r7, r1
 8002c34:	4661      	mov	r1, ip
 8002c36:	408a      	lsls	r2, r1
 8002c38:	1e51      	subs	r1, r2, #1
 8002c3a:	418a      	sbcs	r2, r1
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	40d9      	lsrs	r1, r3
 8002c40:	4317      	orrs	r7, r2
 8002c42:	1a64      	subs	r4, r4, r1
 8002c44:	1bc7      	subs	r7, r0, r7
 8002c46:	42b8      	cmp	r0, r7
 8002c48:	4180      	sbcs	r0, r0
 8002c4a:	4240      	negs	r0, r0
 8002c4c:	1a24      	subs	r4, r4, r0
 8002c4e:	0223      	lsls	r3, r4, #8
 8002c50:	d400      	bmi.n	8002c54 <__aeabi_dsub+0xc0>
 8002c52:	e140      	b.n	8002ed6 <__aeabi_dsub+0x342>
 8002c54:	0264      	lsls	r4, r4, #9
 8002c56:	0a64      	lsrs	r4, r4, #9
 8002c58:	2c00      	cmp	r4, #0
 8002c5a:	d100      	bne.n	8002c5e <__aeabi_dsub+0xca>
 8002c5c:	e154      	b.n	8002f08 <__aeabi_dsub+0x374>
 8002c5e:	0020      	movs	r0, r4
 8002c60:	f000 fd1c 	bl	800369c <__clzsi2>
 8002c64:	0003      	movs	r3, r0
 8002c66:	3b08      	subs	r3, #8
 8002c68:	2120      	movs	r1, #32
 8002c6a:	0038      	movs	r0, r7
 8002c6c:	1aca      	subs	r2, r1, r3
 8002c6e:	40d0      	lsrs	r0, r2
 8002c70:	409c      	lsls	r4, r3
 8002c72:	0002      	movs	r2, r0
 8002c74:	409f      	lsls	r7, r3
 8002c76:	4322      	orrs	r2, r4
 8002c78:	429d      	cmp	r5, r3
 8002c7a:	dd00      	ble.n	8002c7e <__aeabi_dsub+0xea>
 8002c7c:	e1a6      	b.n	8002fcc <__aeabi_dsub+0x438>
 8002c7e:	1b58      	subs	r0, r3, r5
 8002c80:	3001      	adds	r0, #1
 8002c82:	1a09      	subs	r1, r1, r0
 8002c84:	003c      	movs	r4, r7
 8002c86:	408f      	lsls	r7, r1
 8002c88:	40c4      	lsrs	r4, r0
 8002c8a:	1e7b      	subs	r3, r7, #1
 8002c8c:	419f      	sbcs	r7, r3
 8002c8e:	0013      	movs	r3, r2
 8002c90:	408b      	lsls	r3, r1
 8002c92:	4327      	orrs	r7, r4
 8002c94:	431f      	orrs	r7, r3
 8002c96:	40c2      	lsrs	r2, r0
 8002c98:	003b      	movs	r3, r7
 8002c9a:	0014      	movs	r4, r2
 8002c9c:	2500      	movs	r5, #0
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	d100      	bne.n	8002ca4 <__aeabi_dsub+0x110>
 8002ca2:	e1f7      	b.n	8003094 <__aeabi_dsub+0x500>
 8002ca4:	077b      	lsls	r3, r7, #29
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x116>
 8002ca8:	e377      	b.n	800339a <__aeabi_dsub+0x806>
 8002caa:	230f      	movs	r3, #15
 8002cac:	0038      	movs	r0, r7
 8002cae:	403b      	ands	r3, r7
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d004      	beq.n	8002cbe <__aeabi_dsub+0x12a>
 8002cb4:	1d38      	adds	r0, r7, #4
 8002cb6:	42b8      	cmp	r0, r7
 8002cb8:	41bf      	sbcs	r7, r7
 8002cba:	427f      	negs	r7, r7
 8002cbc:	19e4      	adds	r4, r4, r7
 8002cbe:	0223      	lsls	r3, r4, #8
 8002cc0:	d400      	bmi.n	8002cc4 <__aeabi_dsub+0x130>
 8002cc2:	e368      	b.n	8003396 <__aeabi_dsub+0x802>
 8002cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ef8 <__aeabi_dsub+0x364>)
 8002cc6:	3501      	adds	r5, #1
 8002cc8:	429d      	cmp	r5, r3
 8002cca:	d100      	bne.n	8002cce <__aeabi_dsub+0x13a>
 8002ccc:	e0f4      	b.n	8002eb8 <__aeabi_dsub+0x324>
 8002cce:	4b8b      	ldr	r3, [pc, #556]	@ (8002efc <__aeabi_dsub+0x368>)
 8002cd0:	056d      	lsls	r5, r5, #21
 8002cd2:	401c      	ands	r4, r3
 8002cd4:	0d6d      	lsrs	r5, r5, #21
 8002cd6:	0767      	lsls	r7, r4, #29
 8002cd8:	08c0      	lsrs	r0, r0, #3
 8002cda:	0264      	lsls	r4, r4, #9
 8002cdc:	4307      	orrs	r7, r0
 8002cde:	0b24      	lsrs	r4, r4, #12
 8002ce0:	e0ec      	b.n	8002ebc <__aeabi_dsub+0x328>
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	dc00      	bgt.n	8002ce8 <__aeabi_dsub+0x154>
 8002ce6:	e329      	b.n	800333c <__aeabi_dsub+0x7a8>
 8002ce8:	4649      	mov	r1, r9
 8002cea:	2900      	cmp	r1, #0
 8002cec:	d000      	beq.n	8002cf0 <__aeabi_dsub+0x15c>
 8002cee:	e0d6      	b.n	8002e9e <__aeabi_dsub+0x30a>
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	d100      	bne.n	8002cf8 <__aeabi_dsub+0x164>
 8002cf6:	e12e      	b.n	8002f56 <__aeabi_dsub+0x3c2>
 8002cf8:	1e59      	subs	r1, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d100      	bne.n	8002d00 <__aeabi_dsub+0x16c>
 8002cfe:	e1e6      	b.n	80030ce <__aeabi_dsub+0x53a>
 8002d00:	42bb      	cmp	r3, r7
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x172>
 8002d04:	e182      	b.n	800300c <__aeabi_dsub+0x478>
 8002d06:	2701      	movs	r7, #1
 8002d08:	000b      	movs	r3, r1
 8002d0a:	2938      	cmp	r1, #56	@ 0x38
 8002d0c:	dc14      	bgt.n	8002d38 <__aeabi_dsub+0x1a4>
 8002d0e:	2b1f      	cmp	r3, #31
 8002d10:	dd00      	ble.n	8002d14 <__aeabi_dsub+0x180>
 8002d12:	e23c      	b.n	800318e <__aeabi_dsub+0x5fa>
 8002d14:	2720      	movs	r7, #32
 8002d16:	1af9      	subs	r1, r7, r3
 8002d18:	468c      	mov	ip, r1
 8002d1a:	4659      	mov	r1, fp
 8002d1c:	4667      	mov	r7, ip
 8002d1e:	40b9      	lsls	r1, r7
 8002d20:	000f      	movs	r7, r1
 8002d22:	0011      	movs	r1, r2
 8002d24:	40d9      	lsrs	r1, r3
 8002d26:	430f      	orrs	r7, r1
 8002d28:	4661      	mov	r1, ip
 8002d2a:	408a      	lsls	r2, r1
 8002d2c:	1e51      	subs	r1, r2, #1
 8002d2e:	418a      	sbcs	r2, r1
 8002d30:	4659      	mov	r1, fp
 8002d32:	40d9      	lsrs	r1, r3
 8002d34:	4317      	orrs	r7, r2
 8002d36:	1864      	adds	r4, r4, r1
 8002d38:	183f      	adds	r7, r7, r0
 8002d3a:	4287      	cmp	r7, r0
 8002d3c:	4180      	sbcs	r0, r0
 8002d3e:	4240      	negs	r0, r0
 8002d40:	1824      	adds	r4, r4, r0
 8002d42:	0223      	lsls	r3, r4, #8
 8002d44:	d400      	bmi.n	8002d48 <__aeabi_dsub+0x1b4>
 8002d46:	e0c6      	b.n	8002ed6 <__aeabi_dsub+0x342>
 8002d48:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef8 <__aeabi_dsub+0x364>)
 8002d4a:	3501      	adds	r5, #1
 8002d4c:	429d      	cmp	r5, r3
 8002d4e:	d100      	bne.n	8002d52 <__aeabi_dsub+0x1be>
 8002d50:	e0b2      	b.n	8002eb8 <__aeabi_dsub+0x324>
 8002d52:	2101      	movs	r1, #1
 8002d54:	4b69      	ldr	r3, [pc, #420]	@ (8002efc <__aeabi_dsub+0x368>)
 8002d56:	087a      	lsrs	r2, r7, #1
 8002d58:	401c      	ands	r4, r3
 8002d5a:	4039      	ands	r1, r7
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	07e7      	lsls	r7, r4, #31
 8002d60:	4317      	orrs	r7, r2
 8002d62:	0864      	lsrs	r4, r4, #1
 8002d64:	e79e      	b.n	8002ca4 <__aeabi_dsub+0x110>
 8002d66:	4b66      	ldr	r3, [pc, #408]	@ (8002f00 <__aeabi_dsub+0x36c>)
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	468a      	mov	sl, r1
 8002d6c:	18eb      	adds	r3, r5, r3
 8002d6e:	2900      	cmp	r1, #0
 8002d70:	d028      	beq.n	8002dc4 <__aeabi_dsub+0x230>
 8002d72:	4566      	cmp	r6, ip
 8002d74:	d02c      	beq.n	8002dd0 <__aeabi_dsub+0x23c>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d05b      	beq.n	8002e32 <__aeabi_dsub+0x29e>
 8002d7a:	2d00      	cmp	r5, #0
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dsub+0x1ec>
 8002d7e:	e12c      	b.n	8002fda <__aeabi_dsub+0x446>
 8002d80:	465b      	mov	r3, fp
 8002d82:	4666      	mov	r6, ip
 8002d84:	075f      	lsls	r7, r3, #29
 8002d86:	08d2      	lsrs	r2, r2, #3
 8002d88:	4317      	orrs	r7, r2
 8002d8a:	08dd      	lsrs	r5, r3, #3
 8002d8c:	003b      	movs	r3, r7
 8002d8e:	432b      	orrs	r3, r5
 8002d90:	d100      	bne.n	8002d94 <__aeabi_dsub+0x200>
 8002d92:	e0e2      	b.n	8002f5a <__aeabi_dsub+0x3c6>
 8002d94:	2480      	movs	r4, #128	@ 0x80
 8002d96:	0324      	lsls	r4, r4, #12
 8002d98:	432c      	orrs	r4, r5
 8002d9a:	0324      	lsls	r4, r4, #12
 8002d9c:	4d56      	ldr	r5, [pc, #344]	@ (8002ef8 <__aeabi_dsub+0x364>)
 8002d9e:	0b24      	lsrs	r4, r4, #12
 8002da0:	e08c      	b.n	8002ebc <__aeabi_dsub+0x328>
 8002da2:	4659      	mov	r1, fp
 8002da4:	4311      	orrs	r1, r2
 8002da6:	d100      	bne.n	8002daa <__aeabi_dsub+0x216>
 8002da8:	e0d5      	b.n	8002f56 <__aeabi_dsub+0x3c2>
 8002daa:	1e59      	subs	r1, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d100      	bne.n	8002db2 <__aeabi_dsub+0x21e>
 8002db0:	e1b9      	b.n	8003126 <__aeabi_dsub+0x592>
 8002db2:	42bb      	cmp	r3, r7
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x224>
 8002db6:	e1b1      	b.n	800311c <__aeabi_dsub+0x588>
 8002db8:	2701      	movs	r7, #1
 8002dba:	000b      	movs	r3, r1
 8002dbc:	2938      	cmp	r1, #56	@ 0x38
 8002dbe:	dd00      	ble.n	8002dc2 <__aeabi_dsub+0x22e>
 8002dc0:	e740      	b.n	8002c44 <__aeabi_dsub+0xb0>
 8002dc2:	e72a      	b.n	8002c1a <__aeabi_dsub+0x86>
 8002dc4:	4661      	mov	r1, ip
 8002dc6:	2701      	movs	r7, #1
 8002dc8:	4079      	eors	r1, r7
 8002dca:	468c      	mov	ip, r1
 8002dcc:	4566      	cmp	r6, ip
 8002dce:	d1d2      	bne.n	8002d76 <__aeabi_dsub+0x1e2>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d100      	bne.n	8002dd6 <__aeabi_dsub+0x242>
 8002dd4:	e0c5      	b.n	8002f62 <__aeabi_dsub+0x3ce>
 8002dd6:	2d00      	cmp	r5, #0
 8002dd8:	d000      	beq.n	8002ddc <__aeabi_dsub+0x248>
 8002dda:	e155      	b.n	8003088 <__aeabi_dsub+0x4f4>
 8002ddc:	464b      	mov	r3, r9
 8002dde:	0025      	movs	r5, r4
 8002de0:	4305      	orrs	r5, r0
 8002de2:	d100      	bne.n	8002de6 <__aeabi_dsub+0x252>
 8002de4:	e212      	b.n	800320c <__aeabi_dsub+0x678>
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	468c      	mov	ip, r1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d100      	bne.n	8002df0 <__aeabi_dsub+0x25c>
 8002dee:	e249      	b.n	8003284 <__aeabi_dsub+0x6f0>
 8002df0:	4d41      	ldr	r5, [pc, #260]	@ (8002ef8 <__aeabi_dsub+0x364>)
 8002df2:	42ab      	cmp	r3, r5
 8002df4:	d100      	bne.n	8002df8 <__aeabi_dsub+0x264>
 8002df6:	e28f      	b.n	8003318 <__aeabi_dsub+0x784>
 8002df8:	2701      	movs	r7, #1
 8002dfa:	2938      	cmp	r1, #56	@ 0x38
 8002dfc:	dc11      	bgt.n	8002e22 <__aeabi_dsub+0x28e>
 8002dfe:	4663      	mov	r3, ip
 8002e00:	2b1f      	cmp	r3, #31
 8002e02:	dd00      	ble.n	8002e06 <__aeabi_dsub+0x272>
 8002e04:	e25b      	b.n	80032be <__aeabi_dsub+0x72a>
 8002e06:	4661      	mov	r1, ip
 8002e08:	2320      	movs	r3, #32
 8002e0a:	0027      	movs	r7, r4
 8002e0c:	1a5b      	subs	r3, r3, r1
 8002e0e:	0005      	movs	r5, r0
 8002e10:	4098      	lsls	r0, r3
 8002e12:	409f      	lsls	r7, r3
 8002e14:	40cd      	lsrs	r5, r1
 8002e16:	1e43      	subs	r3, r0, #1
 8002e18:	4198      	sbcs	r0, r3
 8002e1a:	40cc      	lsrs	r4, r1
 8002e1c:	432f      	orrs	r7, r5
 8002e1e:	4307      	orrs	r7, r0
 8002e20:	44a3      	add	fp, r4
 8002e22:	18bf      	adds	r7, r7, r2
 8002e24:	4297      	cmp	r7, r2
 8002e26:	4192      	sbcs	r2, r2
 8002e28:	4252      	negs	r2, r2
 8002e2a:	445a      	add	r2, fp
 8002e2c:	0014      	movs	r4, r2
 8002e2e:	464d      	mov	r5, r9
 8002e30:	e787      	b.n	8002d42 <__aeabi_dsub+0x1ae>
 8002e32:	4f34      	ldr	r7, [pc, #208]	@ (8002f04 <__aeabi_dsub+0x370>)
 8002e34:	1c6b      	adds	r3, r5, #1
 8002e36:	423b      	tst	r3, r7
 8002e38:	d000      	beq.n	8002e3c <__aeabi_dsub+0x2a8>
 8002e3a:	e0b6      	b.n	8002faa <__aeabi_dsub+0x416>
 8002e3c:	4659      	mov	r1, fp
 8002e3e:	0023      	movs	r3, r4
 8002e40:	4311      	orrs	r1, r2
 8002e42:	000f      	movs	r7, r1
 8002e44:	4303      	orrs	r3, r0
 8002e46:	2d00      	cmp	r5, #0
 8002e48:	d000      	beq.n	8002e4c <__aeabi_dsub+0x2b8>
 8002e4a:	e126      	b.n	800309a <__aeabi_dsub+0x506>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d100      	bne.n	8002e52 <__aeabi_dsub+0x2be>
 8002e50:	e1c0      	b.n	80031d4 <__aeabi_dsub+0x640>
 8002e52:	2900      	cmp	r1, #0
 8002e54:	d100      	bne.n	8002e58 <__aeabi_dsub+0x2c4>
 8002e56:	e0a1      	b.n	8002f9c <__aeabi_dsub+0x408>
 8002e58:	1a83      	subs	r3, r0, r2
 8002e5a:	4698      	mov	r8, r3
 8002e5c:	465b      	mov	r3, fp
 8002e5e:	4540      	cmp	r0, r8
 8002e60:	41ad      	sbcs	r5, r5
 8002e62:	1ae3      	subs	r3, r4, r3
 8002e64:	426d      	negs	r5, r5
 8002e66:	1b5b      	subs	r3, r3, r5
 8002e68:	2580      	movs	r5, #128	@ 0x80
 8002e6a:	042d      	lsls	r5, r5, #16
 8002e6c:	422b      	tst	r3, r5
 8002e6e:	d100      	bne.n	8002e72 <__aeabi_dsub+0x2de>
 8002e70:	e14b      	b.n	800310a <__aeabi_dsub+0x576>
 8002e72:	465b      	mov	r3, fp
 8002e74:	1a10      	subs	r0, r2, r0
 8002e76:	4282      	cmp	r2, r0
 8002e78:	4192      	sbcs	r2, r2
 8002e7a:	1b1c      	subs	r4, r3, r4
 8002e7c:	0007      	movs	r7, r0
 8002e7e:	2601      	movs	r6, #1
 8002e80:	4663      	mov	r3, ip
 8002e82:	4252      	negs	r2, r2
 8002e84:	1aa4      	subs	r4, r4, r2
 8002e86:	4327      	orrs	r7, r4
 8002e88:	401e      	ands	r6, r3
 8002e8a:	2f00      	cmp	r7, #0
 8002e8c:	d100      	bne.n	8002e90 <__aeabi_dsub+0x2fc>
 8002e8e:	e142      	b.n	8003116 <__aeabi_dsub+0x582>
 8002e90:	422c      	tst	r4, r5
 8002e92:	d100      	bne.n	8002e96 <__aeabi_dsub+0x302>
 8002e94:	e26d      	b.n	8003372 <__aeabi_dsub+0x7de>
 8002e96:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <__aeabi_dsub+0x368>)
 8002e98:	2501      	movs	r5, #1
 8002e9a:	401c      	ands	r4, r3
 8002e9c:	e71b      	b.n	8002cd6 <__aeabi_dsub+0x142>
 8002e9e:	42bd      	cmp	r5, r7
 8002ea0:	d100      	bne.n	8002ea4 <__aeabi_dsub+0x310>
 8002ea2:	e13b      	b.n	800311c <__aeabi_dsub+0x588>
 8002ea4:	2701      	movs	r7, #1
 8002ea6:	2b38      	cmp	r3, #56	@ 0x38
 8002ea8:	dd00      	ble.n	8002eac <__aeabi_dsub+0x318>
 8002eaa:	e745      	b.n	8002d38 <__aeabi_dsub+0x1a4>
 8002eac:	2780      	movs	r7, #128	@ 0x80
 8002eae:	4659      	mov	r1, fp
 8002eb0:	043f      	lsls	r7, r7, #16
 8002eb2:	4339      	orrs	r1, r7
 8002eb4:	468b      	mov	fp, r1
 8002eb6:	e72a      	b.n	8002d0e <__aeabi_dsub+0x17a>
 8002eb8:	2400      	movs	r4, #0
 8002eba:	2700      	movs	r7, #0
 8002ebc:	052d      	lsls	r5, r5, #20
 8002ebe:	4325      	orrs	r5, r4
 8002ec0:	07f6      	lsls	r6, r6, #31
 8002ec2:	4335      	orrs	r5, r6
 8002ec4:	0038      	movs	r0, r7
 8002ec6:	0029      	movs	r1, r5
 8002ec8:	b003      	add	sp, #12
 8002eca:	bcf0      	pop	{r4, r5, r6, r7}
 8002ecc:	46bb      	mov	fp, r7
 8002ece:	46b2      	mov	sl, r6
 8002ed0:	46a9      	mov	r9, r5
 8002ed2:	46a0      	mov	r8, r4
 8002ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed6:	077b      	lsls	r3, r7, #29
 8002ed8:	d004      	beq.n	8002ee4 <__aeabi_dsub+0x350>
 8002eda:	230f      	movs	r3, #15
 8002edc:	403b      	ands	r3, r7
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d000      	beq.n	8002ee4 <__aeabi_dsub+0x350>
 8002ee2:	e6e7      	b.n	8002cb4 <__aeabi_dsub+0x120>
 8002ee4:	002b      	movs	r3, r5
 8002ee6:	08f8      	lsrs	r0, r7, #3
 8002ee8:	4a03      	ldr	r2, [pc, #12]	@ (8002ef8 <__aeabi_dsub+0x364>)
 8002eea:	0767      	lsls	r7, r4, #29
 8002eec:	4307      	orrs	r7, r0
 8002eee:	08e5      	lsrs	r5, r4, #3
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <__aeabi_dsub+0x362>
 8002ef4:	e74a      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 8002ef6:	e0a5      	b.n	8003044 <__aeabi_dsub+0x4b0>
 8002ef8:	000007ff 	.word	0x000007ff
 8002efc:	ff7fffff 	.word	0xff7fffff
 8002f00:	fffff801 	.word	0xfffff801
 8002f04:	000007fe 	.word	0x000007fe
 8002f08:	0038      	movs	r0, r7
 8002f0a:	f000 fbc7 	bl	800369c <__clzsi2>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	3318      	adds	r3, #24
 8002f12:	2b1f      	cmp	r3, #31
 8002f14:	dc00      	bgt.n	8002f18 <__aeabi_dsub+0x384>
 8002f16:	e6a7      	b.n	8002c68 <__aeabi_dsub+0xd4>
 8002f18:	003a      	movs	r2, r7
 8002f1a:	3808      	subs	r0, #8
 8002f1c:	4082      	lsls	r2, r0
 8002f1e:	429d      	cmp	r5, r3
 8002f20:	dd00      	ble.n	8002f24 <__aeabi_dsub+0x390>
 8002f22:	e08a      	b.n	800303a <__aeabi_dsub+0x4a6>
 8002f24:	1b5b      	subs	r3, r3, r5
 8002f26:	1c58      	adds	r0, r3, #1
 8002f28:	281f      	cmp	r0, #31
 8002f2a:	dc00      	bgt.n	8002f2e <__aeabi_dsub+0x39a>
 8002f2c:	e1d8      	b.n	80032e0 <__aeabi_dsub+0x74c>
 8002f2e:	0017      	movs	r7, r2
 8002f30:	3b1f      	subs	r3, #31
 8002f32:	40df      	lsrs	r7, r3
 8002f34:	2820      	cmp	r0, #32
 8002f36:	d005      	beq.n	8002f44 <__aeabi_dsub+0x3b0>
 8002f38:	2340      	movs	r3, #64	@ 0x40
 8002f3a:	1a1b      	subs	r3, r3, r0
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	1e53      	subs	r3, r2, #1
 8002f40:	419a      	sbcs	r2, r3
 8002f42:	4317      	orrs	r7, r2
 8002f44:	2500      	movs	r5, #0
 8002f46:	2f00      	cmp	r7, #0
 8002f48:	d100      	bne.n	8002f4c <__aeabi_dsub+0x3b8>
 8002f4a:	e0e5      	b.n	8003118 <__aeabi_dsub+0x584>
 8002f4c:	077b      	lsls	r3, r7, #29
 8002f4e:	d000      	beq.n	8002f52 <__aeabi_dsub+0x3be>
 8002f50:	e6ab      	b.n	8002caa <__aeabi_dsub+0x116>
 8002f52:	002c      	movs	r4, r5
 8002f54:	e7c6      	b.n	8002ee4 <__aeabi_dsub+0x350>
 8002f56:	08c0      	lsrs	r0, r0, #3
 8002f58:	e7c6      	b.n	8002ee8 <__aeabi_dsub+0x354>
 8002f5a:	2700      	movs	r7, #0
 8002f5c:	2400      	movs	r4, #0
 8002f5e:	4dd1      	ldr	r5, [pc, #836]	@ (80032a4 <__aeabi_dsub+0x710>)
 8002f60:	e7ac      	b.n	8002ebc <__aeabi_dsub+0x328>
 8002f62:	4fd1      	ldr	r7, [pc, #836]	@ (80032a8 <__aeabi_dsub+0x714>)
 8002f64:	1c6b      	adds	r3, r5, #1
 8002f66:	423b      	tst	r3, r7
 8002f68:	d171      	bne.n	800304e <__aeabi_dsub+0x4ba>
 8002f6a:	0023      	movs	r3, r4
 8002f6c:	4303      	orrs	r3, r0
 8002f6e:	2d00      	cmp	r5, #0
 8002f70:	d000      	beq.n	8002f74 <__aeabi_dsub+0x3e0>
 8002f72:	e14e      	b.n	8003212 <__aeabi_dsub+0x67e>
 8002f74:	4657      	mov	r7, sl
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d100      	bne.n	8002f7c <__aeabi_dsub+0x3e8>
 8002f7a:	e1b5      	b.n	80032e8 <__aeabi_dsub+0x754>
 8002f7c:	2f00      	cmp	r7, #0
 8002f7e:	d00d      	beq.n	8002f9c <__aeabi_dsub+0x408>
 8002f80:	1883      	adds	r3, r0, r2
 8002f82:	4283      	cmp	r3, r0
 8002f84:	4180      	sbcs	r0, r0
 8002f86:	445c      	add	r4, fp
 8002f88:	4240      	negs	r0, r0
 8002f8a:	1824      	adds	r4, r4, r0
 8002f8c:	0222      	lsls	r2, r4, #8
 8002f8e:	d500      	bpl.n	8002f92 <__aeabi_dsub+0x3fe>
 8002f90:	e1c8      	b.n	8003324 <__aeabi_dsub+0x790>
 8002f92:	001f      	movs	r7, r3
 8002f94:	4698      	mov	r8, r3
 8002f96:	4327      	orrs	r7, r4
 8002f98:	d100      	bne.n	8002f9c <__aeabi_dsub+0x408>
 8002f9a:	e0bc      	b.n	8003116 <__aeabi_dsub+0x582>
 8002f9c:	4643      	mov	r3, r8
 8002f9e:	0767      	lsls	r7, r4, #29
 8002fa0:	08db      	lsrs	r3, r3, #3
 8002fa2:	431f      	orrs	r7, r3
 8002fa4:	08e5      	lsrs	r5, r4, #3
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e04c      	b.n	8003044 <__aeabi_dsub+0x4b0>
 8002faa:	1a83      	subs	r3, r0, r2
 8002fac:	4698      	mov	r8, r3
 8002fae:	465b      	mov	r3, fp
 8002fb0:	4540      	cmp	r0, r8
 8002fb2:	41bf      	sbcs	r7, r7
 8002fb4:	1ae3      	subs	r3, r4, r3
 8002fb6:	427f      	negs	r7, r7
 8002fb8:	1bdb      	subs	r3, r3, r7
 8002fba:	021f      	lsls	r7, r3, #8
 8002fbc:	d47c      	bmi.n	80030b8 <__aeabi_dsub+0x524>
 8002fbe:	4647      	mov	r7, r8
 8002fc0:	431f      	orrs	r7, r3
 8002fc2:	d100      	bne.n	8002fc6 <__aeabi_dsub+0x432>
 8002fc4:	e0a6      	b.n	8003114 <__aeabi_dsub+0x580>
 8002fc6:	001c      	movs	r4, r3
 8002fc8:	4647      	mov	r7, r8
 8002fca:	e645      	b.n	8002c58 <__aeabi_dsub+0xc4>
 8002fcc:	4cb7      	ldr	r4, [pc, #732]	@ (80032ac <__aeabi_dsub+0x718>)
 8002fce:	1aed      	subs	r5, r5, r3
 8002fd0:	4014      	ands	r4, r2
 8002fd2:	077b      	lsls	r3, r7, #29
 8002fd4:	d000      	beq.n	8002fd8 <__aeabi_dsub+0x444>
 8002fd6:	e780      	b.n	8002eda <__aeabi_dsub+0x346>
 8002fd8:	e784      	b.n	8002ee4 <__aeabi_dsub+0x350>
 8002fda:	464b      	mov	r3, r9
 8002fdc:	0025      	movs	r5, r4
 8002fde:	4305      	orrs	r5, r0
 8002fe0:	d066      	beq.n	80030b0 <__aeabi_dsub+0x51c>
 8002fe2:	1e5f      	subs	r7, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0x456>
 8002fe8:	e0fc      	b.n	80031e4 <__aeabi_dsub+0x650>
 8002fea:	4dae      	ldr	r5, [pc, #696]	@ (80032a4 <__aeabi_dsub+0x710>)
 8002fec:	42ab      	cmp	r3, r5
 8002fee:	d100      	bne.n	8002ff2 <__aeabi_dsub+0x45e>
 8002ff0:	e15e      	b.n	80032b0 <__aeabi_dsub+0x71c>
 8002ff2:	4666      	mov	r6, ip
 8002ff4:	2f38      	cmp	r7, #56	@ 0x38
 8002ff6:	dc00      	bgt.n	8002ffa <__aeabi_dsub+0x466>
 8002ff8:	e0b4      	b.n	8003164 <__aeabi_dsub+0x5d0>
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	1a17      	subs	r7, r2, r0
 8002ffe:	42ba      	cmp	r2, r7
 8003000:	4192      	sbcs	r2, r2
 8003002:	465b      	mov	r3, fp
 8003004:	4252      	negs	r2, r2
 8003006:	464d      	mov	r5, r9
 8003008:	1a9c      	subs	r4, r3, r2
 800300a:	e620      	b.n	8002c4e <__aeabi_dsub+0xba>
 800300c:	0767      	lsls	r7, r4, #29
 800300e:	08c0      	lsrs	r0, r0, #3
 8003010:	4307      	orrs	r7, r0
 8003012:	08e5      	lsrs	r5, r4, #3
 8003014:	e6ba      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 8003016:	001f      	movs	r7, r3
 8003018:	4659      	mov	r1, fp
 800301a:	3f20      	subs	r7, #32
 800301c:	40f9      	lsrs	r1, r7
 800301e:	000f      	movs	r7, r1
 8003020:	2b20      	cmp	r3, #32
 8003022:	d005      	beq.n	8003030 <__aeabi_dsub+0x49c>
 8003024:	2140      	movs	r1, #64	@ 0x40
 8003026:	1acb      	subs	r3, r1, r3
 8003028:	4659      	mov	r1, fp
 800302a:	4099      	lsls	r1, r3
 800302c:	430a      	orrs	r2, r1
 800302e:	4692      	mov	sl, r2
 8003030:	4653      	mov	r3, sl
 8003032:	1e5a      	subs	r2, r3, #1
 8003034:	4193      	sbcs	r3, r2
 8003036:	431f      	orrs	r7, r3
 8003038:	e604      	b.n	8002c44 <__aeabi_dsub+0xb0>
 800303a:	1aeb      	subs	r3, r5, r3
 800303c:	4d9b      	ldr	r5, [pc, #620]	@ (80032ac <__aeabi_dsub+0x718>)
 800303e:	4015      	ands	r5, r2
 8003040:	076f      	lsls	r7, r5, #29
 8003042:	08ed      	lsrs	r5, r5, #3
 8003044:	032c      	lsls	r4, r5, #12
 8003046:	055d      	lsls	r5, r3, #21
 8003048:	0b24      	lsrs	r4, r4, #12
 800304a:	0d6d      	lsrs	r5, r5, #21
 800304c:	e736      	b.n	8002ebc <__aeabi_dsub+0x328>
 800304e:	4d95      	ldr	r5, [pc, #596]	@ (80032a4 <__aeabi_dsub+0x710>)
 8003050:	42ab      	cmp	r3, r5
 8003052:	d100      	bne.n	8003056 <__aeabi_dsub+0x4c2>
 8003054:	e0d6      	b.n	8003204 <__aeabi_dsub+0x670>
 8003056:	1882      	adds	r2, r0, r2
 8003058:	0021      	movs	r1, r4
 800305a:	4282      	cmp	r2, r0
 800305c:	4180      	sbcs	r0, r0
 800305e:	4459      	add	r1, fp
 8003060:	4240      	negs	r0, r0
 8003062:	1808      	adds	r0, r1, r0
 8003064:	07c7      	lsls	r7, r0, #31
 8003066:	0852      	lsrs	r2, r2, #1
 8003068:	4317      	orrs	r7, r2
 800306a:	0844      	lsrs	r4, r0, #1
 800306c:	0752      	lsls	r2, r2, #29
 800306e:	d400      	bmi.n	8003072 <__aeabi_dsub+0x4de>
 8003070:	e185      	b.n	800337e <__aeabi_dsub+0x7ea>
 8003072:	220f      	movs	r2, #15
 8003074:	001d      	movs	r5, r3
 8003076:	403a      	ands	r2, r7
 8003078:	2a04      	cmp	r2, #4
 800307a:	d000      	beq.n	800307e <__aeabi_dsub+0x4ea>
 800307c:	e61a      	b.n	8002cb4 <__aeabi_dsub+0x120>
 800307e:	08ff      	lsrs	r7, r7, #3
 8003080:	0764      	lsls	r4, r4, #29
 8003082:	4327      	orrs	r7, r4
 8003084:	0905      	lsrs	r5, r0, #4
 8003086:	e7dd      	b.n	8003044 <__aeabi_dsub+0x4b0>
 8003088:	465b      	mov	r3, fp
 800308a:	08d2      	lsrs	r2, r2, #3
 800308c:	075f      	lsls	r7, r3, #29
 800308e:	4317      	orrs	r7, r2
 8003090:	08dd      	lsrs	r5, r3, #3
 8003092:	e67b      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 8003094:	2700      	movs	r7, #0
 8003096:	2400      	movs	r4, #0
 8003098:	e710      	b.n	8002ebc <__aeabi_dsub+0x328>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d000      	beq.n	80030a0 <__aeabi_dsub+0x50c>
 800309e:	e0d6      	b.n	800324e <__aeabi_dsub+0x6ba>
 80030a0:	2900      	cmp	r1, #0
 80030a2:	d000      	beq.n	80030a6 <__aeabi_dsub+0x512>
 80030a4:	e12f      	b.n	8003306 <__aeabi_dsub+0x772>
 80030a6:	2480      	movs	r4, #128	@ 0x80
 80030a8:	2600      	movs	r6, #0
 80030aa:	4d7e      	ldr	r5, [pc, #504]	@ (80032a4 <__aeabi_dsub+0x710>)
 80030ac:	0324      	lsls	r4, r4, #12
 80030ae:	e705      	b.n	8002ebc <__aeabi_dsub+0x328>
 80030b0:	4666      	mov	r6, ip
 80030b2:	465c      	mov	r4, fp
 80030b4:	08d0      	lsrs	r0, r2, #3
 80030b6:	e717      	b.n	8002ee8 <__aeabi_dsub+0x354>
 80030b8:	465b      	mov	r3, fp
 80030ba:	1a17      	subs	r7, r2, r0
 80030bc:	42ba      	cmp	r2, r7
 80030be:	4192      	sbcs	r2, r2
 80030c0:	1b1c      	subs	r4, r3, r4
 80030c2:	2601      	movs	r6, #1
 80030c4:	4663      	mov	r3, ip
 80030c6:	4252      	negs	r2, r2
 80030c8:	1aa4      	subs	r4, r4, r2
 80030ca:	401e      	ands	r6, r3
 80030cc:	e5c4      	b.n	8002c58 <__aeabi_dsub+0xc4>
 80030ce:	1883      	adds	r3, r0, r2
 80030d0:	4283      	cmp	r3, r0
 80030d2:	4180      	sbcs	r0, r0
 80030d4:	445c      	add	r4, fp
 80030d6:	4240      	negs	r0, r0
 80030d8:	1825      	adds	r5, r4, r0
 80030da:	022a      	lsls	r2, r5, #8
 80030dc:	d400      	bmi.n	80030e0 <__aeabi_dsub+0x54c>
 80030de:	e0da      	b.n	8003296 <__aeabi_dsub+0x702>
 80030e0:	4a72      	ldr	r2, [pc, #456]	@ (80032ac <__aeabi_dsub+0x718>)
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	4015      	ands	r5, r2
 80030e6:	07ea      	lsls	r2, r5, #31
 80030e8:	431a      	orrs	r2, r3
 80030ea:	0869      	lsrs	r1, r5, #1
 80030ec:	075b      	lsls	r3, r3, #29
 80030ee:	d400      	bmi.n	80030f2 <__aeabi_dsub+0x55e>
 80030f0:	e14a      	b.n	8003388 <__aeabi_dsub+0x7f4>
 80030f2:	230f      	movs	r3, #15
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d100      	bne.n	80030fc <__aeabi_dsub+0x568>
 80030fa:	e0fc      	b.n	80032f6 <__aeabi_dsub+0x762>
 80030fc:	1d17      	adds	r7, r2, #4
 80030fe:	4297      	cmp	r7, r2
 8003100:	41a4      	sbcs	r4, r4
 8003102:	4264      	negs	r4, r4
 8003104:	2502      	movs	r5, #2
 8003106:	1864      	adds	r4, r4, r1
 8003108:	e6ec      	b.n	8002ee4 <__aeabi_dsub+0x350>
 800310a:	4647      	mov	r7, r8
 800310c:	001c      	movs	r4, r3
 800310e:	431f      	orrs	r7, r3
 8003110:	d000      	beq.n	8003114 <__aeabi_dsub+0x580>
 8003112:	e743      	b.n	8002f9c <__aeabi_dsub+0x408>
 8003114:	2600      	movs	r6, #0
 8003116:	2500      	movs	r5, #0
 8003118:	2400      	movs	r4, #0
 800311a:	e6cf      	b.n	8002ebc <__aeabi_dsub+0x328>
 800311c:	08c0      	lsrs	r0, r0, #3
 800311e:	0767      	lsls	r7, r4, #29
 8003120:	4307      	orrs	r7, r0
 8003122:	08e5      	lsrs	r5, r4, #3
 8003124:	e632      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 8003126:	1a87      	subs	r7, r0, r2
 8003128:	465b      	mov	r3, fp
 800312a:	42b8      	cmp	r0, r7
 800312c:	4180      	sbcs	r0, r0
 800312e:	1ae4      	subs	r4, r4, r3
 8003130:	4240      	negs	r0, r0
 8003132:	1a24      	subs	r4, r4, r0
 8003134:	0223      	lsls	r3, r4, #8
 8003136:	d428      	bmi.n	800318a <__aeabi_dsub+0x5f6>
 8003138:	0763      	lsls	r3, r4, #29
 800313a:	08ff      	lsrs	r7, r7, #3
 800313c:	431f      	orrs	r7, r3
 800313e:	08e5      	lsrs	r5, r4, #3
 8003140:	2301      	movs	r3, #1
 8003142:	e77f      	b.n	8003044 <__aeabi_dsub+0x4b0>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d100      	bne.n	800314a <__aeabi_dsub+0x5b6>
 8003148:	e673      	b.n	8002e32 <__aeabi_dsub+0x29e>
 800314a:	464b      	mov	r3, r9
 800314c:	1b5f      	subs	r7, r3, r5
 800314e:	003b      	movs	r3, r7
 8003150:	2d00      	cmp	r5, #0
 8003152:	d100      	bne.n	8003156 <__aeabi_dsub+0x5c2>
 8003154:	e742      	b.n	8002fdc <__aeabi_dsub+0x448>
 8003156:	2f38      	cmp	r7, #56	@ 0x38
 8003158:	dd00      	ble.n	800315c <__aeabi_dsub+0x5c8>
 800315a:	e0ec      	b.n	8003336 <__aeabi_dsub+0x7a2>
 800315c:	2380      	movs	r3, #128	@ 0x80
 800315e:	000e      	movs	r6, r1
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	431c      	orrs	r4, r3
 8003164:	2f1f      	cmp	r7, #31
 8003166:	dc25      	bgt.n	80031b4 <__aeabi_dsub+0x620>
 8003168:	2520      	movs	r5, #32
 800316a:	0023      	movs	r3, r4
 800316c:	1bed      	subs	r5, r5, r7
 800316e:	0001      	movs	r1, r0
 8003170:	40a8      	lsls	r0, r5
 8003172:	40ab      	lsls	r3, r5
 8003174:	40f9      	lsrs	r1, r7
 8003176:	1e45      	subs	r5, r0, #1
 8003178:	41a8      	sbcs	r0, r5
 800317a:	430b      	orrs	r3, r1
 800317c:	40fc      	lsrs	r4, r7
 800317e:	4318      	orrs	r0, r3
 8003180:	465b      	mov	r3, fp
 8003182:	1b1b      	subs	r3, r3, r4
 8003184:	469b      	mov	fp, r3
 8003186:	e739      	b.n	8002ffc <__aeabi_dsub+0x468>
 8003188:	4666      	mov	r6, ip
 800318a:	2501      	movs	r5, #1
 800318c:	e562      	b.n	8002c54 <__aeabi_dsub+0xc0>
 800318e:	001f      	movs	r7, r3
 8003190:	4659      	mov	r1, fp
 8003192:	3f20      	subs	r7, #32
 8003194:	40f9      	lsrs	r1, r7
 8003196:	468c      	mov	ip, r1
 8003198:	2b20      	cmp	r3, #32
 800319a:	d005      	beq.n	80031a8 <__aeabi_dsub+0x614>
 800319c:	2740      	movs	r7, #64	@ 0x40
 800319e:	4659      	mov	r1, fp
 80031a0:	1afb      	subs	r3, r7, r3
 80031a2:	4099      	lsls	r1, r3
 80031a4:	430a      	orrs	r2, r1
 80031a6:	4692      	mov	sl, r2
 80031a8:	4657      	mov	r7, sl
 80031aa:	1e7b      	subs	r3, r7, #1
 80031ac:	419f      	sbcs	r7, r3
 80031ae:	4663      	mov	r3, ip
 80031b0:	431f      	orrs	r7, r3
 80031b2:	e5c1      	b.n	8002d38 <__aeabi_dsub+0x1a4>
 80031b4:	003b      	movs	r3, r7
 80031b6:	0025      	movs	r5, r4
 80031b8:	3b20      	subs	r3, #32
 80031ba:	40dd      	lsrs	r5, r3
 80031bc:	2f20      	cmp	r7, #32
 80031be:	d004      	beq.n	80031ca <__aeabi_dsub+0x636>
 80031c0:	2340      	movs	r3, #64	@ 0x40
 80031c2:	1bdb      	subs	r3, r3, r7
 80031c4:	409c      	lsls	r4, r3
 80031c6:	4320      	orrs	r0, r4
 80031c8:	4680      	mov	r8, r0
 80031ca:	4640      	mov	r0, r8
 80031cc:	1e43      	subs	r3, r0, #1
 80031ce:	4198      	sbcs	r0, r3
 80031d0:	4328      	orrs	r0, r5
 80031d2:	e713      	b.n	8002ffc <__aeabi_dsub+0x468>
 80031d4:	2900      	cmp	r1, #0
 80031d6:	d09d      	beq.n	8003114 <__aeabi_dsub+0x580>
 80031d8:	2601      	movs	r6, #1
 80031da:	4663      	mov	r3, ip
 80031dc:	465c      	mov	r4, fp
 80031de:	4690      	mov	r8, r2
 80031e0:	401e      	ands	r6, r3
 80031e2:	e6db      	b.n	8002f9c <__aeabi_dsub+0x408>
 80031e4:	1a17      	subs	r7, r2, r0
 80031e6:	465b      	mov	r3, fp
 80031e8:	42ba      	cmp	r2, r7
 80031ea:	4192      	sbcs	r2, r2
 80031ec:	1b1c      	subs	r4, r3, r4
 80031ee:	4252      	negs	r2, r2
 80031f0:	1aa4      	subs	r4, r4, r2
 80031f2:	0223      	lsls	r3, r4, #8
 80031f4:	d4c8      	bmi.n	8003188 <__aeabi_dsub+0x5f4>
 80031f6:	0763      	lsls	r3, r4, #29
 80031f8:	08ff      	lsrs	r7, r7, #3
 80031fa:	431f      	orrs	r7, r3
 80031fc:	4666      	mov	r6, ip
 80031fe:	2301      	movs	r3, #1
 8003200:	08e5      	lsrs	r5, r4, #3
 8003202:	e71f      	b.n	8003044 <__aeabi_dsub+0x4b0>
 8003204:	001d      	movs	r5, r3
 8003206:	2400      	movs	r4, #0
 8003208:	2700      	movs	r7, #0
 800320a:	e657      	b.n	8002ebc <__aeabi_dsub+0x328>
 800320c:	465c      	mov	r4, fp
 800320e:	08d0      	lsrs	r0, r2, #3
 8003210:	e66a      	b.n	8002ee8 <__aeabi_dsub+0x354>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d100      	bne.n	8003218 <__aeabi_dsub+0x684>
 8003216:	e737      	b.n	8003088 <__aeabi_dsub+0x4f4>
 8003218:	4653      	mov	r3, sl
 800321a:	08c0      	lsrs	r0, r0, #3
 800321c:	0767      	lsls	r7, r4, #29
 800321e:	4307      	orrs	r7, r0
 8003220:	08e5      	lsrs	r5, r4, #3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d100      	bne.n	8003228 <__aeabi_dsub+0x694>
 8003226:	e5b1      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	031b      	lsls	r3, r3, #12
 800322c:	421d      	tst	r5, r3
 800322e:	d008      	beq.n	8003242 <__aeabi_dsub+0x6ae>
 8003230:	4659      	mov	r1, fp
 8003232:	08c8      	lsrs	r0, r1, #3
 8003234:	4218      	tst	r0, r3
 8003236:	d104      	bne.n	8003242 <__aeabi_dsub+0x6ae>
 8003238:	08d2      	lsrs	r2, r2, #3
 800323a:	0749      	lsls	r1, r1, #29
 800323c:	430a      	orrs	r2, r1
 800323e:	0017      	movs	r7, r2
 8003240:	0005      	movs	r5, r0
 8003242:	0f7b      	lsrs	r3, r7, #29
 8003244:	00ff      	lsls	r7, r7, #3
 8003246:	08ff      	lsrs	r7, r7, #3
 8003248:	075b      	lsls	r3, r3, #29
 800324a:	431f      	orrs	r7, r3
 800324c:	e59e      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 800324e:	08c0      	lsrs	r0, r0, #3
 8003250:	0763      	lsls	r3, r4, #29
 8003252:	4318      	orrs	r0, r3
 8003254:	08e5      	lsrs	r5, r4, #3
 8003256:	2900      	cmp	r1, #0
 8003258:	d053      	beq.n	8003302 <__aeabi_dsub+0x76e>
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	031b      	lsls	r3, r3, #12
 800325e:	421d      	tst	r5, r3
 8003260:	d00a      	beq.n	8003278 <__aeabi_dsub+0x6e4>
 8003262:	4659      	mov	r1, fp
 8003264:	08cc      	lsrs	r4, r1, #3
 8003266:	421c      	tst	r4, r3
 8003268:	d106      	bne.n	8003278 <__aeabi_dsub+0x6e4>
 800326a:	2601      	movs	r6, #1
 800326c:	4663      	mov	r3, ip
 800326e:	0025      	movs	r5, r4
 8003270:	08d0      	lsrs	r0, r2, #3
 8003272:	0749      	lsls	r1, r1, #29
 8003274:	4308      	orrs	r0, r1
 8003276:	401e      	ands	r6, r3
 8003278:	0f47      	lsrs	r7, r0, #29
 800327a:	00c0      	lsls	r0, r0, #3
 800327c:	08c0      	lsrs	r0, r0, #3
 800327e:	077f      	lsls	r7, r7, #29
 8003280:	4307      	orrs	r7, r0
 8003282:	e583      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 8003284:	1883      	adds	r3, r0, r2
 8003286:	4293      	cmp	r3, r2
 8003288:	4192      	sbcs	r2, r2
 800328a:	445c      	add	r4, fp
 800328c:	4252      	negs	r2, r2
 800328e:	18a5      	adds	r5, r4, r2
 8003290:	022a      	lsls	r2, r5, #8
 8003292:	d500      	bpl.n	8003296 <__aeabi_dsub+0x702>
 8003294:	e724      	b.n	80030e0 <__aeabi_dsub+0x54c>
 8003296:	076f      	lsls	r7, r5, #29
 8003298:	08db      	lsrs	r3, r3, #3
 800329a:	431f      	orrs	r7, r3
 800329c:	08ed      	lsrs	r5, r5, #3
 800329e:	2301      	movs	r3, #1
 80032a0:	e6d0      	b.n	8003044 <__aeabi_dsub+0x4b0>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000007ff 	.word	0x000007ff
 80032a8:	000007fe 	.word	0x000007fe
 80032ac:	ff7fffff 	.word	0xff7fffff
 80032b0:	465b      	mov	r3, fp
 80032b2:	08d2      	lsrs	r2, r2, #3
 80032b4:	075f      	lsls	r7, r3, #29
 80032b6:	4666      	mov	r6, ip
 80032b8:	4317      	orrs	r7, r2
 80032ba:	08dd      	lsrs	r5, r3, #3
 80032bc:	e566      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 80032be:	0025      	movs	r5, r4
 80032c0:	3b20      	subs	r3, #32
 80032c2:	40dd      	lsrs	r5, r3
 80032c4:	4663      	mov	r3, ip
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d005      	beq.n	80032d6 <__aeabi_dsub+0x742>
 80032ca:	2340      	movs	r3, #64	@ 0x40
 80032cc:	4661      	mov	r1, ip
 80032ce:	1a5b      	subs	r3, r3, r1
 80032d0:	409c      	lsls	r4, r3
 80032d2:	4320      	orrs	r0, r4
 80032d4:	4680      	mov	r8, r0
 80032d6:	4647      	mov	r7, r8
 80032d8:	1e7b      	subs	r3, r7, #1
 80032da:	419f      	sbcs	r7, r3
 80032dc:	432f      	orrs	r7, r5
 80032de:	e5a0      	b.n	8002e22 <__aeabi_dsub+0x28e>
 80032e0:	2120      	movs	r1, #32
 80032e2:	2700      	movs	r7, #0
 80032e4:	1a09      	subs	r1, r1, r0
 80032e6:	e4d2      	b.n	8002c8e <__aeabi_dsub+0xfa>
 80032e8:	2f00      	cmp	r7, #0
 80032ea:	d100      	bne.n	80032ee <__aeabi_dsub+0x75a>
 80032ec:	e713      	b.n	8003116 <__aeabi_dsub+0x582>
 80032ee:	465c      	mov	r4, fp
 80032f0:	0017      	movs	r7, r2
 80032f2:	2500      	movs	r5, #0
 80032f4:	e5f6      	b.n	8002ee4 <__aeabi_dsub+0x350>
 80032f6:	08d7      	lsrs	r7, r2, #3
 80032f8:	0749      	lsls	r1, r1, #29
 80032fa:	2302      	movs	r3, #2
 80032fc:	430f      	orrs	r7, r1
 80032fe:	092d      	lsrs	r5, r5, #4
 8003300:	e6a0      	b.n	8003044 <__aeabi_dsub+0x4b0>
 8003302:	0007      	movs	r7, r0
 8003304:	e542      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 8003306:	465b      	mov	r3, fp
 8003308:	2601      	movs	r6, #1
 800330a:	075f      	lsls	r7, r3, #29
 800330c:	08dd      	lsrs	r5, r3, #3
 800330e:	4663      	mov	r3, ip
 8003310:	08d2      	lsrs	r2, r2, #3
 8003312:	4317      	orrs	r7, r2
 8003314:	401e      	ands	r6, r3
 8003316:	e539      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 8003318:	465b      	mov	r3, fp
 800331a:	08d2      	lsrs	r2, r2, #3
 800331c:	075f      	lsls	r7, r3, #29
 800331e:	4317      	orrs	r7, r2
 8003320:	08dd      	lsrs	r5, r3, #3
 8003322:	e533      	b.n	8002d8c <__aeabi_dsub+0x1f8>
 8003324:	4a1e      	ldr	r2, [pc, #120]	@ (80033a0 <__aeabi_dsub+0x80c>)
 8003326:	08db      	lsrs	r3, r3, #3
 8003328:	4022      	ands	r2, r4
 800332a:	0757      	lsls	r7, r2, #29
 800332c:	0252      	lsls	r2, r2, #9
 800332e:	2501      	movs	r5, #1
 8003330:	431f      	orrs	r7, r3
 8003332:	0b14      	lsrs	r4, r2, #12
 8003334:	e5c2      	b.n	8002ebc <__aeabi_dsub+0x328>
 8003336:	000e      	movs	r6, r1
 8003338:	2001      	movs	r0, #1
 800333a:	e65f      	b.n	8002ffc <__aeabi_dsub+0x468>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <__aeabi_dsub+0x7c8>
 8003340:	464b      	mov	r3, r9
 8003342:	1b5b      	subs	r3, r3, r5
 8003344:	469c      	mov	ip, r3
 8003346:	2d00      	cmp	r5, #0
 8003348:	d100      	bne.n	800334c <__aeabi_dsub+0x7b8>
 800334a:	e548      	b.n	8002dde <__aeabi_dsub+0x24a>
 800334c:	2701      	movs	r7, #1
 800334e:	2b38      	cmp	r3, #56	@ 0x38
 8003350:	dd00      	ble.n	8003354 <__aeabi_dsub+0x7c0>
 8003352:	e566      	b.n	8002e22 <__aeabi_dsub+0x28e>
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431c      	orrs	r4, r3
 800335a:	e550      	b.n	8002dfe <__aeabi_dsub+0x26a>
 800335c:	1c6b      	adds	r3, r5, #1
 800335e:	4d11      	ldr	r5, [pc, #68]	@ (80033a4 <__aeabi_dsub+0x810>)
 8003360:	422b      	tst	r3, r5
 8003362:	d000      	beq.n	8003366 <__aeabi_dsub+0x7d2>
 8003364:	e673      	b.n	800304e <__aeabi_dsub+0x4ba>
 8003366:	4659      	mov	r1, fp
 8003368:	0023      	movs	r3, r4
 800336a:	4311      	orrs	r1, r2
 800336c:	468a      	mov	sl, r1
 800336e:	4303      	orrs	r3, r0
 8003370:	e600      	b.n	8002f74 <__aeabi_dsub+0x3e0>
 8003372:	0767      	lsls	r7, r4, #29
 8003374:	08c0      	lsrs	r0, r0, #3
 8003376:	2300      	movs	r3, #0
 8003378:	4307      	orrs	r7, r0
 800337a:	08e5      	lsrs	r5, r4, #3
 800337c:	e662      	b.n	8003044 <__aeabi_dsub+0x4b0>
 800337e:	0764      	lsls	r4, r4, #29
 8003380:	08ff      	lsrs	r7, r7, #3
 8003382:	4327      	orrs	r7, r4
 8003384:	0905      	lsrs	r5, r0, #4
 8003386:	e65d      	b.n	8003044 <__aeabi_dsub+0x4b0>
 8003388:	08d2      	lsrs	r2, r2, #3
 800338a:	0749      	lsls	r1, r1, #29
 800338c:	4311      	orrs	r1, r2
 800338e:	000f      	movs	r7, r1
 8003390:	2302      	movs	r3, #2
 8003392:	092d      	lsrs	r5, r5, #4
 8003394:	e656      	b.n	8003044 <__aeabi_dsub+0x4b0>
 8003396:	0007      	movs	r7, r0
 8003398:	e5a4      	b.n	8002ee4 <__aeabi_dsub+0x350>
 800339a:	0038      	movs	r0, r7
 800339c:	e48f      	b.n	8002cbe <__aeabi_dsub+0x12a>
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	ff7fffff 	.word	0xff7fffff
 80033a4:	000007fe 	.word	0x000007fe

080033a8 <__aeabi_dcmpun>:
 80033a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033aa:	46c6      	mov	lr, r8
 80033ac:	031e      	lsls	r6, r3, #12
 80033ae:	0b36      	lsrs	r6, r6, #12
 80033b0:	46b0      	mov	r8, r6
 80033b2:	4e0d      	ldr	r6, [pc, #52]	@ (80033e8 <__aeabi_dcmpun+0x40>)
 80033b4:	030c      	lsls	r4, r1, #12
 80033b6:	004d      	lsls	r5, r1, #1
 80033b8:	005f      	lsls	r7, r3, #1
 80033ba:	b500      	push	{lr}
 80033bc:	0b24      	lsrs	r4, r4, #12
 80033be:	0d6d      	lsrs	r5, r5, #21
 80033c0:	0d7f      	lsrs	r7, r7, #21
 80033c2:	42b5      	cmp	r5, r6
 80033c4:	d00b      	beq.n	80033de <__aeabi_dcmpun+0x36>
 80033c6:	4908      	ldr	r1, [pc, #32]	@ (80033e8 <__aeabi_dcmpun+0x40>)
 80033c8:	2000      	movs	r0, #0
 80033ca:	428f      	cmp	r7, r1
 80033cc:	d104      	bne.n	80033d8 <__aeabi_dcmpun+0x30>
 80033ce:	4646      	mov	r6, r8
 80033d0:	4316      	orrs	r6, r2
 80033d2:	0030      	movs	r0, r6
 80033d4:	1e43      	subs	r3, r0, #1
 80033d6:	4198      	sbcs	r0, r3
 80033d8:	bc80      	pop	{r7}
 80033da:	46b8      	mov	r8, r7
 80033dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033de:	4304      	orrs	r4, r0
 80033e0:	2001      	movs	r0, #1
 80033e2:	2c00      	cmp	r4, #0
 80033e4:	d1f8      	bne.n	80033d8 <__aeabi_dcmpun+0x30>
 80033e6:	e7ee      	b.n	80033c6 <__aeabi_dcmpun+0x1e>
 80033e8:	000007ff 	.word	0x000007ff

080033ec <__aeabi_d2iz>:
 80033ec:	000b      	movs	r3, r1
 80033ee:	0002      	movs	r2, r0
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	4d16      	ldr	r5, [pc, #88]	@ (800344c <__aeabi_d2iz+0x60>)
 80033f4:	030c      	lsls	r4, r1, #12
 80033f6:	b082      	sub	sp, #8
 80033f8:	0049      	lsls	r1, r1, #1
 80033fa:	2000      	movs	r0, #0
 80033fc:	9200      	str	r2, [sp, #0]
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	0b24      	lsrs	r4, r4, #12
 8003402:	0d49      	lsrs	r1, r1, #21
 8003404:	0fde      	lsrs	r6, r3, #31
 8003406:	42a9      	cmp	r1, r5
 8003408:	dd04      	ble.n	8003414 <__aeabi_d2iz+0x28>
 800340a:	4811      	ldr	r0, [pc, #68]	@ (8003450 <__aeabi_d2iz+0x64>)
 800340c:	4281      	cmp	r1, r0
 800340e:	dd03      	ble.n	8003418 <__aeabi_d2iz+0x2c>
 8003410:	4b10      	ldr	r3, [pc, #64]	@ (8003454 <__aeabi_d2iz+0x68>)
 8003412:	18f0      	adds	r0, r6, r3
 8003414:	b002      	add	sp, #8
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	2080      	movs	r0, #128	@ 0x80
 800341a:	0340      	lsls	r0, r0, #13
 800341c:	4320      	orrs	r0, r4
 800341e:	4c0e      	ldr	r4, [pc, #56]	@ (8003458 <__aeabi_d2iz+0x6c>)
 8003420:	1a64      	subs	r4, r4, r1
 8003422:	2c1f      	cmp	r4, #31
 8003424:	dd08      	ble.n	8003438 <__aeabi_d2iz+0x4c>
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <__aeabi_d2iz+0x70>)
 8003428:	1a5b      	subs	r3, r3, r1
 800342a:	40d8      	lsrs	r0, r3
 800342c:	0003      	movs	r3, r0
 800342e:	4258      	negs	r0, r3
 8003430:	2e00      	cmp	r6, #0
 8003432:	d1ef      	bne.n	8003414 <__aeabi_d2iz+0x28>
 8003434:	0018      	movs	r0, r3
 8003436:	e7ed      	b.n	8003414 <__aeabi_d2iz+0x28>
 8003438:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <__aeabi_d2iz+0x74>)
 800343a:	9a00      	ldr	r2, [sp, #0]
 800343c:	469c      	mov	ip, r3
 800343e:	0003      	movs	r3, r0
 8003440:	4461      	add	r1, ip
 8003442:	408b      	lsls	r3, r1
 8003444:	40e2      	lsrs	r2, r4
 8003446:	4313      	orrs	r3, r2
 8003448:	e7f1      	b.n	800342e <__aeabi_d2iz+0x42>
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	000003fe 	.word	0x000003fe
 8003450:	0000041d 	.word	0x0000041d
 8003454:	7fffffff 	.word	0x7fffffff
 8003458:	00000433 	.word	0x00000433
 800345c:	00000413 	.word	0x00000413
 8003460:	fffffbed 	.word	0xfffffbed

08003464 <__aeabi_i2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	2800      	cmp	r0, #0
 8003468:	d016      	beq.n	8003498 <__aeabi_i2d+0x34>
 800346a:	17c3      	asrs	r3, r0, #31
 800346c:	18c5      	adds	r5, r0, r3
 800346e:	405d      	eors	r5, r3
 8003470:	0fc4      	lsrs	r4, r0, #31
 8003472:	0028      	movs	r0, r5
 8003474:	f000 f912 	bl	800369c <__clzsi2>
 8003478:	4b10      	ldr	r3, [pc, #64]	@ (80034bc <__aeabi_i2d+0x58>)
 800347a:	1a1b      	subs	r3, r3, r0
 800347c:	055b      	lsls	r3, r3, #21
 800347e:	0d5b      	lsrs	r3, r3, #21
 8003480:	280a      	cmp	r0, #10
 8003482:	dc14      	bgt.n	80034ae <__aeabi_i2d+0x4a>
 8003484:	0002      	movs	r2, r0
 8003486:	002e      	movs	r6, r5
 8003488:	3215      	adds	r2, #21
 800348a:	4096      	lsls	r6, r2
 800348c:	220b      	movs	r2, #11
 800348e:	1a12      	subs	r2, r2, r0
 8003490:	40d5      	lsrs	r5, r2
 8003492:	032d      	lsls	r5, r5, #12
 8003494:	0b2d      	lsrs	r5, r5, #12
 8003496:	e003      	b.n	80034a0 <__aeabi_i2d+0x3c>
 8003498:	2400      	movs	r4, #0
 800349a:	2300      	movs	r3, #0
 800349c:	2500      	movs	r5, #0
 800349e:	2600      	movs	r6, #0
 80034a0:	051b      	lsls	r3, r3, #20
 80034a2:	432b      	orrs	r3, r5
 80034a4:	07e4      	lsls	r4, r4, #31
 80034a6:	4323      	orrs	r3, r4
 80034a8:	0030      	movs	r0, r6
 80034aa:	0019      	movs	r1, r3
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
 80034ae:	380b      	subs	r0, #11
 80034b0:	4085      	lsls	r5, r0
 80034b2:	032d      	lsls	r5, r5, #12
 80034b4:	2600      	movs	r6, #0
 80034b6:	0b2d      	lsrs	r5, r5, #12
 80034b8:	e7f2      	b.n	80034a0 <__aeabi_i2d+0x3c>
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	0000041e 	.word	0x0000041e

080034c0 <__aeabi_ui2d>:
 80034c0:	b510      	push	{r4, lr}
 80034c2:	1e04      	subs	r4, r0, #0
 80034c4:	d010      	beq.n	80034e8 <__aeabi_ui2d+0x28>
 80034c6:	f000 f8e9 	bl	800369c <__clzsi2>
 80034ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003504 <__aeabi_ui2d+0x44>)
 80034cc:	1a1b      	subs	r3, r3, r0
 80034ce:	055b      	lsls	r3, r3, #21
 80034d0:	0d5b      	lsrs	r3, r3, #21
 80034d2:	280a      	cmp	r0, #10
 80034d4:	dc0f      	bgt.n	80034f6 <__aeabi_ui2d+0x36>
 80034d6:	220b      	movs	r2, #11
 80034d8:	0021      	movs	r1, r4
 80034da:	1a12      	subs	r2, r2, r0
 80034dc:	40d1      	lsrs	r1, r2
 80034de:	3015      	adds	r0, #21
 80034e0:	030a      	lsls	r2, r1, #12
 80034e2:	4084      	lsls	r4, r0
 80034e4:	0b12      	lsrs	r2, r2, #12
 80034e6:	e001      	b.n	80034ec <__aeabi_ui2d+0x2c>
 80034e8:	2300      	movs	r3, #0
 80034ea:	2200      	movs	r2, #0
 80034ec:	051b      	lsls	r3, r3, #20
 80034ee:	4313      	orrs	r3, r2
 80034f0:	0020      	movs	r0, r4
 80034f2:	0019      	movs	r1, r3
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	0022      	movs	r2, r4
 80034f8:	380b      	subs	r0, #11
 80034fa:	4082      	lsls	r2, r0
 80034fc:	0312      	lsls	r2, r2, #12
 80034fe:	2400      	movs	r4, #0
 8003500:	0b12      	lsrs	r2, r2, #12
 8003502:	e7f3      	b.n	80034ec <__aeabi_ui2d+0x2c>
 8003504:	0000041e 	.word	0x0000041e

08003508 <__aeabi_f2d>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	0242      	lsls	r2, r0, #9
 800350c:	0043      	lsls	r3, r0, #1
 800350e:	0fc4      	lsrs	r4, r0, #31
 8003510:	20fe      	movs	r0, #254	@ 0xfe
 8003512:	0e1b      	lsrs	r3, r3, #24
 8003514:	1c59      	adds	r1, r3, #1
 8003516:	0a55      	lsrs	r5, r2, #9
 8003518:	4208      	tst	r0, r1
 800351a:	d00c      	beq.n	8003536 <__aeabi_f2d+0x2e>
 800351c:	21e0      	movs	r1, #224	@ 0xe0
 800351e:	0089      	lsls	r1, r1, #2
 8003520:	468c      	mov	ip, r1
 8003522:	076d      	lsls	r5, r5, #29
 8003524:	0b12      	lsrs	r2, r2, #12
 8003526:	4463      	add	r3, ip
 8003528:	051b      	lsls	r3, r3, #20
 800352a:	4313      	orrs	r3, r2
 800352c:	07e4      	lsls	r4, r4, #31
 800352e:	4323      	orrs	r3, r4
 8003530:	0028      	movs	r0, r5
 8003532:	0019      	movs	r1, r3
 8003534:	bd70      	pop	{r4, r5, r6, pc}
 8003536:	2b00      	cmp	r3, #0
 8003538:	d114      	bne.n	8003564 <__aeabi_f2d+0x5c>
 800353a:	2d00      	cmp	r5, #0
 800353c:	d01b      	beq.n	8003576 <__aeabi_f2d+0x6e>
 800353e:	0028      	movs	r0, r5
 8003540:	f000 f8ac 	bl	800369c <__clzsi2>
 8003544:	280a      	cmp	r0, #10
 8003546:	dc1c      	bgt.n	8003582 <__aeabi_f2d+0x7a>
 8003548:	230b      	movs	r3, #11
 800354a:	002a      	movs	r2, r5
 800354c:	1a1b      	subs	r3, r3, r0
 800354e:	40da      	lsrs	r2, r3
 8003550:	0003      	movs	r3, r0
 8003552:	3315      	adds	r3, #21
 8003554:	409d      	lsls	r5, r3
 8003556:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <__aeabi_f2d+0x88>)
 8003558:	0312      	lsls	r2, r2, #12
 800355a:	1a1b      	subs	r3, r3, r0
 800355c:	055b      	lsls	r3, r3, #21
 800355e:	0b12      	lsrs	r2, r2, #12
 8003560:	0d5b      	lsrs	r3, r3, #21
 8003562:	e7e1      	b.n	8003528 <__aeabi_f2d+0x20>
 8003564:	2d00      	cmp	r5, #0
 8003566:	d009      	beq.n	800357c <__aeabi_f2d+0x74>
 8003568:	0b13      	lsrs	r3, r2, #12
 800356a:	2280      	movs	r2, #128	@ 0x80
 800356c:	0312      	lsls	r2, r2, #12
 800356e:	431a      	orrs	r2, r3
 8003570:	076d      	lsls	r5, r5, #29
 8003572:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <__aeabi_f2d+0x8c>)
 8003574:	e7d8      	b.n	8003528 <__aeabi_f2d+0x20>
 8003576:	2300      	movs	r3, #0
 8003578:	2200      	movs	r2, #0
 800357a:	e7d5      	b.n	8003528 <__aeabi_f2d+0x20>
 800357c:	2200      	movs	r2, #0
 800357e:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <__aeabi_f2d+0x8c>)
 8003580:	e7d2      	b.n	8003528 <__aeabi_f2d+0x20>
 8003582:	0003      	movs	r3, r0
 8003584:	002a      	movs	r2, r5
 8003586:	3b0b      	subs	r3, #11
 8003588:	409a      	lsls	r2, r3
 800358a:	2500      	movs	r5, #0
 800358c:	e7e3      	b.n	8003556 <__aeabi_f2d+0x4e>
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	00000389 	.word	0x00000389
 8003594:	000007ff 	.word	0x000007ff

08003598 <__aeabi_d2f>:
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	004b      	lsls	r3, r1, #1
 800359c:	030f      	lsls	r7, r1, #12
 800359e:	0d5b      	lsrs	r3, r3, #21
 80035a0:	4c3a      	ldr	r4, [pc, #232]	@ (800368c <__aeabi_d2f+0xf4>)
 80035a2:	0f45      	lsrs	r5, r0, #29
 80035a4:	b083      	sub	sp, #12
 80035a6:	0a7f      	lsrs	r7, r7, #9
 80035a8:	1c5e      	adds	r6, r3, #1
 80035aa:	432f      	orrs	r7, r5
 80035ac:	9000      	str	r0, [sp, #0]
 80035ae:	9101      	str	r1, [sp, #4]
 80035b0:	0fca      	lsrs	r2, r1, #31
 80035b2:	00c5      	lsls	r5, r0, #3
 80035b4:	4226      	tst	r6, r4
 80035b6:	d00b      	beq.n	80035d0 <__aeabi_d2f+0x38>
 80035b8:	4935      	ldr	r1, [pc, #212]	@ (8003690 <__aeabi_d2f+0xf8>)
 80035ba:	185c      	adds	r4, r3, r1
 80035bc:	2cfe      	cmp	r4, #254	@ 0xfe
 80035be:	dd13      	ble.n	80035e8 <__aeabi_d2f+0x50>
 80035c0:	20ff      	movs	r0, #255	@ 0xff
 80035c2:	2300      	movs	r3, #0
 80035c4:	05c0      	lsls	r0, r0, #23
 80035c6:	4318      	orrs	r0, r3
 80035c8:	07d2      	lsls	r2, r2, #31
 80035ca:	4310      	orrs	r0, r2
 80035cc:	b003      	add	sp, #12
 80035ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d0:	433d      	orrs	r5, r7
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <__aeabi_d2f+0x42>
 80035d6:	2000      	movs	r0, #0
 80035d8:	e7f4      	b.n	80035c4 <__aeabi_d2f+0x2c>
 80035da:	2d00      	cmp	r5, #0
 80035dc:	d0f0      	beq.n	80035c0 <__aeabi_d2f+0x28>
 80035de:	2380      	movs	r3, #128	@ 0x80
 80035e0:	03db      	lsls	r3, r3, #15
 80035e2:	20ff      	movs	r0, #255	@ 0xff
 80035e4:	433b      	orrs	r3, r7
 80035e6:	e7ed      	b.n	80035c4 <__aeabi_d2f+0x2c>
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	dd0c      	ble.n	8003606 <__aeabi_d2f+0x6e>
 80035ec:	9b00      	ldr	r3, [sp, #0]
 80035ee:	00ff      	lsls	r7, r7, #3
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	1e58      	subs	r0, r3, #1
 80035f4:	4183      	sbcs	r3, r0
 80035f6:	0f69      	lsrs	r1, r5, #29
 80035f8:	433b      	orrs	r3, r7
 80035fa:	430b      	orrs	r3, r1
 80035fc:	0759      	lsls	r1, r3, #29
 80035fe:	d127      	bne.n	8003650 <__aeabi_d2f+0xb8>
 8003600:	08db      	lsrs	r3, r3, #3
 8003602:	b2e0      	uxtb	r0, r4
 8003604:	e7de      	b.n	80035c4 <__aeabi_d2f+0x2c>
 8003606:	0021      	movs	r1, r4
 8003608:	3117      	adds	r1, #23
 800360a:	db31      	blt.n	8003670 <__aeabi_d2f+0xd8>
 800360c:	2180      	movs	r1, #128	@ 0x80
 800360e:	201e      	movs	r0, #30
 8003610:	0409      	lsls	r1, r1, #16
 8003612:	4339      	orrs	r1, r7
 8003614:	1b00      	subs	r0, r0, r4
 8003616:	281f      	cmp	r0, #31
 8003618:	dd2d      	ble.n	8003676 <__aeabi_d2f+0xde>
 800361a:	2602      	movs	r6, #2
 800361c:	4276      	negs	r6, r6
 800361e:	1b34      	subs	r4, r6, r4
 8003620:	000e      	movs	r6, r1
 8003622:	40e6      	lsrs	r6, r4
 8003624:	0034      	movs	r4, r6
 8003626:	2820      	cmp	r0, #32
 8003628:	d004      	beq.n	8003634 <__aeabi_d2f+0x9c>
 800362a:	481a      	ldr	r0, [pc, #104]	@ (8003694 <__aeabi_d2f+0xfc>)
 800362c:	4684      	mov	ip, r0
 800362e:	4463      	add	r3, ip
 8003630:	4099      	lsls	r1, r3
 8003632:	430d      	orrs	r5, r1
 8003634:	002b      	movs	r3, r5
 8003636:	1e59      	subs	r1, r3, #1
 8003638:	418b      	sbcs	r3, r1
 800363a:	4323      	orrs	r3, r4
 800363c:	0759      	lsls	r1, r3, #29
 800363e:	d003      	beq.n	8003648 <__aeabi_d2f+0xb0>
 8003640:	210f      	movs	r1, #15
 8003642:	4019      	ands	r1, r3
 8003644:	2904      	cmp	r1, #4
 8003646:	d10b      	bne.n	8003660 <__aeabi_d2f+0xc8>
 8003648:	019b      	lsls	r3, r3, #6
 800364a:	2000      	movs	r0, #0
 800364c:	0a5b      	lsrs	r3, r3, #9
 800364e:	e7b9      	b.n	80035c4 <__aeabi_d2f+0x2c>
 8003650:	210f      	movs	r1, #15
 8003652:	4019      	ands	r1, r3
 8003654:	2904      	cmp	r1, #4
 8003656:	d104      	bne.n	8003662 <__aeabi_d2f+0xca>
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	0a5b      	lsrs	r3, r3, #9
 800365c:	b2e0      	uxtb	r0, r4
 800365e:	e7b1      	b.n	80035c4 <__aeabi_d2f+0x2c>
 8003660:	2400      	movs	r4, #0
 8003662:	3304      	adds	r3, #4
 8003664:	0159      	lsls	r1, r3, #5
 8003666:	d5f7      	bpl.n	8003658 <__aeabi_d2f+0xc0>
 8003668:	3401      	adds	r4, #1
 800366a:	2300      	movs	r3, #0
 800366c:	b2e0      	uxtb	r0, r4
 800366e:	e7a9      	b.n	80035c4 <__aeabi_d2f+0x2c>
 8003670:	2000      	movs	r0, #0
 8003672:	2300      	movs	r3, #0
 8003674:	e7a6      	b.n	80035c4 <__aeabi_d2f+0x2c>
 8003676:	4c08      	ldr	r4, [pc, #32]	@ (8003698 <__aeabi_d2f+0x100>)
 8003678:	191c      	adds	r4, r3, r4
 800367a:	002b      	movs	r3, r5
 800367c:	40a5      	lsls	r5, r4
 800367e:	40c3      	lsrs	r3, r0
 8003680:	40a1      	lsls	r1, r4
 8003682:	1e68      	subs	r0, r5, #1
 8003684:	4185      	sbcs	r5, r0
 8003686:	4329      	orrs	r1, r5
 8003688:	430b      	orrs	r3, r1
 800368a:	e7d7      	b.n	800363c <__aeabi_d2f+0xa4>
 800368c:	000007fe 	.word	0x000007fe
 8003690:	fffffc80 	.word	0xfffffc80
 8003694:	fffffca2 	.word	0xfffffca2
 8003698:	fffffc82 	.word	0xfffffc82

0800369c <__clzsi2>:
 800369c:	211c      	movs	r1, #28
 800369e:	2301      	movs	r3, #1
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	4298      	cmp	r0, r3
 80036a4:	d301      	bcc.n	80036aa <__clzsi2+0xe>
 80036a6:	0c00      	lsrs	r0, r0, #16
 80036a8:	3910      	subs	r1, #16
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	4298      	cmp	r0, r3
 80036ae:	d301      	bcc.n	80036b4 <__clzsi2+0x18>
 80036b0:	0a00      	lsrs	r0, r0, #8
 80036b2:	3908      	subs	r1, #8
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	4298      	cmp	r0, r3
 80036b8:	d301      	bcc.n	80036be <__clzsi2+0x22>
 80036ba:	0900      	lsrs	r0, r0, #4
 80036bc:	3904      	subs	r1, #4
 80036be:	a202      	add	r2, pc, #8	@ (adr r2, 80036c8 <__clzsi2+0x2c>)
 80036c0:	5c10      	ldrb	r0, [r2, r0]
 80036c2:	1840      	adds	r0, r0, r1
 80036c4:	4770      	bx	lr
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	02020304 	.word	0x02020304
 80036cc:	01010101 	.word	0x01010101
	...

080036d8 <Max31855_Read_Temp>:

uint8_t Error=0;                                      // Thermocouple Connection acknowledge Flag
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
// ------------------- Functions ----------------
float Max31855_Read_Temp(int sensor){
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	0005      	movs	r5, r0
 80036dc:	4c25      	ldr	r4, [pc, #148]	@ (8003774 <Max31855_Read_Temp+0x9c>)
int Temp=0;                                           // Temperature Variable
if(sensor == 1 )
 80036de:	2801      	cmp	r0, #1
 80036e0:	d121      	bne.n	8003726 <Max31855_Read_Temp+0x4e>
{
	HAL_GPIO_WritePin(SSPORT1,SSPIN1,GPIO_PIN_RESET);// Low State for SPI Communication
 80036e2:	2090      	movs	r0, #144	@ 0x90
 80036e4:	2200      	movs	r2, #0
 80036e6:	2110      	movs	r1, #16
 80036e8:	05c0      	lsls	r0, r0, #23
 80036ea:	f001 fef1 	bl	80054d0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,4,1000);                // DATA Transfer
 80036ee:	23fa      	movs	r3, #250	@ 0xfa
 80036f0:	2204      	movs	r2, #4
 80036f2:	0021      	movs	r1, r4
 80036f4:	4820      	ldr	r0, [pc, #128]	@ (8003778 <Max31855_Read_Temp+0xa0>)
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	f002 ff9e 	bl	8006638 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT1,SSPIN1,GPIO_PIN_SET);		  // High State for SPI Communication
 80036fc:	002a      	movs	r2, r5
 80036fe:	2110      	movs	r1, #16
}
else if(sensor==2 ){
	HAL_GPIO_WritePin(SSPORT2,SSPIN2,GPIO_PIN_RESET);// Low State for SPI Communication
	HAL_SPI_Receive(&hspi1,DATARX,4,1000);                // DATA Transfer
	HAL_GPIO_WritePin(SSPORT2,SSPIN2,GPIO_PIN_SET);
 8003700:	2090      	movs	r0, #144	@ 0x90
 8003702:	05c0      	lsls	r0, r0, #23
 8003704:	f001 fee4 	bl	80054d0 <HAL_GPIO_WritePin>
}
Error=DATARX[3]&0x07;								  // Error Detection
 8003708:	2307      	movs	r3, #7
 800370a:	78e0      	ldrb	r0, [r4, #3]
sign=(DATARX[0]&(0x80))>>7;							  // Sign Bit calculation
 800370c:	491b      	ldr	r1, [pc, #108]	@ (800377c <Max31855_Read_Temp+0xa4>)
Error=DATARX[3]&0x07;								  // Error Detection
 800370e:	4018      	ands	r0, r3
 8003710:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <Max31855_Read_Temp+0xa8>)
 8003712:	7018      	strb	r0, [r3, #0]
sign=(DATARX[0]&(0x80))>>7;							  // Sign Bit calculation
 8003714:	7823      	ldrb	r3, [r4, #0]
 8003716:	09da      	lsrs	r2, r3, #7
 8003718:	600a      	str	r2, [r1, #0]

if(DATARX[3] & 0x07)								  // Returns Error Number
 800371a:	2800      	cmp	r0, #0
 800371c:	d017      	beq.n	800374e <Max31855_Read_Temp+0x76>
return(-1*(DATARX[3] & 0x07));
 800371e:	4240      	negs	r0, r0
 8003720:	f7fd febc 	bl	800149c <__aeabi_i2f>
else												  // Positive Temperature
{
		Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
		return((double)Temp / 4);
}
}
 8003724:	bd70      	pop	{r4, r5, r6, pc}
else if(sensor==2 ){
 8003726:	2802      	cmp	r0, #2
 8003728:	d1ee      	bne.n	8003708 <Max31855_Read_Temp+0x30>
	HAL_GPIO_WritePin(SSPORT2,SSPIN2,GPIO_PIN_RESET);// Low State for SPI Communication
 800372a:	2180      	movs	r1, #128	@ 0x80
 800372c:	2090      	movs	r0, #144	@ 0x90
 800372e:	2200      	movs	r2, #0
 8003730:	0209      	lsls	r1, r1, #8
 8003732:	05c0      	lsls	r0, r0, #23
 8003734:	f001 fecc 	bl	80054d0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,4,1000);                // DATA Transfer
 8003738:	23fa      	movs	r3, #250	@ 0xfa
 800373a:	2204      	movs	r2, #4
 800373c:	0021      	movs	r1, r4
 800373e:	480e      	ldr	r0, [pc, #56]	@ (8003778 <Max31855_Read_Temp+0xa0>)
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	f002 ff79 	bl	8006638 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT2,SSPIN2,GPIO_PIN_SET);
 8003746:	2180      	movs	r1, #128	@ 0x80
 8003748:	2201      	movs	r2, #1
 800374a:	0209      	lsls	r1, r1, #8
 800374c:	e7d8      	b.n	8003700 <Max31855_Read_Temp+0x28>
Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 800374e:	7860      	ldrb	r0, [r4, #1]
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	0880      	lsrs	r0, r0, #2
 8003754:	4318      	orrs	r0, r3
else if(sign==1){									  // Negative Temperature
 8003756:	2a01      	cmp	r2, #1
 8003758:	d103      	bne.n	8003762 <Max31855_Read_Temp+0x8a>
Temp^=0b01111111111111;
 800375a:	43c0      	mvns	r0, r0
 800375c:	04c0      	lsls	r0, r0, #19
 800375e:	0cc0      	lsrs	r0, r0, #19
return((double)-Temp/4);
 8003760:	4240      	negs	r0, r0
		return((double)Temp / 4);
 8003762:	f7ff fe7f 	bl	8003464 <__aeabi_i2d>
 8003766:	2200      	movs	r2, #0
 8003768:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <Max31855_Read_Temp+0xac>)
 800376a:	f7fe ff2d 	bl	80025c8 <__aeabi_dmul>
 800376e:	f7ff ff13 	bl	8003598 <__aeabi_d2f>
 8003772:	e7d7      	b.n	8003724 <Max31855_Read_Temp+0x4c>
 8003774:	20000228 	.word	0x20000228
 8003778:	20000430 	.word	0x20000430
 800377c:	2000022c 	.word	0x2000022c
 8003780:	20000230 	.word	0x20000230
 8003784:	3fd00000 	.word	0x3fd00000

08003788 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void){
 8003788:	b530      	push	{r4, r5, lr}
 800378a:	b095      	sub	sp, #84	@ 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800378c:	2228      	movs	r2, #40	@ 0x28
 800378e:	2100      	movs	r1, #0
 8003790:	a80a      	add	r0, sp, #40	@ 0x28
 8003792:	f004 fce5 	bl	8008160 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003796:	2210      	movs	r2, #16
 8003798:	2100      	movs	r1, #0
 800379a:	4668      	mov	r0, sp
 800379c:	f004 fce0 	bl	8008160 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80037a0:	2210      	movs	r2, #16
 80037a2:	2100      	movs	r1, #0
 80037a4:	a804      	add	r0, sp, #16
 80037a6:	f004 fcdb 	bl	8008160 <memset>
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037aa:	2380      	movs	r3, #128	@ 0x80
 80037ac:	025b      	lsls	r3, r3, #9
 80037ae:	9311      	str	r3, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80037b0:	2380      	movs	r3, #128	@ 0x80
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037b2:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037b4:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80037b6:	02db      	lsls	r3, r3, #11
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 80037b8:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037ba:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037bc:	9409      	str	r4, [sp, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037be:	9510      	str	r5, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80037c0:	9312      	str	r3, [sp, #72]	@ 0x48
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 80037c2:	f002 f94b 	bl	8005a5c <HAL_RCC_OscConfig>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d001      	beq.n	80037ce <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037ca:	b672      	cpsid	i
 */
void Error_Handler(void){
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1){
 80037cc:	e7fe      	b.n	80037cc <SystemClock_Config+0x44>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80037ce:	2307      	movs	r3, #7
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d0:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037d2:	9003      	str	r0, [sp, #12]
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1) != HAL_OK){
 80037d4:	0021      	movs	r1, r4
 80037d6:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80037d8:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037da:	9501      	str	r5, [sp, #4]
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1) != HAL_OK){
 80037dc:	f002 fb68 	bl	8005eb0 <HAL_RCC_ClockConfig>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d001      	beq.n	80037e8 <SystemClock_Config+0x60>
 80037e4:	b672      	cpsid	i
	while(1){
 80037e6:	e7fe      	b.n	80037e6 <SystemClock_Config+0x5e>
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80037e8:	9006      	str	r0, [sp, #24]
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
 80037ea:	a804      	add	r0, sp, #16
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037ec:	9404      	str	r4, [sp, #16]
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
 80037ee:	f002 fbf3 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d001      	beq.n	80037fa <SystemClock_Config+0x72>
 80037f6:	b672      	cpsid	i
	while(1){
 80037f8:	e7fe      	b.n	80037f8 <SystemClock_Config+0x70>
}
 80037fa:	b015      	add	sp, #84	@ 0x54
 80037fc:	bd30      	pop	{r4, r5, pc}
	...

08003800 <main>:
int main(void){
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003802:	b099      	sub	sp, #100	@ 0x64
	HAL_Init();
 8003804:	f001 fc2c 	bl	8005060 <HAL_Init>
	SystemClock_Config();
 8003808:	f7ff ffbe 	bl	8003788 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800380c:	2214      	movs	r2, #20
 800380e:	2100      	movs	r1, #0
 8003810:	a813      	add	r0, sp, #76	@ 0x4c
 8003812:	f004 fca5 	bl	8008160 <memset>
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003816:	2280      	movs	r2, #128	@ 0x80
 8003818:	4e7f      	ldr	r6, [pc, #508]	@ (8003a18 <main+0x218>)
 800381a:	03d2      	lsls	r2, r2, #15
 800381c:	6973      	ldr	r3, [r6, #20]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_15,GPIO_PIN_RESET);
 800381e:	2090      	movs	r0, #144	@ 0x90
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003820:	4313      	orrs	r3, r2
 8003822:	6173      	str	r3, [r6, #20]
 8003824:	6973      	ldr	r3, [r6, #20]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_15,GPIO_PIN_RESET);
 8003826:	4f7d      	ldr	r7, [pc, #500]	@ (8003a1c <main+0x21c>)
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003828:	4013      	ands	r3, r2
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	2280      	movs	r2, #128	@ 0x80
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800382c:	930e      	str	r3, [sp, #56]	@ 0x38
 800382e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003830:	6973      	ldr	r3, [r6, #20]
 8003832:	0292      	lsls	r2, r2, #10
 8003834:	4313      	orrs	r3, r2
 8003836:	6173      	str	r3, [r6, #20]
 8003838:	6973      	ldr	r3, [r6, #20]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_15,GPIO_PIN_RESET);
 800383a:	0039      	movs	r1, r7
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800383c:	4013      	ands	r3, r2
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800383e:	2280      	movs	r2, #128	@ 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003840:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003842:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003844:	6973      	ldr	r3, [r6, #20]
 8003846:	02d2      	lsls	r2, r2, #11
 8003848:	4313      	orrs	r3, r2
 800384a:	6173      	str	r3, [r6, #20]
 800384c:	6973      	ldr	r3, [r6, #20]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_15,GPIO_PIN_RESET);
 800384e:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003850:	4013      	ands	r3, r2
 8003852:	9310      	str	r3, [sp, #64]	@ 0x40
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_15,GPIO_PIN_RESET);
 8003854:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003856:	9b10      	ldr	r3, [sp, #64]	@ 0x40
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_15,GPIO_PIN_RESET);
 8003858:	f001 fe3a 	bl	80054d0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800385c:	23c4      	movs	r3, #196	@ 0xc4
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 800385e:	2090      	movs	r0, #144	@ 0x90
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003862:	2501      	movs	r5, #1
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003864:	039b      	lsls	r3, r3, #14
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003866:	a913      	add	r1, sp, #76	@ 0x4c
 8003868:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800386a:	9314      	str	r3, [sp, #80]	@ 0x50
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800386c:	9513      	str	r5, [sp, #76]	@ 0x4c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	9415      	str	r4, [sp, #84]	@ 0x54
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003870:	f001 fd70 	bl	8005354 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003874:	2090      	movs	r0, #144	@ 0x90
 8003876:	a913      	add	r1, sp, #76	@ 0x4c
 8003878:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_15;
 800387a:	9713      	str	r7, [sp, #76]	@ 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800387c:	9514      	str	r5, [sp, #80]	@ 0x50
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800387e:	2784      	movs	r7, #132	@ 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	9415      	str	r4, [sp, #84]	@ 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003882:	9416      	str	r4, [sp, #88]	@ 0x58
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003884:	f001 fd66 	bl	8005354 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003888:	2090      	movs	r0, #144	@ 0x90
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800388a:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800388c:	03bf      	lsls	r7, r7, #14
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 800388e:	a913      	add	r1, sp, #76	@ 0x4c
 8003890:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003892:	9313      	str	r3, [sp, #76]	@ 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003894:	9714      	str	r7, [sp, #80]	@ 0x50
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	9415      	str	r4, [sp, #84]	@ 0x54
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003898:	f001 fd5c 	bl	8005354 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800389c:	23c0      	movs	r3, #192	@ 0xc0
	HAL_GPIO_Init(GPIOB,&GPIO_InitStruct);
 800389e:	4860      	ldr	r0, [pc, #384]	@ (8003a20 <main+0x220>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80038a0:	009b      	lsls	r3, r3, #2
	HAL_GPIO_Init(GPIOB,&GPIO_InitStruct);
 80038a2:	a913      	add	r1, sp, #76	@ 0x4c
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80038a4:	9313      	str	r3, [sp, #76]	@ 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038a6:	9714      	str	r7, [sp, #80]	@ 0x50
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	9415      	str	r4, [sp, #84]	@ 0x54
	HAL_GPIO_Init(GPIOB,&GPIO_InitStruct);
 80038aa:	f001 fd53 	bl	8005354 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_1_IRQn,3,0);
 80038ae:	0022      	movs	r2, r4
 80038b0:	2103      	movs	r1, #3
 80038b2:	2005      	movs	r0, #5
 80038b4:	f001 fc08 	bl	80050c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80038b8:	2005      	movs	r0, #5
 80038ba:	f001 fc2f 	bl	800511c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_3_IRQn,3,0);
 80038be:	0022      	movs	r2, r4
 80038c0:	2103      	movs	r1, #3
 80038c2:	2006      	movs	r0, #6
 80038c4:	f001 fc00 	bl	80050c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80038c8:	2006      	movs	r0, #6
 80038ca:	f001 fc27 	bl	800511c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn,3,0);
 80038ce:	0022      	movs	r2, r4
 80038d0:	2103      	movs	r1, #3
 80038d2:	2007      	movs	r0, #7
 80038d4:	f001 fbf8 	bl	80050c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80038d8:	2007      	movs	r0, #7
 80038da:	f001 fc1f 	bl	800511c <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038de:	6973      	ldr	r3, [r6, #20]
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn,0,0);
 80038e0:	0021      	movs	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038e2:	432b      	orrs	r3, r5
 80038e4:	6173      	str	r3, [r6, #20]
 80038e6:	6973      	ldr	r3, [r6, #20]
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn,0,0);
 80038e8:	0022      	movs	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038ea:	402b      	ands	r3, r5
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn,0,0);
 80038ec:	200a      	movs	r0, #10
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80038f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn,0,0);
 80038f2:	f001 fbe9 	bl	80050c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80038f6:	200a      	movs	r0, #10
 80038f8:	f001 fc10 	bl	800511c <HAL_NVIC_EnableIRQ>
	hi2c2.Instance = I2C2;
 80038fc:	4e49      	ldr	r6, [pc, #292]	@ (8003a24 <main+0x224>)
 80038fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003a28 <main+0x228>)
	if(HAL_I2C_Init(&hi2c2) != HAL_OK){
 8003900:	0030      	movs	r0, r6
	hi2c2.Instance = I2C2;
 8003902:	6033      	str	r3, [r6, #0]
	hi2c2.Init.Timing = 0x0090194B;
 8003904:	4b49      	ldr	r3, [pc, #292]	@ (8003a2c <main+0x22c>)
	hi2c2.Init.OwnAddress1 = 0;
 8003906:	60b4      	str	r4, [r6, #8]
	hi2c2.Init.Timing = 0x0090194B;
 8003908:	6073      	str	r3, [r6, #4]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800390a:	60f5      	str	r5, [r6, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800390c:	6134      	str	r4, [r6, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800390e:	6174      	str	r4, [r6, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003910:	61b4      	str	r4, [r6, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003912:	61f4      	str	r4, [r6, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003914:	6234      	str	r4, [r6, #32]
	if(HAL_I2C_Init(&hi2c2) != HAL_OK){
 8003916:	f001 ff1f 	bl	8005758 <HAL_I2C_Init>
 800391a:	0001      	movs	r1, r0
 800391c:	42a0      	cmp	r0, r4
 800391e:	d001      	beq.n	8003924 <main+0x124>
 8003920:	b672      	cpsid	i
	while(1){
 8003922:	e7fe      	b.n	8003922 <main+0x122>
	if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2,I2C_ANALOGFILTER_ENABLE) != HAL_OK){
 8003924:	0030      	movs	r0, r6
 8003926:	f002 f84f 	bl	80059c8 <HAL_I2CEx_ConfigAnalogFilter>
 800392a:	1e01      	subs	r1, r0, #0
 800392c:	d001      	beq.n	8003932 <main+0x132>
 800392e:	b672      	cpsid	i
	while(1){
 8003930:	e7fe      	b.n	8003930 <main+0x130>
	if(HAL_I2CEx_ConfigDigitalFilter(&hi2c2,0) != HAL_OK){
 8003932:	0030      	movs	r0, r6
 8003934:	f002 f86e 	bl	8005a14 <HAL_I2CEx_ConfigDigitalFilter>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d001      	beq.n	8003940 <main+0x140>
 800393c:	b672      	cpsid	i
	while(1){
 800393e:	e7fe      	b.n	800393e <main+0x13e>
	hspi1.Instance = SPI1;
 8003940:	483b      	ldr	r0, [pc, #236]	@ (8003a30 <main+0x230>)
 8003942:	4a3c      	ldr	r2, [pc, #240]	@ (8003a34 <main+0x234>)
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003944:	2408      	movs	r4, #8
	hspi1.Instance = SPI1;
 8003946:	6002      	str	r2, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003948:	2282      	movs	r2, #130	@ 0x82
 800394a:	0052      	lsls	r2, r2, #1
 800394c:	6042      	str	r2, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800394e:	2280      	movs	r2, #128	@ 0x80
 8003950:	00d2      	lsls	r2, r2, #3
 8003952:	6082      	str	r2, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003954:	22e0      	movs	r2, #224	@ 0xe0
 8003956:	00d2      	lsls	r2, r2, #3
 8003958:	60c2      	str	r2, [r0, #12]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800395a:	2280      	movs	r2, #128	@ 0x80
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003960:	3ae9      	subs	r2, #233	@ 0xe9
 8003962:	3aff      	subs	r2, #255	@ 0xff
 8003964:	61c2      	str	r2, [r0, #28]
	hspi1.Init.CRCPolynomial = 7;
 8003966:	3a11      	subs	r2, #17
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003968:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800396a:	6143      	str	r3, [r0, #20]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800396c:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800396e:	6243      	str	r3, [r0, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003970:	6283      	str	r3, [r0, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8003972:	62c2      	str	r2, [r0, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003974:	6303      	str	r3, [r0, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003976:	6344      	str	r4, [r0, #52]	@ 0x34
	if(HAL_SPI_Init(&hspi1) != HAL_OK){
 8003978:	f002 fcdc 	bl	8006334 <HAL_SPI_Init>
 800397c:	1e06      	subs	r6, r0, #0
 800397e:	d001      	beq.n	8003984 <main+0x184>
 8003980:	b672      	cpsid	i
	while(1){
 8003982:	e7fe      	b.n	8003982 <main+0x182>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003984:	0001      	movs	r1, r0
 8003986:	2210      	movs	r2, #16
 8003988:	a813      	add	r0, sp, #76	@ 0x4c
 800398a:	f004 fbe9 	bl	8008160 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800398e:	0022      	movs	r2, r4
 8003990:	0031      	movs	r1, r6
 8003992:	a811      	add	r0, sp, #68	@ 0x44
 8003994:	f004 fbe4 	bl	8008160 <memset>
	htim1.Instance = TIM1;
 8003998:	4c27      	ldr	r4, [pc, #156]	@ (8003a38 <main+0x238>)
 800399a:	4b28      	ldr	r3, [pc, #160]	@ (8003a3c <main+0x23c>)
	if(HAL_TIM_Base_Init(&htim1) != HAL_OK){
 800399c:	0020      	movs	r0, r4
	htim1.Instance = TIM1;
 800399e:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 4799;
 80039a0:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <main+0x240>)
	htim1.Init.Prescaler = 0;
 80039a2:	6066      	str	r6, [r4, #4]
	htim1.Init.Period = 4799;
 80039a4:	60e3      	str	r3, [r4, #12]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039a6:	2380      	movs	r3, #128	@ 0x80
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a8:	60a6      	str	r6, [r4, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039aa:	6126      	str	r6, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 80039ac:	6166      	str	r6, [r4, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039ae:	61a3      	str	r3, [r4, #24]
	if(HAL_TIM_Base_Init(&htim1) != HAL_OK){
 80039b0:	f003 f81a 	bl	80069e8 <HAL_TIM_Base_Init>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d001      	beq.n	80039bc <main+0x1bc>
 80039b8:	b672      	cpsid	i
	while(1){
 80039ba:	e7fe      	b.n	80039ba <main+0x1ba>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039bc:	2380      	movs	r3, #128	@ 0x80
	if(HAL_TIM_ConfigClockSource(&htim1,&sClockSourceConfig) != HAL_OK){
 80039be:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039c0:	015b      	lsls	r3, r3, #5
	if(HAL_TIM_ConfigClockSource(&htim1,&sClockSourceConfig) != HAL_OK){
 80039c2:	a913      	add	r1, sp, #76	@ 0x4c
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039c4:	9313      	str	r3, [sp, #76]	@ 0x4c
	if(HAL_TIM_ConfigClockSource(&htim1,&sClockSourceConfig) != HAL_OK){
 80039c6:	f003 f843 	bl	8006a50 <HAL_TIM_ConfigClockSource>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d001      	beq.n	80039d2 <main+0x1d2>
 80039ce:	b672      	cpsid	i
	while(1){
 80039d0:	e7fe      	b.n	80039d0 <main+0x1d0>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d2:	9011      	str	r0, [sp, #68]	@ 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d4:	9012      	str	r0, [sp, #72]	@ 0x48
	if(HAL_TIMEx_MasterConfigSynchronization(&htim1,&sMasterConfig) != HAL_OK){
 80039d6:	a911      	add	r1, sp, #68	@ 0x44
 80039d8:	0020      	movs	r0, r4
 80039da:	f003 f8cf 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d001      	beq.n	80039e6 <main+0x1e6>
 80039e2:	b672      	cpsid	i
	while(1){
 80039e4:	e7fe      	b.n	80039e4 <main+0x1e4>
	huart1.Instance = USART1;
 80039e6:	4b17      	ldr	r3, [pc, #92]	@ (8003a44 <main+0x244>)
 80039e8:	9308      	str	r3, [sp, #32]
 80039ea:	9a08      	ldr	r2, [sp, #32]
 80039ec:	4b16      	ldr	r3, [pc, #88]	@ (8003a48 <main+0x248>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039ee:	6090      	str	r0, [r2, #8]
	huart1.Instance = USART1;
 80039f0:	6013      	str	r3, [r2, #0]
	huart1.Init.BaudRate = 115200;
 80039f2:	23e1      	movs	r3, #225	@ 0xe1
 80039f4:	025b      	lsls	r3, r3, #9
 80039f6:	6053      	str	r3, [r2, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80039f8:	230c      	movs	r3, #12
	huart1.Init.StopBits = UART_STOPBITS_1;
 80039fa:	60d0      	str	r0, [r2, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80039fc:	6110      	str	r0, [r2, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039fe:	6190      	str	r0, [r2, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a00:	61d0      	str	r0, [r2, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a02:	6210      	str	r0, [r2, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a04:	6250      	str	r0, [r2, #36]	@ 0x24
	if(HAL_UART_Init(&huart1) != HAL_OK){
 8003a06:	0010      	movs	r0, r2
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003a08:	6153      	str	r3, [r2, #20]
	if(HAL_UART_Init(&huart1) != HAL_OK){
 8003a0a:	f003 fd2d 	bl	8007468 <HAL_UART_Init>
 8003a0e:	1e06      	subs	r6, r0, #0
 8003a10:	d01c      	beq.n	8003a4c <main+0x24c>
 8003a12:	b672      	cpsid	i
	while(1){
 8003a14:	e7fe      	b.n	8003a14 <main+0x214>
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	00008012 	.word	0x00008012
 8003a20:	48000400 	.word	0x48000400
 8003a24:	20000494 	.word	0x20000494
 8003a28:	40005800 	.word	0x40005800
 8003a2c:	0090194b 	.word	0x0090194b
 8003a30:	20000430 	.word	0x20000430
 8003a34:	40013000 	.word	0x40013000
 8003a38:	200003e8 	.word	0x200003e8
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	000012bf 	.word	0x000012bf
 8003a44:	20000360 	.word	0x20000360
 8003a48:	40013800 	.word	0x40013800
	HAL_TIM_Base_Start_IT(&htim1);
 8003a4c:	0020      	movs	r0, r4
 8003a4e:	f002 feb3 	bl	80067b8 <HAL_TIM_Base_Start_IT>
	ssd1306_Init();
 8003a52:	f001 f8bd 	bl	8004bd0 <ssd1306_Init>
	ssd1306_SetCursor(30,20);
 8003a56:	2114      	movs	r1, #20
 8003a58:	201e      	movs	r0, #30
 8003a5a:	f001 f86d 	bl	8004b38 <ssd1306_SetCursor>
	ssd1306_WriteString("LOGO",Font_16x26,White);
 8003a5e:	4b73      	ldr	r3, [pc, #460]	@ (8003c2c <main+0x42c>)
 8003a60:	4873      	ldr	r0, [pc, #460]	@ (8003c30 <main+0x430>)
 8003a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a64:	9500      	str	r5, [sp, #0]
 8003a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a68:	f001 f84c 	bl	8004b04 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003a6c:	f000 ffc2 	bl	80049f4 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 8003a70:	20fa      	movs	r0, #250	@ 0xfa
 8003a72:	0080      	lsls	r0, r0, #2
 8003a74:	f001 fb16 	bl	80050a4 <HAL_Delay>
	ssd1306_Fill(Black);
 8003a78:	0030      	movs	r0, r6
 8003a7a:	f000 ffad 	bl	80049d8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8003a7e:	f000 ffb9 	bl	80049f4 <ssd1306_UpdateScreen>
	HAL_TIM_Base_Start_IT(&htim1);
 8003a82:	0020      	movs	r0, r4
 8003a84:	f002 fe98 	bl	80067b8 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1,PC_RX,2);
 8003a88:	2202      	movs	r2, #2
 8003a8a:	496a      	ldr	r1, [pc, #424]	@ (8003c34 <main+0x434>)
 8003a8c:	9808      	ldr	r0, [sp, #32]
 8003a8e:	f003 fd71 	bl	8007574 <HAL_UART_Receive_DMA>
		sens_error = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	4c68      	ldr	r4, [pc, #416]	@ (8003c38 <main+0x438>)
		real_temperature_heater = Max31855_Read_Temp(1);
 8003a96:	2001      	movs	r0, #1
		sens_error = 0;
 8003a98:	6023      	str	r3, [r4, #0]
		real_temperature_heater = Max31855_Read_Temp(1);
 8003a9a:	f7ff fe1d 	bl	80036d8 <Max31855_Read_Temp>
		if(((real_temperature_heater - real_temperature_heater_last) > 20 || (real_temperature_heater - real_temperature_heater_last) < -20) && real_temperature_heater_last != 0){
 8003a9e:	4b67      	ldr	r3, [pc, #412]	@ (8003c3c <main+0x43c>)
		real_temperature_heater = Max31855_Read_Temp(1);
 8003aa0:	4f67      	ldr	r7, [pc, #412]	@ (8003c40 <main+0x440>)
		if(((real_temperature_heater - real_temperature_heater_last) > 20 || (real_temperature_heater - real_temperature_heater_last) < -20) && real_temperature_heater_last != 0){
 8003aa2:	681e      	ldr	r6, [r3, #0]
		real_temperature_heater = Max31855_Read_Temp(1);
 8003aa4:	6038      	str	r0, [r7, #0]
		if(((real_temperature_heater - real_temperature_heater_last) > 20 || (real_temperature_heater - real_temperature_heater_last) < -20) && real_temperature_heater_last != 0){
 8003aa6:	1c31      	adds	r1, r6, #0
 8003aa8:	f7fd fa74 	bl	8000f94 <__aeabi_fsub>
 8003aac:	4965      	ldr	r1, [pc, #404]	@ (8003c44 <main+0x444>)
 8003aae:	1c05      	adds	r5, r0, #0
 8003ab0:	f7fc fd2a 	bl	8000508 <__aeabi_fcmpgt>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d105      	bne.n	8003ac4 <main+0x2c4>
 8003ab8:	4963      	ldr	r1, [pc, #396]	@ (8003c48 <main+0x448>)
 8003aba:	1c28      	adds	r0, r5, #0
 8003abc:	f7fc fd10 	bl	80004e0 <__aeabi_fcmplt>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d006      	beq.n	8003ad2 <main+0x2d2>
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	1c30      	adds	r0, r6, #0
 8003ac8:	f7fc fd04 	bl	80004d4 <__aeabi_fcmpeq>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d100      	bne.n	8003ad2 <main+0x2d2>
			real_temperature_heater = real_temperature_heater_last;
 8003ad0:	603e      	str	r6, [r7, #0]
		sens_error_HT = Error; // Directly assign error status for heater sensor
 8003ad2:	4b5e      	ldr	r3, [pc, #376]	@ (8003c4c <main+0x44c>)
 8003ad4:	4d5e      	ldr	r5, [pc, #376]	@ (8003c50 <main+0x450>)
 8003ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ad8:	781b      	ldrb	r3, [r3, #0]
		real_temperature_element = Max31855_Read_Temp(2); // TODO dodac lepsza obsluge bledu
 8003ada:	2002      	movs	r0, #2
		sens_error_HT = Error; // Directly assign error status for heater sensor
 8003adc:	602b      	str	r3, [r5, #0]
		real_temperature_element = Max31855_Read_Temp(2); // TODO dodac lepsza obsluge bledu
 8003ade:	f7ff fdfb 	bl	80036d8 <Max31855_Read_Temp>
 8003ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c54 <main+0x454>)
 8003ae4:	6018      	str	r0, [r3, #0]
		if(((real_temperature_element - real_temperature_element_last) > 20 || (real_temperature_element - real_temperature_element_last) < -20) && real_temperature_element_last != 0){
 8003ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c58 <main+0x458>)
 8003ae8:	681e      	ldr	r6, [r3, #0]
 8003aea:	1c31      	adds	r1, r6, #0
 8003aec:	f7fd fa52 	bl	8000f94 <__aeabi_fsub>
 8003af0:	4954      	ldr	r1, [pc, #336]	@ (8003c44 <main+0x444>)
 8003af2:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003af4:	f7fc fd08 	bl	8000508 <__aeabi_fcmpgt>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d105      	bne.n	8003b08 <main+0x308>
 8003afc:	4952      	ldr	r1, [pc, #328]	@ (8003c48 <main+0x448>)
 8003afe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003b00:	f7fc fcee 	bl	80004e0 <__aeabi_fcmplt>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d007      	beq.n	8003b18 <main+0x318>
 8003b08:	2100      	movs	r1, #0
 8003b0a:	1c30      	adds	r0, r6, #0
 8003b0c:	f7fc fce2 	bl	80004d4 <__aeabi_fcmpeq>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d101      	bne.n	8003b18 <main+0x318>
			real_temperature_element = real_temperature_element_last;
 8003b14:	4b4f      	ldr	r3, [pc, #316]	@ (8003c54 <main+0x454>)
 8003b16:	601e      	str	r6, [r3, #0]
		sens_error_IC = Error;					// Directly assign error status for element sensor
 8003b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b1a:	4e50      	ldr	r6, [pc, #320]	@ (8003c5c <main+0x45c>)
 8003b1c:	7818      	ldrb	r0, [r3, #0]
 8003b1e:	4b50      	ldr	r3, [pc, #320]	@ (8003c60 <main+0x460>)
 8003b20:	6018      	str	r0, [r3, #0]
		if(sens_error_HT != 0){
 8003b22:	682b      	ldr	r3, [r5, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d071      	beq.n	8003c0c <main+0x40c>
 8003b28:	6023      	str	r3, [r4, #0]
		if(last_Error != sens_error && sens_error != 0){
 8003b2a:	6825      	ldr	r5, [r4, #0]
 8003b2c:	6833      	ldr	r3, [r6, #0]
 8003b2e:	42ab      	cmp	r3, r5
 8003b30:	d100      	bne.n	8003b34 <main+0x334>
 8003b32:	e0dd      	b.n	8003cf0 <main+0x4f0>
 8003b34:	2d00      	cmp	r5, #0
 8003b36:	d000      	beq.n	8003b3a <main+0x33a>
 8003b38:	e0a4      	b.n	8003c84 <main+0x484>
			if(real_temperature_element_last != real_temperature_element || real_temperature_heater_last != real_temperature_heater){ // TODO zmienic na wysylanie tylko zmienionej liczby
 8003b3a:	4b47      	ldr	r3, [pc, #284]	@ (8003c58 <main+0x458>)
 8003b3c:	4d45      	ldr	r5, [pc, #276]	@ (8003c54 <main+0x454>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	6829      	ldr	r1, [r5, #0]
 8003b42:	f7fc fcc7 	bl	80004d4 <__aeabi_fcmpeq>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d000      	beq.n	8003b4c <main+0x34c>
 8003b4a:	e289      	b.n	8004060 <main+0x860>
				ssd1306_SetCursor(5,5);
 8003b4c:	2105      	movs	r1, #5
 8003b4e:	0008      	movs	r0, r1
 8003b50:	f000 fff2 	bl	8004b38 <ssd1306_SetCursor>
				ssd1306_WriteString("IC:",Font_7x10,White);
 8003b54:	2301      	movs	r3, #1
 8003b56:	4c43      	ldr	r4, [pc, #268]	@ (8003c64 <main+0x464>)
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	6821      	ldr	r1, [r4, #0]
 8003b5c:	68a3      	ldr	r3, [r4, #8]
 8003b5e:	6862      	ldr	r2, [r4, #4]
 8003b60:	4841      	ldr	r0, [pc, #260]	@ (8003c68 <main+0x468>)
 8003b62:	f000 ffcf 	bl	8004b04 <ssd1306_WriteString>
					temp[i] = 0;
 8003b66:	4e41      	ldr	r6, [pc, #260]	@ (8003c6c <main+0x46c>)
 8003b68:	2209      	movs	r2, #9
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	0030      	movs	r0, r6
 8003b6e:	f004 faf7 	bl	8008160 <memset>
					sprintf(temp,"%.0f X  ",real_temperature_element);
 8003b72:	6828      	ldr	r0, [r5, #0]
 8003b74:	f7ff fcc8 	bl	8003508 <__aeabi_f2d>
 8003b78:	000b      	movs	r3, r1
				if(temp_select == 2){
 8003b7a:	493d      	ldr	r1, [pc, #244]	@ (8003c70 <main+0x470>)
					sprintf(temp,"%.0f X  ",real_temperature_element);
 8003b7c:	0002      	movs	r2, r0
				if(temp_select == 2){
 8003b7e:	6809      	ldr	r1, [r1, #0]
 8003b80:	2902      	cmp	r1, #2
 8003b82:	d000      	beq.n	8003b86 <main+0x386>
 8003b84:	e2c8      	b.n	8004118 <main+0x918>
					sprintf(temp,"%.0f X  ",real_temperature_element);
 8003b86:	493b      	ldr	r1, [pc, #236]	@ (8003c74 <main+0x474>)
					sprintf(temp,"%.0f   ",real_temperature_element);
 8003b88:	0030      	movs	r0, r6
				ssd1306_WriteString(temp,Font_7x10,White);
 8003b8a:	2601      	movs	r6, #1
					sprintf(temp,"%.0f   ",real_temperature_element);
 8003b8c:	f004 fa7a 	bl	8008084 <siprintf>
				ssd1306_SetCursor(27,5);
 8003b90:	2105      	movs	r1, #5
 8003b92:	201b      	movs	r0, #27
 8003b94:	f000 ffd0 	bl	8004b38 <ssd1306_SetCursor>
				ssd1306_WriteString(temp,Font_7x10,White);
 8003b98:	4d34      	ldr	r5, [pc, #208]	@ (8003c6c <main+0x46c>)
 8003b9a:	6821      	ldr	r1, [r4, #0]
 8003b9c:	6862      	ldr	r2, [r4, #4]
 8003b9e:	68a3      	ldr	r3, [r4, #8]
 8003ba0:	0028      	movs	r0, r5
 8003ba2:	9600      	str	r6, [sp, #0]
 8003ba4:	f000 ffae 	bl	8004b04 <ssd1306_WriteString>
				ssd1306_SetCursor(70,5);
 8003ba8:	2105      	movs	r1, #5
 8003baa:	2046      	movs	r0, #70	@ 0x46
 8003bac:	f000 ffc4 	bl	8004b38 <ssd1306_SetCursor>
				ssd1306_WriteString("HT:",Font_7x10,White);
 8003bb0:	cc0e      	ldmia	r4!, {r1, r2, r3}
 8003bb2:	4831      	ldr	r0, [pc, #196]	@ (8003c78 <main+0x478>)
 8003bb4:	9600      	str	r6, [sp, #0]
 8003bb6:	f000 ffa5 	bl	8004b04 <ssd1306_WriteString>
					temp[i] = 0;
 8003bba:	2209      	movs	r2, #9
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	0028      	movs	r0, r5
 8003bc0:	f004 face 	bl	8008160 <memset>
					sprintf(temp,"%.0f X ",real_temperature_heater);
 8003bc4:	4c1e      	ldr	r4, [pc, #120]	@ (8003c40 <main+0x440>)
 8003bc6:	6820      	ldr	r0, [r4, #0]
 8003bc8:	f7ff fc9e 	bl	8003508 <__aeabi_f2d>
 8003bcc:	000b      	movs	r3, r1
				if(temp_select == 1){
 8003bce:	4928      	ldr	r1, [pc, #160]	@ (8003c70 <main+0x470>)
					sprintf(temp,"%.0f X ",real_temperature_heater);
 8003bd0:	0002      	movs	r2, r0
				if(temp_select == 1){
 8003bd2:	6809      	ldr	r1, [r1, #0]
 8003bd4:	42b1      	cmp	r1, r6
 8003bd6:	d000      	beq.n	8003bda <main+0x3da>
 8003bd8:	e2a0      	b.n	800411c <main+0x91c>
					sprintf(temp,"%.0f X ",real_temperature_heater);
 8003bda:	4928      	ldr	r1, [pc, #160]	@ (8003c7c <main+0x47c>)
					sprintf(temp,"%.0f  ",real_temperature_heater);
 8003bdc:	0028      	movs	r0, r5
 8003bde:	f004 fa51 	bl	8008084 <siprintf>
				ssd1306_SetCursor(92,5);
 8003be2:	2105      	movs	r1, #5
 8003be4:	205c      	movs	r0, #92	@ 0x5c
 8003be6:	f000 ffa7 	bl	8004b38 <ssd1306_SetCursor>
				ssd1306_WriteString(temp,Font_7x10,White);
 8003bea:	2201      	movs	r2, #1
 8003bec:	4b1d      	ldr	r3, [pc, #116]	@ (8003c64 <main+0x464>)
 8003bee:	9200      	str	r2, [sp, #0]
 8003bf0:	0028      	movs	r0, r5
 8003bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bf4:	f000 ff86 	bl	8004b04 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8003bf8:	f000 fefc 	bl	80049f4 <ssd1306_UpdateScreen>
				real_temperature_element_last = real_temperature_element;
 8003bfc:	4a15      	ldr	r2, [pc, #84]	@ (8003c54 <main+0x454>)
 8003bfe:	4b16      	ldr	r3, [pc, #88]	@ (8003c58 <main+0x458>)
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	601a      	str	r2, [r3, #0]
				real_temperature_heater_last = real_temperature_heater;
 8003c04:	4b0d      	ldr	r3, [pc, #52]	@ (8003c3c <main+0x43c>)
 8003c06:	6822      	ldr	r2, [r4, #0]
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e231      	b.n	8004070 <main+0x870>
 8003c0c:	6020      	str	r0, [r4, #0]
		if(sens_error == 0 && last_Error != sens_error){
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d18b      	bne.n	8003b2a <main+0x32a>
 8003c12:	6833      	ldr	r3, [r6, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d088      	beq.n	8003b2a <main+0x32a>
			menu_last = 100;
 8003c18:	2264      	movs	r2, #100	@ 0x64
 8003c1a:	4b19      	ldr	r3, [pc, #100]	@ (8003c80 <main+0x480>)
 8003c1c:	601a      	str	r2, [r3, #0]
			ssd1306_Fill(Black);
 8003c1e:	f000 fedb 	bl	80049d8 <ssd1306_Fill>
			ssd1306_UpdateScreen();
 8003c22:	f000 fee7 	bl	80049f4 <ssd1306_UpdateScreen>
			last_Error = sens_error;
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	6033      	str	r3, [r6, #0]
 8003c2a:	e77e      	b.n	8003b2a <main+0x32a>
 8003c2c:	0800a768 	.word	0x0800a768
 8003c30:	0800a4ec 	.word	0x0800a4ec
 8003c34:	20000264 	.word	0x20000264
 8003c38:	2000029c 	.word	0x2000029c
 8003c3c:	200002c8 	.word	0x200002c8
 8003c40:	200002d0 	.word	0x200002d0
 8003c44:	41a00000 	.word	0x41a00000
 8003c48:	c1a00000 	.word	0xc1a00000
 8003c4c:	20000230 	.word	0x20000230
 8003c50:	200002a4 	.word	0x200002a4
 8003c54:	200002cc 	.word	0x200002cc
 8003c58:	200002c4 	.word	0x200002c4
 8003c5c:	200002d4 	.word	0x200002d4
 8003c60:	200002a0 	.word	0x200002a0
 8003c64:	0800a780 	.word	0x0800a780
 8003c68:	0800a535 	.word	0x0800a535
 8003c6c:	200002a8 	.word	0x200002a8
 8003c70:	2000002c 	.word	0x2000002c
 8003c74:	0800a539 	.word	0x0800a539
 8003c78:	0800a54a 	.word	0x0800a54a
 8003c7c:	0800a54e 	.word	0x0800a54e
 8003c80:	20000018 	.word	0x20000018
			switch(sens_error){
 8003c84:	2d02      	cmp	r5, #2
 8003c86:	d100      	bne.n	8003c8a <main+0x48a>
 8003c88:	e13b      	b.n	8003f02 <main+0x702>
 8003c8a:	2d04      	cmp	r5, #4
 8003c8c:	d100      	bne.n	8003c90 <main+0x490>
 8003c8e:	e164      	b.n	8003f5a <main+0x75a>
 8003c90:	2d01      	cmp	r5, #1
 8003c92:	d12a      	bne.n	8003cea <main+0x4ea>
					ssd1306_Fill(Black);
 8003c94:	2000      	movs	r0, #0
 8003c96:	f000 fe9f 	bl	80049d8 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8003c9a:	f000 feab 	bl	80049f4 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(20,5);
 8003c9e:	2105      	movs	r1, #5
 8003ca0:	2014      	movs	r0, #20
 8003ca2:	f000 ff49 	bl	8004b38 <ssd1306_SetCursor>
					ssd1306_WriteString("Error",Font_16x26,White);
 8003ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ca8:	48c2      	ldr	r0, [pc, #776]	@ (8003fb4 <main+0x7b4>)
 8003caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cac:	9500      	str	r5, [sp, #0]
 8003cae:	f000 ff29 	bl	8004b04 <ssd1306_WriteString>
					ssd1306_SetCursor(5,28);
 8003cb2:	211c      	movs	r1, #28
 8003cb4:	2005      	movs	r0, #5
 8003cb6:	f000 ff3f 	bl	8004b38 <ssd1306_SetCursor>
					if(sens_error_IC != 0){
 8003cba:	4bbf      	ldr	r3, [pc, #764]	@ (8003fb8 <main+0x7b8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d100      	bne.n	8003cc4 <main+0x4c4>
 8003cc2:	e116      	b.n	8003ef2 <main+0x6f2>
						ssd1306_WriteString("Sensor IC",Font_11x18,White);
 8003cc4:	4bbd      	ldr	r3, [pc, #756]	@ (8003fbc <main+0x7bc>)
 8003cc6:	48be      	ldr	r0, [pc, #760]	@ (8003fc0 <main+0x7c0>)
						ssd1306_WriteString("Sensor HEAT",Font_11x18,White);
 8003cc8:	9500      	str	r5, [sp, #0]
 8003cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ccc:	f000 ff1a 	bl	8004b04 <ssd1306_WriteString>
					ssd1306_SetCursor(15,48);
 8003cd0:	200f      	movs	r0, #15
 8003cd2:	2130      	movs	r1, #48	@ 0x30
 8003cd4:	f000 ff30 	bl	8004b38 <ssd1306_SetCursor>
					ssd1306_WriteString("NOT CONNECTED",Font_7x10,White);
 8003cd8:	4bba      	ldr	r3, [pc, #744]	@ (8003fc4 <main+0x7c4>)
 8003cda:	48bb      	ldr	r0, [pc, #748]	@ (8003fc8 <main+0x7c8>)
					ssd1306_WriteString("SHORT TO VCC",Font_7x10,White);
 8003cdc:	2201      	movs	r2, #1
 8003cde:	9200      	str	r2, [sp, #0]
 8003ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ce2:	f000 ff0f 	bl	8004b04 <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8003ce6:	f000 fe85 	bl	80049f4 <ssd1306_UpdateScreen>
			last_Error = sens_error;
 8003cea:	4bb8      	ldr	r3, [pc, #736]	@ (8003fcc <main+0x7cc>)
 8003cec:	6822      	ldr	r2, [r4, #0]
 8003cee:	601a      	str	r2, [r3, #0]
		if(sens_error == 0){ // TODO dodac wyświetlanie która termopara jest aktualnie używana
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d100      	bne.n	8003cf8 <main+0x4f8>
 8003cf6:	e720      	b.n	8003b3a <main+0x33a>
		if(temp_select == 1){
 8003cf8:	4bb5      	ldr	r3, [pc, #724]	@ (8003fd0 <main+0x7d0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d001      	beq.n	8003d04 <main+0x504>
 8003d00:	f000 fd87 	bl	8004812 <main+0x1012>
			selected_temperature = real_temperature_heater;
 8003d04:	4bb3      	ldr	r3, [pc, #716]	@ (8003fd4 <main+0x7d4>)
 8003d06:	4ab4      	ldr	r2, [pc, #720]	@ (8003fd8 <main+0x7d8>)
			selected_temperature = real_temperature_element;
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	601a      	str	r2, [r3, #0]
		if(PC_RX[1] == 49){
 8003d0c:	4bb3      	ldr	r3, [pc, #716]	@ (8003fdc <main+0x7dc>)
 8003d0e:	4cb4      	ldr	r4, [pc, #720]	@ (8003fe0 <main+0x7e0>)
 8003d10:	785b      	ldrb	r3, [r3, #1]
 8003d12:	2b31      	cmp	r3, #49	@ 0x31
 8003d14:	d10e      	bne.n	8003d34 <main+0x534>
			temp_set = false;
 8003d16:	2200      	movs	r2, #0
			set_temperature = 99;
 8003d18:	4bb2      	ldr	r3, [pc, #712]	@ (8003fe4 <main+0x7e4>)
 8003d1a:	49b3      	ldr	r1, [pc, #716]	@ (8003fe8 <main+0x7e8>)
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8003d1c:	2090      	movs	r0, #144	@ 0x90
			set_temperature = 99;
 8003d1e:	6019      	str	r1, [r3, #0]
			power = 0;
 8003d20:	2100      	movs	r1, #0
			PID_value = 0;
 8003d22:	4bb2      	ldr	r3, [pc, #712]	@ (8003fec <main+0x7ec>)
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8003d24:	05c0      	lsls	r0, r0, #23
			PID_value = 0;
 8003d26:	601a      	str	r2, [r3, #0]
			power = 0;
 8003d28:	4bb1      	ldr	r3, [pc, #708]	@ (8003ff0 <main+0x7f0>)
			temp_set = false;
 8003d2a:	7022      	strb	r2, [r4, #0]
			power = 0;
 8003d2c:	6019      	str	r1, [r3, #0]
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8003d2e:	2102      	movs	r1, #2
 8003d30:	f001 fbce 	bl	80054d0 <HAL_GPIO_WritePin>
		if(temp_set){
 8003d34:	7823      	ldrb	r3, [r4, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d100      	bne.n	8003d3c <main+0x53c>
 8003d3a:	e099      	b.n	8003e70 <main+0x670>
			if(mode_select == 1){
 8003d3c:	4bad      	ldr	r3, [pc, #692]	@ (8003ff4 <main+0x7f4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d176      	bne.n	8003e32 <main+0x632>
				PID_error = set_temperature - selected_temperature;
 8003d44:	4aa3      	ldr	r2, [pc, #652]	@ (8003fd4 <main+0x7d4>)
 8003d46:	4ba7      	ldr	r3, [pc, #668]	@ (8003fe4 <main+0x7e4>)
 8003d48:	6811      	ldr	r1, [r2, #0]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	f7fd f922 	bl	8000f94 <__aeabi_fsub>
 8003d50:	4ba9      	ldr	r3, [pc, #676]	@ (8003ff8 <main+0x7f8>)
				elapsedTime = (float)(Time - timePrev) / 10000.0f; // Time w krokach 100 µs => dzielimy przez 10k = sekundy
 8003d52:	4eaa      	ldr	r6, [pc, #680]	@ (8003ffc <main+0x7fc>)
				PID_error = set_temperature - selected_temperature;
 8003d54:	6018      	str	r0, [r3, #0]
 8003d56:	1c05      	adds	r5, r0, #0
				elapsedTime = (float)(Time - timePrev) / 10000.0f; // Time w krokach 100 µs => dzielimy przez 10k = sekundy
 8003d58:	6830      	ldr	r0, [r6, #0]
 8003d5a:	f7fd fbef 	bl	800153c <__aeabi_ui2f>
 8003d5e:	4ca8      	ldr	r4, [pc, #672]	@ (8004000 <main+0x800>)
 8003d60:	6821      	ldr	r1, [r4, #0]
 8003d62:	f7fd f917 	bl	8000f94 <__aeabi_fsub>
 8003d66:	49a7      	ldr	r1, [pc, #668]	@ (8004004 <main+0x804>)
 8003d68:	f7fc fdec 	bl	8000944 <__aeabi_fdiv>
 8003d6c:	4ba6      	ldr	r3, [pc, #664]	@ (8004008 <main+0x808>)
 8003d6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8003d70:	6018      	str	r0, [r3, #0]
				timePrev = Time;
 8003d72:	6830      	ldr	r0, [r6, #0]
 8003d74:	f7fd fbe2 	bl	800153c <__aeabi_ui2f>
				PID_p = kp * PID_error;
 8003d78:	4ba4      	ldr	r3, [pc, #656]	@ (800400c <main+0x80c>)
				timePrev = Time;
 8003d7a:	6020      	str	r0, [r4, #0]
				PID_p = kp * PID_error;
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	1c28      	adds	r0, r5, #0
 8003d80:	f7fc ffae 	bl	8000ce0 <__aeabi_fmul>
 8003d84:	f7fd fb6a 	bl	800145c <__aeabi_f2iz>
 8003d88:	4ba1      	ldr	r3, [pc, #644]	@ (8004010 <main+0x810>)
 8003d8a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003d8c:	6018      	str	r0, [r3, #0]
				PID_i += ki * PID_error * elapsedTime;
 8003d8e:	4ba1      	ldr	r3, [pc, #644]	@ (8004014 <main+0x814>)
 8003d90:	1c28      	adds	r0, r5, #0
 8003d92:	6819      	ldr	r1, [r3, #0]
 8003d94:	f7fc ffa4 	bl	8000ce0 <__aeabi_fmul>
 8003d98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003d9a:	f7fc ffa1 	bl	8000ce0 <__aeabi_fmul>
 8003d9e:	4c9e      	ldr	r4, [pc, #632]	@ (8004018 <main+0x818>)
 8003da0:	6821      	ldr	r1, [r4, #0]
 8003da2:	f7fc fbdd 	bl	8000560 <__aeabi_fadd>
				if(PID_i > i_term_max)
 8003da6:	4b9d      	ldr	r3, [pc, #628]	@ (800401c <main+0x81c>)
				PID_i += ki * PID_error * elapsedTime;
 8003da8:	6020      	str	r0, [r4, #0]
				if(PID_i > i_term_max)
 8003daa:	681e      	ldr	r6, [r3, #0]
 8003dac:	1c31      	adds	r1, r6, #0
 8003dae:	f7fc fbab 	bl	8000508 <__aeabi_fcmpgt>
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d000      	beq.n	8003db8 <main+0x5b8>
					PID_i = i_term_max;
 8003db6:	6026      	str	r6, [r4, #0]
				if(PID_i < -i_term_max)
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	061b      	lsls	r3, r3, #24
 8003dbc:	18f6      	adds	r6, r6, r3
 8003dbe:	6821      	ldr	r1, [r4, #0]
 8003dc0:	1c30      	adds	r0, r6, #0
 8003dc2:	f7fc fba1 	bl	8000508 <__aeabi_fcmpgt>
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d000      	beq.n	8003dcc <main+0x5cc>
					PID_i = -i_term_max;
 8003dca:	6026      	str	r6, [r4, #0]
				PID_d = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	4e94      	ldr	r6, [pc, #592]	@ (8004020 <main+0x820>)
				if(elapsedTime > 0){
 8003dd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
				PID_d = 0;
 8003dd2:	6033      	str	r3, [r6, #0]
				if(elapsedTime > 0){
 8003dd4:	1c19      	adds	r1, r3, #0
 8003dd6:	f7fc fb97 	bl	8000508 <__aeabi_fcmpgt>
 8003dda:	4f92      	ldr	r7, [pc, #584]	@ (8004024 <main+0x824>)
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d00b      	beq.n	8003df8 <main+0x5f8>
					PID_d = kd * ((PID_error - previous_error) / elapsedTime);
 8003de0:	6839      	ldr	r1, [r7, #0]
 8003de2:	1c28      	adds	r0, r5, #0
 8003de4:	f7fd f8d6 	bl	8000f94 <__aeabi_fsub>
 8003de8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003dea:	f7fc fdab 	bl	8000944 <__aeabi_fdiv>
 8003dee:	4b8e      	ldr	r3, [pc, #568]	@ (8004028 <main+0x828>)
 8003df0:	6819      	ldr	r1, [r3, #0]
 8003df2:	f7fc ff75 	bl	8000ce0 <__aeabi_fmul>
 8003df6:	6030      	str	r0, [r6, #0]
				previous_error = PID_error;
 8003df8:	603d      	str	r5, [r7, #0]
				power = PID_p + PID_i + PID_d;
 8003dfa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003dfc:	f7fd fb4e 	bl	800149c <__aeabi_i2f>
 8003e00:	6821      	ldr	r1, [r4, #0]
 8003e02:	f7fc fbad 	bl	8000560 <__aeabi_fadd>
 8003e06:	6831      	ldr	r1, [r6, #0]
 8003e08:	f7fc fbaa 	bl	8000560 <__aeabi_fadd>
				if(power > pid_output_max){
 8003e0c:	4b87      	ldr	r3, [pc, #540]	@ (800402c <main+0x82c>)
				power = PID_p + PID_i + PID_d;
 8003e0e:	4c78      	ldr	r4, [pc, #480]	@ (8003ff0 <main+0x7f0>)
				if(power > pid_output_max){
 8003e10:	681d      	ldr	r5, [r3, #0]
				power = PID_p + PID_i + PID_d;
 8003e12:	6020      	str	r0, [r4, #0]
				if(power > pid_output_max){
 8003e14:	1c29      	adds	r1, r5, #0
 8003e16:	f7fc fb77 	bl	8000508 <__aeabi_fcmpgt>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d000      	beq.n	8003e20 <main+0x620>
					power = pid_output_max;
 8003e1e:	6025      	str	r5, [r4, #0]
				if(power < pid_output_min){
 8003e20:	4b83      	ldr	r3, [pc, #524]	@ (8004030 <main+0x830>)
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	681d      	ldr	r5, [r3, #0]
 8003e26:	1c29      	adds	r1, r5, #0
 8003e28:	f7fc fb5a 	bl	80004e0 <__aeabi_fcmplt>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d000      	beq.n	8003e32 <main+0x632>
					power = pid_output_min;
 8003e30:	6025      	str	r5, [r4, #0]
			PID_value = maximum_firing_delay * (power / 100.0); // im większa moc, tym mniejsze opóźnienie
 8003e32:	4b80      	ldr	r3, [pc, #512]	@ (8004034 <main+0x834>)
 8003e34:	4d6d      	ldr	r5, [pc, #436]	@ (8003fec <main+0x7ec>)
 8003e36:	681c      	ldr	r4, [r3, #0]
 8003e38:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff0 <main+0x7f0>)
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	f7ff fb64 	bl	8003508 <__aeabi_f2d>
 8003e40:	2200      	movs	r2, #0
 8003e42:	4b7d      	ldr	r3, [pc, #500]	@ (8004038 <main+0x838>)
 8003e44:	f7fd ff86 	bl	8001d54 <__aeabi_ddiv>
 8003e48:	0006      	movs	r6, r0
 8003e4a:	0020      	movs	r0, r4
 8003e4c:	000f      	movs	r7, r1
 8003e4e:	f7ff fb09 	bl	8003464 <__aeabi_i2d>
 8003e52:	000b      	movs	r3, r1
 8003e54:	0002      	movs	r2, r0
 8003e56:	0039      	movs	r1, r7
 8003e58:	0030      	movs	r0, r6
 8003e5a:	f7fe fbb5 	bl	80025c8 <__aeabi_dmul>
 8003e5e:	f7ff fac5 	bl	80033ec <__aeabi_d2iz>
			if(PID_value < 0.0){
 8003e62:	43c3      	mvns	r3, r0
 8003e64:	17db      	asrs	r3, r3, #31
 8003e66:	4018      	ands	r0, r3
			PID_value = maximum_firing_delay * (power / 100.0); // im większa moc, tym mniejsze opóźnienie
 8003e68:	6028      	str	r0, [r5, #0]
			if(PID_value > maximum_firing_delay){
 8003e6a:	4284      	cmp	r4, r0
 8003e6c:	da00      	bge.n	8003e70 <main+0x670>
				PID_value = maximum_firing_delay;
 8003e6e:	602c      	str	r4, [r5, #0]
		if((uint32_t)Time - uart_time >= 500){
 8003e70:	4f62      	ldr	r7, [pc, #392]	@ (8003ffc <main+0x7fc>)
 8003e72:	4e72      	ldr	r6, [pc, #456]	@ (800403c <main+0x83c>)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6832      	ldr	r2, [r6, #0]
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	22fa      	movs	r2, #250	@ 0xfa
 8003e7c:	0052      	lsls	r2, r2, #1
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d200      	bcs.n	8003e84 <main+0x684>
 8003e82:	e606      	b.n	8003a92 <main+0x292>
				PC_TX[i] = 0;
 8003e84:	4c6e      	ldr	r4, [pc, #440]	@ (8004040 <main+0x840>)
 8003e86:	3ae1      	subs	r2, #225	@ 0xe1
 8003e88:	3aff      	subs	r2, #255	@ 0xff
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f004 f967 	bl	8008160 <memset>
			snprintf((char*)PC_TX,sizeof(PC_TX),"%.0f,%.0f,%d,%d,%.0f\n",real_temperature_element,real_temperature_heater,sens_error_IC,sens_error_HT,power);
 8003e92:	4b57      	ldr	r3, [pc, #348]	@ (8003ff0 <main+0x7f0>)
 8003e94:	4d6b      	ldr	r5, [pc, #428]	@ (8004044 <main+0x844>)
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	f7ff fb36 	bl	8003508 <__aeabi_f2d>
 8003e9c:	9006      	str	r0, [sp, #24]
 8003e9e:	9107      	str	r1, [sp, #28]
 8003ea0:	4b69      	ldr	r3, [pc, #420]	@ (8004048 <main+0x848>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	9305      	str	r3, [sp, #20]
 8003ea6:	4b44      	ldr	r3, [pc, #272]	@ (8003fb8 <main+0x7b8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	9304      	str	r3, [sp, #16]
 8003eac:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd8 <main+0x7d8>)
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	f7ff fb2a 	bl	8003508 <__aeabi_f2d>
 8003eb4:	9002      	str	r0, [sp, #8]
 8003eb6:	9103      	str	r1, [sp, #12]
 8003eb8:	4b64      	ldr	r3, [pc, #400]	@ (800404c <main+0x84c>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	f7ff fb24 	bl	8003508 <__aeabi_f2d>
 8003ec0:	002a      	movs	r2, r5
 8003ec2:	9000      	str	r0, [sp, #0]
 8003ec4:	9101      	str	r1, [sp, #4]
 8003ec6:	2114      	movs	r1, #20
 8003ec8:	0020      	movs	r0, r4
 8003eca:	f004 f8a5 	bl	8008018 <sniprintf>
			uart_time = Time;
 8003ece:	683b      	ldr	r3, [r7, #0]
			if(TX_state == 1){
 8003ed0:	4d5f      	ldr	r5, [pc, #380]	@ (8004050 <main+0x850>)
			uart_time = Time;
 8003ed2:	6033      	str	r3, [r6, #0]
			if(TX_state == 1){
 8003ed4:	782b      	ldrb	r3, [r5, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d100      	bne.n	8003edc <main+0x6dc>
 8003eda:	e5da      	b.n	8003a92 <main+0x292>
				HAL_UART_Transmit_DMA(&huart1,PC_TX,(uint16_t)strlen((char*)PC_TX));
 8003edc:	0020      	movs	r0, r4
 8003ede:	f7fc f913 	bl	8000108 <strlen>
 8003ee2:	0021      	movs	r1, r4
 8003ee4:	b282      	uxth	r2, r0
 8003ee6:	9808      	ldr	r0, [sp, #32]
 8003ee8:	f002 fea6 	bl	8006c38 <HAL_UART_Transmit_DMA>
				TX_state = false;
 8003eec:	2300      	movs	r3, #0
 8003eee:	702b      	strb	r3, [r5, #0]
 8003ef0:	e5cf      	b.n	8003a92 <main+0x292>
					else if(sens_error_HT != 0){
 8003ef2:	4b55      	ldr	r3, [pc, #340]	@ (8004048 <main+0x848>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d100      	bne.n	8003efc <main+0x6fc>
 8003efa:	e6e9      	b.n	8003cd0 <main+0x4d0>
						ssd1306_WriteString("Sensor HEAT",Font_11x18,White);
 8003efc:	4b2f      	ldr	r3, [pc, #188]	@ (8003fbc <main+0x7bc>)
 8003efe:	4855      	ldr	r0, [pc, #340]	@ (8004054 <main+0x854>)
 8003f00:	e6e2      	b.n	8003cc8 <main+0x4c8>
					ssd1306_WriteString("Error",Font_16x26,White);
 8003f02:	2501      	movs	r5, #1
					ssd1306_Fill(Black);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f000 fd67 	bl	80049d8 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8003f0a:	f000 fd73 	bl	80049f4 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(20,5);
 8003f0e:	2105      	movs	r1, #5
 8003f10:	2014      	movs	r0, #20
 8003f12:	f000 fe11 	bl	8004b38 <ssd1306_SetCursor>
					ssd1306_WriteString("Error",Font_16x26,White);
 8003f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f18:	4826      	ldr	r0, [pc, #152]	@ (8003fb4 <main+0x7b4>)
 8003f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f1c:	9500      	str	r5, [sp, #0]
 8003f1e:	f000 fdf1 	bl	8004b04 <ssd1306_WriteString>
					ssd1306_SetCursor(5,28);
 8003f22:	211c      	movs	r1, #28
 8003f24:	2005      	movs	r0, #5
 8003f26:	f000 fe07 	bl	8004b38 <ssd1306_SetCursor>
					if(sens_error_IC != 0){
 8003f2a:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <main+0x7b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <main+0x74c>
						ssd1306_WriteString("Sensor IC",Font_11x18,White);
 8003f32:	4b22      	ldr	r3, [pc, #136]	@ (8003fbc <main+0x7bc>)
 8003f34:	4822      	ldr	r0, [pc, #136]	@ (8003fc0 <main+0x7c0>)
						ssd1306_WriteString("Sensor HEAT",Font_11x18,White);
 8003f36:	9500      	str	r5, [sp, #0]
 8003f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f3a:	f000 fde3 	bl	8004b04 <ssd1306_WriteString>
					ssd1306_SetCursor(15,48);
 8003f3e:	200f      	movs	r0, #15
 8003f40:	2130      	movs	r1, #48	@ 0x30
 8003f42:	f000 fdf9 	bl	8004b38 <ssd1306_SetCursor>
					ssd1306_WriteString("SHORT TO GND",Font_7x10,White);
 8003f46:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc4 <main+0x7c4>)
 8003f48:	4843      	ldr	r0, [pc, #268]	@ (8004058 <main+0x858>)
 8003f4a:	e6c7      	b.n	8003cdc <main+0x4dc>
					else if(sens_error_HT != 0){
 8003f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004048 <main+0x848>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f4      	beq.n	8003f3e <main+0x73e>
						ssd1306_WriteString("Sensor HEAT",Font_11x18,White);
 8003f54:	4b19      	ldr	r3, [pc, #100]	@ (8003fbc <main+0x7bc>)
 8003f56:	483f      	ldr	r0, [pc, #252]	@ (8004054 <main+0x854>)
 8003f58:	e7ed      	b.n	8003f36 <main+0x736>
					ssd1306_WriteString("Error",Font_16x26,White);
 8003f5a:	2501      	movs	r5, #1
					ssd1306_Fill(Black);
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f000 fd3b 	bl	80049d8 <ssd1306_Fill>
					ssd1306_UpdateScreen();
 8003f62:	f000 fd47 	bl	80049f4 <ssd1306_UpdateScreen>
					ssd1306_SetCursor(20,5);
 8003f66:	2105      	movs	r1, #5
 8003f68:	2014      	movs	r0, #20
 8003f6a:	f000 fde5 	bl	8004b38 <ssd1306_SetCursor>
					ssd1306_WriteString("Error",Font_16x26,White);
 8003f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f70:	4810      	ldr	r0, [pc, #64]	@ (8003fb4 <main+0x7b4>)
 8003f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f74:	9500      	str	r5, [sp, #0]
 8003f76:	f000 fdc5 	bl	8004b04 <ssd1306_WriteString>
					ssd1306_SetCursor(15,28);
 8003f7a:	211c      	movs	r1, #28
 8003f7c:	200f      	movs	r0, #15
 8003f7e:	f000 fddb 	bl	8004b38 <ssd1306_SetCursor>
					if(sens_error_IC != 0){
 8003f82:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb8 <main+0x7b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00c      	beq.n	8003fa4 <main+0x7a4>
						ssd1306_WriteString("Sensor IC",Font_11x18,White);
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <main+0x7bc>)
 8003f8c:	480c      	ldr	r0, [pc, #48]	@ (8003fc0 <main+0x7c0>)
						ssd1306_WriteString("Sensor HEAT",Font_11x18,White);
 8003f8e:	9500      	str	r5, [sp, #0]
 8003f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f92:	f000 fdb7 	bl	8004b04 <ssd1306_WriteString>
					ssd1306_SetCursor(15,48);
 8003f96:	200f      	movs	r0, #15
 8003f98:	2130      	movs	r1, #48	@ 0x30
 8003f9a:	f000 fdcd 	bl	8004b38 <ssd1306_SetCursor>
					ssd1306_WriteString("SHORT TO VCC",Font_7x10,White);
 8003f9e:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <main+0x7c4>)
 8003fa0:	482e      	ldr	r0, [pc, #184]	@ (800405c <main+0x85c>)
 8003fa2:	e69b      	b.n	8003cdc <main+0x4dc>
					else if(sens_error_HT != 0){
 8003fa4:	4b28      	ldr	r3, [pc, #160]	@ (8004048 <main+0x848>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f4      	beq.n	8003f96 <main+0x796>
						ssd1306_WriteString("Sensor HEAT",Font_11x18,White);
 8003fac:	4b03      	ldr	r3, [pc, #12]	@ (8003fbc <main+0x7bc>)
 8003fae:	4829      	ldr	r0, [pc, #164]	@ (8004054 <main+0x854>)
 8003fb0:	e7ed      	b.n	8003f8e <main+0x78e>
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	0800a4f1 	.word	0x0800a4f1
 8003fb8:	200002a0 	.word	0x200002a0
 8003fbc:	0800a774 	.word	0x0800a774
 8003fc0:	0800a4f7 	.word	0x0800a4f7
 8003fc4:	0800a780 	.word	0x0800a780
 8003fc8:	0800a50d 	.word	0x0800a50d
 8003fcc:	200002d4 	.word	0x200002d4
 8003fd0:	2000002c 	.word	0x2000002c
 8003fd4:	200002c0 	.word	0x200002c0
 8003fd8:	200002d0 	.word	0x200002d0
 8003fdc:	20000264 	.word	0x20000264
 8003fe0:	2000028c 	.word	0x2000028c
 8003fe4:	20000030 	.word	0x20000030
 8003fe8:	42c60000 	.word	0x42c60000
 8003fec:	20000244 	.word	0x20000244
 8003ff0:	200002b8 	.word	0x200002b8
 8003ff4:	20000028 	.word	0x20000028
 8003ff8:	20000260 	.word	0x20000260
 8003ffc:	2000024c 	.word	0x2000024c
 8004000:	20000254 	.word	0x20000254
 8004004:	461c4000 	.word	0x461c4000
 8004008:	20000258 	.word	0x20000258
 800400c:	20000008 	.word	0x20000008
 8004010:	2000023c 	.word	0x2000023c
 8004014:	20000004 	.word	0x20000004
 8004018:	20000238 	.word	0x20000238
 800401c:	2000001c 	.word	0x2000001c
 8004020:	20000234 	.word	0x20000234
 8004024:	2000025c 	.word	0x2000025c
 8004028:	20000000 	.word	0x20000000
 800402c:	20000020 	.word	0x20000020
 8004030:	200002b4 	.word	0x200002b4
 8004034:	20000034 	.word	0x20000034
 8004038:	40590000 	.word	0x40590000
 800403c:	20000248 	.word	0x20000248
 8004040:	20000278 	.word	0x20000278
 8004044:	0800a5e0 	.word	0x0800a5e0
 8004048:	200002a4 	.word	0x200002a4
 800404c:	200002cc 	.word	0x200002cc
 8004050:	2000000c 	.word	0x2000000c
 8004054:	0800a501 	.word	0x0800a501
 8004058:	0800a51b 	.word	0x0800a51b
 800405c:	0800a528 	.word	0x0800a528
			if(real_temperature_element_last != real_temperature_element || real_temperature_heater_last != real_temperature_heater){ // TODO zmienic na wysylanie tylko zmienionej liczby
 8004060:	4bbb      	ldr	r3, [pc, #748]	@ (8004350 <main+0xb50>)
 8004062:	6839      	ldr	r1, [r7, #0]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	f7fc fa35 	bl	80004d4 <__aeabi_fcmpeq>
 800406a:	2800      	cmp	r0, #0
 800406c:	d100      	bne.n	8004070 <main+0x870>
 800406e:	e56d      	b.n	8003b4c <main+0x34c>
			if(temp_set == 1){
 8004070:	4bb8      	ldr	r3, [pc, #736]	@ (8004354 <main+0xb54>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d100      	bne.n	800407a <main+0x87a>
 8004078:	e080      	b.n	800417c <main+0x97c>
				if(mode_select == 1){
 800407a:	4bb7      	ldr	r3, [pc, #732]	@ (8004358 <main+0xb58>)
 800407c:	681e      	ldr	r6, [r3, #0]
 800407e:	2e01      	cmp	r6, #1
 8004080:	d14e      	bne.n	8004120 <main+0x920>
					if(set_temperature != set_temperature_last){
 8004082:	4bb6      	ldr	r3, [pc, #728]	@ (800435c <main+0xb5c>)
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	f7fd fa09 	bl	800149c <__aeabi_i2f>
 800408a:	4fb5      	ldr	r7, [pc, #724]	@ (8004360 <main+0xb60>)
 800408c:	6839      	ldr	r1, [r7, #0]
 800408e:	f7fc fa21 	bl	80004d4 <__aeabi_fcmpeq>
 8004092:	1e05      	subs	r5, r0, #0
 8004094:	d12f      	bne.n	80040f6 <main+0x8f6>
						ssd1306_FillRectangle(54,15,75,25,Black);
 8004096:	2319      	movs	r3, #25
 8004098:	224b      	movs	r2, #75	@ 0x4b
 800409a:	210f      	movs	r1, #15
 800409c:	9000      	str	r0, [sp, #0]
 800409e:	2036      	movs	r0, #54	@ 0x36
 80040a0:	f000 fd50 	bl	8004b44 <ssd1306_FillRectangle>
						ssd1306_UpdateScreen();
 80040a4:	f000 fca6 	bl	80049f4 <ssd1306_UpdateScreen>
						ssd1306_SetCursor(5,15);
 80040a8:	210f      	movs	r1, #15
 80040aa:	2005      	movs	r0, #5
 80040ac:	f000 fd44 	bl	8004b38 <ssd1306_SetCursor>
						ssd1306_WriteString("Set:",Font_7x10,White);
 80040b0:	4cac      	ldr	r4, [pc, #688]	@ (8004364 <main+0xb64>)
 80040b2:	48ad      	ldr	r0, [pc, #692]	@ (8004368 <main+0xb68>)
 80040b4:	6821      	ldr	r1, [r4, #0]
 80040b6:	6862      	ldr	r2, [r4, #4]
 80040b8:	68a3      	ldr	r3, [r4, #8]
 80040ba:	9600      	str	r6, [sp, #0]
 80040bc:	f000 fd22 	bl	8004b04 <ssd1306_WriteString>
							temp[i] = 0;
 80040c0:	4baa      	ldr	r3, [pc, #680]	@ (800436c <main+0xb6c>)
 80040c2:	2209      	movs	r2, #9
 80040c4:	0029      	movs	r1, r5
 80040c6:	0018      	movs	r0, r3
 80040c8:	001d      	movs	r5, r3
 80040ca:	f004 f849 	bl	8008160 <memset>
						sprintf(temp,"%.0f Auto",set_temperature);
 80040ce:	6838      	ldr	r0, [r7, #0]
 80040d0:	f7ff fa1a 	bl	8003508 <__aeabi_f2d>
 80040d4:	0002      	movs	r2, r0
 80040d6:	000b      	movs	r3, r1
 80040d8:	49a5      	ldr	r1, [pc, #660]	@ (8004370 <main+0xb70>)
						sprintf(temp,"%.0f% Manual",power);
 80040da:	0028      	movs	r0, r5
 80040dc:	f003 ffd2 	bl	8008084 <siprintf>
						ssd1306_SetCursor(34,15);
 80040e0:	210f      	movs	r1, #15
 80040e2:	2022      	movs	r0, #34	@ 0x22
 80040e4:	f000 fd28 	bl	8004b38 <ssd1306_SetCursor>
						ssd1306_WriteString(temp,Font_7x10,White);
 80040e8:	cc0e      	ldmia	r4!, {r1, r2, r3}
 80040ea:	0028      	movs	r0, r5
 80040ec:	9600      	str	r6, [sp, #0]
				ssd1306_WriteString("Heater OFF",Font_7x10,White);
 80040ee:	f000 fd09 	bl	8004b04 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 80040f2:	f000 fc7f 	bl	80049f4 <ssd1306_UpdateScreen>
			if(!sub_menu){
 80040f6:	4b9f      	ldr	r3, [pc, #636]	@ (8004374 <main+0xb74>)
 80040f8:	4e9f      	ldr	r6, [pc, #636]	@ (8004378 <main+0xb78>)
 80040fa:	7818      	ldrb	r0, [r3, #0]
 80040fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80040fe:	2800      	cmp	r0, #0
 8004100:	d000      	beq.n	8004104 <main+0x904>
 8004102:	e0a8      	b.n	8004256 <main+0xa56>
				if(turn_CW_CCW == 2){
 8004104:	4a9d      	ldr	r2, [pc, #628]	@ (800437c <main+0xb7c>)
					menu++;
 8004106:	6833      	ldr	r3, [r6, #0]
				if(turn_CW_CCW == 2){
 8004108:	6811      	ldr	r1, [r2, #0]
 800410a:	2902      	cmp	r1, #2
 800410c:	d152      	bne.n	80041b4 <main+0x9b4>
					menu++;
 800410e:	3301      	adds	r3, #1
					if(menu > 3){
 8004110:	2b03      	cmp	r3, #3
 8004112:	dc3d      	bgt.n	8004190 <main+0x990>
						menu = 3;
 8004114:	6033      	str	r3, [r6, #0]
 8004116:	e03c      	b.n	8004192 <main+0x992>
					sprintf(temp,"%.0f   ",real_temperature_element);
 8004118:	4999      	ldr	r1, [pc, #612]	@ (8004380 <main+0xb80>)
 800411a:	e535      	b.n	8003b88 <main+0x388>
					sprintf(temp,"%.0f  ",real_temperature_heater);
 800411c:	4999      	ldr	r1, [pc, #612]	@ (8004384 <main+0xb84>)
 800411e:	e55d      	b.n	8003bdc <main+0x3dc>
				else if(mode_select == 2){
 8004120:	2e02      	cmp	r6, #2
 8004122:	d1e8      	bne.n	80040f6 <main+0x8f6>
					if(power != power_last){
 8004124:	4b98      	ldr	r3, [pc, #608]	@ (8004388 <main+0xb88>)
 8004126:	4f99      	ldr	r7, [pc, #612]	@ (800438c <main+0xb8c>)
 8004128:	6819      	ldr	r1, [r3, #0]
 800412a:	6838      	ldr	r0, [r7, #0]
 800412c:	f7fc f9d2 	bl	80004d4 <__aeabi_fcmpeq>
 8004130:	1e05      	subs	r5, r0, #0
 8004132:	d1e0      	bne.n	80040f6 <main+0x8f6>
						ssd1306_FillRectangle(54,15,75,25,Black);
 8004134:	2319      	movs	r3, #25
 8004136:	224b      	movs	r2, #75	@ 0x4b
 8004138:	210f      	movs	r1, #15
 800413a:	9000      	str	r0, [sp, #0]
 800413c:	2036      	movs	r0, #54	@ 0x36
 800413e:	f000 fd01 	bl	8004b44 <ssd1306_FillRectangle>
						ssd1306_UpdateScreen();
 8004142:	f000 fc57 	bl	80049f4 <ssd1306_UpdateScreen>
						ssd1306_SetCursor(5,15);
 8004146:	210f      	movs	r1, #15
 8004148:	2005      	movs	r0, #5
 800414a:	f000 fcf5 	bl	8004b38 <ssd1306_SetCursor>
						ssd1306_WriteString("Set:",Font_7x10,White);
 800414e:	4c85      	ldr	r4, [pc, #532]	@ (8004364 <main+0xb64>)
 8004150:	3e01      	subs	r6, #1
 8004152:	6821      	ldr	r1, [r4, #0]
 8004154:	6862      	ldr	r2, [r4, #4]
 8004156:	68a3      	ldr	r3, [r4, #8]
 8004158:	4883      	ldr	r0, [pc, #524]	@ (8004368 <main+0xb68>)
 800415a:	9600      	str	r6, [sp, #0]
 800415c:	f000 fcd2 	bl	8004b04 <ssd1306_WriteString>
							temp[i] = 0;
 8004160:	4b82      	ldr	r3, [pc, #520]	@ (800436c <main+0xb6c>)
 8004162:	2209      	movs	r2, #9
 8004164:	0029      	movs	r1, r5
 8004166:	0018      	movs	r0, r3
 8004168:	001d      	movs	r5, r3
 800416a:	f003 fff9 	bl	8008160 <memset>
						sprintf(temp,"%.0f% Manual",power);
 800416e:	6838      	ldr	r0, [r7, #0]
 8004170:	f7ff f9ca 	bl	8003508 <__aeabi_f2d>
 8004174:	000b      	movs	r3, r1
 8004176:	0002      	movs	r2, r0
 8004178:	4985      	ldr	r1, [pc, #532]	@ (8004390 <main+0xb90>)
 800417a:	e7ae      	b.n	80040da <main+0x8da>
				ssd1306_SetCursor(5,15);
 800417c:	210f      	movs	r1, #15
 800417e:	2005      	movs	r0, #5
 8004180:	f000 fcda 	bl	8004b38 <ssd1306_SetCursor>
				ssd1306_WriteString("Heater OFF",Font_7x10,White);
 8004184:	2201      	movs	r2, #1
 8004186:	4b77      	ldr	r3, [pc, #476]	@ (8004364 <main+0xb64>)
 8004188:	9200      	str	r2, [sp, #0]
 800418a:	4882      	ldr	r0, [pc, #520]	@ (8004394 <main+0xb94>)
 800418c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800418e:	e7ae      	b.n	80040ee <main+0x8ee>
						menu = 0;
 8004190:	6030      	str	r0, [r6, #0]
				turn_CW_CCW = 0;
 8004192:	2400      	movs	r4, #0
				if(menu_last != menu){
 8004194:	4b80      	ldr	r3, [pc, #512]	@ (8004398 <main+0xb98>)
 8004196:	6830      	ldr	r0, [r6, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
				turn_CW_CCW = 0;
 800419a:	6014      	str	r4, [r2, #0]
				if(menu_last != menu){
 800419c:	4283      	cmp	r3, r0
 800419e:	d051      	beq.n	8004244 <main+0xa44>
					switch(menu){
 80041a0:	2803      	cmp	r0, #3
 80041a2:	d84c      	bhi.n	800423e <main+0xa3e>
							ssd1306_FillRectangle(5,25,128,64,Black);
 80041a4:	2340      	movs	r3, #64	@ 0x40
 80041a6:	2280      	movs	r2, #128	@ 0x80
 80041a8:	2119      	movs	r1, #25
 80041aa:	9400      	str	r4, [sp, #0]
					switch(menu){
 80041ac:	f7fb ffb4 	bl	8000118 <__gnu_thumb1_case_uqi>
 80041b0:	aa8b2308 	.word	0xaa8b2308
				else if(turn_CW_CCW == 1){
 80041b4:	2901      	cmp	r1, #1
 80041b6:	d1ec      	bne.n	8004192 <main+0x992>
					if(menu < 0){
 80041b8:	3b01      	subs	r3, #1
 80041ba:	d5ab      	bpl.n	8004114 <main+0x914>
						menu = 3;
 80041bc:	2303      	movs	r3, #3
 80041be:	e7a9      	b.n	8004114 <main+0x914>
							ssd1306_FillRectangle(5,25,128,64,Black);
 80041c0:	2005      	movs	r0, #5
 80041c2:	f000 fcbf 	bl	8004b44 <ssd1306_FillRectangle>
							ssd1306_UpdateScreen();
 80041c6:	f000 fc15 	bl	80049f4 <ssd1306_UpdateScreen>
							ssd1306_SetCursor(5,25);
 80041ca:	2119      	movs	r1, #25
 80041cc:	2005      	movs	r0, #5
 80041ce:	f000 fcb3 	bl	8004b38 <ssd1306_SetCursor>
							ssd1306_WriteString("Source",Font_11x18,Black);
 80041d2:	4b72      	ldr	r3, [pc, #456]	@ (800439c <main+0xb9c>)
 80041d4:	9400      	str	r4, [sp, #0]
 80041d6:	6819      	ldr	r1, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	001c      	movs	r4, r3
 80041dc:	4870      	ldr	r0, [pc, #448]	@ (80043a0 <main+0xba0>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f000 fc90 	bl	8004b04 <ssd1306_WriteString>
							ssd1306_SetCursor(5,45);
 80041e4:	2005      	movs	r0, #5
 80041e6:	212d      	movs	r1, #45	@ 0x2d
 80041e8:	f000 fca6 	bl	8004b38 <ssd1306_SetCursor>
							ssd1306_WriteString("MAN/AUTO",Font_11x18,White);
 80041ec:	486d      	ldr	r0, [pc, #436]	@ (80043a4 <main+0xba4>)
							ssd1306_WriteString("Source",Font_11x18,White);
 80041ee:	2301      	movs	r3, #1
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	cc0e      	ldmia	r4!, {r1, r2, r3}
 80041f4:	e01f      	b.n	8004236 <main+0xa36>
							ssd1306_FillRectangle(5,25,128,64,Black);
 80041f6:	2005      	movs	r0, #5
 80041f8:	f000 fca4 	bl	8004b44 <ssd1306_FillRectangle>
							ssd1306_UpdateScreen();
 80041fc:	f000 fbfa 	bl	80049f4 <ssd1306_UpdateScreen>
							ssd1306_SetCursor(5,25);
 8004200:	2119      	movs	r1, #25
 8004202:	2005      	movs	r0, #5
 8004204:	f000 fc98 	bl	8004b38 <ssd1306_SetCursor>
							ssd1306_WriteString("MAN/AUTO",Font_11x18,Black);
 8004208:	4d64      	ldr	r5, [pc, #400]	@ (800439c <main+0xb9c>)
 800420a:	4866      	ldr	r0, [pc, #408]	@ (80043a4 <main+0xba4>)
 800420c:	68ab      	ldr	r3, [r5, #8]
 800420e:	6829      	ldr	r1, [r5, #0]
 8004210:	686a      	ldr	r2, [r5, #4]
 8004212:	9400      	str	r4, [sp, #0]
 8004214:	f000 fc76 	bl	8004b04 <ssd1306_WriteString>
							ssd1306_SetCursor(5,45);
 8004218:	2005      	movs	r0, #5
 800421a:	212d      	movs	r1, #45	@ 0x2d
 800421c:	f000 fc8c 	bl	8004b38 <ssd1306_SetCursor>
							if(mode_select == 1){
 8004220:	4b4d      	ldr	r3, [pc, #308]	@ (8004358 <main+0xb58>)
								ssd1306_WriteString("Temperature",Font_11x18,White);
 8004222:	4861      	ldr	r0, [pc, #388]	@ (80043a8 <main+0xba8>)
							if(mode_select == 1){
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d003      	beq.n	8004232 <main+0xa32>
							else if(mode_select == 2){
 800422a:	2b02      	cmp	r3, #2
 800422c:	d105      	bne.n	800423a <main+0xa3a>
								ssd1306_WriteString("Power",Font_11x18,White);
 800422e:	485f      	ldr	r0, [pc, #380]	@ (80043ac <main+0xbac>)
 8004230:	3b01      	subs	r3, #1
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	cd0e      	ldmia	r5!, {r1, r2, r3}
							ssd1306_WriteString("Source",Font_11x18,White);
 8004236:	f000 fc65 	bl	8004b04 <ssd1306_WriteString>
							ssd1306_UpdateScreen();
 800423a:	f000 fbdb 	bl	80049f4 <ssd1306_UpdateScreen>
					menu_last = menu;
 800423e:	4b56      	ldr	r3, [pc, #344]	@ (8004398 <main+0xb98>)
 8004240:	6832      	ldr	r2, [r6, #0]
 8004242:	601a      	str	r2, [r3, #0]
				if(button == true){
 8004244:	4b5a      	ldr	r3, [pc, #360]	@ (80043b0 <main+0xbb0>)
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	2a00      	cmp	r2, #0
 800424a:	d073      	beq.n	8004334 <main+0xb34>
					sub_menu = true;
 800424c:	2201      	movs	r2, #1
 800424e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004250:	700a      	strb	r2, [r1, #0]
					button = false;
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
						sub_menu_pos++;
 8004256:	4a57      	ldr	r2, [pc, #348]	@ (80043b4 <main+0xbb4>)
				if(menu != 2){
 8004258:	6835      	ldr	r5, [r6, #0]
						sub_menu_pos++;
 800425a:	6813      	ldr	r3, [r2, #0]
				if(menu != 2){
 800425c:	2d02      	cmp	r5, #2
 800425e:	d009      	beq.n	8004274 <main+0xa74>
					if(turn_CW_CCW == 2){
 8004260:	4946      	ldr	r1, [pc, #280]	@ (800437c <main+0xb7c>)
 8004262:	6808      	ldr	r0, [r1, #0]
 8004264:	2802      	cmp	r0, #2
 8004266:	d16d      	bne.n	8004344 <main+0xb44>
						sub_menu_pos++;
 8004268:	3301      	adds	r3, #1
						if(sub_menu_pos > 1){
 800426a:	2b01      	cmp	r3, #1
 800426c:	dc68      	bgt.n	8004340 <main+0xb40>
							sub_menu_pos = 0;
 800426e:	6013      	str	r3, [r2, #0]
					turn_CW_CCW = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	600b      	str	r3, [r1, #0]
				if(sub_menu_pos_last != sub_menu_pos || set_temperature != set_temperature_last || (mode_select == 2 && power != power_last)){
 8004274:	4b4f      	ldr	r3, [pc, #316]	@ (80043b4 <main+0xbb4>)
 8004276:	4e3a      	ldr	r6, [pc, #232]	@ (8004360 <main+0xb60>)
 8004278:	681c      	ldr	r4, [r3, #0]
 800427a:	4b4f      	ldr	r3, [pc, #316]	@ (80043b8 <main+0xbb8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	42a3      	cmp	r3, r4
 8004280:	d116      	bne.n	80042b0 <main+0xab0>
 8004282:	4b36      	ldr	r3, [pc, #216]	@ (800435c <main+0xb5c>)
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	f7fd f909 	bl	800149c <__aeabi_i2f>
 800428a:	6831      	ldr	r1, [r6, #0]
 800428c:	f7fc f922 	bl	80004d4 <__aeabi_fcmpeq>
 8004290:	2800      	cmp	r0, #0
 8004292:	d00d      	beq.n	80042b0 <main+0xab0>
 8004294:	4b30      	ldr	r3, [pc, #192]	@ (8004358 <main+0xb58>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d000      	beq.n	800429e <main+0xa9e>
 800429c:	e0a2      	b.n	80043e4 <main+0xbe4>
 800429e:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <main+0xb8c>)
 80042a0:	4a39      	ldr	r2, [pc, #228]	@ (8004388 <main+0xb88>)
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	6811      	ldr	r1, [r2, #0]
 80042a6:	f7fc f915 	bl	80004d4 <__aeabi_fcmpeq>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d000      	beq.n	80042b0 <main+0xab0>
 80042ae:	e099      	b.n	80043e4 <main+0xbe4>
					switch(menu){
 80042b0:	2d03      	cmp	r5, #3
 80042b2:	d900      	bls.n	80042b6 <main+0xab6>
 80042b4:	e088      	b.n	80043c8 <main+0xbc8>
 80042b6:	0028      	movs	r0, r5
 80042b8:	2500      	movs	r5, #0
 80042ba:	f7fb ff41 	bl	8000140 <__gnu_thumb1_case_uhi>
 80042be:	0081      	.short	0x0081
 80042c0:	012c00f0 	.word	0x012c00f0
 80042c4:	0195      	.short	0x0195
							ssd1306_FillRectangle(5,25,128,64,Black);
 80042c6:	2005      	movs	r0, #5
 80042c8:	f000 fc3c 	bl	8004b44 <ssd1306_FillRectangle>
							ssd1306_UpdateScreen();
 80042cc:	f000 fb92 	bl	80049f4 <ssd1306_UpdateScreen>
							ssd1306_SetCursor(5,25);
 80042d0:	2005      	movs	r0, #5
 80042d2:	2119      	movs	r1, #25
 80042d4:	f000 fc30 	bl	8004b38 <ssd1306_SetCursor>
							if(mode_select == 1){
 80042d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004358 <main+0xb58>)
 80042da:	4d30      	ldr	r5, [pc, #192]	@ (800439c <main+0xb9c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
								ssd1306_WriteString("Temperature",Font_11x18,Black);
 80042de:	4832      	ldr	r0, [pc, #200]	@ (80043a8 <main+0xba8>)
							if(mode_select == 1){
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d002      	beq.n	80042ea <main+0xaea>
							else if(mode_select == 2){
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d106      	bne.n	80042f6 <main+0xaf6>
								ssd1306_WriteString("Power",Font_11x18,Black);
 80042e8:	4830      	ldr	r0, [pc, #192]	@ (80043ac <main+0xbac>)
 80042ea:	6829      	ldr	r1, [r5, #0]
 80042ec:	686a      	ldr	r2, [r5, #4]
 80042ee:	68ab      	ldr	r3, [r5, #8]
 80042f0:	9400      	str	r4, [sp, #0]
 80042f2:	f000 fc07 	bl	8004b04 <ssd1306_WriteString>
							ssd1306_SetCursor(5,45);
 80042f6:	2005      	movs	r0, #5
 80042f8:	212d      	movs	r1, #45	@ 0x2d
 80042fa:	f000 fc1d 	bl	8004b38 <ssd1306_SetCursor>
							ssd1306_WriteString("Heat ON/OFF",Font_11x18,White);
 80042fe:	2301      	movs	r3, #1
 8004300:	482e      	ldr	r0, [pc, #184]	@ (80043bc <main+0xbbc>)
 8004302:	e796      	b.n	8004232 <main+0xa32>
							ssd1306_FillRectangle(5,25,128,64,Black);
 8004304:	2005      	movs	r0, #5
 8004306:	f000 fc1d 	bl	8004b44 <ssd1306_FillRectangle>
							ssd1306_UpdateScreen();
 800430a:	f000 fb73 	bl	80049f4 <ssd1306_UpdateScreen>
							ssd1306_SetCursor(5,25);
 800430e:	2119      	movs	r1, #25
 8004310:	2005      	movs	r0, #5
 8004312:	f000 fc11 	bl	8004b38 <ssd1306_SetCursor>
							ssd1306_WriteString("Heat ON/OFF",Font_11x18,Black);
 8004316:	4b21      	ldr	r3, [pc, #132]	@ (800439c <main+0xb9c>)
 8004318:	9400      	str	r4, [sp, #0]
 800431a:	6819      	ldr	r1, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	001c      	movs	r4, r3
 8004320:	4826      	ldr	r0, [pc, #152]	@ (80043bc <main+0xbbc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f000 fbee 	bl	8004b04 <ssd1306_WriteString>
							ssd1306_SetCursor(5,45);
 8004328:	2005      	movs	r0, #5
 800432a:	212d      	movs	r1, #45	@ 0x2d
 800432c:	f000 fc04 	bl	8004b38 <ssd1306_SetCursor>
							ssd1306_WriteString("Source",Font_11x18,White);
 8004330:	481b      	ldr	r0, [pc, #108]	@ (80043a0 <main+0xba0>)
 8004332:	e75c      	b.n	80041ee <main+0x9ee>
			if(sub_menu){
 8004334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d100      	bne.n	800433e <main+0xb3e>
 800433c:	e4dc      	b.n	8003cf8 <main+0x4f8>
 800433e:	e78a      	b.n	8004256 <main+0xa56>
							sub_menu_pos = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	e794      	b.n	800426e <main+0xa6e>
					else if(turn_CW_CCW == 1){
 8004344:	2801      	cmp	r0, #1
 8004346:	d193      	bne.n	8004270 <main+0xa70>
						if(sub_menu_pos < 0){
 8004348:	3b01      	subs	r3, #1
 800434a:	d590      	bpl.n	800426e <main+0xa6e>
							sub_menu_pos = 1;
 800434c:	6010      	str	r0, [r2, #0]
 800434e:	e78f      	b.n	8004270 <main+0xa70>
 8004350:	200002c8 	.word	0x200002c8
 8004354:	2000028c 	.word	0x2000028c
 8004358:	20000028 	.word	0x20000028
 800435c:	20000010 	.word	0x20000010
 8004360:	20000030 	.word	0x20000030
 8004364:	0800a780 	.word	0x0800a780
 8004368:	0800a55d 	.word	0x0800a55d
 800436c:	200002a8 	.word	0x200002a8
 8004370:	0800a562 	.word	0x0800a562
 8004374:	20000294 	.word	0x20000294
 8004378:	200002bc 	.word	0x200002bc
 800437c:	20000298 	.word	0x20000298
 8004380:	0800a542 	.word	0x0800a542
 8004384:	0800a556 	.word	0x0800a556
 8004388:	20000024 	.word	0x20000024
 800438c:	200002b8 	.word	0x200002b8
 8004390:	0800a56c 	.word	0x0800a56c
 8004394:	0800a579 	.word	0x0800a579
 8004398:	20000018 	.word	0x20000018
 800439c:	0800a774 	.word	0x0800a774
 80043a0:	0800a584 	.word	0x0800a584
 80043a4:	0800a58b 	.word	0x0800a58b
 80043a8:	0800a594 	.word	0x0800a594
 80043ac:	0800a5a0 	.word	0x0800a5a0
 80043b0:	200002b2 	.word	0x200002b2
 80043b4:	20000290 	.word	0x20000290
 80043b8:	20000014 	.word	0x20000014
 80043bc:	0800a5a6 	.word	0x0800a5a6
							switch(sub_menu_pos){
 80043c0:	2c00      	cmp	r4, #0
 80043c2:	d02f      	beq.n	8004424 <main+0xc24>
 80043c4:	2c01      	cmp	r4, #1
 80043c6:	d04c      	beq.n	8004462 <main+0xc62>
					sub_menu_pos_last = sub_menu_pos;
 80043c8:	4ad6      	ldr	r2, [pc, #856]	@ (8004724 <main+0xf24>)
 80043ca:	4bd7      	ldr	r3, [pc, #860]	@ (8004728 <main+0xf28>)
 80043cc:	6812      	ldr	r2, [r2, #0]
					set_temperature_last = set_temperature;
 80043ce:	4cd7      	ldr	r4, [pc, #860]	@ (800472c <main+0xf2c>)
					sub_menu_pos_last = sub_menu_pos;
 80043d0:	601a      	str	r2, [r3, #0]
					set_temperature_last = set_temperature;
 80043d2:	4bd7      	ldr	r3, [pc, #860]	@ (8004730 <main+0xf30>)
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	f7fd f841 	bl	800145c <__aeabi_f2iz>
					power_last = power;
 80043da:	4ad6      	ldr	r2, [pc, #856]	@ (8004734 <main+0xf34>)
 80043dc:	4bd6      	ldr	r3, [pc, #856]	@ (8004738 <main+0xf38>)
 80043de:	6812      	ldr	r2, [r2, #0]
					set_temperature_last = set_temperature;
 80043e0:	6020      	str	r0, [r4, #0]
					power_last = power;
 80043e2:	601a      	str	r2, [r3, #0]
				if(menu == 2){
 80043e4:	4bd5      	ldr	r3, [pc, #852]	@ (800473c <main+0xf3c>)
 80043e6:	681d      	ldr	r5, [r3, #0]
 80043e8:	2d02      	cmp	r5, #2
 80043ea:	d000      	beq.n	80043ee <main+0xbee>
 80043ec:	e14d      	b.n	800468a <main+0xe8a>
					if(mode_select == 1){
 80043ee:	4bd4      	ldr	r3, [pc, #848]	@ (8004740 <main+0xf40>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d000      	beq.n	80043f8 <main+0xbf8>
 80043f6:	e15a      	b.n	80046ae <main+0xeae>
						if(turn_CW_CCW == 2){
 80043f8:	4bd2      	ldr	r3, [pc, #840]	@ (8004744 <main+0xf44>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d000      	beq.n	8004402 <main+0xc02>
 8004400:	e130      	b.n	8004664 <main+0xe64>
							set_temperature++;
 8004402:	21fe      	movs	r1, #254	@ 0xfe
 8004404:	4eca      	ldr	r6, [pc, #808]	@ (8004730 <main+0xf30>)
 8004406:	0589      	lsls	r1, r1, #22
 8004408:	6830      	ldr	r0, [r6, #0]
 800440a:	f7fc f8a9 	bl	8000560 <__aeabi_fadd>
							if(set_temperature >= 400){
 800440e:	4fce      	ldr	r7, [pc, #824]	@ (8004748 <main+0xf48>)
							set_temperature++;
 8004410:	1c04      	adds	r4, r0, #0
							if(power >= 100){
 8004412:	1c39      	adds	r1, r7, #0
 8004414:	1c20      	adds	r0, r4, #0
 8004416:	f7fc f881 	bl	800051c <__aeabi_fcmpge>
							if(power <= 0){
 800441a:	2800      	cmp	r0, #0
 800441c:	d000      	beq.n	8004420 <main+0xc20>
 800441e:	e130      	b.n	8004682 <main+0xe82>
							power = power - 10;
 8004420:	6034      	str	r4, [r6, #0]
 8004422:	e12f      	b.n	8004684 <main+0xe84>
									ssd1306_FillRectangle(5,25,128,64,Black);
 8004424:	2340      	movs	r3, #64	@ 0x40
 8004426:	2280      	movs	r2, #128	@ 0x80
 8004428:	2119      	movs	r1, #25
 800442a:	2005      	movs	r0, #5
 800442c:	9400      	str	r4, [sp, #0]
 800442e:	f000 fb89 	bl	8004b44 <ssd1306_FillRectangle>
									ssd1306_UpdateScreen();
 8004432:	f000 fadf 	bl	80049f4 <ssd1306_UpdateScreen>
									ssd1306_SetCursor(5,25);
 8004436:	2119      	movs	r1, #25
 8004438:	2005      	movs	r0, #5
 800443a:	f000 fb7d 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Element",Font_11x18,Black);
 800443e:	4bc3      	ldr	r3, [pc, #780]	@ (800474c <main+0xf4c>)
 8004440:	9400      	str	r4, [sp, #0]
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	001c      	movs	r4, r3
 8004448:	48c1      	ldr	r0, [pc, #772]	@ (8004750 <main+0xf50>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f000 fb5a 	bl	8004b04 <ssd1306_WriteString>
									ssd1306_SetCursor(5,45);
 8004450:	2005      	movs	r0, #5
 8004452:	212d      	movs	r1, #45	@ 0x2d
 8004454:	f000 fb70 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Heater",Font_11x18,White);
 8004458:	48be      	ldr	r0, [pc, #760]	@ (8004754 <main+0xf54>)
									ssd1306_WriteString("Auto",Font_11x18,White);
 800445a:	2301      	movs	r3, #1
 800445c:	9300      	str	r3, [sp, #0]
									ssd1306_WriteString("No",Font_11x18,Black);
 800445e:	cc0e      	ldmia	r4!, {r1, r2, r3}
 8004460:	e08f      	b.n	8004582 <main+0xd82>
									ssd1306_FillRectangle(5,25,128,64,Black);
 8004462:	2340      	movs	r3, #64	@ 0x40
 8004464:	2280      	movs	r2, #128	@ 0x80
 8004466:	2119      	movs	r1, #25
 8004468:	2005      	movs	r0, #5
 800446a:	9500      	str	r5, [sp, #0]
 800446c:	f000 fb6a 	bl	8004b44 <ssd1306_FillRectangle>
									ssd1306_UpdateScreen();
 8004470:	f000 fac0 	bl	80049f4 <ssd1306_UpdateScreen>
									ssd1306_SetCursor(5,25);
 8004474:	2119      	movs	r1, #25
 8004476:	2005      	movs	r0, #5
 8004478:	f000 fb5e 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Heater",Font_11x18,Black);
 800447c:	4bb3      	ldr	r3, [pc, #716]	@ (800474c <main+0xf4c>)
 800447e:	9500      	str	r5, [sp, #0]
 8004480:	6819      	ldr	r1, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	001d      	movs	r5, r3
 8004486:	48b3      	ldr	r0, [pc, #716]	@ (8004754 <main+0xf54>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f000 fb3b 	bl	8004b04 <ssd1306_WriteString>
									ssd1306_SetCursor(5,45);
 800448e:	2005      	movs	r0, #5
 8004490:	212d      	movs	r1, #45	@ 0x2d
 8004492:	f000 fb51 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Element",Font_11x18,White);
 8004496:	48ae      	ldr	r0, [pc, #696]	@ (8004750 <main+0xf50>)
									ssd1306_WriteString("Yes",Font_11x18,Black);
 8004498:	9400      	str	r4, [sp, #0]
 800449a:	cd0e      	ldmia	r5!, {r1, r2, r3}
 800449c:	e071      	b.n	8004582 <main+0xd82>
							switch(sub_menu_pos){
 800449e:	2c00      	cmp	r4, #0
 80044a0:	d01d      	beq.n	80044de <main+0xcde>
 80044a2:	2c01      	cmp	r4, #1
 80044a4:	d190      	bne.n	80043c8 <main+0xbc8>
									ssd1306_FillRectangle(5,25,128,64,Black);
 80044a6:	2340      	movs	r3, #64	@ 0x40
 80044a8:	2280      	movs	r2, #128	@ 0x80
 80044aa:	2119      	movs	r1, #25
 80044ac:	2005      	movs	r0, #5
 80044ae:	9500      	str	r5, [sp, #0]
 80044b0:	f000 fb48 	bl	8004b44 <ssd1306_FillRectangle>
									ssd1306_UpdateScreen();
 80044b4:	f000 fa9e 	bl	80049f4 <ssd1306_UpdateScreen>
									ssd1306_SetCursor(5,25);
 80044b8:	2119      	movs	r1, #25
 80044ba:	2005      	movs	r0, #5
 80044bc:	f000 fb3c 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Auto",Font_11x18,Black);
 80044c0:	4ba2      	ldr	r3, [pc, #648]	@ (800474c <main+0xf4c>)
 80044c2:	9500      	str	r5, [sp, #0]
 80044c4:	6819      	ldr	r1, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	001d      	movs	r5, r3
 80044ca:	48a3      	ldr	r0, [pc, #652]	@ (8004758 <main+0xf58>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f000 fb19 	bl	8004b04 <ssd1306_WriteString>
									ssd1306_SetCursor(5,45);
 80044d2:	2005      	movs	r0, #5
 80044d4:	212d      	movs	r1, #45	@ 0x2d
 80044d6:	f000 fb2f 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Manual",Font_11x18,White);
 80044da:	48a0      	ldr	r0, [pc, #640]	@ (800475c <main+0xf5c>)
 80044dc:	e7dc      	b.n	8004498 <main+0xc98>
									ssd1306_FillRectangle(5,25,128,64,Black);
 80044de:	2340      	movs	r3, #64	@ 0x40
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	2119      	movs	r1, #25
 80044e4:	2005      	movs	r0, #5
 80044e6:	9400      	str	r4, [sp, #0]
 80044e8:	f000 fb2c 	bl	8004b44 <ssd1306_FillRectangle>
									ssd1306_UpdateScreen();
 80044ec:	f000 fa82 	bl	80049f4 <ssd1306_UpdateScreen>
									ssd1306_SetCursor(5,25);
 80044f0:	2119      	movs	r1, #25
 80044f2:	2005      	movs	r0, #5
 80044f4:	f000 fb20 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Manual",Font_11x18,Black);
 80044f8:	4b94      	ldr	r3, [pc, #592]	@ (800474c <main+0xf4c>)
 80044fa:	9400      	str	r4, [sp, #0]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	001c      	movs	r4, r3
 8004502:	4896      	ldr	r0, [pc, #600]	@ (800475c <main+0xf5c>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f000 fafd 	bl	8004b04 <ssd1306_WriteString>
									ssd1306_SetCursor(5,45);
 800450a:	2005      	movs	r0, #5
 800450c:	212d      	movs	r1, #45	@ 0x2d
 800450e:	f000 fb13 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Auto",Font_11x18,White);
 8004512:	4891      	ldr	r0, [pc, #580]	@ (8004758 <main+0xf58>)
 8004514:	e7a1      	b.n	800445a <main+0xc5a>
							ssd1306_FillRectangle(5,25,128,64,Black);
 8004516:	2340      	movs	r3, #64	@ 0x40
 8004518:	2280      	movs	r2, #128	@ 0x80
 800451a:	2119      	movs	r1, #25
 800451c:	2005      	movs	r0, #5
 800451e:	9500      	str	r5, [sp, #0]
 8004520:	f000 fb10 	bl	8004b44 <ssd1306_FillRectangle>
							ssd1306_UpdateScreen();
 8004524:	f000 fa66 	bl	80049f4 <ssd1306_UpdateScreen>
								temp[i] = 0;
 8004528:	4c8d      	ldr	r4, [pc, #564]	@ (8004760 <main+0xf60>)
 800452a:	2209      	movs	r2, #9
 800452c:	2100      	movs	r1, #0
 800452e:	0020      	movs	r0, r4
 8004530:	f003 fe16 	bl	8008160 <memset>
							if(mode_select == 1){
 8004534:	4b82      	ldr	r3, [pc, #520]	@ (8004740 <main+0xf40>)
 8004536:	681d      	ldr	r5, [r3, #0]
 8004538:	2d01      	cmp	r5, #1
 800453a:	d131      	bne.n	80045a0 <main+0xda0>
								sprintf(temp,"%.0f  ",set_temperature);
 800453c:	6830      	ldr	r0, [r6, #0]
 800453e:	f7fe ffe3 	bl	8003508 <__aeabi_f2d>
 8004542:	0002      	movs	r2, r0
 8004544:	000b      	movs	r3, r1
 8004546:	0020      	movs	r0, r4
 8004548:	4986      	ldr	r1, [pc, #536]	@ (8004764 <main+0xf64>)
 800454a:	f003 fd9b 	bl	8008084 <siprintf>
								ssd1306_SetCursor(5,25);
 800454e:	2119      	movs	r1, #25
 8004550:	2005      	movs	r0, #5
 8004552:	f000 faf1 	bl	8004b38 <ssd1306_SetCursor>
								ssd1306_WriteString("Temp",Font_11x18,White);
 8004556:	4b7d      	ldr	r3, [pc, #500]	@ (800474c <main+0xf4c>)
 8004558:	4883      	ldr	r0, [pc, #524]	@ (8004768 <main+0xf68>)
 800455a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800455c:	9500      	str	r5, [sp, #0]
 800455e:	f000 fad1 	bl	8004b04 <ssd1306_WriteString>
								ssd1306_SetCursor(5,45);
 8004562:	212d      	movs	r1, #45	@ 0x2d
 8004564:	2005      	movs	r0, #5
 8004566:	f000 fae7 	bl	8004b38 <ssd1306_SetCursor>
								if(set_temperature < 100){
 800456a:	6834      	ldr	r4, [r6, #0]
 800456c:	497f      	ldr	r1, [pc, #508]	@ (800476c <main+0xf6c>)
 800456e:	1c20      	adds	r0, r4, #0
 8004570:	f7fb ffb6 	bl	80004e0 <__aeabi_fcmplt>
 8004574:	2800      	cmp	r0, #0
 8004576:	d009      	beq.n	800458c <main+0xd8c>
									ssd1306_WriteString("Off",Font_11x18,White);
 8004578:	2201      	movs	r2, #1
 800457a:	4b74      	ldr	r3, [pc, #464]	@ (800474c <main+0xf4c>)
 800457c:	487c      	ldr	r0, [pc, #496]	@ (8004770 <main+0xf70>)
									ssd1306_WriteString(temp,Font_11x18,Black);
 800457e:	9200      	str	r2, [sp, #0]
 8004580:	cb0e      	ldmia	r3, {r1, r2, r3}
									ssd1306_WriteString("No",Font_11x18,Black);
 8004582:	f000 fabf 	bl	8004b04 <ssd1306_WriteString>
									ssd1306_UpdateScreen();
 8004586:	f000 fa35 	bl	80049f4 <ssd1306_UpdateScreen>
								break;
 800458a:	e71d      	b.n	80043c8 <main+0xbc8>
								else if(set_temperature >= 100){
 800458c:	4977      	ldr	r1, [pc, #476]	@ (800476c <main+0xf6c>)
 800458e:	1c20      	adds	r0, r4, #0
 8004590:	f7fb ffc4 	bl	800051c <__aeabi_fcmpge>
 8004594:	2800      	cmp	r0, #0
 8004596:	d0f6      	beq.n	8004586 <main+0xd86>
									ssd1306_WriteString(temp,Font_11x18,Black);
 8004598:	2200      	movs	r2, #0
 800459a:	4b6c      	ldr	r3, [pc, #432]	@ (800474c <main+0xf4c>)
 800459c:	4870      	ldr	r0, [pc, #448]	@ (8004760 <main+0xf60>)
 800459e:	e7ee      	b.n	800457e <main+0xd7e>
							else if(mode_select == 2){
 80045a0:	2d02      	cmp	r5, #2
 80045a2:	d1f0      	bne.n	8004586 <main+0xd86>
								sprintf(temp,"%.0f",power);
 80045a4:	4d63      	ldr	r5, [pc, #396]	@ (8004734 <main+0xf34>)
 80045a6:	6828      	ldr	r0, [r5, #0]
 80045a8:	f7fe ffae 	bl	8003508 <__aeabi_f2d>
 80045ac:	0002      	movs	r2, r0
 80045ae:	000b      	movs	r3, r1
 80045b0:	0020      	movs	r0, r4
 80045b2:	4970      	ldr	r1, [pc, #448]	@ (8004774 <main+0xf74>)
 80045b4:	f003 fd66 	bl	8008084 <siprintf>
								ssd1306_SetCursor(5,25);
 80045b8:	2119      	movs	r1, #25
 80045ba:	2005      	movs	r0, #5
 80045bc:	f000 fabc 	bl	8004b38 <ssd1306_SetCursor>
								ssd1306_WriteString("Power",Font_11x18,White);
 80045c0:	2201      	movs	r2, #1
 80045c2:	4b62      	ldr	r3, [pc, #392]	@ (800474c <main+0xf4c>)
 80045c4:	9200      	str	r2, [sp, #0]
 80045c6:	486c      	ldr	r0, [pc, #432]	@ (8004778 <main+0xf78>)
 80045c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045ca:	f000 fa9b 	bl	8004b04 <ssd1306_WriteString>
								ssd1306_SetCursor(5,45);
 80045ce:	212d      	movs	r1, #45	@ 0x2d
 80045d0:	2005      	movs	r0, #5
 80045d2:	f000 fab1 	bl	8004b38 <ssd1306_SetCursor>
								if(power < 0){
 80045d6:	682c      	ldr	r4, [r5, #0]
 80045d8:	2100      	movs	r1, #0
 80045da:	1c20      	adds	r0, r4, #0
 80045dc:	f7fb ff80 	bl	80004e0 <__aeabi_fcmplt>
								else if(power >= 0){
 80045e0:	2100      	movs	r1, #0
								if(power < 0){
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d0d3      	beq.n	800458e <main+0xd8e>
 80045e6:	e7c7      	b.n	8004578 <main+0xd78>
							switch(sub_menu_pos){
 80045e8:	2c00      	cmp	r4, #0
 80045ea:	d01f      	beq.n	800462c <main+0xe2c>
 80045ec:	2c01      	cmp	r4, #1
 80045ee:	d000      	beq.n	80045f2 <main+0xdf2>
 80045f0:	e6ea      	b.n	80043c8 <main+0xbc8>
									ssd1306_FillRectangle(5,25,128,64,Black);
 80045f2:	2340      	movs	r3, #64	@ 0x40
 80045f4:	2280      	movs	r2, #128	@ 0x80
 80045f6:	2119      	movs	r1, #25
 80045f8:	2005      	movs	r0, #5
 80045fa:	9500      	str	r5, [sp, #0]
 80045fc:	f000 faa2 	bl	8004b44 <ssd1306_FillRectangle>
									ssd1306_UpdateScreen();
 8004600:	f000 f9f8 	bl	80049f4 <ssd1306_UpdateScreen>
									ssd1306_SetCursor(5,25);
 8004604:	2119      	movs	r1, #25
 8004606:	2005      	movs	r0, #5
 8004608:	f000 fa96 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Turn off?",Font_11x18,White);
 800460c:	4b4f      	ldr	r3, [pc, #316]	@ (800474c <main+0xf4c>)
 800460e:	9400      	str	r4, [sp, #0]
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	001c      	movs	r4, r3
 8004616:	4859      	ldr	r0, [pc, #356]	@ (800477c <main+0xf7c>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f000 fa73 	bl	8004b04 <ssd1306_WriteString>
									ssd1306_SetCursor(5,45);
 800461e:	2005      	movs	r0, #5
 8004620:	212d      	movs	r1, #45	@ 0x2d
 8004622:	f000 fa89 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("No",Font_11x18,Black);
 8004626:	4856      	ldr	r0, [pc, #344]	@ (8004780 <main+0xf80>)
 8004628:	9500      	str	r5, [sp, #0]
 800462a:	e718      	b.n	800445e <main+0xc5e>
									ssd1306_FillRectangle(5,25,128,64,Black);
 800462c:	2340      	movs	r3, #64	@ 0x40
 800462e:	2280      	movs	r2, #128	@ 0x80
 8004630:	2119      	movs	r1, #25
 8004632:	2005      	movs	r0, #5
 8004634:	9400      	str	r4, [sp, #0]
 8004636:	f000 fa85 	bl	8004b44 <ssd1306_FillRectangle>
									ssd1306_UpdateScreen();
 800463a:	f000 f9db 	bl	80049f4 <ssd1306_UpdateScreen>
									ssd1306_SetCursor(5,25);
 800463e:	2119      	movs	r1, #25
 8004640:	2005      	movs	r0, #5
 8004642:	f000 fa79 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Turn off?",Font_11x18,White);
 8004646:	2301      	movs	r3, #1
 8004648:	4d40      	ldr	r5, [pc, #256]	@ (800474c <main+0xf4c>)
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	6829      	ldr	r1, [r5, #0]
 800464e:	686a      	ldr	r2, [r5, #4]
 8004650:	68ab      	ldr	r3, [r5, #8]
 8004652:	484a      	ldr	r0, [pc, #296]	@ (800477c <main+0xf7c>)
 8004654:	f000 fa56 	bl	8004b04 <ssd1306_WriteString>
									ssd1306_SetCursor(5,45);
 8004658:	2005      	movs	r0, #5
 800465a:	212d      	movs	r1, #45	@ 0x2d
 800465c:	f000 fa6c 	bl	8004b38 <ssd1306_SetCursor>
									ssd1306_WriteString("Yes",Font_11x18,Black);
 8004660:	4848      	ldr	r0, [pc, #288]	@ (8004784 <main+0xf84>)
 8004662:	e719      	b.n	8004498 <main+0xc98>
						else if(turn_CW_CCW == 1){
 8004664:	2b01      	cmp	r3, #1
 8004666:	d10d      	bne.n	8004684 <main+0xe84>
							set_temperature--;
 8004668:	21fe      	movs	r1, #254	@ 0xfe
 800466a:	4e31      	ldr	r6, [pc, #196]	@ (8004730 <main+0xf30>)
 800466c:	0589      	lsls	r1, r1, #22
 800466e:	6830      	ldr	r0, [r6, #0]
 8004670:	f7fc fc90 	bl	8000f94 <__aeabi_fsub>
							if(set_temperature <= 99){
 8004674:	4f44      	ldr	r7, [pc, #272]	@ (8004788 <main+0xf88>)
							set_temperature--;
 8004676:	1c04      	adds	r4, r0, #0
							if(power <= 0){
 8004678:	1c39      	adds	r1, r7, #0
 800467a:	1c20      	adds	r0, r4, #0
 800467c:	f7fb ff3a 	bl	80004f4 <__aeabi_fcmple>
 8004680:	e6cb      	b.n	800441a <main+0xc1a>
								set_temperature = 99;
 8004682:	6037      	str	r7, [r6, #0]
						turn_CW_CCW = 0;
 8004684:	2200      	movs	r2, #0
 8004686:	4b2f      	ldr	r3, [pc, #188]	@ (8004744 <main+0xf44>)
 8004688:	601a      	str	r2, [r3, #0]
				if(button == true){
 800468a:	4b40      	ldr	r3, [pc, #256]	@ (800478c <main+0xf8c>)
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	2a00      	cmp	r2, #0
 8004690:	d101      	bne.n	8004696 <main+0xe96>
 8004692:	f7ff fb31 	bl	8003cf8 <main+0x4f8>
					sub_menu = false;
 8004696:	2200      	movs	r2, #0
 8004698:	990a      	ldr	r1, [sp, #40]	@ 0x28
					button = false;
 800469a:	701a      	strb	r2, [r3, #0]
					sub_menu = false;
 800469c:	700a      	strb	r2, [r1, #0]
					switch(menu){
 800469e:	2d03      	cmp	r5, #3
 80046a0:	d824      	bhi.n	80046ec <main+0xeec>
 80046a2:	0028      	movs	r0, r5
 80046a4:	4c3a      	ldr	r4, [pc, #232]	@ (8004790 <main+0xf90>)
 80046a6:	f7fb fd37 	bl	8000118 <__gnu_thumb1_case_uqi>
 80046aa:	301a      	.short	0x301a
 80046ac:	aa7b      	.short	0xaa7b
					if(mode_select == 2){
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d1eb      	bne.n	800468a <main+0xe8a>
						if(turn_CW_CCW == 2){
 80046b2:	4b24      	ldr	r3, [pc, #144]	@ (8004744 <main+0xf44>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d107      	bne.n	80046ca <main+0xeca>
							power = power + 10;
 80046ba:	4e1e      	ldr	r6, [pc, #120]	@ (8004734 <main+0xf34>)
 80046bc:	4935      	ldr	r1, [pc, #212]	@ (8004794 <main+0xf94>)
 80046be:	6830      	ldr	r0, [r6, #0]
 80046c0:	f7fb ff4e 	bl	8000560 <__aeabi_fadd>
							if(power >= 100){
 80046c4:	4f29      	ldr	r7, [pc, #164]	@ (800476c <main+0xf6c>)
							power = power + 10;
 80046c6:	1c04      	adds	r4, r0, #0
							if(power >= 100){
 80046c8:	e6a3      	b.n	8004412 <main+0xc12>
						else if(turn_CW_CCW == 1){
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d1da      	bne.n	8004684 <main+0xe84>
							power = power - 10;
 80046ce:	4e19      	ldr	r6, [pc, #100]	@ (8004734 <main+0xf34>)
 80046d0:	4930      	ldr	r1, [pc, #192]	@ (8004794 <main+0xf94>)
 80046d2:	6830      	ldr	r0, [r6, #0]
 80046d4:	f7fc fc5e 	bl	8000f94 <__aeabi_fsub>
							if(power <= 0){
 80046d8:	2700      	movs	r7, #0
							power = power - 10;
 80046da:	1c04      	adds	r4, r0, #0
							if(power <= 0){
 80046dc:	e7cc      	b.n	8004678 <main+0xe78>
							switch(sub_menu_pos){
 80046de:	4b11      	ldr	r3, [pc, #68]	@ (8004724 <main+0xf24>)
 80046e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004798 <main+0xf98>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00d      	beq.n	8004704 <main+0xf04>
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d00c      	beq.n	8004706 <main+0xf06>
					menu_last = 100;
 80046ec:	2364      	movs	r3, #100	@ 0x64
 80046ee:	4a2b      	ldr	r2, [pc, #172]	@ (800479c <main+0xf9c>)
 80046f0:	6013      	str	r3, [r2, #0]
					sub_menu_pos_last = 100;
 80046f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004728 <main+0xf28>)
 80046f4:	6013      	str	r3, [r2, #0]
					set_temperature_last = 100;
 80046f6:	4a0d      	ldr	r2, [pc, #52]	@ (800472c <main+0xf2c>)
 80046f8:	6013      	str	r3, [r2, #0]
					power_last = 100;
 80046fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004738 <main+0xf38>)
 80046fc:	4a1b      	ldr	r2, [pc, #108]	@ (800476c <main+0xf6c>)
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f7ff fafa 	bl	8003cf8 <main+0x4f8>
									temp_select = 2;
 8004704:	2302      	movs	r3, #2
									mode_select = 1;
 8004706:	6013      	str	r3, [r2, #0]
								break;
 8004708:	e7f0      	b.n	80046ec <main+0xeec>
							switch(sub_menu_pos){
 800470a:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <main+0xf24>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <main+0xf1a>
 8004712:	2b01      	cmp	r3, #1
 8004714:	d1ea      	bne.n	80046ec <main+0xeec>
									mode_select = 1;
 8004716:	4a0a      	ldr	r2, [pc, #40]	@ (8004740 <main+0xf40>)
 8004718:	e7f5      	b.n	8004706 <main+0xf06>
									mode_select = 2;
 800471a:	2202      	movs	r2, #2
 800471c:	4b08      	ldr	r3, [pc, #32]	@ (8004740 <main+0xf40>)
 800471e:	601a      	str	r2, [r3, #0]
								break;
 8004720:	e7e4      	b.n	80046ec <main+0xeec>
 8004722:	46c0      	nop			@ (mov r8, r8)
 8004724:	20000290 	.word	0x20000290
 8004728:	20000014 	.word	0x20000014
 800472c:	20000010 	.word	0x20000010
 8004730:	20000030 	.word	0x20000030
 8004734:	200002b8 	.word	0x200002b8
 8004738:	20000024 	.word	0x20000024
 800473c:	200002bc 	.word	0x200002bc
 8004740:	20000028 	.word	0x20000028
 8004744:	20000298 	.word	0x20000298
 8004748:	43c80000 	.word	0x43c80000
 800474c:	0800a774 	.word	0x0800a774
 8004750:	0800a5b2 	.word	0x0800a5b2
 8004754:	0800a5ba 	.word	0x0800a5ba
 8004758:	0800a567 	.word	0x0800a567
 800475c:	0800a572 	.word	0x0800a572
 8004760:	200002a8 	.word	0x200002a8
 8004764:	0800a556 	.word	0x0800a556
 8004768:	0800a5c1 	.word	0x0800a5c1
 800476c:	42c80000 	.word	0x42c80000
 8004770:	0800a5c6 	.word	0x0800a5c6
 8004774:	0800a5ca 	.word	0x0800a5ca
 8004778:	0800a5a0 	.word	0x0800a5a0
 800477c:	0800a5cf 	.word	0x0800a5cf
 8004780:	0800a5dd 	.word	0x0800a5dd
 8004784:	0800a5d9 	.word	0x0800a5d9
 8004788:	42c60000 	.word	0x42c60000
 800478c:	200002b2 	.word	0x200002b2
 8004790:	2000028c 	.word	0x2000028c
 8004794:	41200000 	.word	0x41200000
 8004798:	2000002c 	.word	0x2000002c
 800479c:	20000018 	.word	0x20000018
							if(mode_select == 1){
 80047a0:	4b20      	ldr	r3, [pc, #128]	@ (8004824 <main+0x1024>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d11d      	bne.n	80047e4 <main+0xfe4>
								if(set_temperature >= 100){
 80047a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004828 <main+0x1028>)
 80047aa:	4920      	ldr	r1, [pc, #128]	@ (800482c <main+0x102c>)
 80047ac:	681d      	ldr	r5, [r3, #0]
 80047ae:	1c28      	adds	r0, r5, #0
 80047b0:	f7fb feb4 	bl	800051c <__aeabi_fcmpge>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d002      	beq.n	80047be <main+0xfbe>
									temp_set = true;
 80047b8:	2301      	movs	r3, #1
 80047ba:	7023      	strb	r3, [r4, #0]
 80047bc:	e796      	b.n	80046ec <main+0xeec>
								else if(set_temperature <= 99){
 80047be:	491c      	ldr	r1, [pc, #112]	@ (8004830 <main+0x1030>)
 80047c0:	1c28      	adds	r0, r5, #0
 80047c2:	f7fb fe97 	bl	80004f4 <__aeabi_fcmple>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d090      	beq.n	80046ec <main+0xeec>
									temp_set = false;
 80047ca:	2200      	movs	r2, #0
 80047cc:	7022      	strb	r2, [r4, #0]
									power = 0;
 80047ce:	2100      	movs	r1, #0
									HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80047d0:	2090      	movs	r0, #144	@ 0x90
									PID_value = 0;
 80047d2:	4b18      	ldr	r3, [pc, #96]	@ (8004834 <main+0x1034>)
									HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80047d4:	05c0      	lsls	r0, r0, #23
									PID_value = 0;
 80047d6:	601a      	str	r2, [r3, #0]
									power = 0;
 80047d8:	4b17      	ldr	r3, [pc, #92]	@ (8004838 <main+0x1038>)
 80047da:	6019      	str	r1, [r3, #0]
									HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80047dc:	2102      	movs	r1, #2
 80047de:	f000 fe77 	bl	80054d0 <HAL_GPIO_WritePin>
								break;
 80047e2:	e783      	b.n	80046ec <main+0xeec>
							else if(mode_select == 2){
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d000      	beq.n	80047ea <main+0xfea>
 80047e8:	e780      	b.n	80046ec <main+0xeec>
								if(power > 0){
 80047ea:	4b13      	ldr	r3, [pc, #76]	@ (8004838 <main+0x1038>)
 80047ec:	2100      	movs	r1, #0
 80047ee:	681d      	ldr	r5, [r3, #0]
 80047f0:	1c28      	adds	r0, r5, #0
 80047f2:	f7fb fe89 	bl	8000508 <__aeabi_fcmpgt>
								else if(power <= 0){
 80047f6:	2100      	movs	r1, #0
								if(power > 0){
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d1dd      	bne.n	80047b8 <main+0xfb8>
 80047fc:	e7e0      	b.n	80047c0 <main+0xfc0>
							switch(sub_menu_pos){
 80047fe:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <main+0x103c>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	2a00      	cmp	r2, #0
 8004804:	d000      	beq.n	8004808 <main+0x1008>
 8004806:	e771      	b.n	80046ec <main+0xeec>
									set_temperature = 99;
 8004808:	4b07      	ldr	r3, [pc, #28]	@ (8004828 <main+0x1028>)
 800480a:	4909      	ldr	r1, [pc, #36]	@ (8004830 <main+0x1030>)
									temp_set = false;
 800480c:	7022      	strb	r2, [r4, #0]
									set_temperature = 99;
 800480e:	6019      	str	r1, [r3, #0]
 8004810:	e7dd      	b.n	80047ce <main+0xfce>
		else if(temp_select == 2){
 8004812:	2b02      	cmp	r3, #2
 8004814:	d001      	beq.n	800481a <main+0x101a>
 8004816:	f7ff fa79 	bl	8003d0c <main+0x50c>
			selected_temperature = real_temperature_element;
 800481a:	4b09      	ldr	r3, [pc, #36]	@ (8004840 <main+0x1040>)
 800481c:	4a09      	ldr	r2, [pc, #36]	@ (8004844 <main+0x1044>)
 800481e:	f7ff fa73 	bl	8003d08 <main+0x508>
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	20000028 	.word	0x20000028
 8004828:	20000030 	.word	0x20000030
 800482c:	42c80000 	.word	0x42c80000
 8004830:	42c60000 	.word	0x42c60000
 8004834:	20000244 	.word	0x20000244
 8004838:	200002b8 	.word	0x200002b8
 800483c:	20000290 	.word	0x20000290
 8004840:	200002c0 	.word	0x200002c0
 8004844:	200002cc 	.word	0x200002cc

08004848 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004848:	b510      	push	{r4, lr}
	if(GPIO_Pin == GPIO_PIN_0){
 800484a:	2801      	cmp	r0, #1
 800484c:	d10c      	bne.n	8004868 <HAL_GPIO_EXTI_Callback+0x20>
		if(temp_set){
 800484e:	4b18      	ldr	r3, [pc, #96]	@ (80048b0 <HAL_GPIO_EXTI_Callback+0x68>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_GPIO_EXTI_Callback+0x1e>
			set = 1;
 8004856:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <HAL_GPIO_EXTI_Callback+0x6c>)
			time_stamp = Time;
 8004858:	4c17      	ldr	r4, [pc, #92]	@ (80048b8 <HAL_GPIO_EXTI_Callback+0x70>)
			set = 1;
 800485a:	7018      	strb	r0, [r3, #0]
			time_stamp = Time;
 800485c:	4b17      	ldr	r3, [pc, #92]	@ (80048bc <HAL_GPIO_EXTI_Callback+0x74>)
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	f7fc fe6c 	bl	800153c <__aeabi_ui2f>
 8004864:	6020      	str	r0, [r4, #0]
}
 8004866:	bd10      	pop	{r4, pc}
	else if(GPIO_Pin == GPIO_PIN_2){
 8004868:	2804      	cmp	r0, #4
 800486a:	d106      	bne.n	800487a <HAL_GPIO_EXTI_Callback+0x32>
		button = true;
 800486c:	2201      	movs	r2, #1
 800486e:	4b14      	ldr	r3, [pc, #80]	@ (80048c0 <HAL_GPIO_EXTI_Callback+0x78>)
		HAL_Delay(10);
 8004870:	3006      	adds	r0, #6
		button = true;
 8004872:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8004874:	f000 fc16 	bl	80050a4 <HAL_Delay>
 8004878:	e7f5      	b.n	8004866 <HAL_GPIO_EXTI_Callback+0x1e>
	else if(GPIO_Pin == GPIO_PIN_8){
 800487a:	2180      	movs	r1, #128	@ 0x80
 800487c:	0049      	lsls	r1, r1, #1
 800487e:	4288      	cmp	r0, r1
 8004880:	d109      	bne.n	8004896 <HAL_GPIO_EXTI_Callback+0x4e>
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)){
 8004882:	4810      	ldr	r0, [pc, #64]	@ (80048c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8004884:	1849      	adds	r1, r1, r1
 8004886:	f000 fe1d 	bl	80054c4 <HAL_GPIO_ReadPin>
 800488a:	2800      	cmp	r0, #0
 800488c:	d0eb      	beq.n	8004866 <HAL_GPIO_EXTI_Callback+0x1e>
			turn_CW_CCW = 1;
 800488e:	2201      	movs	r2, #1
 8004890:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <HAL_GPIO_EXTI_Callback+0x80>)
			turn_CW_CCW = 2;
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	e7e7      	b.n	8004866 <HAL_GPIO_EXTI_Callback+0x1e>
	else if(GPIO_Pin == GPIO_PIN_9){
 8004896:	2380      	movs	r3, #128	@ 0x80
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4298      	cmp	r0, r3
 800489c:	d1e3      	bne.n	8004866 <HAL_GPIO_EXTI_Callback+0x1e>
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)){
 800489e:	4809      	ldr	r0, [pc, #36]	@ (80048c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80048a0:	f000 fe10 	bl	80054c4 <HAL_GPIO_ReadPin>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d0de      	beq.n	8004866 <HAL_GPIO_EXTI_Callback+0x1e>
			turn_CW_CCW = 2;
 80048a8:	2202      	movs	r2, #2
 80048aa:	4b07      	ldr	r3, [pc, #28]	@ (80048c8 <HAL_GPIO_EXTI_Callback+0x80>)
 80048ac:	e7f1      	b.n	8004892 <HAL_GPIO_EXTI_Callback+0x4a>
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	2000028c 	.word	0x2000028c
 80048b4:	20000240 	.word	0x20000240
 80048b8:	20000250 	.word	0x20000250
 80048bc:	2000024c 	.word	0x2000024c
 80048c0:	200002b2 	.word	0x200002b2
 80048c4:	48000400 	.word	0x48000400
 80048c8:	20000298 	.word	0x20000298

080048cc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80048cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Time++;
 80048ce:	4c20      	ldr	r4, [pc, #128]	@ (8004950 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	6023      	str	r3, [r4, #0]
	if(PID_value != 0){
 80048d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004954 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80048d8:	681f      	ldr	r7, [r3, #0]
 80048da:	2f00      	cmp	r7, #0
 80048dc:	d037      	beq.n	800494e <HAL_TIM_PeriodElapsedCallback+0x82>
		if(set == 1){
 80048de:	4d1e      	ldr	r5, [pc, #120]	@ (8004958 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80048e0:	782b      	ldrb	r3, [r5, #0]
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	9201      	str	r2, [sp, #4]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d11a      	bne.n	8004920 <HAL_TIM_PeriodElapsedCallback+0x54>
			if((uint32_t)(Time - time_stamp) >= ((maximum_firing_delay - PID_value) + 10)){
 80048ea:	6820      	ldr	r0, [r4, #0]
 80048ec:	f7fc fe26 	bl	800153c <__aeabi_ui2f>
 80048f0:	4e1a      	ldr	r6, [pc, #104]	@ (800495c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80048f2:	6831      	ldr	r1, [r6, #0]
 80048f4:	f7fc fb4e 	bl	8000f94 <__aeabi_fsub>
 80048f8:	f7fb fe1a 	bl	8000530 <__aeabi_f2uiz>
 80048fc:	4b18      	ldr	r3, [pc, #96]	@ (8004960 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	1bdb      	subs	r3, r3, r7
 8004902:	330a      	adds	r3, #10
 8004904:	4298      	cmp	r0, r3
 8004906:	d30b      	bcc.n	8004920 <HAL_TIM_PeriodElapsedCallback+0x54>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8004908:	2090      	movs	r0, #144	@ 0x90
 800490a:	2102      	movs	r1, #2
 800490c:	9a01      	ldr	r2, [sp, #4]
 800490e:	05c0      	lsls	r0, r0, #23
 8004910:	f000 fdde 	bl	80054d0 <HAL_GPIO_WritePin>
				time_stamp = Time;
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	f7fc fe11 	bl	800153c <__aeabi_ui2f>
				set = 2;
 800491a:	2302      	movs	r3, #2
				time_stamp = Time;
 800491c:	6030      	str	r0, [r6, #0]
				set = 2;
 800491e:	702b      	strb	r3, [r5, #0]
		if(set == 2){
 8004920:	782b      	ldrb	r3, [r5, #0]
 8004922:	b2de      	uxtb	r6, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d112      	bne.n	800494e <HAL_TIM_PeriodElapsedCallback+0x82>
			if((uint32_t)(Time - time_stamp) >= 1){
 8004928:	6820      	ldr	r0, [r4, #0]
 800492a:	f7fc fe07 	bl	800153c <__aeabi_ui2f>
 800492e:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	f7fc fb2f 	bl	8000f94 <__aeabi_fsub>
 8004936:	f7fb fdfb 	bl	8000530 <__aeabi_f2uiz>
 800493a:	2800      	cmp	r0, #0
 800493c:	d007      	beq.n	800494e <HAL_TIM_PeriodElapsedCallback+0x82>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800493e:	2090      	movs	r0, #144	@ 0x90
 8004940:	2200      	movs	r2, #0
 8004942:	0031      	movs	r1, r6
 8004944:	05c0      	lsls	r0, r0, #23
 8004946:	f000 fdc3 	bl	80054d0 <HAL_GPIO_WritePin>
				set = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	702b      	strb	r3, [r5, #0]
}
 800494e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004950:	2000024c 	.word	0x2000024c
 8004954:	20000244 	.word	0x20000244
 8004958:	20000240 	.word	0x20000240
 800495c:	20000250 	.word	0x20000250
 8004960:	20000034 	.word	0x20000034

08004964 <HAL_UART_TxCpltCallback>:
	TX_state = true;
 8004964:	2201      	movs	r2, #1
 8004966:	4b01      	ldr	r3, [pc, #4]	@ (800496c <HAL_UART_TxCpltCallback+0x8>)
 8004968:	701a      	strb	r2, [r3, #0]
}
 800496a:	4770      	bx	lr
 800496c:	2000000c 	.word	0x2000000c

08004970 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004970:	b510      	push	{r4, lr}
	HAL_UART_Receive_DMA(&huart1,PC_RX,2);
 8004972:	2202      	movs	r2, #2
 8004974:	4902      	ldr	r1, [pc, #8]	@ (8004980 <HAL_UART_RxCpltCallback+0x10>)
 8004976:	4803      	ldr	r0, [pc, #12]	@ (8004984 <HAL_UART_RxCpltCallback+0x14>)
 8004978:	f002 fdfc 	bl	8007574 <HAL_UART_Receive_DMA>
}
 800497c:	bd10      	pop	{r4, pc}
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	20000264 	.word	0x20000264
 8004984:	20000360 	.word	0x20000360

08004988 <Error_Handler>:
 8004988:	b672      	cpsid	i
	while(1){
 800498a:	e7fe      	b.n	800498a <Error_Handler+0x2>

0800498c <ssd1306_WriteCommand>:
void ssd1306_Reset(void){
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte){
 800498c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800498e:	2217      	movs	r2, #23
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x00,1,&byte,1,HAL_MAX_DELAY);
 8004990:	2301      	movs	r3, #1
void ssd1306_WriteCommand(uint8_t byte){
 8004992:	446a      	add	r2, sp
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x00,1,&byte,1,HAL_MAX_DELAY);
 8004994:	425b      	negs	r3, r3
void ssd1306_WriteCommand(uint8_t byte){
 8004996:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x00,1,&byte,1,HAL_MAX_DELAY);
 8004998:	9302      	str	r3, [sp, #8]
 800499a:	3302      	adds	r3, #2
 800499c:	9200      	str	r2, [sp, #0]
 800499e:	2178      	movs	r1, #120	@ 0x78
 80049a0:	2200      	movs	r2, #0
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	4802      	ldr	r0, [pc, #8]	@ (80049b0 <ssd1306_WriteCommand+0x24>)
 80049a6:	f000 ff35 	bl	8005814 <HAL_I2C_Mem_Write>
}
 80049aa:	b007      	add	sp, #28
 80049ac:	bd00      	pop	{pc}
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	20000494 	.word	0x20000494

080049b4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer,size_t buff_size){
 80049b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x40,1,buffer,buff_size,HAL_MAX_DELAY);
 80049b6:	2301      	movs	r3, #1
 80049b8:	4c06      	ldr	r4, [pc, #24]	@ (80049d4 <ssd1306_WriteData+0x20>)
 80049ba:	425b      	negs	r3, r3
 80049bc:	b289      	uxth	r1, r1
 80049be:	9302      	str	r3, [sp, #8]
 80049c0:	9101      	str	r1, [sp, #4]
 80049c2:	9000      	str	r0, [sp, #0]
 80049c4:	2240      	movs	r2, #64	@ 0x40
 80049c6:	2178      	movs	r1, #120	@ 0x78
 80049c8:	0020      	movs	r0, r4
 80049ca:	3302      	adds	r3, #2
 80049cc:	f000 ff22 	bl	8005814 <HAL_I2C_Mem_Write>
}
 80049d0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	20000494 	.word	0x20000494

080049d8 <ssd1306_Fill>:
	SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color){
	memset(SSD1306_Buffer,(color == Black) ? 0x00:0xFF,sizeof(SSD1306_Buffer));
 80049d8:	1e43      	subs	r3, r0, #1
 80049da:	4198      	sbcs	r0, r3
 80049dc:	2280      	movs	r2, #128	@ 0x80
void ssd1306_Fill(SSD1306_COLOR color){
 80049de:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer,(color == Black) ? 0x00:0xFF,sizeof(SSD1306_Buffer));
 80049e0:	4241      	negs	r1, r0
 80049e2:	b2c9      	uxtb	r1, r1
 80049e4:	4802      	ldr	r0, [pc, #8]	@ (80049f0 <ssd1306_Fill+0x18>)
 80049e6:	00d2      	lsls	r2, r2, #3
 80049e8:	f003 fbba 	bl	8008160 <memset>
}
 80049ec:	bd10      	pop	{r4, pc}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	200004ee 	.word	0x200004ee

080049f4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void){
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	24b0      	movs	r4, #176	@ 0xb0
 80049f8:	4d09      	ldr	r5, [pc, #36]	@ (8004a20 <ssd1306_UpdateScreen+0x2c>)
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for(uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++){
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80049fa:	0020      	movs	r0, r4
 80049fc:	f7ff ffc6 	bl	800498c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f7ff ffc3 	bl	800498c <ssd1306_WriteCommand>
	for(uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++){
 8004a06:	3401      	adds	r4, #1
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004a08:	2010      	movs	r0, #16
 8004a0a:	f7ff ffbf 	bl	800498c <ssd1306_WriteCommand>
	for(uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++){
 8004a0e:	b2e4      	uxtb	r4, r4
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH);
 8004a10:	0028      	movs	r0, r5
 8004a12:	2180      	movs	r1, #128	@ 0x80
 8004a14:	f7ff ffce 	bl	80049b4 <ssd1306_WriteData>
	for(uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++){
 8004a18:	3580      	adds	r5, #128	@ 0x80
 8004a1a:	2cb8      	cmp	r4, #184	@ 0xb8
 8004a1c:	d1ed      	bne.n	80049fa <ssd1306_UpdateScreen+0x6>
	}
}
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	200004ee 	.word	0x200004ee

08004a24 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x,uint8_t y,SSD1306_COLOR color){
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8004a24:	b243      	sxtb	r3, r0
void ssd1306_DrawPixel(uint8_t x,uint8_t y,SSD1306_COLOR color){
 8004a26:	b530      	push	{r4, r5, lr}
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	db0e      	blt.n	8004a4a <ssd1306_DrawPixel+0x26>
 8004a2c:	293f      	cmp	r1, #63	@ 0x3f
 8004a2e:	d80c      	bhi.n	8004a4a <ssd1306_DrawPixel+0x26>
		return;
	}

	// Draw in the right color
	if(color == White){
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004a30:	2407      	movs	r4, #7
 8004a32:	08cb      	lsrs	r3, r1, #3
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	4d06      	ldr	r5, [pc, #24]	@ (8004a50 <ssd1306_DrawPixel+0x2c>)
 8004a38:	4021      	ands	r1, r4
 8004a3a:	1818      	adds	r0, r3, r0
 8004a3c:	3c06      	subs	r4, #6
 8004a3e:	408c      	lsls	r4, r1
 8004a40:	5c2b      	ldrb	r3, [r5, r0]
	if(color == White){
 8004a42:	2a01      	cmp	r2, #1
 8004a44:	d102      	bne.n	8004a4c <ssd1306_DrawPixel+0x28>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004a46:	4323      	orrs	r3, r4
	}
	else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004a48:	542b      	strb	r3, [r5, r0]
	}
}
 8004a4a:	bd30      	pop	{r4, r5, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004a4c:	43a3      	bics	r3, r4
 8004a4e:	e7fb      	b.n	8004a48 <ssd1306_DrawPixel+0x24>
 8004a50:	200004ee 	.word	0x200004ee

08004a54 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch,SSD1306_Font_t Font,SSD1306_COLOR color){
 8004a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a56:	0004      	movs	r4, r0
 8004a58:	b08b      	sub	sp, #44	@ 0x2c
 8004a5a:	9208      	str	r2, [sp, #32]
	uint32_t i, b, j;

	// Check if character is valid
	if(ch < 32 || ch > 126)
 8004a5c:	0022      	movs	r2, r4
char ssd1306_WriteChar(char ch,SSD1306_Font_t Font,SSD1306_COLOR color){
 8004a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a60:	ab10      	add	r3, sp, #64	@ 0x40
 8004a62:	781b      	ldrb	r3, [r3, #0]
	if(ch < 32 || ch > 126)
 8004a64:	3a20      	subs	r2, #32
char ssd1306_WriteChar(char ch,SSD1306_Font_t Font,SSD1306_COLOR color){
 8004a66:	9305      	str	r3, [sp, #20]
	if(ch < 32 || ch > 126)
 8004a68:	b2d3      	uxtb	r3, r2
char ssd1306_WriteChar(char ch,SSD1306_Font_t Font,SSD1306_COLOR color){
 8004a6a:	a807      	add	r0, sp, #28
 8004a6c:	9107      	str	r1, [sp, #28]
	if(ch < 32 || ch > 126)
 8004a6e:	2b5e      	cmp	r3, #94	@ 0x5e
 8004a70:	d844      	bhi.n	8004afc <ssd1306_WriteChar+0xa8>
 8004a72:	6883      	ldr	r3, [r0, #8]
		return 0;

	// Char width is not equal to font width for proportional font
	const uint8_t char_width = Font.char_width ? Font.char_width[ch - 32]:Font.width;
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01d      	beq.n	8004ab4 <ssd1306_WriteChar+0x60>
 8004a78:	191b      	adds	r3, r3, r4
 8004a7a:	3b20      	subs	r3, #32
 8004a7c:	781d      	ldrb	r5, [r3, #0]
	// Check remaining space on current line
	if(SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004a7e:	4b20      	ldr	r3, [pc, #128]	@ (8004b00 <ssd1306_WriteChar+0xac>)
 8004a80:	8819      	ldrh	r1, [r3, #0]
 8004a82:	9101      	str	r1, [sp, #4]
 8004a84:	1949      	adds	r1, r1, r5
 8004a86:	2980      	cmp	r1, #128	@ 0x80
 8004a88:	dc38      	bgt.n	8004afc <ssd1306_WriteChar+0xa8>
 8004a8a:	7841      	ldrb	r1, [r0, #1]
 8004a8c:	9103      	str	r1, [sp, #12]
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)){
 8004a8e:	885b      	ldrh	r3, [r3, #2]
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	185b      	adds	r3, r3, r1
	if(SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004a94:	2b40      	cmp	r3, #64	@ 0x40
 8004a96:	dc31      	bgt.n	8004afc <ssd1306_WriteChar+0xa8>
		// Not enough space on current line
		return 0;
	}

	// Use the font to write
	for(i = 0; i < Font.height; i++){
 8004a98:	2700      	movs	r7, #0
 8004a9a:	434a      	muls	r2, r1
 8004a9c:	0053      	lsls	r3, r2, #1
 8004a9e:	9302      	str	r3, [sp, #8]
 8004aa0:	9b03      	ldr	r3, [sp, #12]
 8004aa2:	42bb      	cmp	r3, r7
 8004aa4:	d808      	bhi.n	8004ab8 <ssd1306_WriteChar+0x64>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += char_width;
 8004aa6:	9a01      	ldr	r2, [sp, #4]
 8004aa8:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <ssd1306_WriteChar+0xac>)
 8004aaa:	18ad      	adds	r5, r5, r2
 8004aac:	801d      	strh	r5, [r3, #0]

	// Return written char for validation
	return ch;
}
 8004aae:	0020      	movs	r0, r4
 8004ab0:	b00b      	add	sp, #44	@ 0x2c
 8004ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const uint8_t char_width = Font.char_width ? Font.char_width[ch - 32]:Font.width;
 8004ab4:	7805      	ldrb	r5, [r0, #0]
 8004ab6:	e7e2      	b.n	8004a7e <ssd1306_WriteChar+0x2a>
		for(j = 0; j < char_width; j++){
 8004ab8:	2600      	movs	r6, #0
		b = Font.data[(ch - 32) * Font.height + i];
 8004aba:	9b08      	ldr	r3, [sp, #32]
 8004abc:	9a02      	ldr	r2, [sp, #8]
 8004abe:	5a9b      	ldrh	r3, [r3, r2]
 8004ac0:	9306      	str	r3, [sp, #24]
		for(j = 0; j < char_width; j++){
 8004ac2:	42b5      	cmp	r5, r6
 8004ac4:	d804      	bhi.n	8004ad0 <ssd1306_WriteChar+0x7c>
	for(i = 0; i < Font.height; i++){
 8004ac6:	9b02      	ldr	r3, [sp, #8]
 8004ac8:	3701      	adds	r7, #1
 8004aca:	3302      	adds	r3, #2
 8004acc:	9302      	str	r3, [sp, #8]
 8004ace:	e7e7      	b.n	8004aa0 <ssd1306_WriteChar+0x4c>
				ssd1306_DrawPixel(SSD1306.CurrentX + j,(SSD1306.CurrentY + i),(SSD1306_COLOR)color);
 8004ad0:	9b01      	ldr	r3, [sp, #4]
			if((b << j) & 0x8000){
 8004ad2:	2280      	movs	r2, #128	@ 0x80
				ssd1306_DrawPixel(SSD1306.CurrentX + j,(SSD1306.CurrentY + i),(SSD1306_COLOR)color);
 8004ad4:	18f0      	adds	r0, r6, r3
 8004ad6:	9b04      	ldr	r3, [sp, #16]
			if((b << j) & 0x8000){
 8004ad8:	0212      	lsls	r2, r2, #8
				ssd1306_DrawPixel(SSD1306.CurrentX + j,(SSD1306.CurrentY + i),(SSD1306_COLOR)color);
 8004ada:	18f9      	adds	r1, r7, r3
			if((b << j) & 0x8000){
 8004adc:	9b06      	ldr	r3, [sp, #24]
				ssd1306_DrawPixel(SSD1306.CurrentX + j,(SSD1306.CurrentY + i),(SSD1306_COLOR)color);
 8004ade:	b2c0      	uxtb	r0, r0
			if((b << j) & 0x8000){
 8004ae0:	40b3      	lsls	r3, r6
				ssd1306_DrawPixel(SSD1306.CurrentX + j,(SSD1306.CurrentY + i),(SSD1306_COLOR)color);
 8004ae2:	b2c9      	uxtb	r1, r1
			if((b << j) & 0x8000){
 8004ae4:	4213      	tst	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <ssd1306_WriteChar+0x9e>
				ssd1306_DrawPixel(SSD1306.CurrentX + j,(SSD1306.CurrentY + i),(SSD1306_COLOR)color);
 8004ae8:	9a05      	ldr	r2, [sp, #20]
				ssd1306_DrawPixel(SSD1306.CurrentX + j,(SSD1306.CurrentY + i),(SSD1306_COLOR)!color);
 8004aea:	f7ff ff9b 	bl	8004a24 <ssd1306_DrawPixel>
		for(j = 0; j < char_width; j++){
 8004aee:	3601      	adds	r6, #1
 8004af0:	e7e7      	b.n	8004ac2 <ssd1306_WriteChar+0x6e>
				ssd1306_DrawPixel(SSD1306.CurrentX + j,(SSD1306.CurrentY + i),(SSD1306_COLOR)!color);
 8004af2:	9b05      	ldr	r3, [sp, #20]
 8004af4:	425a      	negs	r2, r3
 8004af6:	415a      	adcs	r2, r3
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	e7f6      	b.n	8004aea <ssd1306_WriteChar+0x96>
		return 0;
 8004afc:	2400      	movs	r4, #0
 8004afe:	e7d6      	b.n	8004aae <ssd1306_WriteChar+0x5a>
 8004b00:	200004e8 	.word	0x200004e8

08004b04 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str,SSD1306_Font_t Font,SSD1306_COLOR color){
 8004b04:	b530      	push	{r4, r5, lr}
 8004b06:	0004      	movs	r4, r0
 8004b08:	b087      	sub	sp, #28
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b0e:	781d      	ldrb	r5, [r3, #0]
 8004b10:	9103      	str	r1, [sp, #12]
 8004b12:	9204      	str	r2, [sp, #16]
	while(*str){
 8004b14:	7820      	ldrb	r0, [r4, #0]
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d101      	bne.n	8004b1e <ssd1306_WriteString+0x1a>
		str++;
	}

	// Everything ok
	return *str;
}
 8004b1a:	b007      	add	sp, #28
 8004b1c:	bd30      	pop	{r4, r5, pc}
		if(ssd1306_WriteChar(*str,Font,color) != *str){
 8004b1e:	9b05      	ldr	r3, [sp, #20]
 8004b20:	9903      	ldr	r1, [sp, #12]
 8004b22:	9a04      	ldr	r2, [sp, #16]
 8004b24:	9500      	str	r5, [sp, #0]
 8004b26:	f7ff ff95 	bl	8004a54 <ssd1306_WriteChar>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	7820      	ldrb	r0, [r4, #0]
 8004b2e:	4283      	cmp	r3, r0
 8004b30:	d1f3      	bne.n	8004b1a <ssd1306_WriteString+0x16>
		str++;
 8004b32:	3401      	adds	r4, #1
 8004b34:	e7ee      	b.n	8004b14 <ssd1306_WriteString+0x10>
	...

08004b38 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x,uint8_t y){
	SSD1306.CurrentX = x;
 8004b38:	4b01      	ldr	r3, [pc, #4]	@ (8004b40 <ssd1306_SetCursor+0x8>)
 8004b3a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8004b3c:	8059      	strh	r1, [r3, #2]
}
 8004b3e:	4770      	bx	lr
 8004b40:	200004e8 	.word	0x200004e8

08004b44 <ssd1306_FillRectangle>:

	return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2,SSD1306_COLOR color){
 8004b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b46:	ac08      	add	r4, sp, #32
 8004b48:	7824      	ldrb	r4, [r4, #0]
 8004b4a:	9401      	str	r4, [sp, #4]
	uint8_t x_start = ((x1 <= x2) ? x1:x2);
 8004b4c:	1c04      	adds	r4, r0, #0
 8004b4e:	4290      	cmp	r0, r2
 8004b50:	d900      	bls.n	8004b54 <ssd1306_FillRectangle+0x10>
 8004b52:	1c14      	adds	r4, r2, #0
 8004b54:	b2e4      	uxtb	r4, r4
 8004b56:	9400      	str	r4, [sp, #0]
	uint8_t x_end = ((x1 <= x2) ? x2:x1);
 8004b58:	1c06      	adds	r6, r0, #0
 8004b5a:	4290      	cmp	r0, r2
 8004b5c:	d200      	bcs.n	8004b60 <ssd1306_FillRectangle+0x1c>
 8004b5e:	1c16      	adds	r6, r2, #0
 8004b60:	b2f6      	uxtb	r6, r6
	uint8_t y_start = ((y1 <= y2) ? y1:y2);
 8004b62:	1c0c      	adds	r4, r1, #0
 8004b64:	4299      	cmp	r1, r3
 8004b66:	d900      	bls.n	8004b6a <ssd1306_FillRectangle+0x26>
 8004b68:	1c1c      	adds	r4, r3, #0
 8004b6a:	b2e4      	uxtb	r4, r4
	uint8_t y_end = ((y1 <= y2) ? y2:y1);
 8004b6c:	1c0f      	adds	r7, r1, #0
 8004b6e:	4299      	cmp	r1, r3
 8004b70:	d200      	bcs.n	8004b74 <ssd1306_FillRectangle+0x30>
 8004b72:	1c1f      	adds	r7, r3, #0
 8004b74:	b2ff      	uxtb	r7, r7

	for(uint8_t y = y_start; (y <= y_end) && (y < SSD1306_HEIGHT); y++){
 8004b76:	42bc      	cmp	r4, r7
 8004b78:	d801      	bhi.n	8004b7e <ssd1306_FillRectangle+0x3a>
 8004b7a:	2c3f      	cmp	r4, #63	@ 0x3f
 8004b7c:	d900      	bls.n	8004b80 <ssd1306_FillRectangle+0x3c>
		for(uint8_t x = x_start; (x <= x_end) && (x < SSD1306_WIDTH); x++){
			ssd1306_DrawPixel(x,y,color);
		}
	}
	return;
}
 8004b7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		for(uint8_t x = x_start; (x <= x_end) && (x < SSD1306_WIDTH); x++){
 8004b80:	9d00      	ldr	r5, [sp, #0]
 8004b82:	e009      	b.n	8004b98 <ssd1306_FillRectangle+0x54>
 8004b84:	b26b      	sxtb	r3, r5
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	db08      	blt.n	8004b9c <ssd1306_FillRectangle+0x58>
			ssd1306_DrawPixel(x,y,color);
 8004b8a:	0028      	movs	r0, r5
 8004b8c:	0021      	movs	r1, r4
 8004b8e:	9a01      	ldr	r2, [sp, #4]
 8004b90:	f7ff ff48 	bl	8004a24 <ssd1306_DrawPixel>
		for(uint8_t x = x_start; (x <= x_end) && (x < SSD1306_WIDTH); x++){
 8004b94:	3501      	adds	r5, #1
 8004b96:	b2ed      	uxtb	r5, r5
 8004b98:	42b5      	cmp	r5, r6
 8004b9a:	d9f3      	bls.n	8004b84 <ssd1306_FillRectangle+0x40>
	for(uint8_t y = y_start; (y <= y_end) && (y < SSD1306_HEIGHT); y++){
 8004b9c:	3401      	adds	r4, #1
 8004b9e:	b2e4      	uxtb	r4, r4
 8004ba0:	e7e9      	b.n	8004b76 <ssd1306_FillRectangle+0x32>

08004ba2 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value){
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	0004      	movs	r4, r0
	const uint8_t kSetContrastControlRegister = 0x81;
	ssd1306_WriteCommand(kSetContrastControlRegister);
 8004ba6:	2081      	movs	r0, #129	@ 0x81
 8004ba8:	f7ff fef0 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 8004bac:	0020      	movs	r0, r4
 8004bae:	f7ff feed 	bl	800498c <ssd1306_WriteCommand>
}
 8004bb2:	bd10      	pop	{r4, pc}

08004bb4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on){
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	b510      	push	{r4, lr}
	if(on){
		value = 0xAF;   // Display on
		SSD1306.DisplayOn = 1;
	}
	else{
		value = 0xAE;   // Display off
 8004bb8:	20ae      	movs	r0, #174	@ 0xae
	if(on){
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <ssd1306_SetDisplayOn+0xe>
		SSD1306.DisplayOn = 1;
 8004bbe:	2301      	movs	r3, #1
		value = 0xAF;   // Display on
 8004bc0:	18c0      	adds	r0, r0, r3
 8004bc2:	4a02      	ldr	r2, [pc, #8]	@ (8004bcc <ssd1306_SetDisplayOn+0x18>)
		SSD1306.DisplayOn = 0;
	}
	ssd1306_WriteCommand(value);
}
 8004bc4:	7153      	strb	r3, [r2, #5]
	ssd1306_WriteCommand(value);
 8004bc6:	f7ff fee1 	bl	800498c <ssd1306_WriteCommand>
}
 8004bca:	bd10      	pop	{r4, pc}
 8004bcc:	200004e8 	.word	0x200004e8

08004bd0 <ssd1306_Init>:
void ssd1306_Init(void){
 8004bd0:	b510      	push	{r4, lr}
	HAL_Delay(100);
 8004bd2:	2064      	movs	r0, #100	@ 0x64
 8004bd4:	f000 fa66 	bl	80050a4 <HAL_Delay>
	ssd1306_SetDisplayOn(0); //display off
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f7ff ffeb 	bl	8004bb4 <ssd1306_SetDisplayOn>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004bde:	2020      	movs	r0, #32
 8004be0:	f7ff fed4 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7ff fed1 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004bea:	20b0      	movs	r0, #176	@ 0xb0
 8004bec:	f7ff fece 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004bf0:	20c8      	movs	r0, #200	@ 0xc8
 8004bf2:	f7ff fecb 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f7ff fec8 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8004bfc:	2010      	movs	r0, #16
 8004bfe:	f7ff fec5 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004c02:	2040      	movs	r0, #64	@ 0x40
 8004c04:	f7ff fec2 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_SetContrast(0xFF);
 8004c08:	20ff      	movs	r0, #255	@ 0xff
 8004c0a:	f7ff ffca 	bl	8004ba2 <ssd1306_SetContrast>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004c0e:	20a1      	movs	r0, #161	@ 0xa1
 8004c10:	f7ff febc 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal color
 8004c14:	20a6      	movs	r0, #166	@ 0xa6
 8004c16:	f7ff feb9 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004c1a:	20a8      	movs	r0, #168	@ 0xa8
 8004c1c:	f7ff feb6 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8004c20:	203f      	movs	r0, #63	@ 0x3f
 8004c22:	f7ff feb3 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004c26:	20a4      	movs	r0, #164	@ 0xa4
 8004c28:	f7ff feb0 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004c2c:	20d3      	movs	r0, #211	@ 0xd3
 8004c2e:	f7ff fead 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8004c32:	2000      	movs	r0, #0
 8004c34:	f7ff feaa 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004c38:	20d5      	movs	r0, #213	@ 0xd5
 8004c3a:	f7ff fea7 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004c3e:	20f0      	movs	r0, #240	@ 0xf0
 8004c40:	f7ff fea4 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004c44:	20d9      	movs	r0, #217	@ 0xd9
 8004c46:	f7ff fea1 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8004c4a:	2022      	movs	r0, #34	@ 0x22
 8004c4c:	f7ff fe9e 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004c50:	20da      	movs	r0, #218	@ 0xda
 8004c52:	f7ff fe9b 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8004c56:	2012      	movs	r0, #18
 8004c58:	f7ff fe98 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8004c5c:	20db      	movs	r0, #219	@ 0xdb
 8004c5e:	f7ff fe95 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004c62:	2020      	movs	r0, #32
 8004c64:	f7ff fe92 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004c68:	208d      	movs	r0, #141	@ 0x8d
 8004c6a:	f7ff fe8f 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8004c6e:	2014      	movs	r0, #20
 8004c70:	f7ff fe8c 	bl	800498c <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004c74:	2001      	movs	r0, #1
 8004c76:	f7ff ff9d 	bl	8004bb4 <ssd1306_SetDisplayOn>
	ssd1306_Fill(Black);
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f7ff feac 	bl	80049d8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8004c80:	f7ff feb8 	bl	80049f4 <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8004c84:	2200      	movs	r2, #0
 8004c86:	4b03      	ldr	r3, [pc, #12]	@ (8004c94 <ssd1306_Init+0xc4>)
 8004c88:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004c8a:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8004c8c:	3201      	adds	r2, #1
 8004c8e:	711a      	strb	r2, [r3, #4]
}
 8004c90:	bd10      	pop	{r4, pc}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	200004e8 	.word	0x200004e8

08004c98 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <HAL_MspInit+0x2c>)
{
 8004c9c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	619a      	str	r2, [r3, #24]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ca8:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004caa:	9200      	str	r2, [sp, #0]
 8004cac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	0549      	lsls	r1, r1, #21
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	61da      	str	r2, [r3, #28]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	400b      	ands	r3, r1
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cbe:	b002      	add	sp, #8
 8004cc0:	4770      	bx	lr
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	40021000 	.word	0x40021000

08004cc8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	0004      	movs	r4, r0
 8004ccc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cce:	2214      	movs	r2, #20
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	a803      	add	r0, sp, #12
 8004cd4:	f003 fa44 	bl	8008160 <memset>
  if(hi2c->Instance==I2C2)
 8004cd8:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <HAL_I2C_MspInit+0x5c>)
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d11f      	bne.n	8004d20 <HAL_I2C_MspInit+0x58>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ce0:	2280      	movs	r2, #128	@ 0x80
 8004ce2:	4c11      	ldr	r4, [pc, #68]	@ (8004d28 <HAL_I2C_MspInit+0x60>)
 8004ce4:	02d2      	lsls	r2, r2, #11
 8004ce6:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ce8:	4810      	ldr	r0, [pc, #64]	@ (8004d2c <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cea:	4313      	orrs	r3, r2
 8004cec:	6163      	str	r3, [r4, #20]
 8004cee:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004cf8:	23c0      	movs	r3, #192	@ 0xc0
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cfe:	2312      	movs	r3, #18
 8004d00:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d02:	3b0f      	subs	r3, #15
 8004d04:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8004d06:	3b02      	subs	r3, #2
 8004d08:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0a:	f000 fb23 	bl	8005354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004d0e:	2280      	movs	r2, #128	@ 0x80
 8004d10:	69e3      	ldr	r3, [r4, #28]
 8004d12:	03d2      	lsls	r2, r2, #15
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61e3      	str	r3, [r4, #28]
 8004d18:	69e3      	ldr	r3, [r4, #28]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	9302      	str	r3, [sp, #8]
 8004d1e:	9b02      	ldr	r3, [sp, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8004d20:	b008      	add	sp, #32
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	40005800 	.word	0x40005800
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	48000400 	.word	0x48000400

08004d30 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d30:	b510      	push	{r4, lr}
 8004d32:	0004      	movs	r4, r0
 8004d34:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d36:	2214      	movs	r2, #20
 8004d38:	2100      	movs	r1, #0
 8004d3a:	a803      	add	r0, sp, #12
 8004d3c:	f003 fa10 	bl	8008160 <memset>
  if(hspi->Instance==SPI1)
 8004d40:	4b11      	ldr	r3, [pc, #68]	@ (8004d88 <HAL_SPI_MspInit+0x58>)
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d11d      	bne.n	8004d84 <HAL_SPI_MspInit+0x54>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d48:	2180      	movs	r1, #128	@ 0x80
 8004d4a:	4b10      	ldr	r3, [pc, #64]	@ (8004d8c <HAL_SPI_MspInit+0x5c>)
 8004d4c:	0149      	lsls	r1, r1, #5
 8004d4e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d50:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d52:	430a      	orrs	r2, r1
 8004d54:	619a      	str	r2, [r3, #24]
 8004d56:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d58:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d5a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d5c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d5e:	9201      	str	r2, [sp, #4]
 8004d60:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d62:	695a      	ldr	r2, [r3, #20]
 8004d64:	0289      	lsls	r1, r1, #10
 8004d66:	430a      	orrs	r2, r1
 8004d68:	615a      	str	r2, [r3, #20]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	400b      	ands	r3, r1
 8004d6e:	9302      	str	r3, [sp, #8]
 8004d70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004d72:	2360      	movs	r3, #96	@ 0x60
 8004d74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d76:	3b5e      	subs	r3, #94	@ 0x5e
 8004d78:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d80:	f000 fae8 	bl	8005354 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004d84:	b008      	add	sp, #32
 8004d86:	bd10      	pop	{r4, pc}
 8004d88:	40013000 	.word	0x40013000
 8004d8c:	40021000 	.word	0x40021000

08004d90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d90:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8004d92:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <HAL_TIM_Base_MspInit+0x30>)
 8004d94:	6802      	ldr	r2, [r0, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d111      	bne.n	8004dbe <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d9a:	2180      	movs	r1, #128	@ 0x80
 8004d9c:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <HAL_TIM_Base_MspInit+0x34>)
 8004d9e:	0109      	lsls	r1, r1, #4
 8004da0:	699a      	ldr	r2, [r3, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 8004da2:	200d      	movs	r0, #13
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004da4:	430a      	orrs	r2, r1
 8004da6:	619a      	str	r2, [r3, #24]
 8004da8:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 8004daa:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004dac:	400b      	ands	r3, r1
 8004dae:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 8004db0:	2102      	movs	r1, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004db2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 8004db4:	f000 f988 	bl	80050c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004db8:	200d      	movs	r0, #13
 8004dba:	f000 f9af 	bl	800511c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004dbe:	bd07      	pop	{r0, r1, r2, pc}
 8004dc0:	40012c00 	.word	0x40012c00
 8004dc4:	40021000 	.word	0x40021000

08004dc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dc8:	b530      	push	{r4, r5, lr}
 8004dca:	0005      	movs	r5, r0
 8004dcc:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dce:	2214      	movs	r2, #20
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	a803      	add	r0, sp, #12
 8004dd4:	f003 f9c4 	bl	8008160 <memset>
  if(huart->Instance==USART1)
 8004dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8004e8c <HAL_UART_MspInit+0xc4>)
 8004dda:	682a      	ldr	r2, [r5, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d153      	bne.n	8004e88 <HAL_UART_MspInit+0xc0>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004de0:	2180      	movs	r1, #128	@ 0x80
 8004de2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e90 <HAL_UART_MspInit+0xc8>)
 8004de4:	01c9      	lsls	r1, r1, #7
 8004de6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de8:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8004dea:	430a      	orrs	r2, r1
 8004dec:	619a      	str	r2, [r3, #24]
 8004dee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 8004df2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df4:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8004df6:	9201      	str	r2, [sp, #4]
 8004df8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	0289      	lsls	r1, r1, #10
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	615a      	str	r2, [r3, #20]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	400b      	ands	r3, r1
 8004e06:	9302      	str	r3, [sp, #8]
 8004e08:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e0a:	23c0      	movs	r3, #192	@ 0xc0
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e10:	2302      	movs	r3, #2
 8004e12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e14:	3301      	adds	r3, #1
 8004e16:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e18:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004e1a:	3b02      	subs	r3, #2
 8004e1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1e:	f000 fa99 	bl	8005354 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004e22:	4c1c      	ldr	r4, [pc, #112]	@ (8004e94 <HAL_UART_MspInit+0xcc>)
 8004e24:	4b1c      	ldr	r3, [pc, #112]	@ (8004e98 <HAL_UART_MspInit+0xd0>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e26:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004e28:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e2a:	2310      	movs	r3, #16
 8004e2c:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e2e:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004e30:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e32:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e34:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e36:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e38:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004e3a:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e3c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004e3e:	f000 f993 	bl	8005168 <HAL_DMA_Init>
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 8004e46:	f7ff fd9f 	bl	8004988 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8004e4a:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <HAL_UART_MspInit+0xd4>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004e4c:	672c      	str	r4, [r5, #112]	@ 0x70
 8004e4e:	6265      	str	r5, [r4, #36]	@ 0x24
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8004e50:	4c13      	ldr	r4, [pc, #76]	@ (8004ea0 <HAL_UART_MspInit+0xd8>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e52:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8004e54:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e56:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004e58:	0020      	movs	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e5a:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e5c:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e5e:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e60:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e62:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004e64:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e66:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004e68:	f000 f97e 	bl	8005168 <HAL_DMA_Init>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8004e70:	f7ff fd8a 	bl	8004988 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004e74:	2200      	movs	r2, #0
 8004e76:	201b      	movs	r0, #27
 8004e78:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004e7a:	676c      	str	r4, [r5, #116]	@ 0x74
 8004e7c:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004e7e:	f000 f923 	bl	80050c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e82:	201b      	movs	r0, #27
 8004e84:	f000 f94a 	bl	800511c <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004e88:	b009      	add	sp, #36	@ 0x24
 8004e8a:	bd30      	pop	{r4, r5, pc}
 8004e8c:	40013800 	.word	0x40013800
 8004e90:	40021000 	.word	0x40021000
 8004e94:	2000031c 	.word	0x2000031c
 8004e98:	4002001c 	.word	0x4002001c
 8004e9c:	40020030 	.word	0x40020030
 8004ea0:	200002d8 	.word	0x200002d8

08004ea4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ea4:	e7fe      	b.n	8004ea4 <NMI_Handler>

08004ea6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ea6:	e7fe      	b.n	8004ea6 <HardFault_Handler>

08004ea8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004ea8:	4770      	bx	lr

08004eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8004eaa:	4770      	bx	lr

08004eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004eac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004eae:	f000 f8e7 	bl	8005080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004eb2:	bd10      	pop	{r4, pc}

08004eb4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004eb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f000 fb10 	bl	80054dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004ebc:	bd10      	pop	{r4, pc}

08004ebe <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004ebe:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004ec0:	2004      	movs	r0, #4
 8004ec2:	f000 fb0b 	bl	80054dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004ec6:	bd10      	pop	{r4, pc}

08004ec8 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004ec8:	2080      	movs	r0, #128	@ 0x80
{
 8004eca:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004ecc:	0040      	lsls	r0, r0, #1
 8004ece:	f000 fb05 	bl	80054dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004ed2:	2080      	movs	r0, #128	@ 0x80
 8004ed4:	0080      	lsls	r0, r0, #2
 8004ed6:	f000 fb01 	bl	80054dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004eda:	bd10      	pop	{r4, pc}

08004edc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004edc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004ede:	4803      	ldr	r0, [pc, #12]	@ (8004eec <DMA1_Channel2_3_IRQHandler+0x10>)
 8004ee0:	f000 f9ef 	bl	80052c2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004ee4:	4802      	ldr	r0, [pc, #8]	@ (8004ef0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8004ee6:	f000 f9ec 	bl	80052c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004eea:	bd10      	pop	{r4, pc}
 8004eec:	2000031c 	.word	0x2000031c
 8004ef0:	200002d8 	.word	0x200002d8

08004ef4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8004ef4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ef6:	4802      	ldr	r0, [pc, #8]	@ (8004f00 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8004ef8:	f001 fc8e 	bl	8006818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8004efc:	bd10      	pop	{r4, pc}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	200003e8 	.word	0x200003e8

08004f04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f06:	4802      	ldr	r0, [pc, #8]	@ (8004f10 <USART1_IRQHandler+0xc>)
 8004f08:	f001 ff52 	bl	8006db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	20000360 	.word	0x20000360

08004f14 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004f14:	2001      	movs	r0, #1
 8004f16:	4770      	bx	lr

08004f18 <_kill>:

int _kill(int pid, int sig)
{
 8004f18:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f1a:	f003 f97b 	bl	8008214 <__errno>
 8004f1e:	2316      	movs	r3, #22
 8004f20:	6003      	str	r3, [r0, #0]
  return -1;
 8004f22:	2001      	movs	r0, #1
}
 8004f24:	4240      	negs	r0, r0
 8004f26:	bd10      	pop	{r4, pc}

08004f28 <_exit>:

void _exit (int status)
{
 8004f28:	b510      	push	{r4, lr}
  errno = EINVAL;
 8004f2a:	f003 f973 	bl	8008214 <__errno>
 8004f2e:	2316      	movs	r3, #22
 8004f30:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004f32:	e7fe      	b.n	8004f32 <_exit+0xa>

08004f34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	000e      	movs	r6, r1
 8004f38:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f3a:	2500      	movs	r5, #0
 8004f3c:	42a5      	cmp	r5, r4
 8004f3e:	db01      	blt.n	8004f44 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8004f40:	0020      	movs	r0, r4
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8004f44:	e000      	b.n	8004f48 <_read+0x14>
 8004f46:	bf00      	nop
 8004f48:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f4a:	3501      	adds	r5, #1
 8004f4c:	e7f6      	b.n	8004f3c <_read+0x8>

08004f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f4e:	b570      	push	{r4, r5, r6, lr}
 8004f50:	000e      	movs	r6, r1
 8004f52:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f54:	2500      	movs	r5, #0
 8004f56:	42a5      	cmp	r5, r4
 8004f58:	db01      	blt.n	8004f5e <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8004f5a:	0020      	movs	r0, r4
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8004f5e:	5d70      	ldrb	r0, [r6, r5]
 8004f60:	e000      	b.n	8004f64 <_write+0x16>
 8004f62:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f64:	3501      	adds	r5, #1
 8004f66:	e7f6      	b.n	8004f56 <_write+0x8>

08004f68 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8004f68:	2001      	movs	r0, #1
}
 8004f6a:	4240      	negs	r0, r0
 8004f6c:	4770      	bx	lr

08004f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004f6e:	2380      	movs	r3, #128	@ 0x80
 8004f70:	019b      	lsls	r3, r3, #6
  return 0;
}
 8004f72:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8004f74:	604b      	str	r3, [r1, #4]
}
 8004f76:	4770      	bx	lr

08004f78 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004f78:	2001      	movs	r0, #1
 8004f7a:	4770      	bx	lr

08004f7c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	4770      	bx	lr

08004f80 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f80:	490b      	ldr	r1, [pc, #44]	@ (8004fb0 <_sbrk+0x30>)
 8004f82:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb4 <_sbrk+0x34>)
{
 8004f84:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f86:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f88:	490b      	ldr	r1, [pc, #44]	@ (8004fb8 <_sbrk+0x38>)
{
 8004f8a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8004f8c:	6808      	ldr	r0, [r1, #0]
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d101      	bne.n	8004f96 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8004f92:	480a      	ldr	r0, [pc, #40]	@ (8004fbc <_sbrk+0x3c>)
 8004f94:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f96:	6808      	ldr	r0, [r1, #0]
 8004f98:	18c3      	adds	r3, r0, r3
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d906      	bls.n	8004fac <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8004f9e:	f003 f939 	bl	8008214 <__errno>
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004faa:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004fac:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8004fae:	e7fc      	b.n	8004faa <_sbrk+0x2a>
 8004fb0:	00000400 	.word	0x00000400
 8004fb4:	20002000 	.word	0x20002000
 8004fb8:	200008f0 	.word	0x200008f0
 8004fbc:	20000a48 	.word	0x20000a48

08004fc0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004fc0:	4770      	bx	lr
	...

08004fc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004fc4:	480d      	ldr	r0, [pc, #52]	@ (8004ffc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004fc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004fc8:	f7ff fffa 	bl	8004fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fcc:	480c      	ldr	r0, [pc, #48]	@ (8005000 <LoopForever+0x6>)
  ldr r1, =_edata
 8004fce:	490d      	ldr	r1, [pc, #52]	@ (8005004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8005008 <LoopForever+0xe>)
  movs r3, #0
 8004fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fd4:	e002      	b.n	8004fdc <LoopCopyDataInit>

08004fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fda:	3304      	adds	r3, #4

08004fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fe0:	d3f9      	bcc.n	8004fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800500c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8005010 <LoopForever+0x16>)
  movs r3, #0
 8004fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fe8:	e001      	b.n	8004fee <LoopFillZerobss>

08004fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fec:	3204      	adds	r2, #4

08004fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ff0:	d3fb      	bcc.n	8004fea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004ff2:	f003 f915 	bl	8008220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ff6:	f7fe fc03 	bl	8003800 <main>

08004ffa <LoopForever>:

LoopForever:
    b LoopForever
 8004ffa:	e7fe      	b.n	8004ffa <LoopForever>
  ldr   r0, =_estack
 8004ffc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005004:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8005008:	0800d1e4 	.word	0x0800d1e4
  ldr r2, =_sbss
 800500c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8005010:	20000a44 	.word	0x20000a44

08005014 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005014:	e7fe      	b.n	8005014 <ADC1_IRQHandler>
	...

08005018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800501c:	20fa      	movs	r0, #250	@ 0xfa
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <HAL_InitTick+0x3c>)
 8005020:	0080      	lsls	r0, r0, #2
 8005022:	7819      	ldrb	r1, [r3, #0]
 8005024:	f7fb f896 	bl	8000154 <__udivsi3>
 8005028:	4c0b      	ldr	r4, [pc, #44]	@ (8005058 <HAL_InitTick+0x40>)
 800502a:	0001      	movs	r1, r0
 800502c:	6820      	ldr	r0, [r4, #0]
 800502e:	f7fb f891 	bl	8000154 <__udivsi3>
 8005032:	f000 f87f 	bl	8005134 <HAL_SYSTICK_Config>
 8005036:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8005038:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800503a:	2c00      	cmp	r4, #0
 800503c:	d109      	bne.n	8005052 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800503e:	2d03      	cmp	r5, #3
 8005040:	d807      	bhi.n	8005052 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005042:	3802      	subs	r0, #2
 8005044:	0022      	movs	r2, r4
 8005046:	0029      	movs	r1, r5
 8005048:	f000 f83e 	bl	80050c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800504c:	0020      	movs	r0, r4
 800504e:	4b03      	ldr	r3, [pc, #12]	@ (800505c <HAL_InitTick+0x44>)
 8005050:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	2000003c 	.word	0x2000003c
 8005058:	20000038 	.word	0x20000038
 800505c:	20000040 	.word	0x20000040

08005060 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005060:	2310      	movs	r3, #16
 8005062:	4a06      	ldr	r2, [pc, #24]	@ (800507c <HAL_Init+0x1c>)
{
 8005064:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005066:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8005068:	2001      	movs	r0, #1
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800506a:	430b      	orrs	r3, r1
 800506c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800506e:	f7ff ffd3 	bl	8005018 <HAL_InitTick>
  HAL_MspInit();
 8005072:	f7ff fe11 	bl	8004c98 <HAL_MspInit>
}
 8005076:	2000      	movs	r0, #0
 8005078:	bd10      	pop	{r4, pc}
 800507a:	46c0      	nop			@ (mov r8, r8)
 800507c:	40022000 	.word	0x40022000

08005080 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005080:	4a03      	ldr	r2, [pc, #12]	@ (8005090 <HAL_IncTick+0x10>)
 8005082:	4b04      	ldr	r3, [pc, #16]	@ (8005094 <HAL_IncTick+0x14>)
 8005084:	6811      	ldr	r1, [r2, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	185b      	adds	r3, r3, r1
 800508a:	6013      	str	r3, [r2, #0]
}
 800508c:	4770      	bx	lr
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	200008f4 	.word	0x200008f4
 8005094:	2000003c 	.word	0x2000003c

08005098 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005098:	4b01      	ldr	r3, [pc, #4]	@ (80050a0 <HAL_GetTick+0x8>)
 800509a:	6818      	ldr	r0, [r3, #0]
}
 800509c:	4770      	bx	lr
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	200008f4 	.word	0x200008f4

080050a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80050a8:	f7ff fff6 	bl	8005098 <HAL_GetTick>
 80050ac:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050ae:	1c63      	adds	r3, r4, #1
 80050b0:	d002      	beq.n	80050b8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80050b2:	4b04      	ldr	r3, [pc, #16]	@ (80050c4 <HAL_Delay+0x20>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80050b8:	f7ff ffee 	bl	8005098 <HAL_GetTick>
 80050bc:	1b40      	subs	r0, r0, r5
 80050be:	42a0      	cmp	r0, r4
 80050c0:	d3fa      	bcc.n	80050b8 <HAL_Delay+0x14>
  {
  }
}
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
 80050c4:	2000003c 	.word	0x2000003c

080050c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050c8:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050ca:	24ff      	movs	r4, #255	@ 0xff
 80050cc:	2203      	movs	r2, #3
 80050ce:	000b      	movs	r3, r1
 80050d0:	0021      	movs	r1, r4
 80050d2:	4002      	ands	r2, r0
 80050d4:	00d2      	lsls	r2, r2, #3
 80050d6:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050dc:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80050de:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80050e0:	2800      	cmp	r0, #0
 80050e2:	db0a      	blt.n	80050fa <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050e4:	24c0      	movs	r4, #192	@ 0xc0
 80050e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005114 <HAL_NVIC_SetPriority+0x4c>)
 80050e8:	0880      	lsrs	r0, r0, #2
 80050ea:	0080      	lsls	r0, r0, #2
 80050ec:	1880      	adds	r0, r0, r2
 80050ee:	00a4      	lsls	r4, r4, #2
 80050f0:	5902      	ldr	r2, [r0, r4]
 80050f2:	400a      	ands	r2, r1
 80050f4:	4313      	orrs	r3, r2
 80050f6:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80050f8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050fa:	220f      	movs	r2, #15
 80050fc:	4010      	ands	r0, r2
 80050fe:	3808      	subs	r0, #8
 8005100:	4a05      	ldr	r2, [pc, #20]	@ (8005118 <HAL_NVIC_SetPriority+0x50>)
 8005102:	0880      	lsrs	r0, r0, #2
 8005104:	0080      	lsls	r0, r0, #2
 8005106:	1880      	adds	r0, r0, r2
 8005108:	69c2      	ldr	r2, [r0, #28]
 800510a:	4011      	ands	r1, r2
 800510c:	4319      	orrs	r1, r3
 800510e:	61c1      	str	r1, [r0, #28]
 8005110:	e7f2      	b.n	80050f8 <HAL_NVIC_SetPriority+0x30>
 8005112:	46c0      	nop			@ (mov r8, r8)
 8005114:	e000e100 	.word	0xe000e100
 8005118:	e000ed00 	.word	0xe000ed00

0800511c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800511c:	2800      	cmp	r0, #0
 800511e:	db05      	blt.n	800512c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005120:	231f      	movs	r3, #31
 8005122:	4018      	ands	r0, r3
 8005124:	3b1e      	subs	r3, #30
 8005126:	4083      	lsls	r3, r0
 8005128:	4a01      	ldr	r2, [pc, #4]	@ (8005130 <HAL_NVIC_EnableIRQ+0x14>)
 800512a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800512c:	4770      	bx	lr
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	e000e100 	.word	0xe000e100

08005134 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005134:	2280      	movs	r2, #128	@ 0x80
 8005136:	1e43      	subs	r3, r0, #1
 8005138:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800513a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800513c:	4293      	cmp	r3, r2
 800513e:	d20d      	bcs.n	800515c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005140:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005142:	4a07      	ldr	r2, [pc, #28]	@ (8005160 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005144:	4807      	ldr	r0, [pc, #28]	@ (8005164 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005146:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005148:	6a03      	ldr	r3, [r0, #32]
 800514a:	0609      	lsls	r1, r1, #24
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	430b      	orrs	r3, r1
 8005152:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005154:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005156:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005158:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800515a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800515c:	4770      	bx	lr
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	e000e010 	.word	0xe000e010
 8005164:	e000ed00 	.word	0xe000ed00

08005168 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 800516c:	2001      	movs	r0, #1
  if (NULL == hdma)
 800516e:	2c00      	cmp	r4, #0
 8005170:	d024      	beq.n	80051bc <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005172:	2302      	movs	r3, #2
 8005174:	1ca5      	adds	r5, r4, #2
 8005176:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005178:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800517a:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 800517c:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800517e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005180:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8005182:	6863      	ldr	r3, [r4, #4]
 8005184:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005186:	68e1      	ldr	r1, [r4, #12]
 8005188:	430b      	orrs	r3, r1
 800518a:	6921      	ldr	r1, [r4, #16]
 800518c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800518e:	6961      	ldr	r1, [r4, #20]
 8005190:	430b      	orrs	r3, r1
 8005192:	69a1      	ldr	r1, [r4, #24]
 8005194:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005196:	69e1      	ldr	r1, [r4, #28]
 8005198:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800519a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800519c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800519e:	4b09      	ldr	r3, [pc, #36]	@ (80051c4 <HAL_DMA_Init+0x5c>)
 80051a0:	2114      	movs	r1, #20
 80051a2:	18c0      	adds	r0, r0, r3
 80051a4:	f7fa ffd6 	bl	8000154 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80051a8:	4b07      	ldr	r3, [pc, #28]	@ (80051c8 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051aa:	0080      	lsls	r0, r0, #2
 80051ac:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80051ae:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051b0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80051b2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051b4:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 80051b6:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80051b8:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80051ba:	77e0      	strb	r0, [r4, #31]
}
 80051bc:	bd70      	pop	{r4, r5, r6, pc}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	ffffc00f 	.word	0xffffc00f
 80051c4:	bffdfff8 	.word	0xbffdfff8
 80051c8:	40020000 	.word	0x40020000

080051cc <HAL_DMA_Start_IT>:
{
 80051cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80051ce:	1c44      	adds	r4, r0, #1
{
 80051d0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80051d2:	7fe5      	ldrb	r5, [r4, #31]
 80051d4:	2d01      	cmp	r5, #1
 80051d6:	d033      	beq.n	8005240 <HAL_DMA_Start_IT+0x74>
 80051d8:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 80051da:	1c87      	adds	r7, r0, #2
  __HAL_LOCK(hdma);
 80051dc:	77e5      	strb	r5, [r4, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 80051de:	7ffd      	ldrb	r5, [r7, #31]
 80051e0:	2600      	movs	r6, #0
 80051e2:	46ac      	mov	ip, r5
 80051e4:	4663      	mov	r3, ip
 80051e6:	b2ed      	uxtb	r5, r5
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d128      	bne.n	800523e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80051ec:	2402      	movs	r4, #2
 80051ee:	77fc      	strb	r4, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80051f0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f2:	6386      	str	r6, [r0, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80051f4:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80051f6:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80051f8:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80051fa:	40bd      	lsls	r5, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80051fc:	6026      	str	r6, [r4, #0]
  hdma->Instance->CNDTR = DataLength;
 80051fe:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005200:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 8005202:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8005204:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005206:	6843      	ldr	r3, [r0, #4]
 8005208:	2b10      	cmp	r3, #16
 800520a:	d10e      	bne.n	800522a <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 800520c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800520e:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8005210:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005212:	6822      	ldr	r2, [r4, #0]
    if (NULL != hdma->XferHalfCpltCallback)
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005218:	230e      	movs	r3, #14
 800521a:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800521c:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 800521e:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8005220:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	4313      	orrs	r3, r2
 8005226:	6023      	str	r3, [r4, #0]
}
 8005228:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 800522a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 800522c:	60e2      	str	r2, [r4, #12]
 800522e:	e7ef      	b.n	8005210 <HAL_DMA_Start_IT+0x44>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005230:	230a      	movs	r3, #10
 8005232:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005234:	2204      	movs	r2, #4
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005236:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	4393      	bics	r3, r2
 800523c:	e7ee      	b.n	800521c <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 800523e:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8005240:	2002      	movs	r0, #2
 8005242:	e7f1      	b.n	8005228 <HAL_DMA_Start_IT+0x5c>

08005244 <HAL_DMA_Abort>:
{
 8005244:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005246:	1c84      	adds	r4, r0, #2
 8005248:	7fe2      	ldrb	r2, [r4, #31]
{
 800524a:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800524c:	2a02      	cmp	r2, #2
 800524e:	d006      	beq.n	800525e <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005250:	2204      	movs	r2, #4
 8005252:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8005254:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8005256:	2200      	movs	r2, #0
 8005258:	3301      	adds	r3, #1
 800525a:	77da      	strb	r2, [r3, #31]
}
 800525c:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800525e:	6802      	ldr	r2, [r0, #0]
 8005260:	200e      	movs	r0, #14
 8005262:	6811      	ldr	r1, [r2, #0]
 8005264:	4381      	bics	r1, r0
 8005266:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005268:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800526a:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800526c:	6810      	ldr	r0, [r2, #0]
 800526e:	4388      	bics	r0, r1
 8005270:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005272:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8005274:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005276:	4085      	lsls	r5, r0
  return HAL_OK;
 8005278:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800527a:	6055      	str	r5, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 800527c:	77e1      	strb	r1, [r4, #31]
  return HAL_OK;
 800527e:	e7ea      	b.n	8005256 <HAL_DMA_Abort+0x12>

08005280 <HAL_DMA_Abort_IT>:
{
 8005280:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005282:	1c84      	adds	r4, r0, #2
 8005284:	7fe3      	ldrb	r3, [r4, #31]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d003      	beq.n	8005292 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800528a:	2304      	movs	r3, #4
 800528c:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800528e:	2001      	movs	r0, #1
}
 8005290:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005292:	210e      	movs	r1, #14
 8005294:	6803      	ldr	r3, [r0, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	438a      	bics	r2, r1
 800529a:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800529c:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800529e:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80052a0:	6819      	ldr	r1, [r3, #0]
 80052a2:	4391      	bics	r1, r2
 80052a4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80052a6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80052a8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80052aa:	408d      	lsls	r5, r1
 80052ac:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80052ae:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80052b0:	1883      	adds	r3, r0, r2
 80052b2:	2200      	movs	r2, #0
 80052b4:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 80052b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d000      	beq.n	80052be <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 80052bc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2000      	movs	r0, #0
 80052c0:	e7e6      	b.n	8005290 <HAL_DMA_Abort_IT+0x10>

080052c2 <HAL_DMA_IRQHandler>:
{
 80052c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80052c4:	2704      	movs	r7, #4
 80052c6:	003e      	movs	r6, r7
 80052c8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80052cc:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052ce:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80052d0:	6803      	ldr	r3, [r0, #0]
 80052d2:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80052d4:	4235      	tst	r5, r6
 80052d6:	d00d      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x32>
 80052d8:	423c      	tst	r4, r7
 80052da:	d00b      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	0689      	lsls	r1, r1, #26
 80052e0:	d402      	bmi.n	80052e8 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	43b9      	bics	r1, r7
 80052e6:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80052e8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80052ea:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d019      	beq.n	8005324 <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 80052f0:	4798      	blx	r3
}
 80052f2:	e017      	b.n	8005324 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80052f4:	2702      	movs	r7, #2
 80052f6:	003e      	movs	r6, r7
 80052f8:	408e      	lsls	r6, r1
 80052fa:	4235      	tst	r5, r6
 80052fc:	d013      	beq.n	8005326 <HAL_DMA_IRQHandler+0x64>
 80052fe:	423c      	tst	r4, r7
 8005300:	d011      	beq.n	8005326 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005302:	6819      	ldr	r1, [r3, #0]
 8005304:	0689      	lsls	r1, r1, #26
 8005306:	d406      	bmi.n	8005316 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005308:	240a      	movs	r4, #10
 800530a:	6819      	ldr	r1, [r3, #0]
 800530c:	43a1      	bics	r1, r4
 800530e:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005310:	2101      	movs	r1, #1
 8005312:	19c3      	adds	r3, r0, r7
 8005314:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005316:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 8005318:	2200      	movs	r2, #0
 800531a:	1c43      	adds	r3, r0, #1
 800531c:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 800531e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 8005320:	4293      	cmp	r3, r2
 8005322:	d1e5      	bne.n	80052f0 <HAL_DMA_IRQHandler+0x2e>
}
 8005324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005326:	2608      	movs	r6, #8
 8005328:	0037      	movs	r7, r6
 800532a:	408f      	lsls	r7, r1
 800532c:	423d      	tst	r5, r7
 800532e:	d0f9      	beq.n	8005324 <HAL_DMA_IRQHandler+0x62>
 8005330:	4234      	tst	r4, r6
 8005332:	d0f7      	beq.n	8005324 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005334:	250e      	movs	r5, #14
 8005336:	681c      	ldr	r4, [r3, #0]
 8005338:	43ac      	bics	r4, r5
 800533a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800533c:	2301      	movs	r3, #1
 800533e:	001c      	movs	r4, r3
 8005340:	408c      	lsls	r4, r1
 8005342:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005344:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005346:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8005348:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800534a:	2200      	movs	r2, #0
 800534c:	18c3      	adds	r3, r0, r3
 800534e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8005350:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005352:	e7e5      	b.n	8005320 <HAL_DMA_IRQHandler+0x5e>

08005354 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8005354:	2300      	movs	r3, #0
{
 8005356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005358:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800535a:	680a      	ldr	r2, [r1, #0]
 800535c:	0014      	movs	r4, r2
 800535e:	40dc      	lsrs	r4, r3
 8005360:	d101      	bne.n	8005366 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8005362:	b007      	add	sp, #28
 8005364:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005366:	2501      	movs	r5, #1
 8005368:	0014      	movs	r4, r2
 800536a:	409d      	lsls	r5, r3
 800536c:	402c      	ands	r4, r5
 800536e:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8005370:	422a      	tst	r2, r5
 8005372:	d100      	bne.n	8005376 <HAL_GPIO_Init+0x22>
 8005374:	e098      	b.n	80054a8 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005376:	684a      	ldr	r2, [r1, #4]
 8005378:	005f      	lsls	r7, r3, #1
 800537a:	4694      	mov	ip, r2
 800537c:	2203      	movs	r2, #3
 800537e:	4664      	mov	r4, ip
 8005380:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005382:	2403      	movs	r4, #3
 8005384:	40bc      	lsls	r4, r7
 8005386:	43e4      	mvns	r4, r4
 8005388:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800538a:	1e54      	subs	r4, r2, #1
 800538c:	2c01      	cmp	r4, #1
 800538e:	d82e      	bhi.n	80053ee <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8005390:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005392:	9c01      	ldr	r4, [sp, #4]
 8005394:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005396:	68cc      	ldr	r4, [r1, #12]
 8005398:	40bc      	lsls	r4, r7
 800539a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800539c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800539e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053a0:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053a2:	43ac      	bics	r4, r5
 80053a4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053a6:	4664      	mov	r4, ip
 80053a8:	0924      	lsrs	r4, r4, #4
 80053aa:	4034      	ands	r4, r6
 80053ac:	409c      	lsls	r4, r3
 80053ae:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80053b0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80053b2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80053b4:	9c01      	ldr	r4, [sp, #4]
 80053b6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80053b8:	688c      	ldr	r4, [r1, #8]
 80053ba:	40bc      	lsls	r4, r7
 80053bc:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80053be:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053c0:	2a02      	cmp	r2, #2
 80053c2:	d116      	bne.n	80053f2 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053c4:	2507      	movs	r5, #7
 80053c6:	260f      	movs	r6, #15
 80053c8:	401d      	ands	r5, r3
 80053ca:	00ad      	lsls	r5, r5, #2
 80053cc:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 80053ce:	08dc      	lsrs	r4, r3, #3
 80053d0:	00a4      	lsls	r4, r4, #2
 80053d2:	1904      	adds	r4, r0, r4
 80053d4:	9402      	str	r4, [sp, #8]
 80053d6:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053d8:	9603      	str	r6, [sp, #12]
 80053da:	0026      	movs	r6, r4
 80053dc:	9c03      	ldr	r4, [sp, #12]
 80053de:	43a6      	bics	r6, r4
 80053e0:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053e2:	690e      	ldr	r6, [r1, #16]
 80053e4:	40ae      	lsls	r6, r5
 80053e6:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80053e8:	9c02      	ldr	r4, [sp, #8]
 80053ea:	6226      	str	r6, [r4, #32]
 80053ec:	e001      	b.n	80053f2 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053ee:	2a03      	cmp	r2, #3
 80053f0:	d1df      	bne.n	80053b2 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80053f2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80053f4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80053f6:	9d01      	ldr	r5, [sp, #4]
 80053f8:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80053fa:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053fc:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 80053fe:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005400:	4662      	mov	r2, ip
 8005402:	02a4      	lsls	r4, r4, #10
 8005404:	4222      	tst	r2, r4
 8005406:	d04f      	beq.n	80054a8 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005408:	2501      	movs	r5, #1
 800540a:	4a28      	ldr	r2, [pc, #160]	@ (80054ac <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800540c:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540e:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005410:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005412:	432c      	orrs	r4, r5
 8005414:	6194      	str	r4, [r2, #24]
 8005416:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005418:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800541a:	402a      	ands	r2, r5
 800541c:	9205      	str	r2, [sp, #20]
 800541e:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005420:	4a23      	ldr	r2, [pc, #140]	@ (80054b0 <HAL_GPIO_Init+0x15c>)
 8005422:	00a4      	lsls	r4, r4, #2
 8005424:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005426:	220f      	movs	r2, #15
 8005428:	3502      	adds	r5, #2
 800542a:	401d      	ands	r5, r3
 800542c:	00ad      	lsls	r5, r5, #2
 800542e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8005430:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005432:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005434:	2200      	movs	r2, #0
 8005436:	42b8      	cmp	r0, r7
 8005438:	d00c      	beq.n	8005454 <HAL_GPIO_Init+0x100>
 800543a:	4f1e      	ldr	r7, [pc, #120]	@ (80054b4 <HAL_GPIO_Init+0x160>)
 800543c:	3201      	adds	r2, #1
 800543e:	42b8      	cmp	r0, r7
 8005440:	d008      	beq.n	8005454 <HAL_GPIO_Init+0x100>
 8005442:	4f1d      	ldr	r7, [pc, #116]	@ (80054b8 <HAL_GPIO_Init+0x164>)
 8005444:	3201      	adds	r2, #1
 8005446:	42b8      	cmp	r0, r7
 8005448:	d004      	beq.n	8005454 <HAL_GPIO_Init+0x100>
 800544a:	4f1c      	ldr	r7, [pc, #112]	@ (80054bc <HAL_GPIO_Init+0x168>)
 800544c:	3203      	adds	r2, #3
 800544e:	42b8      	cmp	r0, r7
 8005450:	d100      	bne.n	8005454 <HAL_GPIO_Init+0x100>
 8005452:	3a02      	subs	r2, #2
 8005454:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005456:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005458:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 800545a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 800545c:	4a18      	ldr	r2, [pc, #96]	@ (80054c0 <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 800545e:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8005460:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8005462:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8005464:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8005466:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005468:	02ff      	lsls	r7, r7, #11
 800546a:	d401      	bmi.n	8005470 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 800546c:	0035      	movs	r5, r6
 800546e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005470:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8005472:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8005474:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8005476:	9d00      	ldr	r5, [sp, #0]
 8005478:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800547a:	02bf      	lsls	r7, r7, #10
 800547c:	d401      	bmi.n	8005482 <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 800547e:	0035      	movs	r5, r6
 8005480:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005482:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8005484:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8005486:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8005488:	9d00      	ldr	r5, [sp, #0]
 800548a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800548c:	03bf      	lsls	r7, r7, #14
 800548e:	d401      	bmi.n	8005494 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8005490:	0035      	movs	r5, r6
 8005492:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005494:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8005496:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8005498:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800549a:	9e00      	ldr	r6, [sp, #0]
 800549c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800549e:	03ff      	lsls	r7, r7, #15
 80054a0:	d401      	bmi.n	80054a6 <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 80054a2:	4025      	ands	r5, r4
 80054a4:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80054a6:	6016      	str	r6, [r2, #0]
    position++;
 80054a8:	3301      	adds	r3, #1
 80054aa:	e756      	b.n	800535a <HAL_GPIO_Init+0x6>
 80054ac:	40021000 	.word	0x40021000
 80054b0:	40010000 	.word	0x40010000
 80054b4:	48000400 	.word	0x48000400
 80054b8:	48000800 	.word	0x48000800
 80054bc:	48000c00 	.word	0x48000c00
 80054c0:	40010400 	.word	0x40010400

080054c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054c4:	6900      	ldr	r0, [r0, #16]
 80054c6:	4008      	ands	r0, r1
 80054c8:	1e43      	subs	r3, r0, #1
 80054ca:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80054cc:	b2c0      	uxtb	r0, r0
  }
 80054ce:	4770      	bx	lr

080054d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054d4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054d6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054d8:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80054da:	e7fc      	b.n	80054d6 <HAL_GPIO_WritePin+0x6>

080054dc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054dc:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80054de:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	4210      	tst	r0, r2
 80054e4:	d002      	beq.n	80054ec <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054e6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054e8:	f7ff f9ae 	bl	8004848 <HAL_GPIO_EXTI_Callback>
  }
}
 80054ec:	bd10      	pop	{r4, pc}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	40010400 	.word	0x40010400

080054f4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054f4:	6803      	ldr	r3, [r0, #0]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	0792      	lsls	r2, r2, #30
 80054fa:	d501      	bpl.n	8005500 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054fc:	2200      	movs	r2, #0
 80054fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005500:	2201      	movs	r2, #1
 8005502:	6999      	ldr	r1, [r3, #24]
 8005504:	4211      	tst	r1, r2
 8005506:	d102      	bne.n	800550e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005508:	6999      	ldr	r1, [r3, #24]
 800550a:	430a      	orrs	r2, r1
 800550c:	619a      	str	r2, [r3, #24]
  }
}
 800550e:	4770      	bx	lr

08005510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005510:	b530      	push	{r4, r5, lr}
 8005512:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005514:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005516:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005518:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800551a:	0589      	lsls	r1, r1, #22
 800551c:	431a      	orrs	r2, r3
 800551e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <I2C_TransferConfig+0x28>)
 8005522:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005524:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005526:	0d64      	lsrs	r4, r4, #21
 8005528:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800552a:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800552c:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800552e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005530:	432a      	orrs	r2, r5
 8005532:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005534:	bd30      	pop	{r4, r5, pc}
 8005536:	46c0      	nop			@ (mov r8, r8)
 8005538:	03ff63ff 	.word	0x03ff63ff

0800553c <I2C_IsErrorOccurred>:
{
 800553c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800553e:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005540:	6802      	ldr	r2, [r0, #0]
{
 8005542:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8005544:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005546:	2310      	movs	r3, #16
 8005548:	000f      	movs	r7, r1
{
 800554a:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800554c:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 800554e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005550:	4219      	tst	r1, r3
 8005552:	d00d      	beq.n	8005570 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 8005554:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005556:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8005558:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	2120      	movs	r1, #32
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	420a      	tst	r2, r1
 8005562:	d15f      	bne.n	8005624 <I2C_IsErrorOccurred+0xe8>
 8005564:	2f00      	cmp	r7, #0
 8005566:	d031      	beq.n	80055cc <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 8005568:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800556a:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 800556c:	9b01      	ldr	r3, [sp, #4]
 800556e:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005570:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8005572:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005574:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8005576:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005578:	4213      	tst	r3, r2
 800557a:	d002      	beq.n	8005582 <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 800557c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800557e:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8005580:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005582:	2280      	movs	r2, #128	@ 0x80
 8005584:	00d2      	lsls	r2, r2, #3
 8005586:	4213      	tst	r3, r2
 8005588:	d003      	beq.n	8005592 <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 800558a:	2108      	movs	r1, #8
    status = HAL_ERROR;
 800558c:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 800558e:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005590:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005592:	2280      	movs	r2, #128	@ 0x80
 8005594:	0092      	lsls	r2, r2, #2
 8005596:	4213      	tst	r3, r2
 8005598:	d049      	beq.n	800562e <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 800559a:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800559c:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 800559e:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 80055a0:	0020      	movs	r0, r4
 80055a2:	f7ff ffa7 	bl	80054f4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80055a6:	686b      	ldr	r3, [r5, #4]
 80055a8:	4a22      	ldr	r2, [pc, #136]	@ (8005634 <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 80055aa:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80055ac:	4013      	ands	r3, r2
 80055ae:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 80055b0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055b2:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80055b4:	433b      	orrs	r3, r7
 80055b6:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055b8:	0023      	movs	r3, r4
 80055ba:	3341      	adds	r3, #65	@ 0x41
 80055bc:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055be:	0022      	movs	r2, r4
 80055c0:	2300      	movs	r3, #0
 80055c2:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 80055c4:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c6:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80055c8:	7023      	strb	r3, [r4, #0]
 80055ca:	e032      	b.n	8005632 <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 80055cc:	1c72      	adds	r2, r6, #1
 80055ce:	d0c5      	beq.n	800555c <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055d0:	f7ff fd62 	bl	8005098 <HAL_GetTick>
 80055d4:	1b40      	subs	r0, r0, r5
 80055d6:	42b0      	cmp	r0, r6
 80055d8:	d801      	bhi.n	80055de <I2C_IsErrorOccurred+0xa2>
 80055da:	2e00      	cmp	r6, #0
 80055dc:	d1bd      	bne.n	800555a <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 80055de:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055e0:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80055e2:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055e4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80055e6:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055e8:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 80055ea:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055ec:	0412      	lsls	r2, r2, #16
 80055ee:	d50b      	bpl.n	8005608 <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055f0:	2280      	movs	r2, #128	@ 0x80
 80055f2:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055f4:	4210      	tst	r0, r2
 80055f6:	d107      	bne.n	8005608 <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 80055f8:	2920      	cmp	r1, #32
 80055fa:	d005      	beq.n	8005608 <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055fc:	6859      	ldr	r1, [r3, #4]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005602:	f7ff fd49 	bl	8005098 <HAL_GetTick>
 8005606:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005608:	2220      	movs	r2, #32
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	4213      	tst	r3, r2
 8005610:	d1a3      	bne.n	800555a <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005612:	f7ff fd41 	bl	8005098 <HAL_GetTick>
 8005616:	1b40      	subs	r0, r0, r5
 8005618:	2819      	cmp	r0, #25
 800561a:	d9f5      	bls.n	8005608 <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800561c:	2320      	movs	r3, #32
              status = HAL_ERROR;
 800561e:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	e79a      	b.n	800555a <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 8005624:	2f00      	cmp	r7, #0
 8005626:	d19f      	bne.n	8005568 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005628:	2220      	movs	r2, #32
 800562a:	61da      	str	r2, [r3, #28]
 800562c:	e79c      	b.n	8005568 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 800562e:	2800      	cmp	r0, #0
 8005630:	d1b6      	bne.n	80055a0 <I2C_IsErrorOccurred+0x64>
}
 8005632:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005634:	fe00e800 	.word	0xfe00e800

08005638 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	0004      	movs	r4, r0
 800563c:	000d      	movs	r5, r1
 800563e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005640:	2702      	movs	r7, #2
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	423b      	tst	r3, r7
 8005648:	d001      	beq.n	800564e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800564a:	2000      	movs	r0, #0
 800564c:	e021      	b.n	8005692 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800564e:	0032      	movs	r2, r6
 8005650:	0029      	movs	r1, r5
 8005652:	0020      	movs	r0, r4
 8005654:	f7ff ff72 	bl	800553c <I2C_IsErrorOccurred>
 8005658:	2800      	cmp	r0, #0
 800565a:	d119      	bne.n	8005690 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 800565c:	1c6b      	adds	r3, r5, #1
 800565e:	d0f0      	beq.n	8005642 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005660:	f7ff fd1a 	bl	8005098 <HAL_GetTick>
 8005664:	1b80      	subs	r0, r0, r6
 8005666:	42a8      	cmp	r0, r5
 8005668:	d801      	bhi.n	800566e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800566a:	2d00      	cmp	r5, #0
 800566c:	d1e9      	bne.n	8005642 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	6999      	ldr	r1, [r3, #24]
 8005672:	2302      	movs	r3, #2
 8005674:	000a      	movs	r2, r1
 8005676:	401a      	ands	r2, r3
 8005678:	4219      	tst	r1, r3
 800567a:	d1e2      	bne.n	8005642 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800567c:	2120      	movs	r1, #32
 800567e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005680:	430b      	orrs	r3, r1
 8005682:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005684:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8005686:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8005688:	3341      	adds	r3, #65	@ 0x41
 800568a:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 800568e:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8005690:	2001      	movs	r0, #1
}
 8005692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005694 <I2C_WaitOnFlagUntilTimeout>:
{
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	0004      	movs	r4, r0
 8005698:	000d      	movs	r5, r1
 800569a:	0017      	movs	r7, r2
 800569c:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	402b      	ands	r3, r5
 80056a4:	1b5b      	subs	r3, r3, r5
 80056a6:	425a      	negs	r2, r3
 80056a8:	4153      	adcs	r3, r2
 80056aa:	42bb      	cmp	r3, r7
 80056ac:	d001      	beq.n	80056b2 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80056ae:	2000      	movs	r0, #0
 80056b0:	e026      	b.n	8005700 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056b2:	0031      	movs	r1, r6
 80056b4:	0020      	movs	r0, r4
 80056b6:	9a06      	ldr	r2, [sp, #24]
 80056b8:	f7ff ff40 	bl	800553c <I2C_IsErrorOccurred>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d11e      	bne.n	80056fe <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80056c0:	1c73      	adds	r3, r6, #1
 80056c2:	d0ec      	beq.n	800569e <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c4:	f7ff fce8 	bl	8005098 <HAL_GetTick>
 80056c8:	9b06      	ldr	r3, [sp, #24]
 80056ca:	1ac0      	subs	r0, r0, r3
 80056cc:	42b0      	cmp	r0, r6
 80056ce:	d801      	bhi.n	80056d4 <I2C_WaitOnFlagUntilTimeout+0x40>
 80056d0:	2e00      	cmp	r6, #0
 80056d2:	d1e4      	bne.n	800569e <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	402b      	ands	r3, r5
 80056da:	1b5b      	subs	r3, r3, r5
 80056dc:	425a      	negs	r2, r3
 80056de:	4153      	adcs	r3, r2
 80056e0:	42bb      	cmp	r3, r7
 80056e2:	d1dc      	bne.n	800569e <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056e4:	2220      	movs	r2, #32
 80056e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80056e8:	4313      	orrs	r3, r2
 80056ea:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056ec:	0023      	movs	r3, r4
 80056ee:	3341      	adds	r3, #65	@ 0x41
 80056f0:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f2:	0022      	movs	r2, r4
 80056f4:	2300      	movs	r3, #0
 80056f6:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 80056f8:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056fa:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80056fc:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80056fe:	2001      	movs	r0, #1
}
 8005700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005702 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005704:	0004      	movs	r4, r0
 8005706:	000e      	movs	r6, r1
 8005708:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800570a:	2520      	movs	r5, #32
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	422b      	tst	r3, r5
 8005712:	d001      	beq.n	8005718 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8005714:	2000      	movs	r0, #0
 8005716:	e01d      	b.n	8005754 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005718:	003a      	movs	r2, r7
 800571a:	0031      	movs	r1, r6
 800571c:	0020      	movs	r0, r4
 800571e:	f7ff ff0d 	bl	800553c <I2C_IsErrorOccurred>
 8005722:	2800      	cmp	r0, #0
 8005724:	d115      	bne.n	8005752 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005726:	f7ff fcb7 	bl	8005098 <HAL_GetTick>
 800572a:	1bc0      	subs	r0, r0, r7
 800572c:	42b0      	cmp	r0, r6
 800572e:	d801      	bhi.n	8005734 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8005730:	2e00      	cmp	r6, #0
 8005732:	d1eb      	bne.n	800570c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	001a      	movs	r2, r3
 800573a:	402a      	ands	r2, r5
 800573c:	422b      	tst	r3, r5
 800573e:	d1e5      	bne.n	800570c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005740:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005742:	432b      	orrs	r3, r5
 8005744:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005746:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8005748:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800574a:	3341      	adds	r3, #65	@ 0x41
 800574c:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800574e:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8005750:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8005752:	2001      	movs	r0, #1
}
 8005754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005758 <HAL_I2C_Init>:
{
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800575c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800575e:	2c00      	cmp	r4, #0
 8005760:	d04e      	beq.n	8005800 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005762:	0025      	movs	r5, r4
 8005764:	3541      	adds	r5, #65	@ 0x41
 8005766:	782b      	ldrb	r3, [r5, #0]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800576e:	0023      	movs	r3, r4
 8005770:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8005772:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8005774:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8005776:	f7ff faa7 	bl	8004cc8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800577a:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 800577c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800577e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8005780:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005782:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8005784:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005786:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8005788:	438a      	bics	r2, r1
 800578a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800578c:	491d      	ldr	r1, [pc, #116]	@ (8005804 <HAL_I2C_Init+0xac>)
 800578e:	6862      	ldr	r2, [r4, #4]
 8005790:	400a      	ands	r2, r1
 8005792:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	491c      	ldr	r1, [pc, #112]	@ (8005808 <HAL_I2C_Init+0xb0>)
 8005798:	400a      	ands	r2, r1
 800579a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800579c:	2801      	cmp	r0, #1
 800579e:	d107      	bne.n	80057b0 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057a0:	2280      	movs	r2, #128	@ 0x80
 80057a2:	0212      	lsls	r2, r2, #8
 80057a4:	4332      	orrs	r2, r6
 80057a6:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	4818      	ldr	r0, [pc, #96]	@ (800580c <HAL_I2C_Init+0xb4>)
 80057ac:	4002      	ands	r2, r0
 80057ae:	e009      	b.n	80057c4 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057b0:	2284      	movs	r2, #132	@ 0x84
 80057b2:	0212      	lsls	r2, r2, #8
 80057b4:	4332      	orrs	r2, r6
 80057b6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057b8:	2802      	cmp	r0, #2
 80057ba:	d1f5      	bne.n	80057a8 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057bc:	2280      	movs	r2, #128	@ 0x80
 80057be:	6858      	ldr	r0, [r3, #4]
 80057c0:	0112      	lsls	r2, r2, #4
 80057c2:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057c4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057c6:	6858      	ldr	r0, [r3, #4]
 80057c8:	4a11      	ldr	r2, [pc, #68]	@ (8005810 <HAL_I2C_Init+0xb8>)
 80057ca:	4302      	orrs	r2, r0
 80057cc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057ce:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d0:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057d2:	400a      	ands	r2, r1
 80057d4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057d6:	6961      	ldr	r1, [r4, #20]
 80057d8:	6922      	ldr	r2, [r4, #16]
 80057da:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057dc:	69a1      	ldr	r1, [r4, #24]
 80057de:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057e0:	430a      	orrs	r2, r1
 80057e2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057e4:	6a21      	ldr	r1, [r4, #32]
 80057e6:	69e2      	ldr	r2, [r4, #28]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80057ec:	2201      	movs	r2, #1
 80057ee:	6819      	ldr	r1, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80057f4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f6:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057f8:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80057fa:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fc:	3442      	adds	r4, #66	@ 0x42
 80057fe:	7020      	strb	r0, [r4, #0]
}
 8005800:	bd70      	pop	{r4, r5, r6, pc}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	f0ffffff 	.word	0xf0ffffff
 8005808:	ffff7fff 	.word	0xffff7fff
 800580c:	fffff7ff 	.word	0xfffff7ff
 8005810:	02008000 	.word	0x02008000

08005814 <HAL_I2C_Mem_Write>:
{
 8005814:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005816:	0007      	movs	r7, r0
{
 8005818:	b087      	sub	sp, #28
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	ab0c      	add	r3, sp, #48	@ 0x30
 800581e:	9202      	str	r2, [sp, #8]
 8005820:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005822:	3741      	adds	r7, #65	@ 0x41
{
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	9204      	str	r2, [sp, #16]
 8005828:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800582a:	783b      	ldrb	r3, [r7, #0]
{
 800582c:	0004      	movs	r4, r0
 800582e:	000e      	movs	r6, r1
    __HAL_LOCK(hi2c);
 8005830:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005832:	2b20      	cmp	r3, #32
 8005834:	d108      	bne.n	8005848 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 8005836:	2a00      	cmp	r2, #0
 8005838:	d002      	beq.n	8005840 <HAL_I2C_Mem_Write+0x2c>
 800583a:	9b05      	ldr	r3, [sp, #20]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005840:	2380      	movs	r3, #128	@ 0x80
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8005846:	2001      	movs	r0, #1
}
 8005848:	b007      	add	sp, #28
 800584a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800584c:	0023      	movs	r3, r4
 800584e:	3340      	adds	r3, #64	@ 0x40
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	2002      	movs	r0, #2
 8005854:	2a01      	cmp	r2, #1
 8005856:	d0f7      	beq.n	8005848 <HAL_I2C_Mem_Write+0x34>
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800585c:	f7ff fc1c 	bl	8005098 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005860:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8005862:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005864:	9000      	str	r0, [sp, #0]
 8005866:	2319      	movs	r3, #25
 8005868:	2201      	movs	r2, #1
 800586a:	0020      	movs	r0, r4
 800586c:	0209      	lsls	r1, r1, #8
 800586e:	f7ff ff11 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 8005872:	2800      	cmp	r0, #0
 8005874:	d1e7      	bne.n	8005846 <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005876:	2321      	movs	r3, #33	@ 0x21
 8005878:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800587a:	0027      	movs	r7, r4
 800587c:	331f      	adds	r3, #31
 800587e:	3742      	adds	r7, #66	@ 0x42
 8005880:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8005882:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005884:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8005886:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005888:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800588a:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 800588c:	8563      	strh	r3, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800588e:	466b      	mov	r3, sp
 8005890:	7b1a      	ldrb	r2, [r3, #12]
 8005892:	4b4b      	ldr	r3, [pc, #300]	@ (80059c0 <HAL_I2C_Mem_Write+0x1ac>)
 8005894:	0031      	movs	r1, r6
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	2380      	movs	r3, #128	@ 0x80
 800589a:	0020      	movs	r0, r4
 800589c:	045b      	lsls	r3, r3, #17
 800589e:	f7ff fe37 	bl	8005510 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a2:	002a      	movs	r2, r5
 80058a4:	0020      	movs	r0, r4
 80058a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80058a8:	f7ff fec6 	bl	8005638 <I2C_WaitOnTXISFlagUntilTimeout>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d129      	bne.n	8005904 <HAL_I2C_Mem_Write+0xf0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058b0:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058b2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058b4:	2a01      	cmp	r2, #1
 80058b6:	d116      	bne.n	80058e6 <HAL_I2C_Mem_Write+0xd2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058b8:	466a      	mov	r2, sp
 80058ba:	7a12      	ldrb	r2, [r2, #8]
 80058bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058be:	2200      	movs	r2, #0
 80058c0:	2180      	movs	r1, #128	@ 0x80
 80058c2:	0020      	movs	r0, r4
 80058c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058c6:	9500      	str	r5, [sp, #0]
 80058c8:	f7ff fee4 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d119      	bne.n	8005904 <HAL_I2C_Mem_Write+0xf0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058d0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80058d2:	2bff      	cmp	r3, #255	@ 0xff
 80058d4:	d81a      	bhi.n	800590c <HAL_I2C_Mem_Write+0xf8>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058d6:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 80058d8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058da:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 80058dc:	b292      	uxth	r2, r2
 80058de:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	9000      	str	r0, [sp, #0]
 80058e4:	e017      	b.n	8005916 <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058e6:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e8:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058ea:	0a12      	lsrs	r2, r2, #8
 80058ec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ee:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80058f0:	002a      	movs	r2, r5
 80058f2:	f7ff fea1 	bl	8005638 <I2C_WaitOnTXISFlagUntilTimeout>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d104      	bne.n	8005904 <HAL_I2C_Mem_Write+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058fa:	466b      	mov	r3, sp
 80058fc:	6822      	ldr	r2, [r4, #0]
 80058fe:	7a1b      	ldrb	r3, [r3, #8]
 8005900:	6293      	str	r3, [r2, #40]	@ 0x28
 8005902:	e7dc      	b.n	80058be <HAL_I2C_Mem_Write+0xaa>
      __HAL_UNLOCK(hi2c);
 8005904:	2300      	movs	r3, #0
 8005906:	3440      	adds	r4, #64	@ 0x40
 8005908:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800590a:	e79c      	b.n	8005846 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800590c:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800590e:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005910:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005912:	045b      	lsls	r3, r3, #17
 8005914:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005916:	0031      	movs	r1, r6
 8005918:	0020      	movs	r0, r4
 800591a:	f7ff fdf9 	bl	8005510 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800591e:	002a      	movs	r2, r5
 8005920:	0020      	movs	r0, r4
 8005922:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005924:	f7ff fe88 	bl	8005638 <I2C_WaitOnTXISFlagUntilTimeout>
 8005928:	2800      	cmp	r0, #0
 800592a:	d000      	beq.n	800592e <HAL_I2C_Mem_Write+0x11a>
 800592c:	e78b      	b.n	8005846 <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800592e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005930:	6822      	ldr	r2, [r4, #0]
 8005932:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8005934:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005936:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8005938:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800593a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800593c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800593e:	3b01      	subs	r3, #1
 8005940:	b29b      	uxth	r3, r3
 8005942:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005944:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005946:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005948:	b292      	uxth	r2, r2
 800594a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800594c:	2b00      	cmp	r3, #0
 800594e:	d016      	beq.n	800597e <HAL_I2C_Mem_Write+0x16a>
 8005950:	2a00      	cmp	r2, #0
 8005952:	d114      	bne.n	800597e <HAL_I2C_Mem_Write+0x16a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005954:	2180      	movs	r1, #128	@ 0x80
 8005956:	0020      	movs	r0, r4
 8005958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800595a:	9500      	str	r5, [sp, #0]
 800595c:	f7ff fe9a 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 8005960:	2800      	cmp	r0, #0
 8005962:	d000      	beq.n	8005966 <HAL_I2C_Mem_Write+0x152>
 8005964:	e76f      	b.n	8005846 <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005966:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005968:	2bff      	cmp	r3, #255	@ 0xff
 800596a:	d921      	bls.n	80059b0 <HAL_I2C_Mem_Write+0x19c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800596c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800596e:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005970:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005972:	045b      	lsls	r3, r3, #17
 8005974:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005976:	0031      	movs	r1, r6
 8005978:	0020      	movs	r0, r4
 800597a:	f7ff fdc9 	bl	8005510 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800597e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1cc      	bne.n	800591e <HAL_I2C_Mem_Write+0x10a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005984:	002a      	movs	r2, r5
 8005986:	0020      	movs	r0, r4
 8005988:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800598a:	f7ff feba 	bl	8005702 <I2C_WaitOnSTOPFlagUntilTimeout>
 800598e:	2800      	cmp	r0, #0
 8005990:	d000      	beq.n	8005994 <HAL_I2C_Mem_Write+0x180>
 8005992:	e758      	b.n	8005846 <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005994:	2120      	movs	r1, #32
 8005996:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005998:	4d0a      	ldr	r5, [pc, #40]	@ (80059c4 <HAL_I2C_Mem_Write+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800599a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	402a      	ands	r2, r5
 80059a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80059a4:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80059a6:	3341      	adds	r3, #65	@ 0x41
 80059a8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059aa:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 80059ac:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80059ae:	e74b      	b.n	8005848 <HAL_I2C_Mem_Write+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059b0:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 80059b2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059b4:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80059b6:	b292      	uxth	r2, r2
 80059b8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	9000      	str	r0, [sp, #0]
 80059be:	e7da      	b.n	8005976 <HAL_I2C_Mem_Write+0x162>
 80059c0:	80002000 	.word	0x80002000
 80059c4:	fe00e800 	.word	0xfe00e800

080059c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ca:	0004      	movs	r4, r0
 80059cc:	3441      	adds	r4, #65	@ 0x41
 80059ce:	7822      	ldrb	r2, [r4, #0]
{
 80059d0:	0003      	movs	r3, r0
 80059d2:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80059d6:	b2d6      	uxtb	r6, r2
 80059d8:	2a20      	cmp	r2, #32
 80059da:	d118      	bne.n	8005a0e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80059dc:	001d      	movs	r5, r3
 80059de:	3540      	adds	r5, #64	@ 0x40
 80059e0:	782a      	ldrb	r2, [r5, #0]
 80059e2:	2a01      	cmp	r2, #1
 80059e4:	d013      	beq.n	8005a0e <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059e6:	2224      	movs	r2, #36	@ 0x24
 80059e8:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3a23      	subs	r2, #35	@ 0x23
 80059ee:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059f0:	4807      	ldr	r0, [pc, #28]	@ (8005a10 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80059f2:	4391      	bics	r1, r2
 80059f4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059f6:	6819      	ldr	r1, [r3, #0]
 80059f8:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fa:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059fc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	4339      	orrs	r1, r7
 8005a02:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8005a04:	6819      	ldr	r1, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a0a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8005a0c:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a10:	ffffefff 	.word	0xffffefff

08005a14 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a14:	0002      	movs	r2, r0
{
 8005a16:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a18:	3241      	adds	r2, #65	@ 0x41
 8005a1a:	7814      	ldrb	r4, [r2, #0]
{
 8005a1c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1e:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a20:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a22:	2c20      	cmp	r4, #32
 8005a24:	d117      	bne.n	8005a56 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8005a26:	001c      	movs	r4, r3
 8005a28:	3440      	adds	r4, #64	@ 0x40
 8005a2a:	7826      	ldrb	r6, [r4, #0]
 8005a2c:	2e01      	cmp	r6, #1
 8005a2e:	d012      	beq.n	8005a56 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a30:	3022      	adds	r0, #34	@ 0x22
 8005a32:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3823      	subs	r0, #35	@ 0x23
 8005a38:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a3a:	4f07      	ldr	r7, [pc, #28]	@ (8005a58 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8005a3c:	4386      	bics	r6, r0
 8005a3e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8005a40:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a42:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8005a44:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8005a46:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a48:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a4a:	6819      	ldr	r1, [r3, #0]
 8005a4c:	4308      	orrs	r0, r1
 8005a4e:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a50:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005a52:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8005a54:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a58:	fffff0ff 	.word	0xfffff0ff

08005a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5e:	0004      	movs	r4, r0
 8005a60:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d045      	beq.n	8005af2 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a66:	6803      	ldr	r3, [r0, #0]
 8005a68:	07db      	lsls	r3, r3, #31
 8005a6a:	d42f      	bmi.n	8005acc <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	079b      	lsls	r3, r3, #30
 8005a70:	d500      	bpl.n	8005a74 <HAL_RCC_OscConfig+0x18>
 8005a72:	e081      	b.n	8005b78 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	071b      	lsls	r3, r3, #28
 8005a78:	d500      	bpl.n	8005a7c <HAL_RCC_OscConfig+0x20>
 8005a7a:	e0bc      	b.n	8005bf6 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	075b      	lsls	r3, r3, #29
 8005a80:	d500      	bpl.n	8005a84 <HAL_RCC_OscConfig+0x28>
 8005a82:	e0df      	b.n	8005c44 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	06db      	lsls	r3, r3, #27
 8005a88:	d51a      	bpl.n	8005ac0 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005a8a:	6962      	ldr	r2, [r4, #20]
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	4db4      	ldr	r5, [pc, #720]	@ (8005d60 <HAL_RCC_OscConfig+0x304>)
 8005a90:	2a01      	cmp	r2, #1
 8005a92:	d000      	beq.n	8005a96 <HAL_RCC_OscConfig+0x3a>
 8005a94:	e148      	b.n	8005d28 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005a96:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005a98:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8005a9e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8005aa4:	f7ff faf8 	bl	8005098 <HAL_GetTick>
 8005aa8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005aaa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005aac:	423b      	tst	r3, r7
 8005aae:	d100      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x56>
 8005ab0:	e133      	b.n	8005d1a <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005ab2:	21f8      	movs	r1, #248	@ 0xf8
 8005ab4:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8005ab6:	69a3      	ldr	r3, [r4, #24]
 8005ab8:	438a      	bics	r2, r1
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4313      	orrs	r3, r2
 8005abe:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ac0:	6a23      	ldr	r3, [r4, #32]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d000      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x6c>
 8005ac6:	e157      	b.n	8005d78 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8005ac8:	2000      	movs	r0, #0
 8005aca:	e02a      	b.n	8005b22 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005acc:	220c      	movs	r2, #12
 8005ace:	4da4      	ldr	r5, [pc, #656]	@ (8005d60 <HAL_RCC_OscConfig+0x304>)
 8005ad0:	686b      	ldr	r3, [r5, #4]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d006      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ad8:	686b      	ldr	r3, [r5, #4]
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d10a      	bne.n	8005af6 <HAL_RCC_OscConfig+0x9a>
 8005ae0:	686b      	ldr	r3, [r5, #4]
 8005ae2:	03db      	lsls	r3, r3, #15
 8005ae4:	d507      	bpl.n	8005af6 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae6:	682b      	ldr	r3, [r5, #0]
 8005ae8:	039b      	lsls	r3, r3, #14
 8005aea:	d5bf      	bpl.n	8005a6c <HAL_RCC_OscConfig+0x10>
 8005aec:	6863      	ldr	r3, [r4, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1bc      	bne.n	8005a6c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8005af2:	2001      	movs	r0, #1
 8005af4:	e015      	b.n	8005b22 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005af6:	6863      	ldr	r3, [r4, #4]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d114      	bne.n	8005b26 <HAL_RCC_OscConfig+0xca>
 8005afc:	2380      	movs	r3, #128	@ 0x80
 8005afe:	682a      	ldr	r2, [r5, #0]
 8005b00:	025b      	lsls	r3, r3, #9
 8005b02:	4313      	orrs	r3, r2
 8005b04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005b06:	f7ff fac7 	bl	8005098 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0a:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8005b0c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0e:	02bf      	lsls	r7, r7, #10
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	423b      	tst	r3, r7
 8005b14:	d1aa      	bne.n	8005a6c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b16:	f7ff fabf 	bl	8005098 <HAL_GetTick>
 8005b1a:	1b80      	subs	r0, r0, r6
 8005b1c:	2864      	cmp	r0, #100	@ 0x64
 8005b1e:	d9f7      	bls.n	8005b10 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8005b20:	2003      	movs	r0, #3
}
 8005b22:	b005      	add	sp, #20
 8005b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d116      	bne.n	8005b58 <HAL_RCC_OscConfig+0xfc>
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	4a8d      	ldr	r2, [pc, #564]	@ (8005d64 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2e:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b30:	4013      	ands	r3, r2
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	4a8c      	ldr	r2, [pc, #560]	@ (8005d68 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b38:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005b3e:	f7ff faab 	bl	8005098 <HAL_GetTick>
 8005b42:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	423b      	tst	r3, r7
 8005b48:	d100      	bne.n	8005b4c <HAL_RCC_OscConfig+0xf0>
 8005b4a:	e78f      	b.n	8005a6c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b4c:	f7ff faa4 	bl	8005098 <HAL_GetTick>
 8005b50:	1b80      	subs	r0, r0, r6
 8005b52:	2864      	cmp	r0, #100	@ 0x64
 8005b54:	d9f6      	bls.n	8005b44 <HAL_RCC_OscConfig+0xe8>
 8005b56:	e7e3      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b58:	2b05      	cmp	r3, #5
 8005b5a:	d105      	bne.n	8005b68 <HAL_RCC_OscConfig+0x10c>
 8005b5c:	2380      	movs	r3, #128	@ 0x80
 8005b5e:	682a      	ldr	r2, [r5, #0]
 8005b60:	02db      	lsls	r3, r3, #11
 8005b62:	4313      	orrs	r3, r2
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	e7c9      	b.n	8005afc <HAL_RCC_OscConfig+0xa0>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d64 <HAL_RCC_OscConfig+0x308>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	602b      	str	r3, [r5, #0]
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	4a7d      	ldr	r2, [pc, #500]	@ (8005d68 <HAL_RCC_OscConfig+0x30c>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	e7c5      	b.n	8005b04 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005b78:	220c      	movs	r2, #12
 8005b7a:	4d79      	ldr	r5, [pc, #484]	@ (8005d60 <HAL_RCC_OscConfig+0x304>)
 8005b7c:	686b      	ldr	r3, [r5, #4]
 8005b7e:	4213      	tst	r3, r2
 8005b80:	d006      	beq.n	8005b90 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005b82:	686b      	ldr	r3, [r5, #4]
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d110      	bne.n	8005bac <HAL_RCC_OscConfig+0x150>
 8005b8a:	686b      	ldr	r3, [r5, #4]
 8005b8c:	03db      	lsls	r3, r3, #15
 8005b8e:	d40d      	bmi.n	8005bac <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	079b      	lsls	r3, r3, #30
 8005b94:	d502      	bpl.n	8005b9c <HAL_RCC_OscConfig+0x140>
 8005b96:	68e3      	ldr	r3, [r4, #12]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d1aa      	bne.n	8005af2 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9c:	21f8      	movs	r1, #248	@ 0xf8
 8005b9e:	682a      	ldr	r2, [r5, #0]
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	438a      	bics	r2, r1
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	602b      	str	r3, [r5, #0]
 8005baa:	e763      	b.n	8005a74 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bac:	68e2      	ldr	r2, [r4, #12]
 8005bae:	2301      	movs	r3, #1
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	d00f      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8005bb4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb6:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005bbc:	f7ff fa6c 	bl	8005098 <HAL_GetTick>
 8005bc0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc2:	682b      	ldr	r3, [r5, #0]
 8005bc4:	423b      	tst	r3, r7
 8005bc6:	d1e9      	bne.n	8005b9c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc8:	f7ff fa66 	bl	8005098 <HAL_GetTick>
 8005bcc:	1b80      	subs	r0, r0, r6
 8005bce:	2802      	cmp	r0, #2
 8005bd0:	d9f7      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x166>
 8005bd2:	e7a5      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8005bd4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd6:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8005bd8:	439a      	bics	r2, r3
 8005bda:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8005bdc:	f7ff fa5c 	bl	8005098 <HAL_GetTick>
 8005be0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	423b      	tst	r3, r7
 8005be6:	d100      	bne.n	8005bea <HAL_RCC_OscConfig+0x18e>
 8005be8:	e744      	b.n	8005a74 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bea:	f7ff fa55 	bl	8005098 <HAL_GetTick>
 8005bee:	1b80      	subs	r0, r0, r6
 8005bf0:	2802      	cmp	r0, #2
 8005bf2:	d9f6      	bls.n	8005be2 <HAL_RCC_OscConfig+0x186>
 8005bf4:	e794      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bf6:	69e2      	ldr	r2, [r4, #28]
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4d59      	ldr	r5, [pc, #356]	@ (8005d60 <HAL_RCC_OscConfig+0x304>)
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	d010      	beq.n	8005c22 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8005c00:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c02:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8005c04:	4313      	orrs	r3, r2
 8005c06:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8005c08:	f7ff fa46 	bl	8005098 <HAL_GetTick>
 8005c0c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c0e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005c10:	423b      	tst	r3, r7
 8005c12:	d000      	beq.n	8005c16 <HAL_RCC_OscConfig+0x1ba>
 8005c14:	e732      	b.n	8005a7c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c16:	f7ff fa3f 	bl	8005098 <HAL_GetTick>
 8005c1a:	1b80      	subs	r0, r0, r6
 8005c1c:	2802      	cmp	r0, #2
 8005c1e:	d9f6      	bls.n	8005c0e <HAL_RCC_OscConfig+0x1b2>
 8005c20:	e77e      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8005c22:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c24:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8005c26:	439a      	bics	r2, r3
 8005c28:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8005c2a:	f7ff fa35 	bl	8005098 <HAL_GetTick>
 8005c2e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c30:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005c32:	423b      	tst	r3, r7
 8005c34:	d100      	bne.n	8005c38 <HAL_RCC_OscConfig+0x1dc>
 8005c36:	e721      	b.n	8005a7c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c38:	f7ff fa2e 	bl	8005098 <HAL_GetTick>
 8005c3c:	1b80      	subs	r0, r0, r6
 8005c3e:	2802      	cmp	r0, #2
 8005c40:	d9f6      	bls.n	8005c30 <HAL_RCC_OscConfig+0x1d4>
 8005c42:	e76d      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c44:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005c46:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c48:	4d45      	ldr	r5, [pc, #276]	@ (8005d60 <HAL_RCC_OscConfig+0x304>)
 8005c4a:	0552      	lsls	r2, r2, #21
 8005c4c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8005c4e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c50:	4213      	tst	r3, r2
 8005c52:	d108      	bne.n	8005c66 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c54:	69eb      	ldr	r3, [r5, #28]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61eb      	str	r3, [r5, #28]
 8005c5a:	69eb      	ldr	r3, [r5, #28]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	9303      	str	r3, [sp, #12]
 8005c60:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8005c62:	2301      	movs	r3, #1
 8005c64:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c66:	2780      	movs	r7, #128	@ 0x80
 8005c68:	4e40      	ldr	r6, [pc, #256]	@ (8005d6c <HAL_RCC_OscConfig+0x310>)
 8005c6a:	007f      	lsls	r7, r7, #1
 8005c6c:	6833      	ldr	r3, [r6, #0]
 8005c6e:	423b      	tst	r3, r7
 8005c70:	d015      	beq.n	8005c9e <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d122      	bne.n	8005cbe <HAL_RCC_OscConfig+0x262>
 8005c78:	6a2a      	ldr	r2, [r5, #32]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8005c7e:	f7ff fa0b 	bl	8005098 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c82:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8005c84:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c86:	6a2b      	ldr	r3, [r5, #32]
 8005c88:	423b      	tst	r3, r7
 8005c8a:	d03f      	beq.n	8005d0c <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8005c8c:	9b00      	ldr	r3, [sp, #0]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d000      	beq.n	8005c94 <HAL_RCC_OscConfig+0x238>
 8005c92:	e6f7      	b.n	8005a84 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c94:	69eb      	ldr	r3, [r5, #28]
 8005c96:	4a36      	ldr	r2, [pc, #216]	@ (8005d70 <HAL_RCC_OscConfig+0x314>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61eb      	str	r3, [r5, #28]
 8005c9c:	e6f2      	b.n	8005a84 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c9e:	6833      	ldr	r3, [r6, #0]
 8005ca0:	433b      	orrs	r3, r7
 8005ca2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005ca4:	f7ff f9f8 	bl	8005098 <HAL_GetTick>
 8005ca8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005caa:	6833      	ldr	r3, [r6, #0]
 8005cac:	423b      	tst	r3, r7
 8005cae:	d1e0      	bne.n	8005c72 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb0:	f7ff f9f2 	bl	8005098 <HAL_GetTick>
 8005cb4:	9b01      	ldr	r3, [sp, #4]
 8005cb6:	1ac0      	subs	r0, r0, r3
 8005cb8:	2864      	cmp	r0, #100	@ 0x64
 8005cba:	d9f6      	bls.n	8005caa <HAL_RCC_OscConfig+0x24e>
 8005cbc:	e730      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d114      	bne.n	8005cee <HAL_RCC_OscConfig+0x292>
 8005cc4:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cc6:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cc8:	4393      	bics	r3, r2
 8005cca:	622b      	str	r3, [r5, #32]
 8005ccc:	6a2b      	ldr	r3, [r5, #32]
 8005cce:	3203      	adds	r2, #3
 8005cd0:	4393      	bics	r3, r2
 8005cd2:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8005cd4:	f7ff f9e0 	bl	8005098 <HAL_GetTick>
 8005cd8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cda:	6a2b      	ldr	r3, [r5, #32]
 8005cdc:	423b      	tst	r3, r7
 8005cde:	d0d5      	beq.n	8005c8c <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ce0:	f7ff f9da 	bl	8005098 <HAL_GetTick>
 8005ce4:	4b23      	ldr	r3, [pc, #140]	@ (8005d74 <HAL_RCC_OscConfig+0x318>)
 8005ce6:	1b80      	subs	r0, r0, r6
 8005ce8:	4298      	cmp	r0, r3
 8005cea:	d9f6      	bls.n	8005cda <HAL_RCC_OscConfig+0x27e>
 8005cec:	e718      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d105      	bne.n	8005cfe <HAL_RCC_OscConfig+0x2a2>
 8005cf2:	6a29      	ldr	r1, [r5, #32]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	622b      	str	r3, [r5, #32]
 8005cfa:	6a2b      	ldr	r3, [r5, #32]
 8005cfc:	e7bd      	b.n	8005c7a <HAL_RCC_OscConfig+0x21e>
 8005cfe:	6a2b      	ldr	r3, [r5, #32]
 8005d00:	4393      	bics	r3, r2
 8005d02:	2204      	movs	r2, #4
 8005d04:	622b      	str	r3, [r5, #32]
 8005d06:	6a2b      	ldr	r3, [r5, #32]
 8005d08:	4393      	bics	r3, r2
 8005d0a:	e7b7      	b.n	8005c7c <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d0c:	f7ff f9c4 	bl	8005098 <HAL_GetTick>
 8005d10:	4b18      	ldr	r3, [pc, #96]	@ (8005d74 <HAL_RCC_OscConfig+0x318>)
 8005d12:	1b80      	subs	r0, r0, r6
 8005d14:	4298      	cmp	r0, r3
 8005d16:	d9b6      	bls.n	8005c86 <HAL_RCC_OscConfig+0x22a>
 8005d18:	e702      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005d1a:	f7ff f9bd 	bl	8005098 <HAL_GetTick>
 8005d1e:	1b80      	subs	r0, r0, r6
 8005d20:	2802      	cmp	r0, #2
 8005d22:	d800      	bhi.n	8005d26 <HAL_RCC_OscConfig+0x2ca>
 8005d24:	e6c1      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e>
 8005d26:	e6fb      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005d28:	3205      	adds	r2, #5
 8005d2a:	d103      	bne.n	8005d34 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8005d2c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8005d2e:	439a      	bics	r2, r3
 8005d30:	636a      	str	r2, [r5, #52]	@ 0x34
 8005d32:	e6be      	b.n	8005ab2 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8005d34:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005d36:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8005d38:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8005d3a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8005d3c:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8005d3e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005d40:	4393      	bics	r3, r2
 8005d42:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8005d44:	f7ff f9a8 	bl	8005098 <HAL_GetTick>
 8005d48:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005d4a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005d4c:	423b      	tst	r3, r7
 8005d4e:	d100      	bne.n	8005d52 <HAL_RCC_OscConfig+0x2f6>
 8005d50:	e6b6      	b.n	8005ac0 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005d52:	f7ff f9a1 	bl	8005098 <HAL_GetTick>
 8005d56:	1b80      	subs	r0, r0, r6
 8005d58:	2802      	cmp	r0, #2
 8005d5a:	d9f6      	bls.n	8005d4a <HAL_RCC_OscConfig+0x2ee>
 8005d5c:	e6e0      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
 8005d5e:	46c0      	nop			@ (mov r8, r8)
 8005d60:	40021000 	.word	0x40021000
 8005d64:	fffeffff 	.word	0xfffeffff
 8005d68:	fffbffff 	.word	0xfffbffff
 8005d6c:	40007000 	.word	0x40007000
 8005d70:	efffffff 	.word	0xefffffff
 8005d74:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d78:	210c      	movs	r1, #12
 8005d7a:	4d34      	ldr	r5, [pc, #208]	@ (8005e4c <HAL_RCC_OscConfig+0x3f0>)
 8005d7c:	686a      	ldr	r2, [r5, #4]
 8005d7e:	400a      	ands	r2, r1
 8005d80:	2a08      	cmp	r2, #8
 8005d82:	d047      	beq.n	8005e14 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d84:	4a32      	ldr	r2, [pc, #200]	@ (8005e50 <HAL_RCC_OscConfig+0x3f4>)
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d132      	bne.n	8005df0 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8005d8a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d8c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8005d8e:	4013      	ands	r3, r2
 8005d90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005d92:	f7ff f981 	bl	8005098 <HAL_GetTick>
 8005d96:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d98:	04bf      	lsls	r7, r7, #18
 8005d9a:	682b      	ldr	r3, [r5, #0]
 8005d9c:	423b      	tst	r3, r7
 8005d9e:	d121      	bne.n	8005de4 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005da0:	220f      	movs	r2, #15
 8005da2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005da4:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005da6:	4393      	bics	r3, r2
 8005da8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005daa:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dac:	4313      	orrs	r3, r2
 8005dae:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8005db0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005db2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005db4:	686a      	ldr	r2, [r5, #4]
 8005db6:	430b      	orrs	r3, r1
 8005db8:	4926      	ldr	r1, [pc, #152]	@ (8005e54 <HAL_RCC_OscConfig+0x3f8>)
 8005dba:	400a      	ands	r2, r1
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005dc0:	2380      	movs	r3, #128	@ 0x80
 8005dc2:	682a      	ldr	r2, [r5, #0]
 8005dc4:	045b      	lsls	r3, r3, #17
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005dca:	f7ff f965 	bl	8005098 <HAL_GetTick>
 8005dce:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	4233      	tst	r3, r6
 8005dd4:	d000      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x37c>
 8005dd6:	e677      	b.n	8005ac8 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd8:	f7ff f95e 	bl	8005098 <HAL_GetTick>
 8005ddc:	1b00      	subs	r0, r0, r4
 8005dde:	2802      	cmp	r0, #2
 8005de0:	d9f6      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x374>
 8005de2:	e69d      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de4:	f7ff f958 	bl	8005098 <HAL_GetTick>
 8005de8:	1b80      	subs	r0, r0, r6
 8005dea:	2802      	cmp	r0, #2
 8005dec:	d9d5      	bls.n	8005d9a <HAL_RCC_OscConfig+0x33e>
 8005dee:	e697      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8005df0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005df2:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8005df4:	4013      	ands	r3, r2
 8005df6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005df8:	f7ff f94e 	bl	8005098 <HAL_GetTick>
 8005dfc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dfe:	04b6      	lsls	r6, r6, #18
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	4233      	tst	r3, r6
 8005e04:	d100      	bne.n	8005e08 <HAL_RCC_OscConfig+0x3ac>
 8005e06:	e65f      	b.n	8005ac8 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e08:	f7ff f946 	bl	8005098 <HAL_GetTick>
 8005e0c:	1b00      	subs	r0, r0, r4
 8005e0e:	2802      	cmp	r0, #2
 8005e10:	d9f6      	bls.n	8005e00 <HAL_RCC_OscConfig+0x3a4>
 8005e12:	e685      	b.n	8005b20 <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d100      	bne.n	8005e1a <HAL_RCC_OscConfig+0x3be>
 8005e18:	e66b      	b.n	8005af2 <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1a:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8005e1c:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005e20:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8005e22:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e24:	4002      	ands	r2, r0
 8005e26:	428a      	cmp	r2, r1
 8005e28:	d000      	beq.n	8005e2c <HAL_RCC_OscConfig+0x3d0>
 8005e2a:	e662      	b.n	8005af2 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005e2c:	220f      	movs	r2, #15
 8005e2e:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e30:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d000      	beq.n	8005e38 <HAL_RCC_OscConfig+0x3dc>
 8005e36:	e65c      	b.n	8005af2 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005e38:	23f0      	movs	r3, #240	@ 0xf0
 8005e3a:	039b      	lsls	r3, r3, #14
 8005e3c:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005e3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005e40:	1ac0      	subs	r0, r0, r3
 8005e42:	1e43      	subs	r3, r0, #1
 8005e44:	4198      	sbcs	r0, r3
 8005e46:	b2c0      	uxtb	r0, r0
 8005e48:	e66b      	b.n	8005b22 <HAL_RCC_OscConfig+0xc6>
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	feffffff 	.word	0xfeffffff
 8005e54:	ffc2ffff 	.word	0xffc2ffff

08005e58 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e58:	220c      	movs	r2, #12
{
 8005e5a:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8005e5c:	4d0e      	ldr	r5, [pc, #56]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x40>)
 8005e5e:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005e60:	401a      	ands	r2, r3
 8005e62:	2a04      	cmp	r2, #4
 8005e64:	d013      	beq.n	8005e8e <HAL_RCC_GetSysClockFreq+0x36>
 8005e66:	2a08      	cmp	r2, #8
 8005e68:	d113      	bne.n	8005e92 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005e6a:	200f      	movs	r0, #15
 8005e6c:	490b      	ldr	r1, [pc, #44]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x44>)
 8005e6e:	0c9a      	lsrs	r2, r3, #18
 8005e70:	4002      	ands	r2, r0
 8005e72:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005e74:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e76:	03db      	lsls	r3, r3, #15
 8005e78:	d507      	bpl.n	8005e8a <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005e7a:	4909      	ldr	r1, [pc, #36]	@ (8005ea0 <HAL_RCC_GetSysClockFreq+0x48>)
 8005e7c:	4002      	ands	r2, r0
 8005e7e:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e80:	4808      	ldr	r0, [pc, #32]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x4c>)
 8005e82:	f7fa f967 	bl	8000154 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005e86:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005e88:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005e8a:	4807      	ldr	r0, [pc, #28]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0x50>)
 8005e8c:	e7fb      	b.n	8005e86 <HAL_RCC_GetSysClockFreq+0x2e>
      sysclockfreq = HSE_VALUE;
 8005e8e:	4805      	ldr	r0, [pc, #20]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x4c>)
 8005e90:	e7fa      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0x30>
  switch (tmpreg & RCC_CFGR_SWS)
 8005e92:	4806      	ldr	r0, [pc, #24]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x54>)
  return sysclockfreq;
 8005e94:	e7f8      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0x30>
 8005e96:	46c0      	nop			@ (mov r8, r8)
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	0800cfc8 	.word	0x0800cfc8
 8005ea0:	0800cfb8 	.word	0x0800cfb8
 8005ea4:	00f42400 	.word	0x00f42400
 8005ea8:	003d0900 	.word	0x003d0900
 8005eac:	007a1200 	.word	0x007a1200

08005eb0 <HAL_RCC_ClockConfig>:
{
 8005eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eb2:	0004      	movs	r4, r0
 8005eb4:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8005eba:	2001      	movs	r0, #1
}
 8005ebc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4d37      	ldr	r5, [pc, #220]	@ (8005fa0 <HAL_RCC_ClockConfig+0xf0>)
 8005ec2:	682b      	ldr	r3, [r5, #0]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	428b      	cmp	r3, r1
 8005ec8:	d31c      	bcc.n	8005f04 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	0793      	lsls	r3, r2, #30
 8005ece:	d422      	bmi.n	8005f16 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed0:	07d2      	lsls	r2, r2, #31
 8005ed2:	d42f      	bmi.n	8005f34 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	682a      	ldr	r2, [r5, #0]
 8005ed8:	401a      	ands	r2, r3
 8005eda:	42b2      	cmp	r2, r6
 8005edc:	d851      	bhi.n	8005f82 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	4d30      	ldr	r5, [pc, #192]	@ (8005fa4 <HAL_RCC_ClockConfig+0xf4>)
 8005ee2:	075b      	lsls	r3, r3, #29
 8005ee4:	d454      	bmi.n	8005f90 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ee6:	f7ff ffb7 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8005eea:	686b      	ldr	r3, [r5, #4]
 8005eec:	4a2e      	ldr	r2, [pc, #184]	@ (8005fa8 <HAL_RCC_ClockConfig+0xf8>)
 8005eee:	061b      	lsls	r3, r3, #24
 8005ef0:	0f1b      	lsrs	r3, r3, #28
 8005ef2:	5cd3      	ldrb	r3, [r2, r3]
 8005ef4:	492d      	ldr	r1, [pc, #180]	@ (8005fac <HAL_RCC_ClockConfig+0xfc>)
 8005ef6:	40d8      	lsrs	r0, r3
 8005ef8:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8005efa:	2001      	movs	r0, #1
 8005efc:	f7ff f88c 	bl	8005018 <HAL_InitTick>
  return HAL_OK;
 8005f00:	2000      	movs	r0, #0
 8005f02:	e7db      	b.n	8005ebc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	4393      	bics	r3, r2
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	428b      	cmp	r3, r1
 8005f12:	d1d2      	bne.n	8005eba <HAL_RCC_ClockConfig+0xa>
 8005f14:	e7d9      	b.n	8005eca <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f16:	4923      	ldr	r1, [pc, #140]	@ (8005fa4 <HAL_RCC_ClockConfig+0xf4>)
 8005f18:	0753      	lsls	r3, r2, #29
 8005f1a:	d504      	bpl.n	8005f26 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005f1c:	23e0      	movs	r3, #224	@ 0xe0
 8005f1e:	6848      	ldr	r0, [r1, #4]
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	4303      	orrs	r3, r0
 8005f24:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f26:	20f0      	movs	r0, #240	@ 0xf0
 8005f28:	684b      	ldr	r3, [r1, #4]
 8005f2a:	4383      	bics	r3, r0
 8005f2c:	68a0      	ldr	r0, [r4, #8]
 8005f2e:	4303      	orrs	r3, r0
 8005f30:	604b      	str	r3, [r1, #4]
 8005f32:	e7cd      	b.n	8005ed0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f34:	4f1b      	ldr	r7, [pc, #108]	@ (8005fa4 <HAL_RCC_ClockConfig+0xf4>)
 8005f36:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f38:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f3a:	2a01      	cmp	r2, #1
 8005f3c:	d119      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f3e:	039b      	lsls	r3, r3, #14
 8005f40:	d5bb      	bpl.n	8005eba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f42:	2103      	movs	r1, #3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	438b      	bics	r3, r1
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8005f4c:	f7ff f8a4 	bl	8005098 <HAL_GetTick>
 8005f50:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f52:	230c      	movs	r3, #12
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	401a      	ands	r2, r3
 8005f58:	6863      	ldr	r3, [r4, #4]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d0b9      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f60:	f7ff f89a 	bl	8005098 <HAL_GetTick>
 8005f64:	9b01      	ldr	r3, [sp, #4]
 8005f66:	1ac0      	subs	r0, r0, r3
 8005f68:	4b11      	ldr	r3, [pc, #68]	@ (8005fb0 <HAL_RCC_ClockConfig+0x100>)
 8005f6a:	4298      	cmp	r0, r3
 8005f6c:	d9f1      	bls.n	8005f52 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8005f6e:	2003      	movs	r0, #3
 8005f70:	e7a4      	b.n	8005ebc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f72:	2a02      	cmp	r2, #2
 8005f74:	d102      	bne.n	8005f7c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f76:	019b      	lsls	r3, r3, #6
 8005f78:	d4e3      	bmi.n	8005f42 <HAL_RCC_ClockConfig+0x92>
 8005f7a:	e79e      	b.n	8005eba <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f7c:	079b      	lsls	r3, r3, #30
 8005f7e:	d4e0      	bmi.n	8005f42 <HAL_RCC_ClockConfig+0x92>
 8005f80:	e79b      	b.n	8005eba <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f82:	682a      	ldr	r2, [r5, #0]
 8005f84:	439a      	bics	r2, r3
 8005f86:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f88:	682a      	ldr	r2, [r5, #0]
 8005f8a:	421a      	tst	r2, r3
 8005f8c:	d0a7      	beq.n	8005ede <HAL_RCC_ClockConfig+0x2e>
 8005f8e:	e794      	b.n	8005eba <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f90:	686b      	ldr	r3, [r5, #4]
 8005f92:	4a08      	ldr	r2, [pc, #32]	@ (8005fb4 <HAL_RCC_ClockConfig+0x104>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	68e2      	ldr	r2, [r4, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	606b      	str	r3, [r5, #4]
 8005f9c:	e7a3      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x36>
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	40022000 	.word	0x40022000
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	0800cfa8 	.word	0x0800cfa8
 8005fac:	20000038 	.word	0x20000038
 8005fb0:	00001388 	.word	0x00001388
 8005fb4:	fffff8ff 	.word	0xfffff8ff

08005fb8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005fb8:	4b04      	ldr	r3, [pc, #16]	@ (8005fcc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8005fba:	4a05      	ldr	r2, [pc, #20]	@ (8005fd0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4905      	ldr	r1, [pc, #20]	@ (8005fd4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005fc0:	055b      	lsls	r3, r3, #21
 8005fc2:	0f5b      	lsrs	r3, r3, #29
 8005fc4:	5ccb      	ldrb	r3, [r1, r3]
 8005fc6:	6810      	ldr	r0, [r2, #0]
 8005fc8:	40d8      	lsrs	r0, r3
}    
 8005fca:	4770      	bx	lr
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	20000038 	.word	0x20000038
 8005fd4:	0800cfa0 	.word	0x0800cfa0

08005fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fda:	6803      	ldr	r3, [r0, #0]
{
 8005fdc:	0005      	movs	r5, r0
 8005fde:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fe0:	03db      	lsls	r3, r3, #15
 8005fe2:	d52b      	bpl.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fe4:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005fe6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fe8:	4c38      	ldr	r4, [pc, #224]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8005fea:	0552      	lsls	r2, r2, #21
 8005fec:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8005fee:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ff0:	4213      	tst	r3, r2
 8005ff2:	d108      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ff4:	69e3      	ldr	r3, [r4, #28]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	61e3      	str	r3, [r4, #28]
 8005ffa:	69e3      	ldr	r3, [r4, #28]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	9303      	str	r3, [sp, #12]
 8006000:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8006002:	2301      	movs	r3, #1
 8006004:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006006:	2780      	movs	r7, #128	@ 0x80
 8006008:	4e31      	ldr	r6, [pc, #196]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800600a:	007f      	lsls	r7, r7, #1
 800600c:	6833      	ldr	r3, [r6, #0]
 800600e:	423b      	tst	r3, r7
 8006010:	d022      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006012:	6a21      	ldr	r1, [r4, #32]
 8006014:	22c0      	movs	r2, #192	@ 0xc0
 8006016:	0008      	movs	r0, r1
 8006018:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800601a:	686b      	ldr	r3, [r5, #4]
 800601c:	4e2d      	ldr	r6, [pc, #180]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800601e:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006020:	4211      	tst	r1, r2
 8006022:	d12b      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006024:	6a23      	ldr	r3, [r4, #32]
 8006026:	686a      	ldr	r2, [r5, #4]
 8006028:	4033      	ands	r3, r6
 800602a:	4313      	orrs	r3, r2
 800602c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800602e:	9b00      	ldr	r3, [sp, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d103      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006034:	69e3      	ldr	r3, [r4, #28]
 8006036:	4a28      	ldr	r2, [pc, #160]	@ (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8006038:	4013      	ands	r3, r2
 800603a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800603c:	682a      	ldr	r2, [r5, #0]
 800603e:	07d3      	lsls	r3, r2, #31
 8006040:	d506      	bpl.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006042:	2003      	movs	r0, #3
 8006044:	4921      	ldr	r1, [pc, #132]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8006046:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8006048:	4383      	bics	r3, r0
 800604a:	68a8      	ldr	r0, [r5, #8]
 800604c:	4303      	orrs	r3, r0
 800604e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006050:	0692      	lsls	r2, r2, #26
 8006052:	d433      	bmi.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006054:	2000      	movs	r0, #0
 8006056:	e00f      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006058:	6833      	ldr	r3, [r6, #0]
 800605a:	433b      	orrs	r3, r7
 800605c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800605e:	f7ff f81b 	bl	8005098 <HAL_GetTick>
 8006062:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006064:	6833      	ldr	r3, [r6, #0]
 8006066:	423b      	tst	r3, r7
 8006068:	d1d3      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606a:	f7ff f815 	bl	8005098 <HAL_GetTick>
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	1ac0      	subs	r0, r0, r3
 8006072:	2864      	cmp	r0, #100	@ 0x64
 8006074:	d9f6      	bls.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8006076:	2003      	movs	r0, #3
}
 8006078:	b005      	add	sp, #20
 800607a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800607c:	4013      	ands	r3, r2
 800607e:	4283      	cmp	r3, r0
 8006080:	d0d0      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006082:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006084:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8006086:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006088:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800608a:	0252      	lsls	r2, r2, #9
 800608c:	4302      	orrs	r2, r0
 800608e:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006090:	6a22      	ldr	r2, [r4, #32]
 8006092:	4812      	ldr	r0, [pc, #72]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006094:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006096:	4002      	ands	r2, r0
 8006098:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 800609a:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800609c:	07db      	lsls	r3, r3, #31
 800609e:	d5c1      	bpl.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 80060a0:	f7fe fffa 	bl	8005098 <HAL_GetTick>
 80060a4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a6:	2202      	movs	r2, #2
 80060a8:	6a23      	ldr	r3, [r4, #32]
 80060aa:	4213      	tst	r3, r2
 80060ac:	d1ba      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ae:	f7fe fff3 	bl	8005098 <HAL_GetTick>
 80060b2:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80060b4:	1bc0      	subs	r0, r0, r7
 80060b6:	4298      	cmp	r0, r3
 80060b8:	d9f5      	bls.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80060ba:	e7dc      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060bc:	2110      	movs	r1, #16
 80060be:	4a03      	ldr	r2, [pc, #12]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80060c0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80060c2:	438b      	bics	r3, r1
 80060c4:	68e9      	ldr	r1, [r5, #12]
 80060c6:	430b      	orrs	r3, r1
 80060c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80060ca:	e7c3      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060cc:	40021000 	.word	0x40021000
 80060d0:	40007000 	.word	0x40007000
 80060d4:	fffffcff 	.word	0xfffffcff
 80060d8:	efffffff 	.word	0xefffffff
 80060dc:	fffeffff 	.word	0xfffeffff
 80060e0:	00001388 	.word	0x00001388

080060e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80060e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060e6:	000e      	movs	r6, r1
 80060e8:	b085      	sub	sp, #20
 80060ea:	0015      	movs	r5, r2
 80060ec:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060ee:	f7fe ffd3 	bl	8005098 <HAL_GetTick>
 80060f2:	19ad      	adds	r5, r5, r6
 80060f4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80060f6:	f7fe ffcf 	bl	8005098 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060fa:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060fc:	4b25      	ldr	r3, [pc, #148]	@ (8006194 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80060fe:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	015b      	lsls	r3, r3, #5
 8006104:	0d1b      	lsrs	r3, r3, #20
 8006106:	436b      	muls	r3, r5
 8006108:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	6893      	ldr	r3, [r2, #8]
 800610e:	0018      	movs	r0, r3
 8006110:	4038      	ands	r0, r7
 8006112:	423b      	tst	r3, r7
 8006114:	d032      	beq.n	800617c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006116:	1c73      	adds	r3, r6, #1
 8006118:	d0f8      	beq.n	800610c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800611a:	f7fe ffbd 	bl	8005098 <HAL_GetTick>
 800611e:	9b01      	ldr	r3, [sp, #4]
 8006120:	1ac0      	subs	r0, r0, r3
 8006122:	42a8      	cmp	r0, r5
 8006124:	d32c      	bcc.n	8006180 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006126:	21e0      	movs	r1, #224	@ 0xe0
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	438a      	bics	r2, r1
 800612e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006130:	2282      	movs	r2, #130	@ 0x82
 8006132:	6861      	ldr	r1, [r4, #4]
 8006134:	0052      	lsls	r2, r2, #1
 8006136:	4291      	cmp	r1, r2
 8006138:	d10c      	bne.n	8006154 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 800613a:	2180      	movs	r1, #128	@ 0x80
 800613c:	68a2      	ldr	r2, [r4, #8]
 800613e:	0209      	lsls	r1, r1, #8
 8006140:	428a      	cmp	r2, r1
 8006142:	d003      	beq.n	800614c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006144:	2180      	movs	r1, #128	@ 0x80
 8006146:	00c9      	lsls	r1, r1, #3
 8006148:	428a      	cmp	r2, r1
 800614a:	d103      	bne.n	8006154 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800614c:	2140      	movs	r1, #64	@ 0x40
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	438a      	bics	r2, r1
 8006152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006154:	2180      	movs	r1, #128	@ 0x80
 8006156:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006158:	0189      	lsls	r1, r1, #6
 800615a:	428a      	cmp	r2, r1
 800615c:	d106      	bne.n	800616c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 800615e:	6819      	ldr	r1, [r3, #0]
 8006160:	480d      	ldr	r0, [pc, #52]	@ (8006198 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8006162:	4001      	ands	r1, r0
 8006164:	6019      	str	r1, [r3, #0]
 8006166:	6819      	ldr	r1, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800616c:	0023      	movs	r3, r4
 800616e:	2201      	movs	r2, #1
 8006170:	335d      	adds	r3, #93	@ 0x5d
 8006172:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006174:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8006176:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8006178:	345c      	adds	r4, #92	@ 0x5c
 800617a:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 800617c:	b005      	add	sp, #20
 800617e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d000      	beq.n	8006188 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 8006186:	002b      	movs	r3, r5
      count--;
 8006188:	9a03      	ldr	r2, [sp, #12]
 800618a:	001d      	movs	r5, r3
 800618c:	3a01      	subs	r2, #1
 800618e:	9203      	str	r2, [sp, #12]
 8006190:	e7bb      	b.n	800610a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8006192:	46c0      	nop			@ (mov r8, r8)
 8006194:	20000038 	.word	0x20000038
 8006198:	ffffdfff 	.word	0xffffdfff

0800619c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800619c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619e:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061a0:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80061a2:	b085      	sub	sp, #20
 80061a4:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 80061a6:	ab02      	add	r3, sp, #8
 80061a8:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80061aa:	0004      	movs	r4, r0
 80061ac:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061ae:	f7fe ff73 	bl	8005098 <HAL_GetTick>
 80061b2:	19ed      	adds	r5, r5, r7
 80061b4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80061b6:	f7fe ff6f 	bl	8005098 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061ba:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061bc:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 80061be:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061c0:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061c2:	4b2a      	ldr	r3, [pc, #168]	@ (800626c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4353      	muls	r3, r2
 80061c8:	0d1b      	lsrs	r3, r3, #20
 80061ca:	436b      	muls	r3, r5
 80061cc:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061ce:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 80061d0:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 80061d2:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 80061d4:	688b      	ldr	r3, [r1, #8]
 80061d6:	0018      	movs	r0, r3
 80061d8:	4030      	ands	r0, r6
 80061da:	4233      	tst	r3, r6
 80061dc:	d03b      	beq.n	8006256 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061de:	23c0      	movs	r3, #192	@ 0xc0
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	429e      	cmp	r6, r3
 80061e4:	d104      	bne.n	80061f0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 80061e6:	9b01      	ldr	r3, [sp, #4]
 80061e8:	7b1b      	ldrb	r3, [r3, #12]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061ee:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061f0:	1c7b      	adds	r3, r7, #1
 80061f2:	d0ef      	beq.n	80061d4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061f4:	f7fe ff50 	bl	8005098 <HAL_GetTick>
 80061f8:	9b00      	ldr	r3, [sp, #0]
 80061fa:	1ac0      	subs	r0, r0, r3
 80061fc:	42a8      	cmp	r0, r5
 80061fe:	d32c      	bcc.n	800625a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006200:	21e0      	movs	r1, #224	@ 0xe0
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	438a      	bics	r2, r1
 8006208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620a:	2282      	movs	r2, #130	@ 0x82
 800620c:	6861      	ldr	r1, [r4, #4]
 800620e:	0052      	lsls	r2, r2, #1
 8006210:	4291      	cmp	r1, r2
 8006212:	d10c      	bne.n	800622e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8006214:	2180      	movs	r1, #128	@ 0x80
 8006216:	68a2      	ldr	r2, [r4, #8]
 8006218:	0209      	lsls	r1, r1, #8
 800621a:	428a      	cmp	r2, r1
 800621c:	d003      	beq.n	8006226 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800621e:	2180      	movs	r1, #128	@ 0x80
 8006220:	00c9      	lsls	r1, r1, #3
 8006222:	428a      	cmp	r2, r1
 8006224:	d103      	bne.n	800622e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006226:	2140      	movs	r1, #64	@ 0x40
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	438a      	bics	r2, r1
 800622c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800622e:	2180      	movs	r1, #128	@ 0x80
 8006230:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006232:	0189      	lsls	r1, r1, #6
 8006234:	428a      	cmp	r2, r1
 8006236:	d106      	bne.n	8006246 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	480d      	ldr	r0, [pc, #52]	@ (8006270 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 800623c:	4001      	ands	r1, r0
 800623e:	6019      	str	r1, [r3, #0]
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006246:	0023      	movs	r3, r4
 8006248:	2201      	movs	r2, #1
 800624a:	335d      	adds	r3, #93	@ 0x5d
 800624c:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800624e:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8006250:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8006252:	345c      	adds	r4, #92	@ 0x5c
 8006254:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8006256:	b005      	add	sp, #20
 8006258:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d000      	beq.n	8006262 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8006260:	002b      	movs	r3, r5
      count--;
 8006262:	9a03      	ldr	r2, [sp, #12]
 8006264:	001d      	movs	r5, r3
 8006266:	3a01      	subs	r2, #1
 8006268:	9203      	str	r2, [sp, #12]
 800626a:	e7b0      	b.n	80061ce <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 800626c:	20000038 	.word	0x20000038
 8006270:	ffffdfff 	.word	0xffffdfff

08006274 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006276:	2382      	movs	r3, #130	@ 0x82
{
 8006278:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800627a:	6842      	ldr	r2, [r0, #4]
{
 800627c:	0004      	movs	r4, r0
 800627e:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	429a      	cmp	r2, r3
 8006284:	d10d      	bne.n	80062a2 <SPI_EndRxTransaction+0x2e>
 8006286:	2280      	movs	r2, #128	@ 0x80
 8006288:	6883      	ldr	r3, [r0, #8]
 800628a:	0212      	lsls	r2, r2, #8
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006290:	2280      	movs	r2, #128	@ 0x80
 8006292:	00d2      	lsls	r2, r2, #3
 8006294:	4293      	cmp	r3, r2
 8006296:	d104      	bne.n	80062a2 <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006298:	2140      	movs	r1, #64	@ 0x40
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	6813      	ldr	r3, [r2, #0]
 800629e:	438b      	bics	r3, r1
 80062a0:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062a2:	003a      	movs	r2, r7
 80062a4:	0031      	movs	r1, r6
 80062a6:	0020      	movs	r0, r4
 80062a8:	f7ff ff1c 	bl	80060e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80062ac:	1e05      	subs	r5, r0, #0
 80062ae:	d005      	beq.n	80062bc <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b0:	2320      	movs	r3, #32
 80062b2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062b4:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b6:	4313      	orrs	r3, r2
 80062b8:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 80062ba:	e016      	b.n	80062ea <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062bc:	2382      	movs	r3, #130	@ 0x82
 80062be:	6862      	ldr	r2, [r4, #4]
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d111      	bne.n	80062ea <SPI_EndRxTransaction+0x76>
 80062c6:	2280      	movs	r2, #128	@ 0x80
 80062c8:	68a3      	ldr	r3, [r4, #8]
 80062ca:	0212      	lsls	r2, r2, #8
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062d0:	2280      	movs	r2, #128	@ 0x80
 80062d2:	00d2      	lsls	r2, r2, #3
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d108      	bne.n	80062ea <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062d8:	21c0      	movs	r1, #192	@ 0xc0
 80062da:	003b      	movs	r3, r7
 80062dc:	0032      	movs	r2, r6
 80062de:	0020      	movs	r0, r4
 80062e0:	00c9      	lsls	r1, r1, #3
 80062e2:	f7ff ff5b 	bl	800619c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d1e2      	bne.n	80062b0 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 80062ea:	0028      	movs	r0, r5
 80062ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062ee <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062ee:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062f0:	0013      	movs	r3, r2
{
 80062f2:	000d      	movs	r5, r1
 80062f4:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062f6:	000a      	movs	r2, r1
 80062f8:	21c0      	movs	r1, #192	@ 0xc0
 80062fa:	0149      	lsls	r1, r1, #5
{
 80062fc:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062fe:	f7ff ff4d 	bl	800619c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006302:	2800      	cmp	r0, #0
 8006304:	d005      	beq.n	8006312 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006306:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8006308:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800630a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800630c:	4313      	orrs	r3, r2
 800630e:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8006310:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006312:	0032      	movs	r2, r6
 8006314:	0029      	movs	r1, r5
 8006316:	0020      	movs	r0, r4
 8006318:	f7ff fee4 	bl	80060e4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800631c:	2800      	cmp	r0, #0
 800631e:	d1f2      	bne.n	8006306 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006320:	21c0      	movs	r1, #192	@ 0xc0
 8006322:	0033      	movs	r3, r6
 8006324:	002a      	movs	r2, r5
 8006326:	0020      	movs	r0, r4
 8006328:	00c9      	lsls	r1, r1, #3
 800632a:	f7ff ff37 	bl	800619c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800632e:	2800      	cmp	r0, #0
 8006330:	d0ee      	beq.n	8006310 <SPI_EndRxTxTransaction+0x22>
 8006332:	e7e8      	b.n	8006306 <SPI_EndRxTxTransaction+0x18>

08006334 <HAL_SPI_Init>:
{
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006338:	2001      	movs	r0, #1
  if (hspi == NULL)
 800633a:	2c00      	cmp	r4, #0
 800633c:	d067      	beq.n	800640e <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800633e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d165      	bne.n	8006410 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006344:	2282      	movs	r2, #130	@ 0x82
 8006346:	6861      	ldr	r1, [r4, #4]
 8006348:	0052      	lsls	r2, r2, #1
 800634a:	4291      	cmp	r1, r2
 800634c:	d000      	beq.n	8006350 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800634e:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006350:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006352:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006354:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006356:	355d      	adds	r5, #93	@ 0x5d
 8006358:	782b      	ldrb	r3, [r5, #0]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8006360:	0023      	movs	r3, r4
 8006362:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006364:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006366:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8006368:	f7fe fce2 	bl	8004d30 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800636c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800636e:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8006370:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8006372:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006374:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8006376:	680b      	ldr	r3, [r1, #0]
 8006378:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800637a:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 800637c:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800637e:	00d2      	lsls	r2, r2, #3
 8006380:	2300      	movs	r3, #0
 8006382:	4296      	cmp	r6, r2
 8006384:	d948      	bls.n	8006418 <HAL_SPI_Init+0xe4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006386:	22f0      	movs	r2, #240	@ 0xf0
 8006388:	0018      	movs	r0, r3
 800638a:	0112      	lsls	r2, r2, #4
 800638c:	4296      	cmp	r6, r2
 800638e:	d000      	beq.n	8006392 <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006390:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006392:	2282      	movs	r2, #130	@ 0x82
 8006394:	2784      	movs	r7, #132	@ 0x84
 8006396:	6863      	ldr	r3, [r4, #4]
 8006398:	0052      	lsls	r2, r2, #1
 800639a:	4013      	ands	r3, r2
 800639c:	68a2      	ldr	r2, [r4, #8]
 800639e:	023f      	lsls	r7, r7, #8
 80063a0:	403a      	ands	r2, r7
 80063a2:	2702      	movs	r7, #2
 80063a4:	4313      	orrs	r3, r2
 80063a6:	6922      	ldr	r2, [r4, #16]
 80063a8:	69a5      	ldr	r5, [r4, #24]
 80063aa:	403a      	ands	r2, r7
 80063ac:	4313      	orrs	r3, r2
 80063ae:	2201      	movs	r2, #1
 80063b0:	6967      	ldr	r7, [r4, #20]
 80063b2:	4017      	ands	r7, r2
 80063b4:	433b      	orrs	r3, r7
 80063b6:	2780      	movs	r7, #128	@ 0x80
 80063b8:	00bf      	lsls	r7, r7, #2
 80063ba:	402f      	ands	r7, r5
 80063bc:	433b      	orrs	r3, r7
 80063be:	69e7      	ldr	r7, [r4, #28]
 80063c0:	3237      	adds	r2, #55	@ 0x37
 80063c2:	4017      	ands	r7, r2
 80063c4:	433b      	orrs	r3, r7
 80063c6:	6a27      	ldr	r7, [r4, #32]
 80063c8:	3248      	adds	r2, #72	@ 0x48
 80063ca:	4017      	ands	r7, r2
 80063cc:	2280      	movs	r2, #128	@ 0x80
 80063ce:	433b      	orrs	r3, r7
 80063d0:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 80063d2:	0192      	lsls	r2, r2, #6
 80063d4:	4017      	ands	r7, r2
 80063d6:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063d8:	2710      	movs	r7, #16
 80063da:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063dc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80063e0:	0c2d      	lsrs	r5, r5, #16
 80063e2:	403b      	ands	r3, r7
 80063e4:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 80063e6:	4017      	ands	r7, r2
 80063e8:	433b      	orrs	r3, r7
 80063ea:	27f0      	movs	r7, #240	@ 0xf0
 80063ec:	013f      	lsls	r7, r7, #4
 80063ee:	403e      	ands	r6, r7
 80063f0:	4333      	orrs	r3, r6
 80063f2:	2604      	movs	r6, #4
 80063f4:	4035      	ands	r5, r6
 80063f6:	432b      	orrs	r3, r5
 80063f8:	4303      	orrs	r3, r0
 80063fa:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063fc:	69cb      	ldr	r3, [r1, #28]
 80063fe:	4808      	ldr	r0, [pc, #32]	@ (8006420 <HAL_SPI_Init+0xec>)
 8006400:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006402:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006404:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8006406:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006408:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800640a:	345d      	adds	r4, #93	@ 0x5d
 800640c:	7023      	strb	r3, [r4, #0]
}
 800640e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006410:	2300      	movs	r3, #0
 8006412:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006414:	6163      	str	r3, [r4, #20]
 8006416:	e79b      	b.n	8006350 <HAL_SPI_Init+0x1c>
 8006418:	2080      	movs	r0, #128	@ 0x80
 800641a:	0140      	lsls	r0, r0, #5
 800641c:	e7b6      	b.n	800638c <HAL_SPI_Init+0x58>
 800641e:	46c0      	nop			@ (mov r8, r8)
 8006420:	fffff7ff 	.word	0xfffff7ff

08006424 <HAL_SPI_TransmitReceive>:
{
 8006424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006426:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8006428:	0003      	movs	r3, r0
 800642a:	335c      	adds	r3, #92	@ 0x5c
{
 800642c:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800642e:	781a      	ldrb	r2, [r3, #0]
{
 8006430:	0004      	movs	r4, r0
 8006432:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8006434:	2002      	movs	r0, #2
 8006436:	2a01      	cmp	r2, #1
 8006438:	d01b      	beq.n	8006472 <HAL_SPI_TransmitReceive+0x4e>
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800643e:	f7fe fe2b 	bl	8005098 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006442:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8006444:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8006446:	335d      	adds	r3, #93	@ 0x5d
 8006448:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800644a:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800644c:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800644e:	2b01      	cmp	r3, #1
 8006450:	d009      	beq.n	8006466 <HAL_SPI_TransmitReceive+0x42>
 8006452:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 8006454:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	4299      	cmp	r1, r3
 800645a:	d107      	bne.n	800646c <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800645c:	68a3      	ldr	r3, [r4, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <HAL_SPI_TransmitReceive+0x48>
 8006462:	2a04      	cmp	r2, #4
 8006464:	d102      	bne.n	800646c <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006466:	2d00      	cmp	r5, #0
 8006468:	d104      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 800646a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 800646c:	2300      	movs	r3, #0
 800646e:	345c      	adds	r4, #92	@ 0x5c
 8006470:	7023      	strb	r3, [r4, #0]
}
 8006472:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006474:	2f00      	cmp	r7, #0
 8006476:	d0f8      	beq.n	800646a <HAL_SPI_TransmitReceive+0x46>
 8006478:	2e00      	cmp	r6, #0
 800647a:	d0f6      	beq.n	800646a <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800647c:	0023      	movs	r3, r4
 800647e:	335d      	adds	r3, #93	@ 0x5d
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	2a04      	cmp	r2, #4
 8006484:	d001      	beq.n	800648a <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006486:	2205      	movs	r2, #5
 8006488:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 800648a:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800648c:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 800648e:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006490:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006492:	6427      	str	r7, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006494:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006496:	1da2      	adds	r2, r4, #6
 8006498:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800649a:	22e0      	movs	r2, #224	@ 0xe0
 800649c:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 800649e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80064a0:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064a2:	63a5      	str	r5, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064a4:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 80064a6:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80064a8:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064aa:	00d2      	lsls	r2, r2, #3
 80064ac:	4290      	cmp	r0, r2
 80064ae:	d935      	bls.n	800651c <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	4f60      	ldr	r7, [pc, #384]	@ (8006634 <HAL_SPI_TransmitReceive+0x210>)
 80064b4:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064b6:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064b8:	2240      	movs	r2, #64	@ 0x40
 80064ba:	681f      	ldr	r7, [r3, #0]
 80064bc:	4217      	tst	r7, r2
 80064be:	d102      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 80064c0:	681f      	ldr	r7, [r3, #0]
 80064c2:	433a      	orrs	r2, r7
 80064c4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c6:	22e0      	movs	r2, #224	@ 0xe0
 80064c8:	00d2      	lsls	r2, r2, #3
 80064ca:	4290      	cmp	r0, r2
 80064cc:	d961      	bls.n	8006592 <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ce:	2900      	cmp	r1, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_SPI_TransmitReceive+0xb2>
 80064d2:	2e01      	cmp	r6, #1
 80064d4:	d107      	bne.n	80064e6 <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d6:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064da:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80064dc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064de:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80064e6:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064e8:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064ea:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d119      	bne.n	8006526 <HAL_SPI_TransmitReceive+0x102>
 80064f2:	0023      	movs	r3, r4
 80064f4:	3308      	adds	r3, #8
 80064f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d114      	bne.n	8006526 <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064fc:	0020      	movs	r0, r4
 80064fe:	9a01      	ldr	r2, [sp, #4]
 8006500:	9908      	ldr	r1, [sp, #32]
 8006502:	f7ff fef4 	bl	80062ee <SPI_EndRxTxTransaction>
 8006506:	2800      	cmp	r0, #0
 8006508:	d000      	beq.n	800650c <HAL_SPI_TransmitReceive+0xe8>
 800650a:	e08e      	b.n	800662a <HAL_SPI_TransmitReceive+0x206>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800650c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1ab      	bne.n	800646a <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 8006512:	0023      	movs	r3, r4
 8006514:	2201      	movs	r2, #1
 8006516:	335d      	adds	r3, #93	@ 0x5d
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	e7a7      	b.n	800646c <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800651c:	2280      	movs	r2, #128	@ 0x80
 800651e:	685f      	ldr	r7, [r3, #4]
 8006520:	0152      	lsls	r2, r2, #5
 8006522:	433a      	orrs	r2, r7
 8006524:	e7c7      	b.n	80064b6 <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006526:	6820      	ldr	r0, [r4, #0]
 8006528:	6883      	ldr	r3, [r0, #8]
 800652a:	423b      	tst	r3, r7
 800652c:	d00e      	beq.n	800654c <HAL_SPI_TransmitReceive+0x128>
 800652e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <HAL_SPI_TransmitReceive+0x128>
 8006534:	2d01      	cmp	r5, #1
 8006536:	d108      	bne.n	800654a <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006538:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800653a:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800653c:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800653e:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006540:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006542:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006544:	3b01      	subs	r3, #1
 8006546:	b29b      	uxth	r3, r3
 8006548:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 800654a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800654c:	6883      	ldr	r3, [r0, #8]
 800654e:	0019      	movs	r1, r3
 8006550:	4031      	ands	r1, r6
 8006552:	4233      	tst	r3, r6
 8006554:	d00e      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x150>
 8006556:	0022      	movs	r2, r4
 8006558:	3208      	adds	r2, #8
 800655a:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 800655c:	2b00      	cmp	r3, #0
 800655e:	d009      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8006560:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006562:	68c0      	ldr	r0, [r0, #12]
 8006564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006566:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006568:	3302      	adds	r3, #2
 800656a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800656c:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 800656e:	3b01      	subs	r3, #1
 8006570:	b29b      	uxth	r3, r3
 8006572:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006574:	f7fe fd90 	bl	8005098 <HAL_GetTick>
 8006578:	9b01      	ldr	r3, [sp, #4]
 800657a:	1ac0      	subs	r0, r0, r3
 800657c:	9b08      	ldr	r3, [sp, #32]
 800657e:	4298      	cmp	r0, r3
 8006580:	d3b4      	bcc.n	80064ec <HAL_SPI_TransmitReceive+0xc8>
 8006582:	3301      	adds	r3, #1
 8006584:	d0b2      	beq.n	80064ec <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8006586:	0023      	movs	r3, r4
 8006588:	2201      	movs	r2, #1
 800658a:	335d      	adds	r3, #93	@ 0x5d
        errorcode = HAL_TIMEOUT;
 800658c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800658e:	701a      	strb	r2, [r3, #0]
        goto error;
 8006590:	e76c      	b.n	800646c <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006592:	2900      	cmp	r1, #0
 8006594:	d001      	beq.n	800659a <HAL_SPI_TransmitReceive+0x176>
 8006596:	2e01      	cmp	r6, #1
 8006598:	d108      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800659a:	782a      	ldrb	r2, [r5, #0]
 800659c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800659e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065a0:	3301      	adds	r3, #1
 80065a2:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80065a4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80065ac:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065ae:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065b0:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065b2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x19e>
 80065b8:	0023      	movs	r3, r4
 80065ba:	3308      	adds	r3, #8
 80065bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d09c      	beq.n	80064fc <HAL_SPI_TransmitReceive+0xd8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	423a      	tst	r2, r7
 80065c8:	d00f      	beq.n	80065ea <HAL_SPI_TransmitReceive+0x1c6>
 80065ca:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80065cc:	2a00      	cmp	r2, #0
 80065ce:	d00c      	beq.n	80065ea <HAL_SPI_TransmitReceive+0x1c6>
 80065d0:	2d01      	cmp	r5, #1
 80065d2:	d109      	bne.n	80065e8 <HAL_SPI_TransmitReceive+0x1c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80065d6:	7812      	ldrb	r2, [r2, #0]
 80065d8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80065da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065dc:	3301      	adds	r3, #1
 80065de:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80065e0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80065e8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	0011      	movs	r1, r2
 80065f0:	4031      	ands	r1, r6
 80065f2:	4232      	tst	r2, r6
 80065f4:	d00f      	beq.n	8006616 <HAL_SPI_TransmitReceive+0x1f2>
 80065f6:	0022      	movs	r2, r4
 80065f8:	3208      	adds	r2, #8
 80065fa:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d00a      	beq.n	8006616 <HAL_SPI_TransmitReceive+0x1f2>
        txallowed = 1U;
 8006600:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006602:	7b1b      	ldrb	r3, [r3, #12]
 8006604:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006606:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 8006608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800660a:	3301      	adds	r3, #1
 800660c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800660e:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8006610:	3b01      	subs	r3, #1
 8006612:	b29b      	uxth	r3, r3
 8006614:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006616:	f7fe fd3f 	bl	8005098 <HAL_GetTick>
 800661a:	9b01      	ldr	r3, [sp, #4]
 800661c:	1ac0      	subs	r0, r0, r3
 800661e:	9b08      	ldr	r3, [sp, #32]
 8006620:	4298      	cmp	r0, r3
 8006622:	d3c6      	bcc.n	80065b2 <HAL_SPI_TransmitReceive+0x18e>
 8006624:	3301      	adds	r3, #1
 8006626:	d0c4      	beq.n	80065b2 <HAL_SPI_TransmitReceive+0x18e>
 8006628:	e7ad      	b.n	8006586 <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800662a:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800662c:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800662e:	6623      	str	r3, [r4, #96]	@ 0x60
 8006630:	e76c      	b.n	800650c <HAL_SPI_TransmitReceive+0xe8>
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	ffffefff 	.word	0xffffefff

08006638 <HAL_SPI_Receive>:
{
 8006638:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 800663a:	0006      	movs	r6, r0
{
 800663c:	b087      	sub	sp, #28
 800663e:	9104      	str	r1, [sp, #16]
 8006640:	9303      	str	r3, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8006642:	365d      	adds	r6, #93	@ 0x5d
 8006644:	7833      	ldrb	r3, [r6, #0]
{
 8006646:	0004      	movs	r4, r0
 8006648:	0017      	movs	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 800664a:	b2dd      	uxtb	r5, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	d000      	beq.n	8006652 <HAL_SPI_Receive+0x1a>
 8006650:	e0aa      	b.n	80067a8 <HAL_SPI_Receive+0x170>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006652:	3304      	adds	r3, #4
 8006654:	6842      	ldr	r2, [r0, #4]
 8006656:	33ff      	adds	r3, #255	@ 0xff
 8006658:	429a      	cmp	r2, r3
 800665a:	d10e      	bne.n	800667a <HAL_SPI_Receive+0x42>
 800665c:	6883      	ldr	r3, [r0, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <HAL_SPI_Receive+0x42>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006662:	3304      	adds	r3, #4
 8006664:	7033      	strb	r3, [r6, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	000a      	movs	r2, r1
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	003b      	movs	r3, r7
 800666e:	f7ff fed9 	bl	8006424 <HAL_SPI_TransmitReceive>
 8006672:	0005      	movs	r5, r0
}
 8006674:	0028      	movs	r0, r5
 8006676:	b007      	add	sp, #28
 8006678:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 800667a:	0023      	movs	r3, r4
 800667c:	335c      	adds	r3, #92	@ 0x5c
 800667e:	781a      	ldrb	r2, [r3, #0]
 8006680:	2a01      	cmp	r2, #1
 8006682:	d100      	bne.n	8006686 <HAL_SPI_Receive+0x4e>
 8006684:	e092      	b.n	80067ac <HAL_SPI_Receive+0x174>
 8006686:	2201      	movs	r2, #1
 8006688:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800668a:	f7fe fd05 	bl	8005098 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800668e:	9b04      	ldr	r3, [sp, #16]
  tickstart = HAL_GetTick();
 8006690:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 8006692:	2b00      	cmp	r3, #0
 8006694:	d077      	beq.n	8006786 <HAL_SPI_Receive+0x14e>
 8006696:	2f00      	cmp	r7, #0
 8006698:	d075      	beq.n	8006786 <HAL_SPI_Receive+0x14e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800669a:	2304      	movs	r3, #4
 800669c:	7033      	strb	r3, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800669e:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066a0:	9a04      	ldr	r2, [sp, #16]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066a2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066a4:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80066a6:	1da2      	adds	r2, r4, #6
 80066a8:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  hspi->RxXferCount = Size;
 80066aa:	3202      	adds	r2, #2
 80066ac:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066ae:	22e0      	movs	r2, #224	@ 0xe0
 80066b0:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066b2:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80066b4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80066b6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80066b8:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80066ba:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066bc:	00d2      	lsls	r2, r2, #3
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066be:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066c0:	4291      	cmp	r1, r2
 80066c2:	d92f      	bls.n	8006724 <HAL_SPI_Receive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	483a      	ldr	r0, [pc, #232]	@ (80067b0 <HAL_SPI_Receive+0x178>)
 80066c8:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066ca:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066cc:	2280      	movs	r2, #128	@ 0x80
 80066ce:	68a0      	ldr	r0, [r4, #8]
 80066d0:	0212      	lsls	r2, r2, #8
 80066d2:	4290      	cmp	r0, r2
 80066d4:	d107      	bne.n	80066e6 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 80066d6:	2040      	movs	r0, #64	@ 0x40
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4382      	bics	r2, r0
 80066dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4834      	ldr	r0, [pc, #208]	@ (80067b4 <HAL_SPI_Receive+0x17c>)
 80066e2:	4002      	ands	r2, r0
 80066e4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066e6:	2240      	movs	r2, #64	@ 0x40
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	4210      	tst	r0, r2
 80066ec:	d102      	bne.n	80066f4 <HAL_SPI_Receive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	4302      	orrs	r2, r0
 80066f2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80066f4:	23e0      	movs	r3, #224	@ 0xe0
 80066f6:	0027      	movs	r7, r4
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	3708      	adds	r7, #8
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d925      	bls.n	800674c <HAL_SPI_Receive+0x114>
    while (hspi->RxXferCount > 0U)
 8006700:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006702:	2b00      	cmp	r3, #0
 8006704:	d025      	beq.n	8006752 <HAL_SPI_Receive+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006706:	2101      	movs	r1, #1
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	420a      	tst	r2, r1
 800670e:	d03e      	beq.n	800678e <HAL_SPI_Receive+0x156>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006714:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006716:	3302      	adds	r3, #2
 8006718:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800671a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800671c:	3b01      	subs	r3, #1
 800671e:	b29b      	uxth	r3, r3
 8006720:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006722:	e7ed      	b.n	8006700 <HAL_SPI_Receive+0xc8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006724:	2280      	movs	r2, #128	@ 0x80
 8006726:	6858      	ldr	r0, [r3, #4]
 8006728:	0152      	lsls	r2, r2, #5
 800672a:	4302      	orrs	r2, r0
 800672c:	e7cd      	b.n	80066ca <HAL_SPI_Receive+0x92>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800672e:	2101      	movs	r1, #1
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	420a      	tst	r2, r1
 8006736:	d01a      	beq.n	800676e <HAL_SPI_Receive+0x136>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006738:	7b1b      	ldrb	r3, [r3, #12]
 800673a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800673c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800673e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006740:	185b      	adds	r3, r3, r1
 8006742:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006744:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006746:	3b01      	subs	r3, #1
 8006748:	b29b      	uxth	r3, r3
 800674a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800674c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1ed      	bne.n	800672e <HAL_SPI_Receive+0xf6>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006752:	0020      	movs	r0, r4
 8006754:	9a05      	ldr	r2, [sp, #20]
 8006756:	9903      	ldr	r1, [sp, #12]
 8006758:	f7ff fd8c 	bl	8006274 <SPI_EndRxTransaction>
 800675c:	2800      	cmp	r0, #0
 800675e:	d120      	bne.n	80067a2 <HAL_SPI_Receive+0x16a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006760:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10f      	bne.n	8006786 <HAL_SPI_Receive+0x14e>
    hspi->State = HAL_SPI_STATE_READY;
 8006766:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006768:	001d      	movs	r5, r3
    hspi->State = HAL_SPI_STATE_READY;
 800676a:	7032      	strb	r2, [r6, #0]
 800676c:	e00b      	b.n	8006786 <HAL_SPI_Receive+0x14e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800676e:	f7fe fc93 	bl	8005098 <HAL_GetTick>
 8006772:	9b05      	ldr	r3, [sp, #20]
 8006774:	1ac0      	subs	r0, r0, r3
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	4298      	cmp	r0, r3
 800677a:	d3e7      	bcc.n	800674c <HAL_SPI_Receive+0x114>
 800677c:	3301      	adds	r3, #1
 800677e:	d0e5      	beq.n	800674c <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8006780:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8006782:	2503      	movs	r5, #3
          hspi->State = HAL_SPI_STATE_READY;
 8006784:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(hspi);
 8006786:	2300      	movs	r3, #0
 8006788:	345c      	adds	r4, #92	@ 0x5c
 800678a:	7023      	strb	r3, [r4, #0]
  return errorcode;
 800678c:	e772      	b.n	8006674 <HAL_SPI_Receive+0x3c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800678e:	f7fe fc83 	bl	8005098 <HAL_GetTick>
 8006792:	9b05      	ldr	r3, [sp, #20]
 8006794:	1ac0      	subs	r0, r0, r3
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	4298      	cmp	r0, r3
 800679a:	d3b1      	bcc.n	8006700 <HAL_SPI_Receive+0xc8>
 800679c:	3301      	adds	r3, #1
 800679e:	d0af      	beq.n	8006700 <HAL_SPI_Receive+0xc8>
 80067a0:	e7ee      	b.n	8006780 <HAL_SPI_Receive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067a2:	2320      	movs	r3, #32
 80067a4:	6623      	str	r3, [r4, #96]	@ 0x60
 80067a6:	e7db      	b.n	8006760 <HAL_SPI_Receive+0x128>
    errorcode = HAL_BUSY;
 80067a8:	2502      	movs	r5, #2
 80067aa:	e7ec      	b.n	8006786 <HAL_SPI_Receive+0x14e>
  __HAL_LOCK(hspi);
 80067ac:	2502      	movs	r5, #2
 80067ae:	e761      	b.n	8006674 <HAL_SPI_Receive+0x3c>
 80067b0:	ffffefff 	.word	0xffffefff
 80067b4:	ffffbfff 	.word	0xffffbfff

080067b8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067b8:	0001      	movs	r1, r0
{
 80067ba:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 80067bc:	2001      	movs	r0, #1
{
 80067be:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80067c0:	313d      	adds	r1, #61	@ 0x3d
 80067c2:	780c      	ldrb	r4, [r1, #0]
 80067c4:	b2e2      	uxtb	r2, r4
 80067c6:	4284      	cmp	r4, r0
 80067c8:	d118      	bne.n	80067fc <HAL_TIM_Base_Start_IT+0x44>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ca:	1800      	adds	r0, r0, r0
 80067cc:	7008      	strb	r0, [r1, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68d9      	ldr	r1, [r3, #12]
 80067d2:	4311      	orrs	r1, r2
 80067d4:	60d9      	str	r1, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d6:	490b      	ldr	r1, [pc, #44]	@ (8006804 <HAL_TIM_Base_Start_IT+0x4c>)
 80067d8:	428b      	cmp	r3, r1
 80067da:	d005      	beq.n	80067e8 <HAL_TIM_Base_Start_IT+0x30>
 80067dc:	490a      	ldr	r1, [pc, #40]	@ (8006808 <HAL_TIM_Base_Start_IT+0x50>)
 80067de:	428b      	cmp	r3, r1
 80067e0:	d002      	beq.n	80067e8 <HAL_TIM_Base_Start_IT+0x30>
 80067e2:	490a      	ldr	r1, [pc, #40]	@ (800680c <HAL_TIM_Base_Start_IT+0x54>)
 80067e4:	428b      	cmp	r3, r1
 80067e6:	d10a      	bne.n	80067fe <HAL_TIM_Base_Start_IT+0x46>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e8:	2107      	movs	r1, #7
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ee:	2a06      	cmp	r2, #6
 80067f0:	d003      	beq.n	80067fa <HAL_TIM_Base_Start_IT+0x42>
    {
      __HAL_TIM_ENABLE(htim);
 80067f2:	2201      	movs	r2, #1
 80067f4:	6819      	ldr	r1, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80067fa:	2000      	movs	r0, #0
}
 80067fc:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 80067fe:	6819      	ldr	r1, [r3, #0]
 8006800:	e7f9      	b.n	80067f6 <HAL_TIM_Base_Start_IT+0x3e>
 8006802:	46c0      	nop			@ (mov r8, r8)
 8006804:	40012c00 	.word	0x40012c00
 8006808:	40000400 	.word	0x40000400
 800680c:	40014000 	.word	0x40014000

08006810 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006810:	4770      	bx	lr

08006812 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006812:	4770      	bx	lr

08006814 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006814:	4770      	bx	lr

08006816 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006816:	4770      	bx	lr

08006818 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006818:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 800681a:	6803      	ldr	r3, [r0, #0]
{
 800681c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800681e:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006820:	691e      	ldr	r6, [r3, #16]
{
 8006822:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006824:	4216      	tst	r6, r2
 8006826:	d00d      	beq.n	8006844 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006828:	4215      	tst	r5, r2
 800682a:	d00b      	beq.n	8006844 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800682c:	3a05      	subs	r2, #5
 800682e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006830:	3204      	adds	r2, #4
 8006832:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	079b      	lsls	r3, r3, #30
 8006838:	d100      	bne.n	800683c <HAL_TIM_IRQHandler+0x24>
 800683a:	e071      	b.n	8006920 <HAL_TIM_IRQHandler+0x108>
          HAL_TIM_IC_CaptureCallback(htim);
 800683c:	f7ff ffe9 	bl	8006812 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006840:	2300      	movs	r3, #0
 8006842:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006844:	2304      	movs	r3, #4
 8006846:	421e      	tst	r6, r3
 8006848:	d011      	beq.n	800686e <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800684a:	421d      	tst	r5, r3
 800684c:	d00f      	beq.n	800686e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800684e:	2205      	movs	r2, #5
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	4252      	negs	r2, r2
 8006854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006856:	3207      	adds	r2, #7
 8006858:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	23c0      	movs	r3, #192	@ 0xc0
 800685e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8006860:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006862:	421a      	tst	r2, r3
 8006864:	d062      	beq.n	800692c <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8006866:	f7ff ffd4 	bl	8006812 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686a:	2300      	movs	r3, #0
 800686c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800686e:	2308      	movs	r3, #8
 8006870:	421e      	tst	r6, r3
 8006872:	d00f      	beq.n	8006894 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006874:	421d      	tst	r5, r3
 8006876:	d00d      	beq.n	8006894 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006878:	2209      	movs	r2, #9
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	4252      	negs	r2, r2
 800687e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006880:	320d      	adds	r2, #13
 8006882:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006884:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006886:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006888:	079b      	lsls	r3, r3, #30
 800688a:	d055      	beq.n	8006938 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 800688c:	f7ff ffc1 	bl	8006812 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006890:	2300      	movs	r3, #0
 8006892:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006894:	2310      	movs	r3, #16
 8006896:	421e      	tst	r6, r3
 8006898:	d011      	beq.n	80068be <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800689a:	421d      	tst	r5, r3
 800689c:	d00f      	beq.n	80068be <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800689e:	2211      	movs	r2, #17
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	4252      	negs	r2, r2
 80068a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a6:	3219      	adds	r2, #25
 80068a8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068aa:	69da      	ldr	r2, [r3, #28]
 80068ac:	23c0      	movs	r3, #192	@ 0xc0
 80068ae:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80068b0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068b2:	421a      	tst	r2, r3
 80068b4:	d046      	beq.n	8006944 <HAL_TIM_IRQHandler+0x12c>
        HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	f7ff ffac 	bl	8006812 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ba:	2300      	movs	r3, #0
 80068bc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068be:	2301      	movs	r3, #1
 80068c0:	421e      	tst	r6, r3
 80068c2:	d008      	beq.n	80068d6 <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068c4:	421d      	tst	r5, r3
 80068c6:	d006      	beq.n	80068d6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068c8:	2202      	movs	r2, #2
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 80068ce:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80068d2:	f7fd fffb 	bl	80048cc <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80068d6:	2380      	movs	r3, #128	@ 0x80
 80068d8:	421e      	tst	r6, r3
 80068da:	d008      	beq.n	80068ee <HAL_TIM_IRQHandler+0xd6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068dc:	421d      	tst	r5, r3
 80068de:	d006      	beq.n	80068ee <HAL_TIM_IRQHandler+0xd6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80068e0:	2281      	movs	r2, #129	@ 0x81
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	4252      	negs	r2, r2
      HAL_TIMEx_BreakCallback(htim);
 80068e6:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80068e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80068ea:	f000 f976 	bl	8006bda <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068ee:	2340      	movs	r3, #64	@ 0x40
 80068f0:	421e      	tst	r6, r3
 80068f2:	d008      	beq.n	8006906 <HAL_TIM_IRQHandler+0xee>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068f4:	421d      	tst	r5, r3
 80068f6:	d006      	beq.n	8006906 <HAL_TIM_IRQHandler+0xee>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068f8:	2241      	movs	r2, #65	@ 0x41
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 80068fe:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006900:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006902:	f7ff ff88 	bl	8006816 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006906:	2320      	movs	r3, #32
 8006908:	421e      	tst	r6, r3
 800690a:	d008      	beq.n	800691e <HAL_TIM_IRQHandler+0x106>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800690c:	421d      	tst	r5, r3
 800690e:	d006      	beq.n	800691e <HAL_TIM_IRQHandler+0x106>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006910:	2221      	movs	r2, #33	@ 0x21
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8006916:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006918:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800691a:	f000 f95d 	bl	8006bd8 <HAL_TIMEx_CommutCallback>
}
 800691e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006920:	f7ff ff76 	bl	8006810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006924:	0020      	movs	r0, r4
 8006926:	f7ff ff75 	bl	8006814 <HAL_TIM_PWM_PulseFinishedCallback>
 800692a:	e789      	b.n	8006840 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692c:	f7ff ff70 	bl	8006810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006930:	0020      	movs	r0, r4
 8006932:	f7ff ff6f 	bl	8006814 <HAL_TIM_PWM_PulseFinishedCallback>
 8006936:	e798      	b.n	800686a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006938:	f7ff ff6a 	bl	8006810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800693c:	0020      	movs	r0, r4
 800693e:	f7ff ff69 	bl	8006814 <HAL_TIM_PWM_PulseFinishedCallback>
 8006942:	e7a5      	b.n	8006890 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006944:	f7ff ff64 	bl	8006810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006948:	0020      	movs	r0, r4
 800694a:	f7ff ff63 	bl	8006814 <HAL_TIM_PWM_PulseFinishedCallback>
 800694e:	e7b4      	b.n	80068ba <HAL_TIM_IRQHandler+0xa2>

08006950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006950:	b510      	push	{r4, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006952:	4c1e      	ldr	r4, [pc, #120]	@ (80069cc <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8006954:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006956:	42a0      	cmp	r0, r4
 8006958:	d00a      	beq.n	8006970 <TIM_Base_SetConfig+0x20>
 800695a:	4a1d      	ldr	r2, [pc, #116]	@ (80069d0 <TIM_Base_SetConfig+0x80>)
 800695c:	4290      	cmp	r0, r2
 800695e:	d007      	beq.n	8006970 <TIM_Base_SetConfig+0x20>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006960:	4a1c      	ldr	r2, [pc, #112]	@ (80069d4 <TIM_Base_SetConfig+0x84>)
 8006962:	4290      	cmp	r0, r2
 8006964:	d109      	bne.n	800697a <TIM_Base_SetConfig+0x2a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006966:	4a1c      	ldr	r2, [pc, #112]	@ (80069d8 <TIM_Base_SetConfig+0x88>)
 8006968:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800696a:	68cb      	ldr	r3, [r1, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	e00d      	b.n	800698c <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006970:	2270      	movs	r2, #112	@ 0x70
 8006972:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8006974:	684a      	ldr	r2, [r1, #4]
 8006976:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006978:	e7f5      	b.n	8006966 <TIM_Base_SetConfig+0x16>
 800697a:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <TIM_Base_SetConfig+0x8c>)
 800697c:	4290      	cmp	r0, r2
 800697e:	d0f2      	beq.n	8006966 <TIM_Base_SetConfig+0x16>
 8006980:	4a17      	ldr	r2, [pc, #92]	@ (80069e0 <TIM_Base_SetConfig+0x90>)
 8006982:	4290      	cmp	r0, r2
 8006984:	d0ef      	beq.n	8006966 <TIM_Base_SetConfig+0x16>
 8006986:	4a17      	ldr	r2, [pc, #92]	@ (80069e4 <TIM_Base_SetConfig+0x94>)
 8006988:	4290      	cmp	r0, r2
 800698a:	d0ec      	beq.n	8006966 <TIM_Base_SetConfig+0x16>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800698c:	2280      	movs	r2, #128	@ 0x80
 800698e:	4393      	bics	r3, r2
 8006990:	694a      	ldr	r2, [r1, #20]
 8006992:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006994:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006996:	688b      	ldr	r3, [r1, #8]
 8006998:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800699a:	680b      	ldr	r3, [r1, #0]
 800699c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800699e:	42a0      	cmp	r0, r4
 80069a0:	d008      	beq.n	80069b4 <TIM_Base_SetConfig+0x64>
 80069a2:	4b0e      	ldr	r3, [pc, #56]	@ (80069dc <TIM_Base_SetConfig+0x8c>)
 80069a4:	4298      	cmp	r0, r3
 80069a6:	d005      	beq.n	80069b4 <TIM_Base_SetConfig+0x64>
 80069a8:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <TIM_Base_SetConfig+0x90>)
 80069aa:	4298      	cmp	r0, r3
 80069ac:	d002      	beq.n	80069b4 <TIM_Base_SetConfig+0x64>
 80069ae:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <TIM_Base_SetConfig+0x94>)
 80069b0:	4298      	cmp	r0, r3
 80069b2:	d101      	bne.n	80069b8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069b4:	690b      	ldr	r3, [r1, #16]
 80069b6:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b8:	2201      	movs	r2, #1
 80069ba:	6142      	str	r2, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069bc:	6903      	ldr	r3, [r0, #16]
 80069be:	4213      	tst	r3, r2
 80069c0:	d002      	beq.n	80069c8 <TIM_Base_SetConfig+0x78>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069c2:	6903      	ldr	r3, [r0, #16]
 80069c4:	4393      	bics	r3, r2
 80069c6:	6103      	str	r3, [r0, #16]
  }
}
 80069c8:	bd10      	pop	{r4, pc}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40000400 	.word	0x40000400
 80069d4:	40002000 	.word	0x40002000
 80069d8:	fffffcff 	.word	0xfffffcff
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <HAL_TIM_Base_Init>:
{
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	0004      	movs	r4, r0
    return HAL_ERROR;
 80069ec:	2001      	movs	r0, #1
  if (htim == NULL)
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	d021      	beq.n	8006a36 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80069f2:	0025      	movs	r5, r4
 80069f4:	353d      	adds	r5, #61	@ 0x3d
 80069f6:	782b      	ldrb	r3, [r5, #0]
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d105      	bne.n	8006a0a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80069fe:	0023      	movs	r3, r4
 8006a00:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006a02:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8006a04:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8006a06:	f7fe f9c3 	bl	8004d90 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a0e:	6820      	ldr	r0, [r4, #0]
 8006a10:	1d21      	adds	r1, r4, #4
 8006a12:	f7ff ff9d 	bl	8006950 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a16:	0022      	movs	r2, r4
 8006a18:	2301      	movs	r3, #1
  return HAL_OK;
 8006a1a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a1c:	3246      	adds	r2, #70	@ 0x46
 8006a1e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a20:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a22:	3a08      	subs	r2, #8
 8006a24:	7013      	strb	r3, [r2, #0]
 8006a26:	7053      	strb	r3, [r2, #1]
 8006a28:	7093      	strb	r3, [r2, #2]
 8006a2a:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a2c:	7113      	strb	r3, [r2, #4]
 8006a2e:	7153      	strb	r3, [r2, #5]
 8006a30:	7193      	strb	r3, [r2, #6]
 8006a32:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006a34:	702b      	strb	r3, [r5, #0]
}
 8006a36:	bd70      	pop	{r4, r5, r6, pc}

08006a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a38:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a3a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a3c:	4d03      	ldr	r5, [pc, #12]	@ (8006a4c <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a42:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a44:	4313      	orrs	r3, r2
 8006a46:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a48:	6083      	str	r3, [r0, #8]
}
 8006a4a:	bd30      	pop	{r4, r5, pc}
 8006a4c:	ffff00ff 	.word	0xffff00ff

08006a50 <HAL_TIM_ConfigClockSource>:
{
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8006a52:	0005      	movs	r5, r0
 8006a54:	2202      	movs	r2, #2
 8006a56:	353c      	adds	r5, #60	@ 0x3c
 8006a58:	782c      	ldrb	r4, [r5, #0]
{
 8006a5a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8006a5c:	0010      	movs	r0, r2
 8006a5e:	2c01      	cmp	r4, #1
 8006a60:	d01b      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006a62:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8006a64:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006a66:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 8006a68:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6a:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006a6c:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a6e:	4a41      	ldr	r2, [pc, #260]	@ (8006b74 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 8006a70:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a72:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8006a74:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006a76:	680b      	ldr	r3, [r1, #0]
 8006a78:	2b60      	cmp	r3, #96	@ 0x60
 8006a7a:	d04e      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0xca>
 8006a7c:	d82d      	bhi.n	8006ada <HAL_TIM_ConfigClockSource+0x8a>
 8006a7e:	2b40      	cmp	r3, #64	@ 0x40
 8006a80:	d062      	beq.n	8006b48 <HAL_TIM_ConfigClockSource+0xf8>
 8006a82:	d813      	bhi.n	8006aac <HAL_TIM_ConfigClockSource+0x5c>
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d00b      	beq.n	8006aa0 <HAL_TIM_ConfigClockSource+0x50>
 8006a88:	d808      	bhi.n	8006a9c <HAL_TIM_ConfigClockSource+0x4c>
 8006a8a:	2210      	movs	r2, #16
 8006a8c:	0019      	movs	r1, r3
 8006a8e:	4391      	bics	r1, r2
 8006a90:	d006      	beq.n	8006aa0 <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8006a92:	2301      	movs	r3, #1
 8006a94:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8006a96:	2300      	movs	r3, #0
 8006a98:	702b      	strb	r3, [r5, #0]
}
 8006a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8006a9c:	2b30      	cmp	r3, #48	@ 0x30
 8006a9e:	d1f8      	bne.n	8006a92 <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aa0:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8006aa2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aa4:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	2207      	movs	r2, #7
 8006aaa:	e028      	b.n	8006afe <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8006aac:	2b50      	cmp	r3, #80	@ 0x50
 8006aae:	d1f0      	bne.n	8006a92 <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 8006ab0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006ab2:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8006ab4:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab6:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aba:	4387      	bics	r7, r0
 8006abc:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006abe:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8006ac0:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac2:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ac4:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ac6:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8006ac8:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aca:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006acc:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8006ace:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8006ad0:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006ad2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ad4:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ad6:	3b19      	subs	r3, #25
 8006ad8:	e011      	b.n	8006afe <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8006ada:	2280      	movs	r2, #128	@ 0x80
 8006adc:	0152      	lsls	r2, r2, #5
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00f      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0xb2>
 8006ae2:	2280      	movs	r2, #128	@ 0x80
 8006ae4:	0192      	lsls	r2, r2, #6
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00d      	beq.n	8006b06 <HAL_TIM_ConfigClockSource+0xb6>
 8006aea:	2b70      	cmp	r3, #112	@ 0x70
 8006aec:	d1d1      	bne.n	8006a92 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8006aee:	68cb      	ldr	r3, [r1, #12]
 8006af0:	684a      	ldr	r2, [r1, #4]
 8006af2:	0020      	movs	r0, r4
 8006af4:	6889      	ldr	r1, [r1, #8]
 8006af6:	f7ff ff9f 	bl	8006a38 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006afa:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8006afc:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006afe:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 8006b00:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006b02:	2000      	movs	r0, #0
 8006b04:	e7c5      	b.n	8006a92 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8006b06:	68cb      	ldr	r3, [r1, #12]
 8006b08:	684a      	ldr	r2, [r1, #4]
 8006b0a:	0020      	movs	r0, r4
 8006b0c:	6889      	ldr	r1, [r1, #8]
 8006b0e:	f7ff ff93 	bl	8006a38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b12:	2380      	movs	r3, #128	@ 0x80
 8006b14:	68a2      	ldr	r2, [r4, #8]
 8006b16:	01db      	lsls	r3, r3, #7
 8006b18:	e7f1      	b.n	8006afe <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b1a:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8006b1c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006b1e:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8006b20:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b22:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b24:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b26:	43b8      	bics	r0, r7
 8006b28:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b2a:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b2c:	4f12      	ldr	r7, [pc, #72]	@ (8006b78 <HAL_TIM_ConfigClockSource+0x128>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b2e:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b30:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b32:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b34:	20a0      	movs	r0, #160	@ 0xa0
 8006b36:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b38:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8006b3a:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8006b3c:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b3e:	2370      	movs	r3, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8006b40:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b42:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b44:	3b09      	subs	r3, #9
 8006b46:	e7da      	b.n	8006afe <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8006b48:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006b4a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8006b4c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b4e:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b50:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b52:	4387      	bics	r7, r0
 8006b54:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b56:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8006b58:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b5a:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b5c:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b5e:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8006b60:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b62:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b64:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8006b66:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8006b68:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006b6a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b6c:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b6e:	3b29      	subs	r3, #41	@ 0x29
 8006b70:	e7c5      	b.n	8006afe <HAL_TIM_ConfigClockSource+0xae>
 8006b72:	46c0      	nop			@ (mov r8, r8)
 8006b74:	ffff0088 	.word	0xffff0088
 8006b78:	ffff0fff 	.word	0xffff0fff

08006b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b7c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b7e:	0004      	movs	r4, r0
 8006b80:	2202      	movs	r2, #2
 8006b82:	343c      	adds	r4, #60	@ 0x3c
 8006b84:	7825      	ldrb	r5, [r4, #0]
{
 8006b86:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8006b88:	0010      	movs	r0, r2
 8006b8a:	2d01      	cmp	r5, #1
 8006b8c:	d01c      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b90:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8006b92:	353d      	adds	r5, #61	@ 0x3d
 8006b94:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006b9a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b9c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b9e:	680e      	ldr	r6, [r1, #0]
 8006ba0:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ba2:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba4:	4809      	ldr	r0, [pc, #36]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8006ba6:	4283      	cmp	r3, r0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8006baa:	4809      	ldr	r0, [pc, #36]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8006bac:	4283      	cmp	r3, r0
 8006bae:	d002      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8006bb0:	4808      	ldr	r0, [pc, #32]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8006bb2:	4283      	cmp	r3, r0
 8006bb4:	d104      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bb6:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bb8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bba:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bbc:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc0:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006bc2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8006bc6:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8006bc8:	bd70      	pop	{r4, r5, r6, pc}
 8006bca:	46c0      	nop			@ (mov r8, r8)
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40014000 	.word	0x40014000

08006bd8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006bd8:	4770      	bx	lr

08006bda <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006bda:	4770      	bx	lr

08006bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bdc:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bde:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be2:	2201      	movs	r2, #1
 8006be4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be8:	6801      	ldr	r1, [r0, #0]
 8006bea:	4d12      	ldr	r5, [pc, #72]	@ (8006c34 <UART_EndRxTransfer+0x58>)
 8006bec:	680b      	ldr	r3, [r1, #0]
 8006bee:	402b      	ands	r3, r5
 8006bf0:	600b      	str	r3, [r1, #0]
 8006bf2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfa:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bfe:	6801      	ldr	r1, [r0, #0]
 8006c00:	688b      	ldr	r3, [r1, #8]
 8006c02:	4393      	bics	r3, r2
 8006c04:	608b      	str	r3, [r1, #8]
 8006c06:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d10a      	bne.n	8006c26 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c10:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c14:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c18:	2410      	movs	r4, #16
 8006c1a:	6802      	ldr	r2, [r0, #0]
 8006c1c:	6813      	ldr	r3, [r2, #0]
 8006c1e:	43a3      	bics	r3, r4
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c26:	2220      	movs	r2, #32
 8006c28:	1d03      	adds	r3, r0, #4
 8006c2a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c30:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8006c32:	bd30      	pop	{r4, r5, pc}
 8006c34:	fffffedf 	.word	0xfffffedf

08006c38 <HAL_UART_Transmit_DMA>:
{
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006c3c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
{
 8006c3e:	0004      	movs	r4, r0
    return HAL_BUSY;
 8006c40:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8006c42:	2a20      	cmp	r2, #32
 8006c44:	d104      	bne.n	8006c50 <HAL_UART_Transmit_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8006c46:	2900      	cmp	r1, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_UART_Transmit_DMA+0x16>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 8006c4e:	2001      	movs	r0, #1
}
 8006c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c52:	2280      	movs	r2, #128	@ 0x80
 8006c54:	68a0      	ldr	r0, [r4, #8]
 8006c56:	0152      	lsls	r2, r2, #5
 8006c58:	4290      	cmp	r0, r2
 8006c5a:	d104      	bne.n	8006c66 <HAL_UART_Transmit_DMA+0x2e>
 8006c5c:	6922      	ldr	r2, [r4, #16]
 8006c5e:	2a00      	cmp	r2, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_UART_Transmit_DMA+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c62:	07ca      	lsls	r2, r1, #31
 8006c64:	d4f3      	bmi.n	8006c4e <HAL_UART_Transmit_DMA+0x16>
    huart->TxXferSize  = Size;
 8006c66:	0022      	movs	r2, r4
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c68:	0025      	movs	r5, r4
    huart->TxXferSize  = Size;
 8006c6a:	3250      	adds	r2, #80	@ 0x50
    huart->pTxBuffPtr  = pData;
 8006c6c:	64e1      	str	r1, [r4, #76]	@ 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6e:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8006c70:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8006c72:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c74:	2221      	movs	r2, #33	@ 0x21
    if (huart->hdmatx != NULL)
 8006c76:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c78:	3508      	adds	r5, #8
 8006c7a:	67ee      	str	r6, [r5, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c7c:	67e2      	str	r2, [r4, #124]	@ 0x7c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006c7e:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 8006c80:	42b0      	cmp	r0, r6
 8006c82:	d010      	beq.n	8006ca6 <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c84:	4f10      	ldr	r7, [pc, #64]	@ (8006cc8 <HAL_UART_Transmit_DMA+0x90>)
      huart->hdmatx->XferAbortCallback = NULL;
 8006c86:	6346      	str	r6, [r0, #52]	@ 0x34
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c88:	6287      	str	r7, [r0, #40]	@ 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c8a:	4f10      	ldr	r7, [pc, #64]	@ (8006ccc <HAL_UART_Transmit_DMA+0x94>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006c8c:	3228      	adds	r2, #40	@ 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c8e:	62c7      	str	r7, [r0, #44]	@ 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c90:	4f0f      	ldr	r7, [pc, #60]	@ (8006cd0 <HAL_UART_Transmit_DMA+0x98>)
 8006c92:	6307      	str	r7, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006c94:	f7fe fa9a 	bl	80051cc <HAL_DMA_Start_IT>
 8006c98:	42b0      	cmp	r0, r6
 8006c9a:	d004      	beq.n	8006ca6 <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8006ca0:	18db      	adds	r3, r3, r3
 8006ca2:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_ERROR;
 8006ca4:	e7d3      	b.n	8006c4e <HAL_UART_Transmit_DMA+0x16>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006ca6:	2240      	movs	r2, #64	@ 0x40
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	337f      	adds	r3, #127	@ 0x7f
 8006cba:	6890      	ldr	r0, [r2, #8]
 8006cbc:	4303      	orrs	r3, r0
 8006cbe:	6093      	str	r3, [r2, #8]
 8006cc0:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	e7c3      	b.n	8006c50 <HAL_UART_Transmit_DMA+0x18>
 8006cc8:	08006cd5 	.word	0x08006cd5
 8006ccc:	08006d21 	.word	0x08006d21
 8006cd0:	08006d2f 	.word	0x08006d2f

08006cd4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cd4:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006cd6:	699b      	ldr	r3, [r3, #24]
{
 8006cd8:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cda:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d01b      	beq.n	8006d18 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8006ce0:	0003      	movs	r3, r0
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	3352      	adds	r3, #82	@ 0x52
 8006ce6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cec:	3201      	adds	r2, #1
 8006cee:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cf2:	2580      	movs	r5, #128	@ 0x80
 8006cf4:	6801      	ldr	r1, [r0, #0]
 8006cf6:	688b      	ldr	r3, [r1, #8]
 8006cf8:	43ab      	bics	r3, r5
 8006cfa:	608b      	str	r3, [r1, #8]
 8006cfc:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d00:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d04:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d08:	2340      	movs	r3, #64	@ 0x40
 8006d0a:	6802      	ldr	r2, [r0, #0]
 8006d0c:	6810      	ldr	r0, [r2, #0]
 8006d0e:	4303      	orrs	r3, r0
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d16:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_TxCpltCallback(huart);
 8006d18:	f7fd fe24 	bl	8004964 <HAL_UART_TxCpltCallback>
}
 8006d1c:	e7fb      	b.n	8006d16 <UART_DMATransmitCplt+0x42>

08006d1e <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8006d1e:	4770      	bx	lr

08006d20 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d20:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d22:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8006d24:	f7ff fffb 	bl	8006d1e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d28:	bd10      	pop	{r4, pc}

08006d2a <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8006d2a:	4770      	bx	lr

08006d2c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006d2c:	4770      	bx	lr

08006d2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d2e:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d30:	6a44      	ldr	r4, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d32:	1d23      	adds	r3, r4, #4
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d34:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d36:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	061b      	lsls	r3, r3, #24
 8006d3e:	d513      	bpl.n	8006d68 <UART_DMAError+0x3a>
 8006d40:	2a21      	cmp	r2, #33	@ 0x21
 8006d42:	d111      	bne.n	8006d68 <UART_DMAError+0x3a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d44:	0023      	movs	r3, r4
 8006d46:	2200      	movs	r2, #0
 8006d48:	3352      	adds	r3, #82	@ 0x52
 8006d4a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d4c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d50:	2301      	movs	r3, #1
 8006d52:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d56:	25c0      	movs	r5, #192	@ 0xc0
 8006d58:	6822      	ldr	r2, [r4, #0]
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	43ab      	bics	r3, r5
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 8006d64:	2320      	movs	r3, #32
 8006d66:	67e3      	str	r3, [r4, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	065b      	lsls	r3, r3, #25
 8006d6e:	d508      	bpl.n	8006d82 <UART_DMAError+0x54>
 8006d70:	2922      	cmp	r1, #34	@ 0x22
 8006d72:	d106      	bne.n	8006d82 <UART_DMAError+0x54>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d74:	0023      	movs	r3, r4
 8006d76:	2200      	movs	r2, #0
 8006d78:	335a      	adds	r3, #90	@ 0x5a
    UART_EndRxTransfer(huart);
 8006d7a:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8006d7c:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8006d7e:	f7ff ff2d 	bl	8006bdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d82:	0022      	movs	r2, r4
 8006d84:	2310      	movs	r3, #16
 8006d86:	3208      	adds	r2, #8
 8006d88:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d8a:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  HAL_UART_ErrorCallback(huart);
 8006d90:	f7ff ffcc 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d94:	bd70      	pop	{r4, r5, r6, pc}

08006d96 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d96:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	0002      	movs	r2, r0
{
 8006d9c:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8006d9e:	325a      	adds	r2, #90	@ 0x5a
 8006da0:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8006da2:	3a08      	subs	r2, #8
 8006da4:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006da6:	f7ff ffc1 	bl	8006d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006daa:	bd10      	pop	{r4, pc}

08006dac <HAL_UARTEx_RxEventCallback>:
}
 8006dac:	4770      	bx	lr
	...

08006db0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006db0:	6801      	ldr	r1, [r0, #0]
{
 8006db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006db4:	69cb      	ldr	r3, [r1, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006db6:	4da3      	ldr	r5, [pc, #652]	@ (8007044 <HAL_UART_IRQHandler+0x294>)
{
 8006db8:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dba:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dbc:	688a      	ldr	r2, [r1, #8]
  if (errorflags == 0U)
 8006dbe:	422b      	tst	r3, r5
 8006dc0:	d10b      	bne.n	8006dda <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	4213      	tst	r3, r2
 8006dc6:	d100      	bne.n	8006dca <HAL_UART_IRQHandler+0x1a>
 8006dc8:	e07f      	b.n	8006eca <HAL_UART_IRQHandler+0x11a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dca:	4210      	tst	r0, r2
 8006dcc:	d100      	bne.n	8006dd0 <HAL_UART_IRQHandler+0x20>
 8006dce:	e07c      	b.n	8006eca <HAL_UART_IRQHandler+0x11a>
      if (huart->RxISR != NULL)
 8006dd0:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
      huart->TxISR(huart);
 8006dd2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d16e      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x106>
 8006dd8:	e06e      	b.n	8006eb8 <HAL_UART_IRQHandler+0x108>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006dda:	2601      	movs	r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ddc:	4d9a      	ldr	r5, [pc, #616]	@ (8007048 <HAL_UART_IRQHandler+0x298>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006dde:	4032      	ands	r2, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006de0:	4005      	ands	r5, r0
 8006de2:	4315      	orrs	r5, r2
 8006de4:	d100      	bne.n	8006de8 <HAL_UART_IRQHandler+0x38>
 8006de6:	e070      	b.n	8006eca <HAL_UART_IRQHandler+0x11a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006de8:	0025      	movs	r5, r4
 8006dea:	3508      	adds	r5, #8
 8006dec:	4233      	tst	r3, r6
 8006dee:	d005      	beq.n	8006dfc <HAL_UART_IRQHandler+0x4c>
 8006df0:	05c7      	lsls	r7, r0, #23
 8006df2:	d503      	bpl.n	8006dfc <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006df4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006df6:	6fef      	ldr	r7, [r5, #124]	@ 0x7c
 8006df8:	433e      	orrs	r6, r7
 8006dfa:	67ee      	str	r6, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dfc:	2602      	movs	r6, #2
 8006dfe:	4233      	tst	r3, r6
 8006e00:	d006      	beq.n	8006e10 <HAL_UART_IRQHandler+0x60>
 8006e02:	2a00      	cmp	r2, #0
 8006e04:	d004      	beq.n	8006e10 <HAL_UART_IRQHandler+0x60>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e06:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e08:	6fef      	ldr	r7, [r5, #124]	@ 0x7c
 8006e0a:	19b6      	adds	r6, r6, r6
 8006e0c:	433e      	orrs	r6, r7
 8006e0e:	67ee      	str	r6, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e10:	2604      	movs	r6, #4
 8006e12:	4233      	tst	r3, r6
 8006e14:	d006      	beq.n	8006e24 <HAL_UART_IRQHandler+0x74>
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	d004      	beq.n	8006e24 <HAL_UART_IRQHandler+0x74>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e1a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e1c:	6fef      	ldr	r7, [r5, #124]	@ 0x7c
 8006e1e:	3e02      	subs	r6, #2
 8006e20:	433e      	orrs	r6, r7
 8006e22:	67ee      	str	r6, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e24:	2608      	movs	r6, #8
 8006e26:	4233      	tst	r3, r6
 8006e28:	d007      	beq.n	8006e3a <HAL_UART_IRQHandler+0x8a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e2a:	2720      	movs	r7, #32
 8006e2c:	4007      	ands	r7, r0
 8006e2e:	433a      	orrs	r2, r7
 8006e30:	d003      	beq.n	8006e3a <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e32:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e34:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8006e36:	4316      	orrs	r6, r2
 8006e38:	67ee      	str	r6, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e3a:	2280      	movs	r2, #128	@ 0x80
 8006e3c:	0112      	lsls	r2, r2, #4
 8006e3e:	4213      	tst	r3, r2
 8006e40:	d006      	beq.n	8006e50 <HAL_UART_IRQHandler+0xa0>
 8006e42:	0146      	lsls	r6, r0, #5
 8006e44:	d504      	bpl.n	8006e50 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e46:	620a      	str	r2, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e48:	2220      	movs	r2, #32
 8006e4a:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e50:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	d030      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e56:	2220      	movs	r2, #32
 8006e58:	4213      	tst	r3, r2
 8006e5a:	d006      	beq.n	8006e6a <HAL_UART_IRQHandler+0xba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e5c:	4210      	tst	r0, r2
 8006e5e:	d004      	beq.n	8006e6a <HAL_UART_IRQHandler+0xba>
        if (huart->RxISR != NULL)
 8006e60:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_UART_IRQHandler+0xba>
          huart->RxISR(huart);
 8006e66:	0020      	movs	r0, r4
 8006e68:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e6a:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8006e6c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e6e:	2740      	movs	r7, #64	@ 0x40
 8006e70:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e72:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e74:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e76:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8006e78:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e7a:	431e      	orrs	r6, r3
 8006e7c:	d021      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 8006e7e:	f7ff fead 	bl	8006bdc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	423b      	tst	r3, r7
 8006e88:	d017      	beq.n	8006eba <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e94:	6822      	ldr	r2, [r4, #0]
 8006e96:	6893      	ldr	r3, [r2, #8]
 8006e98:	43bb      	bics	r3, r7
 8006e9a:	6093      	str	r3, [r2, #8]
 8006e9c:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8006ea0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d009      	beq.n	8006eba <HAL_UART_IRQHandler+0x10a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ea6:	4b69      	ldr	r3, [pc, #420]	@ (800704c <HAL_UART_IRQHandler+0x29c>)
 8006ea8:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eaa:	f7fe f9e9 	bl	8005280 <HAL_DMA_Abort_IT>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eb2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8006eb4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006eb6:	4798      	blx	r3
}
 8006eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8006eba:	0020      	movs	r0, r4
 8006ebc:	f7ff ff36 	bl	8006d2c <HAL_UART_ErrorCallback>
 8006ec0:	e7fa      	b.n	8006eb8 <HAL_UART_IRQHandler+0x108>
        HAL_UART_ErrorCallback(huart);
 8006ec2:	f7ff ff33 	bl	8006d2c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec6:	67ee      	str	r6, [r5, #124]	@ 0x7c
 8006ec8:	e7f6      	b.n	8006eb8 <HAL_UART_IRQHandler+0x108>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eca:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006ecc:	2a01      	cmp	r2, #1
 8006ece:	d000      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x122>
 8006ed0:	e096      	b.n	8007000 <HAL_UART_IRQHandler+0x250>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ed2:	2510      	movs	r5, #16
 8006ed4:	422b      	tst	r3, r5
 8006ed6:	d100      	bne.n	8006eda <HAL_UART_IRQHandler+0x12a>
 8006ed8:	e092      	b.n	8007000 <HAL_UART_IRQHandler+0x250>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006eda:	4228      	tst	r0, r5
 8006edc:	d100      	bne.n	8006ee0 <HAL_UART_IRQHandler+0x130>
 8006ede:	e08f      	b.n	8007000 <HAL_UART_IRQHandler+0x250>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ee0:	620d      	str	r5, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee2:	688b      	ldr	r3, [r1, #8]
 8006ee4:	2040      	movs	r0, #64	@ 0x40
 8006ee6:	001e      	movs	r6, r3
 8006ee8:	4006      	ands	r6, r0
 8006eea:	4203      	tst	r3, r0
 8006eec:	d04f      	beq.n	8006f8e <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006eee:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8006ef0:	680b      	ldr	r3, [r1, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0de      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x108>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006efa:	0026      	movs	r6, r4
 8006efc:	3658      	adds	r6, #88	@ 0x58
 8006efe:	8837      	ldrh	r7, [r6, #0]
 8006f00:	429f      	cmp	r7, r3
 8006f02:	d9d9      	bls.n	8006eb8 <HAL_UART_IRQHandler+0x108>
        huart->RxXferCount = nb_remaining_rx_data;
 8006f04:	0027      	movs	r7, r4
 8006f06:	375a      	adds	r7, #90	@ 0x5a
 8006f08:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f0a:	698b      	ldr	r3, [r1, #24]
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	d032      	beq.n	8006f76 <HAL_UART_IRQHandler+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f10:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f14:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f18:	6821      	ldr	r1, [r4, #0]
 8006f1a:	4d4d      	ldr	r5, [pc, #308]	@ (8007050 <HAL_UART_IRQHandler+0x2a0>)
 8006f1c:	680b      	ldr	r3, [r1, #0]
 8006f1e:	402b      	ands	r3, r5
 8006f20:	600b      	str	r3, [r1, #0]
 8006f22:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f26:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2a:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	6821      	ldr	r1, [r4, #0]
 8006f30:	688b      	ldr	r3, [r1, #8]
 8006f32:	4393      	bics	r3, r2
 8006f34:	608b      	str	r3, [r1, #8]
 8006f36:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f3a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3e:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f42:	0023      	movs	r3, r4
 8006f44:	cb80      	ldmia	r3!, {r7}
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	4381      	bics	r1, r0
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	f38c 8810 	msr	PRIMASK, ip
          huart->RxState = HAL_UART_STATE_READY;
 8006f50:	2120      	movs	r1, #32
 8006f52:	67d9      	str	r1, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f54:	2300      	movs	r3, #0
 8006f56:	6623      	str	r3, [r4, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f58:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f60:	6822      	ldr	r2, [r4, #0]
 8006f62:	3512      	adds	r5, #18
 8006f64:	6813      	ldr	r3, [r2, #0]
 8006f66:	35ff      	adds	r5, #255	@ 0xff
 8006f68:	43ab      	bics	r3, r5
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f70:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8006f72:	f7fe f967 	bl	8005244 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f76:	2302      	movs	r3, #2
 8006f78:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f7a:	0023      	movs	r3, r4
 8006f7c:	335a      	adds	r3, #90	@ 0x5a
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	8831      	ldrh	r1, [r6, #0]
 8006f82:	1ac9      	subs	r1, r1, r3
 8006f84:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f86:	0020      	movs	r0, r4
 8006f88:	f7ff ff10 	bl	8006dac <HAL_UARTEx_RxEventCallback>
 8006f8c:	e794      	b.n	8006eb8 <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f8e:	0023      	movs	r3, r4
 8006f90:	0020      	movs	r0, r4
 8006f92:	3358      	adds	r3, #88	@ 0x58
 8006f94:	305a      	adds	r0, #90	@ 0x5a
 8006f96:	8819      	ldrh	r1, [r3, #0]
 8006f98:	8803      	ldrh	r3, [r0, #0]
      if ((huart->RxXferCount > 0U)
 8006f9a:	8800      	ldrh	r0, [r0, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f9c:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d100      	bne.n	8006fa4 <HAL_UART_IRQHandler+0x1f4>
 8006fa2:	e789      	b.n	8006eb8 <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fa4:	1ac9      	subs	r1, r1, r3
 8006fa6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006fa8:	2900      	cmp	r1, #0
 8006faa:	d100      	bne.n	8006fae <HAL_UART_IRQHandler+0x1fe>
 8006fac:	e784      	b.n	8006eb8 <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fae:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb2:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb6:	6820      	ldr	r0, [r4, #0]
 8006fb8:	4d26      	ldr	r5, [pc, #152]	@ (8007054 <HAL_UART_IRQHandler+0x2a4>)
 8006fba:	6803      	ldr	r3, [r0, #0]
 8006fbc:	402b      	ands	r3, r5
 8006fbe:	6003      	str	r3, [r0, #0]
 8006fc0:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fc4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fcc:	0023      	movs	r3, r4
 8006fce:	cb80      	ldmia	r3!, {r7}
 8006fd0:	68b8      	ldr	r0, [r7, #8]
 8006fd2:	4390      	bics	r0, r2
 8006fd4:	60b8      	str	r0, [r7, #8]
 8006fd6:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 8006fda:	2020      	movs	r0, #32
 8006fdc:	67d8      	str	r0, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fde:	6626      	str	r6, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 8006fe0:	66a6      	str	r6, [r4, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	3532      	adds	r5, #50	@ 0x32
 8006fee:	6813      	ldr	r3, [r2, #0]
 8006ff0:	35ff      	adds	r5, #255	@ 0xff
 8006ff2:	43ab      	bics	r3, r5
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	6663      	str	r3, [r4, #100]	@ 0x64
 8006ffe:	e7c2      	b.n	8006f86 <HAL_UART_IRQHandler+0x1d6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007000:	2280      	movs	r2, #128	@ 0x80
 8007002:	4213      	tst	r3, r2
 8007004:	d003      	beq.n	800700e <HAL_UART_IRQHandler+0x25e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007006:	4210      	tst	r0, r2
 8007008:	d001      	beq.n	800700e <HAL_UART_IRQHandler+0x25e>
    if (huart->TxISR != NULL)
 800700a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800700c:	e6e1      	b.n	8006dd2 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800700e:	2240      	movs	r2, #64	@ 0x40
 8007010:	4213      	tst	r3, r2
 8007012:	d100      	bne.n	8007016 <HAL_UART_IRQHandler+0x266>
 8007014:	e750      	b.n	8006eb8 <HAL_UART_IRQHandler+0x108>
 8007016:	4210      	tst	r0, r2
 8007018:	d100      	bne.n	800701c <HAL_UART_IRQHandler+0x26c>
 800701a:	e74d      	b.n	8006eb8 <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800701c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007020:	2301      	movs	r3, #1
 8007022:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007026:	6821      	ldr	r1, [r4, #0]
 8007028:	680b      	ldr	r3, [r1, #0]
 800702a:	4393      	bics	r3, r2
 800702c:	600b      	str	r3, [r1, #0]
 800702e:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007032:	2320      	movs	r3, #32
 8007034:	67e3      	str	r3, [r4, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007036:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007038:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800703a:	66e3      	str	r3, [r4, #108]	@ 0x6c
  HAL_UART_TxCpltCallback(huart);
 800703c:	f7fd fc92 	bl	8004964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007040:	e73a      	b.n	8006eb8 <HAL_UART_IRQHandler+0x108>
 8007042:	46c0      	nop			@ (mov r8, r8)
 8007044:	0000080f 	.word	0x0000080f
 8007048:	04000120 	.word	0x04000120
 800704c:	08006d97 	.word	0x08006d97
 8007050:	fffffeff 	.word	0xfffffeff
 8007054:	fffffedf 	.word	0xfffffedf

08007058 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007058:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800705a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 800705c:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800705e:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007060:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007062:	2b01      	cmp	r3, #1
 8007064:	d106      	bne.n	8007074 <UART_DMARxHalfCplt+0x1c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007066:	0003      	movs	r3, r0
 8007068:	3358      	adds	r3, #88	@ 0x58
 800706a:	8819      	ldrh	r1, [r3, #0]
 800706c:	0849      	lsrs	r1, r1, #1
 800706e:	f7ff fe9d 	bl	8006dac <HAL_UARTEx_RxEventCallback>
}
 8007072:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007074:	f7ff fe59 	bl	8006d2a <HAL_UART_RxHalfCpltCallback>
}
 8007078:	e7fb      	b.n	8007072 <UART_DMARxHalfCplt+0x1a>
	...

0800707c <UART_DMAReceiveCplt>:
{
 800707c:	0003      	movs	r3, r0
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800707e:	699b      	ldr	r3, [r3, #24]
{
 8007080:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007082:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007084:	2b20      	cmp	r3, #32
 8007086:	d036      	beq.n	80070f6 <UART_DMAReceiveCplt+0x7a>
    huart->RxXferCount = 0U;
 8007088:	0003      	movs	r3, r0
 800708a:	2200      	movs	r2, #0
 800708c:	335a      	adds	r3, #90	@ 0x5a
 800708e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007090:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007094:	2301      	movs	r3, #1
 8007096:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800709a:	6801      	ldr	r1, [r0, #0]
 800709c:	4d1d      	ldr	r5, [pc, #116]	@ (8007114 <UART_DMAReceiveCplt+0x98>)
 800709e:	680a      	ldr	r2, [r1, #0]
 80070a0:	402a      	ands	r2, r5
 80070a2:	600a      	str	r2, [r1, #0]
 80070a4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ac:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b0:	6801      	ldr	r1, [r0, #0]
 80070b2:	688a      	ldr	r2, [r1, #8]
 80070b4:	439a      	bics	r2, r3
 80070b6:	608a      	str	r2, [r1, #8]
 80070b8:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070bc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070c4:	0003      	movs	r3, r0
 80070c6:	cb02      	ldmia	r3!, {r1}
 80070c8:	3542      	adds	r5, #66	@ 0x42
 80070ca:	688a      	ldr	r2, [r1, #8]
 80070cc:	35ff      	adds	r5, #255	@ 0xff
 80070ce:	43aa      	bics	r2, r5
 80070d0:	608a      	str	r2, [r1, #8]
 80070d2:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 80070d6:	2220      	movs	r2, #32
 80070d8:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070da:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d10a      	bne.n	80070f6 <UART_DMAReceiveCplt+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e4:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e8:	2410      	movs	r4, #16
 80070ea:	6802      	ldr	r2, [r0, #0]
 80070ec:	6813      	ldr	r3, [r2, #0]
 80070ee:	43a3      	bics	r3, r4
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	f381 8810 	msr	PRIMASK, r1
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f6:	2300      	movs	r3, #0
 80070f8:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fa:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d105      	bne.n	800710c <UART_DMAReceiveCplt+0x90>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007100:	0003      	movs	r3, r0
 8007102:	3358      	adds	r3, #88	@ 0x58
 8007104:	8819      	ldrh	r1, [r3, #0]
 8007106:	f7ff fe51 	bl	8006dac <HAL_UARTEx_RxEventCallback>
}
 800710a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_RxCpltCallback(huart);
 800710c:	f7fd fc30 	bl	8004970 <HAL_UART_RxCpltCallback>
}
 8007110:	e7fb      	b.n	800710a <UART_DMAReceiveCplt+0x8e>
 8007112:	46c0      	nop			@ (mov r8, r8)
 8007114:	fffffeff 	.word	0xfffffeff

08007118 <UART_SetConfig>:
{
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800711c:	6925      	ldr	r5, [r4, #16]
 800711e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007120:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007122:	4329      	orrs	r1, r5
 8007124:	6965      	ldr	r5, [r4, #20]
 8007126:	69c2      	ldr	r2, [r0, #28]
 8007128:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	4d3d      	ldr	r5, [pc, #244]	@ (8007224 <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800712e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007130:	4028      	ands	r0, r5
 8007132:	4301      	orrs	r1, r0
 8007134:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007136:	6859      	ldr	r1, [r3, #4]
 8007138:	483b      	ldr	r0, [pc, #236]	@ (8007228 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 800713a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800713c:	4001      	ands	r1, r0
 800713e:	68e0      	ldr	r0, [r4, #12]
 8007140:	4301      	orrs	r1, r0
 8007142:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007144:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007146:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8007148:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800714a:	4d38      	ldr	r5, [pc, #224]	@ (800722c <UART_SetConfig+0x114>)
 800714c:	4028      	ands	r0, r5
 800714e:	4301      	orrs	r1, r0
 8007150:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007152:	4937      	ldr	r1, [pc, #220]	@ (8007230 <UART_SetConfig+0x118>)
 8007154:	428b      	cmp	r3, r1
 8007156:	d115      	bne.n	8007184 <UART_SetConfig+0x6c>
 8007158:	2103      	movs	r1, #3
 800715a:	4b36      	ldr	r3, [pc, #216]	@ (8007234 <UART_SetConfig+0x11c>)
 800715c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715e:	400b      	ands	r3, r1
 8007160:	3b01      	subs	r3, #1
 8007162:	2b02      	cmp	r3, #2
 8007164:	d851      	bhi.n	800720a <UART_SetConfig+0xf2>
 8007166:	4934      	ldr	r1, [pc, #208]	@ (8007238 <UART_SetConfig+0x120>)
 8007168:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800716a:	2380      	movs	r3, #128	@ 0x80
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	429a      	cmp	r2, r3
 8007170:	d127      	bne.n	80071c2 <UART_SetConfig+0xaa>
    switch (clocksource)
 8007172:	2808      	cmp	r0, #8
 8007174:	d847      	bhi.n	8007206 <UART_SetConfig+0xee>
 8007176:	f7f8 ffcf 	bl	8000118 <__gnu_thumb1_case_uqi>
 800717a:	464c      	.short	0x464c
 800717c:	460b460e 	.word	0x460b460e
 8007180:	4646      	.short	0x4646
 8007182:	0f          	.byte	0x0f
 8007183:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007184:	492d      	ldr	r1, [pc, #180]	@ (800723c <UART_SetConfig+0x124>)
 8007186:	185b      	adds	r3, r3, r1
 8007188:	1e59      	subs	r1, r3, #1
 800718a:	418b      	sbcs	r3, r1
 800718c:	0118      	lsls	r0, r3, #4
 800718e:	e7ec      	b.n	800716a <UART_SetConfig+0x52>
        pclk = HAL_RCC_GetSysClockFreq();
 8007190:	f7fe fe62 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8007194:	e03f      	b.n	8007216 <UART_SetConfig+0xfe>
    switch (clocksource)
 8007196:	4a2a      	ldr	r2, [pc, #168]	@ (8007240 <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007198:	6861      	ldr	r1, [r4, #4]
 800719a:	0052      	lsls	r2, r2, #1
 800719c:	0848      	lsrs	r0, r1, #1
 800719e:	1810      	adds	r0, r2, r0
 80071a0:	f7f8 ffd8 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a4:	0002      	movs	r2, r0
 80071a6:	4b27      	ldr	r3, [pc, #156]	@ (8007244 <UART_SetConfig+0x12c>)
 80071a8:	3a10      	subs	r2, #16
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d82b      	bhi.n	8007206 <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071ae:	230f      	movs	r3, #15
 80071b0:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071b2:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071b4:	439a      	bics	r2, r3
 80071b6:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071b8:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80071ba:	6822      	ldr	r2, [r4, #0]
 80071bc:	4303      	orrs	r3, r0
 80071be:	60d3      	str	r3, [r2, #12]
 80071c0:	e02b      	b.n	800721a <UART_SetConfig+0x102>
    switch (clocksource)
 80071c2:	2808      	cmp	r0, #8
 80071c4:	d81f      	bhi.n	8007206 <UART_SetConfig+0xee>
 80071c6:	f7f8 ffa7 	bl	8000118 <__gnu_thumb1_case_uqi>
 80071ca:	1e13      	.short	0x1e13
 80071cc:	1e181e05 	.word	0x1e181e05
 80071d0:	1e1e      	.short	0x1e1e
 80071d2:	1b          	.byte	0x1b
 80071d3:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 80071d4:	481a      	ldr	r0, [pc, #104]	@ (8007240 <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071d6:	6861      	ldr	r1, [r4, #4]
 80071d8:	084b      	lsrs	r3, r1, #1
 80071da:	1818      	adds	r0, r3, r0
 80071dc:	f7f8 ffba 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e0:	0002      	movs	r2, r0
 80071e2:	4b18      	ldr	r3, [pc, #96]	@ (8007244 <UART_SetConfig+0x12c>)
 80071e4:	3a10      	subs	r2, #16
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d80d      	bhi.n	8007206 <UART_SetConfig+0xee>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	60d8      	str	r0, [r3, #12]
 80071ee:	e014      	b.n	800721a <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f0:	f7fe fee2 	bl	8005fb8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d010      	beq.n	800721a <UART_SetConfig+0x102>
 80071f8:	e7ed      	b.n	80071d6 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 80071fa:	f7fe fe2d 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
        break;
 80071fe:	e7f9      	b.n	80071f4 <UART_SetConfig+0xdc>
    switch (clocksource)
 8007200:	2080      	movs	r0, #128	@ 0x80
 8007202:	0200      	lsls	r0, r0, #8
 8007204:	e7e7      	b.n	80071d6 <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8007206:	2001      	movs	r0, #1
 8007208:	e008      	b.n	800721c <UART_SetConfig+0x104>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800720a:	2380      	movs	r3, #128	@ 0x80
 800720c:	021b      	lsls	r3, r3, #8
 800720e:	429a      	cmp	r2, r3
 8007210:	d1ee      	bne.n	80071f0 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007212:	f7fe fed1 	bl	8005fb8 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8007216:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8007218:	d1be      	bne.n	8007198 <UART_SetConfig+0x80>
        pclk = (uint32_t) HSI_VALUE;
 800721a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800721c:	2300      	movs	r3, #0
 800721e:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8007220:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	ffff69f3 	.word	0xffff69f3
 8007228:	ffffcfff 	.word	0xffffcfff
 800722c:	fffff4ff 	.word	0xfffff4ff
 8007230:	40013800 	.word	0x40013800
 8007234:	40021000 	.word	0x40021000
 8007238:	0800cfd8 	.word	0x0800cfd8
 800723c:	bfffbc00 	.word	0xbfffbc00
 8007240:	007a1200 	.word	0x007a1200
 8007244:	0000ffef 	.word	0x0000ffef

08007248 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007248:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800724a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800724c:	071a      	lsls	r2, r3, #28
 800724e:	d506      	bpl.n	800725e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007250:	6801      	ldr	r1, [r0, #0]
 8007252:	4c28      	ldr	r4, [pc, #160]	@ (80072f4 <UART_AdvFeatureConfig+0xac>)
 8007254:	684a      	ldr	r2, [r1, #4]
 8007256:	4022      	ands	r2, r4
 8007258:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800725a:	4322      	orrs	r2, r4
 800725c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800725e:	07da      	lsls	r2, r3, #31
 8007260:	d506      	bpl.n	8007270 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007262:	6801      	ldr	r1, [r0, #0]
 8007264:	4c24      	ldr	r4, [pc, #144]	@ (80072f8 <UART_AdvFeatureConfig+0xb0>)
 8007266:	684a      	ldr	r2, [r1, #4]
 8007268:	4022      	ands	r2, r4
 800726a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800726c:	4322      	orrs	r2, r4
 800726e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007270:	079a      	lsls	r2, r3, #30
 8007272:	d506      	bpl.n	8007282 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007274:	6801      	ldr	r1, [r0, #0]
 8007276:	4c21      	ldr	r4, [pc, #132]	@ (80072fc <UART_AdvFeatureConfig+0xb4>)
 8007278:	684a      	ldr	r2, [r1, #4]
 800727a:	4022      	ands	r2, r4
 800727c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800727e:	4322      	orrs	r2, r4
 8007280:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007282:	075a      	lsls	r2, r3, #29
 8007284:	d506      	bpl.n	8007294 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007286:	6801      	ldr	r1, [r0, #0]
 8007288:	4c1d      	ldr	r4, [pc, #116]	@ (8007300 <UART_AdvFeatureConfig+0xb8>)
 800728a:	684a      	ldr	r2, [r1, #4]
 800728c:	4022      	ands	r2, r4
 800728e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007290:	4322      	orrs	r2, r4
 8007292:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007294:	06da      	lsls	r2, r3, #27
 8007296:	d506      	bpl.n	80072a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007298:	6801      	ldr	r1, [r0, #0]
 800729a:	4c1a      	ldr	r4, [pc, #104]	@ (8007304 <UART_AdvFeatureConfig+0xbc>)
 800729c:	688a      	ldr	r2, [r1, #8]
 800729e:	4022      	ands	r2, r4
 80072a0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80072a2:	4322      	orrs	r2, r4
 80072a4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072a6:	069a      	lsls	r2, r3, #26
 80072a8:	d506      	bpl.n	80072b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072aa:	6801      	ldr	r1, [r0, #0]
 80072ac:	4c16      	ldr	r4, [pc, #88]	@ (8007308 <UART_AdvFeatureConfig+0xc0>)
 80072ae:	688a      	ldr	r2, [r1, #8]
 80072b0:	4022      	ands	r2, r4
 80072b2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80072b4:	4322      	orrs	r2, r4
 80072b6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072b8:	065a      	lsls	r2, r3, #25
 80072ba:	d510      	bpl.n	80072de <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072bc:	6801      	ldr	r1, [r0, #0]
 80072be:	4d13      	ldr	r5, [pc, #76]	@ (800730c <UART_AdvFeatureConfig+0xc4>)
 80072c0:	684a      	ldr	r2, [r1, #4]
 80072c2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80072c4:	402a      	ands	r2, r5
 80072c6:	4322      	orrs	r2, r4
 80072c8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ca:	2280      	movs	r2, #128	@ 0x80
 80072cc:	0352      	lsls	r2, r2, #13
 80072ce:	4294      	cmp	r4, r2
 80072d0:	d105      	bne.n	80072de <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d2:	684a      	ldr	r2, [r1, #4]
 80072d4:	4c0e      	ldr	r4, [pc, #56]	@ (8007310 <UART_AdvFeatureConfig+0xc8>)
 80072d6:	4022      	ands	r2, r4
 80072d8:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80072da:	4322      	orrs	r2, r4
 80072dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072de:	061b      	lsls	r3, r3, #24
 80072e0:	d506      	bpl.n	80072f0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072e2:	6802      	ldr	r2, [r0, #0]
 80072e4:	490b      	ldr	r1, [pc, #44]	@ (8007314 <UART_AdvFeatureConfig+0xcc>)
 80072e6:	6853      	ldr	r3, [r2, #4]
 80072e8:	400b      	ands	r3, r1
 80072ea:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80072ec:	430b      	orrs	r3, r1
 80072ee:	6053      	str	r3, [r2, #4]
}
 80072f0:	bd30      	pop	{r4, r5, pc}
 80072f2:	46c0      	nop			@ (mov r8, r8)
 80072f4:	ffff7fff 	.word	0xffff7fff
 80072f8:	fffdffff 	.word	0xfffdffff
 80072fc:	fffeffff 	.word	0xfffeffff
 8007300:	fffbffff 	.word	0xfffbffff
 8007304:	ffffefff 	.word	0xffffefff
 8007308:	ffffdfff 	.word	0xffffdfff
 800730c:	ffefffff 	.word	0xffefffff
 8007310:	ff9fffff 	.word	0xff9fffff
 8007314:	fff7ffff 	.word	0xfff7ffff

08007318 <UART_WaitOnFlagUntilTimeout>:
{
 8007318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800731a:	0004      	movs	r4, r0
 800731c:	000d      	movs	r5, r1
 800731e:	0017      	movs	r7, r2
 8007320:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	69d3      	ldr	r3, [r2, #28]
 8007326:	402b      	ands	r3, r5
 8007328:	1b5b      	subs	r3, r3, r5
 800732a:	4259      	negs	r1, r3
 800732c:	414b      	adcs	r3, r1
 800732e:	42bb      	cmp	r3, r7
 8007330:	d001      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8007332:	2000      	movs	r0, #0
 8007334:	e025      	b.n	8007382 <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8007336:	9b08      	ldr	r3, [sp, #32]
 8007338:	3301      	adds	r3, #1
 800733a:	d0f3      	beq.n	8007324 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733c:	f7fd feac 	bl	8005098 <HAL_GetTick>
 8007340:	9b00      	ldr	r3, [sp, #0]
 8007342:	1ac0      	subs	r0, r0, r3
 8007344:	9b08      	ldr	r3, [sp, #32]
 8007346:	4298      	cmp	r0, r3
 8007348:	d82c      	bhi.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x8c>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d02a      	beq.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	0752      	lsls	r2, r2, #29
 8007354:	d5e5      	bpl.n	8007322 <UART_WaitOnFlagUntilTimeout+0xa>
 8007356:	002a      	movs	r2, r5
 8007358:	2140      	movs	r1, #64	@ 0x40
 800735a:	3a40      	subs	r2, #64	@ 0x40
 800735c:	438a      	bics	r2, r1
 800735e:	d0e0      	beq.n	8007322 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007360:	69da      	ldr	r2, [r3, #28]
 8007362:	2608      	movs	r6, #8
 8007364:	0011      	movs	r1, r2
 8007366:	4031      	ands	r1, r6
 8007368:	9101      	str	r1, [sp, #4]
 800736a:	4232      	tst	r2, r6
 800736c:	d00a      	beq.n	8007384 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 800736e:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007370:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8007372:	f7ff fc33 	bl	8006bdc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007376:	19a3      	adds	r3, r4, r6
 8007378:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800737a:	2300      	movs	r3, #0
          return HAL_ERROR;
 800737c:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 800737e:	3478      	adds	r4, #120	@ 0x78
 8007380:	7023      	strb	r3, [r4, #0]
}
 8007382:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007384:	2280      	movs	r2, #128	@ 0x80
 8007386:	69d9      	ldr	r1, [r3, #28]
 8007388:	0112      	lsls	r2, r2, #4
 800738a:	4211      	tst	r1, r2
 800738c:	d0c9      	beq.n	8007322 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800738e:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8007390:	0020      	movs	r0, r4
 8007392:	f7ff fc23 	bl	8006bdc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007396:	0023      	movs	r3, r4
 8007398:	2220      	movs	r2, #32
 800739a:	3308      	adds	r3, #8
 800739c:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	3478      	adds	r4, #120	@ 0x78
 80073a2:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80073a4:	2003      	movs	r0, #3
 80073a6:	e7ec      	b.n	8007382 <UART_WaitOnFlagUntilTimeout+0x6a>

080073a8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a8:	0003      	movs	r3, r0
{
 80073aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ac:	2500      	movs	r5, #0
{
 80073ae:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b0:	3308      	adds	r3, #8
 80073b2:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80073b4:	f7fd fe70 	bl	8005098 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073b8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80073ba:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	071b      	lsls	r3, r3, #28
 80073c0:	d51d      	bpl.n	80073fe <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073c2:	2180      	movs	r1, #128	@ 0x80
 80073c4:	4b26      	ldr	r3, [pc, #152]	@ (8007460 <UART_CheckIdleState+0xb8>)
 80073c6:	002a      	movs	r2, r5
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	0389      	lsls	r1, r1, #14
 80073cc:	0003      	movs	r3, r0
 80073ce:	0020      	movs	r0, r4
 80073d0:	f7ff ffa2 	bl	8007318 <UART_WaitOnFlagUntilTimeout>
 80073d4:	42a8      	cmp	r0, r5
 80073d6:	d012      	beq.n	80073fe <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073dc:	2301      	movs	r3, #1
 80073de:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80073e2:	2080      	movs	r0, #128	@ 0x80
 80073e4:	6822      	ldr	r2, [r4, #0]
 80073e6:	6813      	ldr	r3, [r2, #0]
 80073e8:	4383      	bics	r3, r0
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80073f0:	2320      	movs	r3, #32
 80073f2:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80073f4:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80073f6:	2300      	movs	r3, #0
 80073f8:	3478      	adds	r4, #120	@ 0x78
 80073fa:	7023      	strb	r3, [r4, #0]
}
 80073fc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073fe:	0025      	movs	r5, r4
 8007400:	cd08      	ldmia	r5!, {r3}
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	075b      	lsls	r3, r3, #29
 8007406:	d523      	bpl.n	8007450 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007408:	2180      	movs	r1, #128	@ 0x80
 800740a:	4b15      	ldr	r3, [pc, #84]	@ (8007460 <UART_CheckIdleState+0xb8>)
 800740c:	2200      	movs	r2, #0
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	0020      	movs	r0, r4
 8007412:	0033      	movs	r3, r6
 8007414:	03c9      	lsls	r1, r1, #15
 8007416:	f7ff ff7f 	bl	8007318 <UART_WaitOnFlagUntilTimeout>
 800741a:	2800      	cmp	r0, #0
 800741c:	d018      	beq.n	8007450 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800741e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007422:	2201      	movs	r2, #1
 8007424:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007428:	6821      	ldr	r1, [r4, #0]
 800742a:	4e0e      	ldr	r6, [pc, #56]	@ (8007464 <UART_CheckIdleState+0xbc>)
 800742c:	680b      	ldr	r3, [r1, #0]
 800742e:	4033      	ands	r3, r6
 8007430:	600b      	str	r3, [r1, #0]
 8007432:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007436:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800743a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743e:	6821      	ldr	r1, [r4, #0]
 8007440:	688b      	ldr	r3, [r1, #8]
 8007442:	4393      	bics	r3, r2
 8007444:	608b      	str	r3, [r1, #8]
 8007446:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800744a:	2320      	movs	r3, #32
 800744c:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800744e:	e7d1      	b.n	80073f4 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8007450:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007452:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007454:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007456:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007458:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800745a:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800745c:	e7cb      	b.n	80073f6 <UART_CheckIdleState+0x4e>
 800745e:	46c0      	nop			@ (mov r8, r8)
 8007460:	01ffffff 	.word	0x01ffffff
 8007464:	fffffedf 	.word	0xfffffedf

08007468 <HAL_UART_Init>:
{
 8007468:	b510      	push	{r4, lr}
 800746a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800746c:	d101      	bne.n	8007472 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800746e:	2001      	movs	r0, #1
}
 8007470:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8007472:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8007478:	0002      	movs	r2, r0
 800747a:	3278      	adds	r2, #120	@ 0x78
 800747c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800747e:	f7fd fca3 	bl	8004dc8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8007482:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8007484:	2101      	movs	r1, #1
 8007486:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007488:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	438b      	bics	r3, r1
 800748e:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007490:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8007496:	0020      	movs	r0, r4
 8007498:	f7ff fed6 	bl	8007248 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800749c:	0020      	movs	r0, r4
 800749e:	f7ff fe3b 	bl	8007118 <UART_SetConfig>
 80074a2:	2801      	cmp	r0, #1
 80074a4:	d0e3      	beq.n	800746e <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	4907      	ldr	r1, [pc, #28]	@ (80074c8 <HAL_UART_Init+0x60>)
 80074aa:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80074ac:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80074ae:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80074b0:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80074b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	438a      	bics	r2, r1
 80074b8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80074ba:	2201      	movs	r2, #1
 80074bc:	6819      	ldr	r1, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80074c2:	f7ff ff71 	bl	80073a8 <UART_CheckIdleState>
 80074c6:	e7d3      	b.n	8007470 <HAL_UART_Init+0x8>
 80074c8:	fffff7ff 	.word	0xfffff7ff

080074cc <UART_Start_Receive_DMA>:
{
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 80074d0:	0002      	movs	r2, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d2:	0006      	movs	r6, r0
  huart->RxXferSize = Size;
 80074d4:	3258      	adds	r2, #88	@ 0x58
  huart->pRxBuffPtr = pData;
 80074d6:	6541      	str	r1, [r0, #84]	@ 0x54
{
 80074d8:	000f      	movs	r7, r1
  huart->RxXferSize = Size;
 80074da:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074dc:	2122      	movs	r1, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074de:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074e0:	1d05      	adds	r5, r0, #4
{
 80074e2:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 80074e4:	6f40      	ldr	r0, [r0, #116]	@ 0x74
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e6:	3608      	adds	r6, #8
 80074e8:	67f2      	str	r2, [r6, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074ea:	67e9      	str	r1, [r5, #124]	@ 0x7c
  if (huart->hdmarx != NULL)
 80074ec:	4290      	cmp	r0, r2
 80074ee:	d013      	beq.n	8007518 <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80074f0:	491d      	ldr	r1, [pc, #116]	@ (8007568 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 80074f2:	6342      	str	r2, [r0, #52]	@ 0x34
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80074f4:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80074f6:	491d      	ldr	r1, [pc, #116]	@ (800756c <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80074f8:	003a      	movs	r2, r7
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80074fa:	62c1      	str	r1, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80074fc:	491c      	ldr	r1, [pc, #112]	@ (8007570 <UART_Start_Receive_DMA+0xa4>)
 80074fe:	6301      	str	r1, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007500:	6821      	ldr	r1, [r4, #0]
 8007502:	3124      	adds	r1, #36	@ 0x24
 8007504:	f7fd fe62 	bl	80051cc <HAL_DMA_Start_IT>
 8007508:	2800      	cmp	r0, #0
 800750a:	d005      	beq.n	8007518 <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800750c:	2310      	movs	r3, #16
      return HAL_ERROR;
 800750e:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007510:	67f3      	str	r3, [r6, #124]	@ 0x7c
      huart->RxState = HAL_UART_STATE_READY;
 8007512:	18db      	adds	r3, r3, r3
 8007514:	67eb      	str	r3, [r5, #124]	@ 0x7c
}
 8007516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00b      	beq.n	8007536 <UART_Start_Receive_DMA+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007522:	2301      	movs	r3, #1
 8007524:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007528:	6822      	ldr	r2, [r4, #0]
 800752a:	33ff      	adds	r3, #255	@ 0xff
 800752c:	6810      	ldr	r0, [r2, #0]
 800752e:	4303      	orrs	r3, r0
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007536:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753a:	2301      	movs	r3, #1
 800753c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007540:	6821      	ldr	r1, [r4, #0]
 8007542:	688a      	ldr	r2, [r1, #8]
 8007544:	431a      	orrs	r2, r3
 8007546:	608a      	str	r2, [r1, #8]
 8007548:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007550:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	333f      	adds	r3, #63	@ 0x3f
 8007558:	6890      	ldr	r0, [r2, #8]
 800755a:	4303      	orrs	r3, r0
 800755c:	6093      	str	r3, [r2, #8]
 800755e:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8007562:	2000      	movs	r0, #0
 8007564:	e7d7      	b.n	8007516 <UART_Start_Receive_DMA+0x4a>
 8007566:	46c0      	nop			@ (mov r8, r8)
 8007568:	0800707d 	.word	0x0800707d
 800756c:	08007059 	.word	0x08007059
 8007570:	08006d2f 	.word	0x08006d2f

08007574 <HAL_UART_Receive_DMA>:
{
 8007574:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8007576:	3004      	adds	r0, #4
{
 8007578:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800757a:	6fc4      	ldr	r4, [r0, #124]	@ 0x7c
    return HAL_BUSY;
 800757c:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800757e:	2c20      	cmp	r4, #32
 8007580:	d125      	bne.n	80075ce <HAL_UART_Receive_DMA+0x5a>
      return HAL_ERROR;
 8007582:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8007584:	2900      	cmp	r1, #0
 8007586:	d022      	beq.n	80075ce <HAL_UART_Receive_DMA+0x5a>
 8007588:	2a00      	cmp	r2, #0
 800758a:	d020      	beq.n	80075ce <HAL_UART_Receive_DMA+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800758c:	2080      	movs	r0, #128	@ 0x80
 800758e:	689c      	ldr	r4, [r3, #8]
 8007590:	0140      	lsls	r0, r0, #5
 8007592:	4284      	cmp	r4, r0
 8007594:	d105      	bne.n	80075a2 <HAL_UART_Receive_DMA+0x2e>
 8007596:	6918      	ldr	r0, [r3, #16]
 8007598:	2800      	cmp	r0, #0
 800759a:	d102      	bne.n	80075a2 <HAL_UART_Receive_DMA+0x2e>
      return HAL_ERROR;
 800759c:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800759e:	4201      	tst	r1, r0
 80075a0:	d115      	bne.n	80075ce <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a2:	2000      	movs	r0, #0
 80075a4:	6618      	str	r0, [r3, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	6840      	ldr	r0, [r0, #4]
 80075aa:	0200      	lsls	r0, r0, #8
 80075ac:	d50c      	bpl.n	80075c8 <HAL_UART_Receive_DMA+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ae:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b2:	2001      	movs	r0, #1
 80075b4:	f380 8810 	msr	PRIMASK, r0
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075b8:	2080      	movs	r0, #128	@ 0x80
 80075ba:	681c      	ldr	r4, [r3, #0]
 80075bc:	04c0      	lsls	r0, r0, #19
 80075be:	6826      	ldr	r6, [r4, #0]
 80075c0:	4330      	orrs	r0, r6
 80075c2:	6020      	str	r0, [r4, #0]
 80075c4:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075c8:	0018      	movs	r0, r3
 80075ca:	f7ff ff7f 	bl	80074cc <UART_Start_Receive_DMA>
}
 80075ce:	bd70      	pop	{r4, r5, r6, pc}

080075d0 <__cvt>:
 80075d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d2:	001f      	movs	r7, r3
 80075d4:	2300      	movs	r3, #0
 80075d6:	0016      	movs	r6, r2
 80075d8:	b08b      	sub	sp, #44	@ 0x2c
 80075da:	429f      	cmp	r7, r3
 80075dc:	da04      	bge.n	80075e8 <__cvt+0x18>
 80075de:	2180      	movs	r1, #128	@ 0x80
 80075e0:	0609      	lsls	r1, r1, #24
 80075e2:	187b      	adds	r3, r7, r1
 80075e4:	001f      	movs	r7, r3
 80075e6:	232d      	movs	r3, #45	@ 0x2d
 80075e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80075ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80075ec:	7013      	strb	r3, [r2, #0]
 80075ee:	2320      	movs	r3, #32
 80075f0:	2203      	movs	r2, #3
 80075f2:	439d      	bics	r5, r3
 80075f4:	2d46      	cmp	r5, #70	@ 0x46
 80075f6:	d007      	beq.n	8007608 <__cvt+0x38>
 80075f8:	002b      	movs	r3, r5
 80075fa:	3b45      	subs	r3, #69	@ 0x45
 80075fc:	4259      	negs	r1, r3
 80075fe:	414b      	adcs	r3, r1
 8007600:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007602:	3a01      	subs	r2, #1
 8007604:	18cb      	adds	r3, r1, r3
 8007606:	9310      	str	r3, [sp, #64]	@ 0x40
 8007608:	ab09      	add	r3, sp, #36	@ 0x24
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	ab08      	add	r3, sp, #32
 800760e:	9303      	str	r3, [sp, #12]
 8007610:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007612:	9200      	str	r2, [sp, #0]
 8007614:	9302      	str	r3, [sp, #8]
 8007616:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007618:	0032      	movs	r2, r6
 800761a:	9301      	str	r3, [sp, #4]
 800761c:	003b      	movs	r3, r7
 800761e:	f000 febf 	bl	80083a0 <_dtoa_r>
 8007622:	0004      	movs	r4, r0
 8007624:	2d47      	cmp	r5, #71	@ 0x47
 8007626:	d11b      	bne.n	8007660 <__cvt+0x90>
 8007628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800762a:	07db      	lsls	r3, r3, #31
 800762c:	d511      	bpl.n	8007652 <__cvt+0x82>
 800762e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007630:	18c3      	adds	r3, r0, r3
 8007632:	9307      	str	r3, [sp, #28]
 8007634:	2200      	movs	r2, #0
 8007636:	2300      	movs	r3, #0
 8007638:	0030      	movs	r0, r6
 800763a:	0039      	movs	r1, r7
 800763c:	f7f8 ff10 	bl	8000460 <__aeabi_dcmpeq>
 8007640:	2800      	cmp	r0, #0
 8007642:	d001      	beq.n	8007648 <__cvt+0x78>
 8007644:	9b07      	ldr	r3, [sp, #28]
 8007646:	9309      	str	r3, [sp, #36]	@ 0x24
 8007648:	2230      	movs	r2, #48	@ 0x30
 800764a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764c:	9907      	ldr	r1, [sp, #28]
 800764e:	428b      	cmp	r3, r1
 8007650:	d320      	bcc.n	8007694 <__cvt+0xc4>
 8007652:	0020      	movs	r0, r4
 8007654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007656:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007658:	1b1b      	subs	r3, r3, r4
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	b00b      	add	sp, #44	@ 0x2c
 800765e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007660:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007662:	18c3      	adds	r3, r0, r3
 8007664:	9307      	str	r3, [sp, #28]
 8007666:	2d46      	cmp	r5, #70	@ 0x46
 8007668:	d1e4      	bne.n	8007634 <__cvt+0x64>
 800766a:	7803      	ldrb	r3, [r0, #0]
 800766c:	2b30      	cmp	r3, #48	@ 0x30
 800766e:	d10c      	bne.n	800768a <__cvt+0xba>
 8007670:	2200      	movs	r2, #0
 8007672:	2300      	movs	r3, #0
 8007674:	0030      	movs	r0, r6
 8007676:	0039      	movs	r1, r7
 8007678:	f7f8 fef2 	bl	8000460 <__aeabi_dcmpeq>
 800767c:	2800      	cmp	r0, #0
 800767e:	d104      	bne.n	800768a <__cvt+0xba>
 8007680:	2301      	movs	r3, #1
 8007682:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800768c:	9a07      	ldr	r2, [sp, #28]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	18d3      	adds	r3, r2, r3
 8007692:	e7ce      	b.n	8007632 <__cvt+0x62>
 8007694:	1c59      	adds	r1, r3, #1
 8007696:	9109      	str	r1, [sp, #36]	@ 0x24
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	e7d6      	b.n	800764a <__cvt+0x7a>

0800769c <__exponent>:
 800769c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769e:	232b      	movs	r3, #43	@ 0x2b
 80076a0:	b085      	sub	sp, #20
 80076a2:	0005      	movs	r5, r0
 80076a4:	1e0c      	subs	r4, r1, #0
 80076a6:	7002      	strb	r2, [r0, #0]
 80076a8:	da01      	bge.n	80076ae <__exponent+0x12>
 80076aa:	424c      	negs	r4, r1
 80076ac:	3302      	adds	r3, #2
 80076ae:	706b      	strb	r3, [r5, #1]
 80076b0:	2c09      	cmp	r4, #9
 80076b2:	dd2c      	ble.n	800770e <__exponent+0x72>
 80076b4:	ab02      	add	r3, sp, #8
 80076b6:	1dde      	adds	r6, r3, #7
 80076b8:	0020      	movs	r0, r4
 80076ba:	210a      	movs	r1, #10
 80076bc:	f7f8 feba 	bl	8000434 <__aeabi_idivmod>
 80076c0:	0037      	movs	r7, r6
 80076c2:	3130      	adds	r1, #48	@ 0x30
 80076c4:	3e01      	subs	r6, #1
 80076c6:	0020      	movs	r0, r4
 80076c8:	7031      	strb	r1, [r6, #0]
 80076ca:	210a      	movs	r1, #10
 80076cc:	9401      	str	r4, [sp, #4]
 80076ce:	f7f8 fdcb 	bl	8000268 <__divsi3>
 80076d2:	9b01      	ldr	r3, [sp, #4]
 80076d4:	0004      	movs	r4, r0
 80076d6:	2b63      	cmp	r3, #99	@ 0x63
 80076d8:	dcee      	bgt.n	80076b8 <__exponent+0x1c>
 80076da:	1eba      	subs	r2, r7, #2
 80076dc:	1ca8      	adds	r0, r5, #2
 80076de:	0001      	movs	r1, r0
 80076e0:	0013      	movs	r3, r2
 80076e2:	3430      	adds	r4, #48	@ 0x30
 80076e4:	7014      	strb	r4, [r2, #0]
 80076e6:	ac02      	add	r4, sp, #8
 80076e8:	3407      	adds	r4, #7
 80076ea:	429c      	cmp	r4, r3
 80076ec:	d80a      	bhi.n	8007704 <__exponent+0x68>
 80076ee:	2300      	movs	r3, #0
 80076f0:	4294      	cmp	r4, r2
 80076f2:	d303      	bcc.n	80076fc <__exponent+0x60>
 80076f4:	3309      	adds	r3, #9
 80076f6:	aa02      	add	r2, sp, #8
 80076f8:	189b      	adds	r3, r3, r2
 80076fa:	1bdb      	subs	r3, r3, r7
 80076fc:	18c0      	adds	r0, r0, r3
 80076fe:	1b40      	subs	r0, r0, r5
 8007700:	b005      	add	sp, #20
 8007702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007704:	781c      	ldrb	r4, [r3, #0]
 8007706:	3301      	adds	r3, #1
 8007708:	700c      	strb	r4, [r1, #0]
 800770a:	3101      	adds	r1, #1
 800770c:	e7eb      	b.n	80076e6 <__exponent+0x4a>
 800770e:	2330      	movs	r3, #48	@ 0x30
 8007710:	18e4      	adds	r4, r4, r3
 8007712:	70ab      	strb	r3, [r5, #2]
 8007714:	1d28      	adds	r0, r5, #4
 8007716:	70ec      	strb	r4, [r5, #3]
 8007718:	e7f1      	b.n	80076fe <__exponent+0x62>
	...

0800771c <_printf_float>:
 800771c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800771e:	b097      	sub	sp, #92	@ 0x5c
 8007720:	000d      	movs	r5, r1
 8007722:	920a      	str	r2, [sp, #40]	@ 0x28
 8007724:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8007726:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007728:	9009      	str	r0, [sp, #36]	@ 0x24
 800772a:	f000 fd21 	bl	8008170 <_localeconv_r>
 800772e:	6803      	ldr	r3, [r0, #0]
 8007730:	0018      	movs	r0, r3
 8007732:	930d      	str	r3, [sp, #52]	@ 0x34
 8007734:	f7f8 fce8 	bl	8000108 <strlen>
 8007738:	2300      	movs	r3, #0
 800773a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800773c:	9314      	str	r3, [sp, #80]	@ 0x50
 800773e:	7e2b      	ldrb	r3, [r5, #24]
 8007740:	2207      	movs	r2, #7
 8007742:	930c      	str	r3, [sp, #48]	@ 0x30
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	930e      	str	r3, [sp, #56]	@ 0x38
 8007748:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	05c9      	lsls	r1, r1, #23
 800774e:	d545      	bpl.n	80077dc <_printf_float+0xc0>
 8007750:	189b      	adds	r3, r3, r2
 8007752:	4393      	bics	r3, r2
 8007754:	001a      	movs	r2, r3
 8007756:	3208      	adds	r2, #8
 8007758:	6022      	str	r2, [r4, #0]
 800775a:	2201      	movs	r2, #1
 800775c:	681e      	ldr	r6, [r3, #0]
 800775e:	685f      	ldr	r7, [r3, #4]
 8007760:	007b      	lsls	r3, r7, #1
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	9311      	str	r3, [sp, #68]	@ 0x44
 8007766:	9610      	str	r6, [sp, #64]	@ 0x40
 8007768:	64ae      	str	r6, [r5, #72]	@ 0x48
 800776a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800776c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800776e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007770:	4ba7      	ldr	r3, [pc, #668]	@ (8007a10 <_printf_float+0x2f4>)
 8007772:	4252      	negs	r2, r2
 8007774:	f7fb fe18 	bl	80033a8 <__aeabi_dcmpun>
 8007778:	2800      	cmp	r0, #0
 800777a:	d131      	bne.n	80077e0 <_printf_float+0xc4>
 800777c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800777e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007780:	2201      	movs	r2, #1
 8007782:	4ba3      	ldr	r3, [pc, #652]	@ (8007a10 <_printf_float+0x2f4>)
 8007784:	4252      	negs	r2, r2
 8007786:	f7f8 fe7b 	bl	8000480 <__aeabi_dcmple>
 800778a:	2800      	cmp	r0, #0
 800778c:	d128      	bne.n	80077e0 <_printf_float+0xc4>
 800778e:	2200      	movs	r2, #0
 8007790:	2300      	movs	r3, #0
 8007792:	0030      	movs	r0, r6
 8007794:	0039      	movs	r1, r7
 8007796:	f7f8 fe69 	bl	800046c <__aeabi_dcmplt>
 800779a:	2800      	cmp	r0, #0
 800779c:	d003      	beq.n	80077a6 <_printf_float+0x8a>
 800779e:	002b      	movs	r3, r5
 80077a0:	222d      	movs	r2, #45	@ 0x2d
 80077a2:	3343      	adds	r3, #67	@ 0x43
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077a8:	4f9a      	ldr	r7, [pc, #616]	@ (8007a14 <_printf_float+0x2f8>)
 80077aa:	2b47      	cmp	r3, #71	@ 0x47
 80077ac:	d800      	bhi.n	80077b0 <_printf_float+0x94>
 80077ae:	4f9a      	ldr	r7, [pc, #616]	@ (8007a18 <_printf_float+0x2fc>)
 80077b0:	2303      	movs	r3, #3
 80077b2:	2400      	movs	r4, #0
 80077b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077b6:	612b      	str	r3, [r5, #16]
 80077b8:	3301      	adds	r3, #1
 80077ba:	439a      	bics	r2, r3
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077c0:	0029      	movs	r1, r5
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077c8:	aa15      	add	r2, sp, #84	@ 0x54
 80077ca:	f000 f9e5 	bl	8007b98 <_printf_common>
 80077ce:	3001      	adds	r0, #1
 80077d0:	d000      	beq.n	80077d4 <_printf_float+0xb8>
 80077d2:	e09e      	b.n	8007912 <_printf_float+0x1f6>
 80077d4:	2001      	movs	r0, #1
 80077d6:	4240      	negs	r0, r0
 80077d8:	b017      	add	sp, #92	@ 0x5c
 80077da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077dc:	3307      	adds	r3, #7
 80077de:	e7b8      	b.n	8007752 <_printf_float+0x36>
 80077e0:	0032      	movs	r2, r6
 80077e2:	003b      	movs	r3, r7
 80077e4:	0030      	movs	r0, r6
 80077e6:	0039      	movs	r1, r7
 80077e8:	f7fb fdde 	bl	80033a8 <__aeabi_dcmpun>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d00b      	beq.n	8007808 <_printf_float+0xec>
 80077f0:	2f00      	cmp	r7, #0
 80077f2:	da03      	bge.n	80077fc <_printf_float+0xe0>
 80077f4:	002b      	movs	r3, r5
 80077f6:	222d      	movs	r2, #45	@ 0x2d
 80077f8:	3343      	adds	r3, #67	@ 0x43
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077fe:	4f87      	ldr	r7, [pc, #540]	@ (8007a1c <_printf_float+0x300>)
 8007800:	2b47      	cmp	r3, #71	@ 0x47
 8007802:	d8d5      	bhi.n	80077b0 <_printf_float+0x94>
 8007804:	4f86      	ldr	r7, [pc, #536]	@ (8007a20 <_printf_float+0x304>)
 8007806:	e7d3      	b.n	80077b0 <_printf_float+0x94>
 8007808:	2220      	movs	r2, #32
 800780a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800780c:	686b      	ldr	r3, [r5, #4]
 800780e:	4394      	bics	r4, r2
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	d146      	bne.n	80078a2 <_printf_float+0x186>
 8007814:	3307      	adds	r3, #7
 8007816:	606b      	str	r3, [r5, #4]
 8007818:	2380      	movs	r3, #128	@ 0x80
 800781a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	4313      	orrs	r3, r2
 8007820:	2200      	movs	r2, #0
 8007822:	602b      	str	r3, [r5, #0]
 8007824:	9206      	str	r2, [sp, #24]
 8007826:	aa14      	add	r2, sp, #80	@ 0x50
 8007828:	9205      	str	r2, [sp, #20]
 800782a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800782c:	a90a      	add	r1, sp, #40	@ 0x28
 800782e:	9204      	str	r2, [sp, #16]
 8007830:	aa13      	add	r2, sp, #76	@ 0x4c
 8007832:	9203      	str	r2, [sp, #12]
 8007834:	2223      	movs	r2, #35	@ 0x23
 8007836:	1852      	adds	r2, r2, r1
 8007838:	9202      	str	r2, [sp, #8]
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	686b      	ldr	r3, [r5, #4]
 800783e:	0032      	movs	r2, r6
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007844:	003b      	movs	r3, r7
 8007846:	f7ff fec3 	bl	80075d0 <__cvt>
 800784a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800784c:	0007      	movs	r7, r0
 800784e:	2c47      	cmp	r4, #71	@ 0x47
 8007850:	d12d      	bne.n	80078ae <_printf_float+0x192>
 8007852:	1cd3      	adds	r3, r2, #3
 8007854:	db02      	blt.n	800785c <_printf_float+0x140>
 8007856:	686b      	ldr	r3, [r5, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	dd47      	ble.n	80078ec <_printf_float+0x1d0>
 800785c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800785e:	3b02      	subs	r3, #2
 8007860:	b2db      	uxtb	r3, r3
 8007862:	930c      	str	r3, [sp, #48]	@ 0x30
 8007864:	0028      	movs	r0, r5
 8007866:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007868:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800786a:	3901      	subs	r1, #1
 800786c:	3050      	adds	r0, #80	@ 0x50
 800786e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007870:	f7ff ff14 	bl	800769c <__exponent>
 8007874:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007876:	0004      	movs	r4, r0
 8007878:	1813      	adds	r3, r2, r0
 800787a:	612b      	str	r3, [r5, #16]
 800787c:	2a01      	cmp	r2, #1
 800787e:	dc02      	bgt.n	8007886 <_printf_float+0x16a>
 8007880:	682a      	ldr	r2, [r5, #0]
 8007882:	07d2      	lsls	r2, r2, #31
 8007884:	d501      	bpl.n	800788a <_printf_float+0x16e>
 8007886:	3301      	adds	r3, #1
 8007888:	612b      	str	r3, [r5, #16]
 800788a:	2323      	movs	r3, #35	@ 0x23
 800788c:	aa0a      	add	r2, sp, #40	@ 0x28
 800788e:	189b      	adds	r3, r3, r2
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d100      	bne.n	8007898 <_printf_float+0x17c>
 8007896:	e792      	b.n	80077be <_printf_float+0xa2>
 8007898:	002b      	movs	r3, r5
 800789a:	222d      	movs	r2, #45	@ 0x2d
 800789c:	3343      	adds	r3, #67	@ 0x43
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	e78d      	b.n	80077be <_printf_float+0xa2>
 80078a2:	2c47      	cmp	r4, #71	@ 0x47
 80078a4:	d1b8      	bne.n	8007818 <_printf_float+0xfc>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1b6      	bne.n	8007818 <_printf_float+0xfc>
 80078aa:	3301      	adds	r3, #1
 80078ac:	e7b3      	b.n	8007816 <_printf_float+0xfa>
 80078ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078b0:	2b65      	cmp	r3, #101	@ 0x65
 80078b2:	d9d7      	bls.n	8007864 <_printf_float+0x148>
 80078b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078b6:	2b66      	cmp	r3, #102	@ 0x66
 80078b8:	d11a      	bne.n	80078f0 <_printf_float+0x1d4>
 80078ba:	686b      	ldr	r3, [r5, #4]
 80078bc:	2a00      	cmp	r2, #0
 80078be:	dd09      	ble.n	80078d4 <_printf_float+0x1b8>
 80078c0:	612a      	str	r2, [r5, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d102      	bne.n	80078cc <_printf_float+0x1b0>
 80078c6:	6829      	ldr	r1, [r5, #0]
 80078c8:	07c9      	lsls	r1, r1, #31
 80078ca:	d50b      	bpl.n	80078e4 <_printf_float+0x1c8>
 80078cc:	3301      	adds	r3, #1
 80078ce:	189b      	adds	r3, r3, r2
 80078d0:	612b      	str	r3, [r5, #16]
 80078d2:	e007      	b.n	80078e4 <_printf_float+0x1c8>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d103      	bne.n	80078e0 <_printf_float+0x1c4>
 80078d8:	2201      	movs	r2, #1
 80078da:	6829      	ldr	r1, [r5, #0]
 80078dc:	4211      	tst	r1, r2
 80078de:	d000      	beq.n	80078e2 <_printf_float+0x1c6>
 80078e0:	1c9a      	adds	r2, r3, #2
 80078e2:	612a      	str	r2, [r5, #16]
 80078e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078e6:	2400      	movs	r4, #0
 80078e8:	65ab      	str	r3, [r5, #88]	@ 0x58
 80078ea:	e7ce      	b.n	800788a <_printf_float+0x16e>
 80078ec:	2367      	movs	r3, #103	@ 0x67
 80078ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80078f0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80078f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078f4:	4299      	cmp	r1, r3
 80078f6:	db06      	blt.n	8007906 <_printf_float+0x1ea>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	6129      	str	r1, [r5, #16]
 80078fc:	07db      	lsls	r3, r3, #31
 80078fe:	d5f1      	bpl.n	80078e4 <_printf_float+0x1c8>
 8007900:	3101      	adds	r1, #1
 8007902:	6129      	str	r1, [r5, #16]
 8007904:	e7ee      	b.n	80078e4 <_printf_float+0x1c8>
 8007906:	2201      	movs	r2, #1
 8007908:	2900      	cmp	r1, #0
 800790a:	dce0      	bgt.n	80078ce <_printf_float+0x1b2>
 800790c:	1892      	adds	r2, r2, r2
 800790e:	1a52      	subs	r2, r2, r1
 8007910:	e7dd      	b.n	80078ce <_printf_float+0x1b2>
 8007912:	682a      	ldr	r2, [r5, #0]
 8007914:	0553      	lsls	r3, r2, #21
 8007916:	d408      	bmi.n	800792a <_printf_float+0x20e>
 8007918:	692b      	ldr	r3, [r5, #16]
 800791a:	003a      	movs	r2, r7
 800791c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800791e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007920:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007922:	47a0      	blx	r4
 8007924:	3001      	adds	r0, #1
 8007926:	d129      	bne.n	800797c <_printf_float+0x260>
 8007928:	e754      	b.n	80077d4 <_printf_float+0xb8>
 800792a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800792c:	2b65      	cmp	r3, #101	@ 0x65
 800792e:	d800      	bhi.n	8007932 <_printf_float+0x216>
 8007930:	e0db      	b.n	8007aea <_printf_float+0x3ce>
 8007932:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007934:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007936:	2200      	movs	r2, #0
 8007938:	2300      	movs	r3, #0
 800793a:	f7f8 fd91 	bl	8000460 <__aeabi_dcmpeq>
 800793e:	2800      	cmp	r0, #0
 8007940:	d033      	beq.n	80079aa <_printf_float+0x28e>
 8007942:	2301      	movs	r3, #1
 8007944:	4a37      	ldr	r2, [pc, #220]	@ (8007a24 <_printf_float+0x308>)
 8007946:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007948:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800794a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800794c:	47a0      	blx	r4
 800794e:	3001      	adds	r0, #1
 8007950:	d100      	bne.n	8007954 <_printf_float+0x238>
 8007952:	e73f      	b.n	80077d4 <_printf_float+0xb8>
 8007954:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007956:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007958:	42b3      	cmp	r3, r6
 800795a:	db02      	blt.n	8007962 <_printf_float+0x246>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	07db      	lsls	r3, r3, #31
 8007960:	d50c      	bpl.n	800797c <_printf_float+0x260>
 8007962:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007966:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007968:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800796a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800796c:	47a0      	blx	r4
 800796e:	2400      	movs	r4, #0
 8007970:	3001      	adds	r0, #1
 8007972:	d100      	bne.n	8007976 <_printf_float+0x25a>
 8007974:	e72e      	b.n	80077d4 <_printf_float+0xb8>
 8007976:	1e73      	subs	r3, r6, #1
 8007978:	42a3      	cmp	r3, r4
 800797a:	dc0a      	bgt.n	8007992 <_printf_float+0x276>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	079b      	lsls	r3, r3, #30
 8007980:	d500      	bpl.n	8007984 <_printf_float+0x268>
 8007982:	e106      	b.n	8007b92 <_printf_float+0x476>
 8007984:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007986:	68e8      	ldr	r0, [r5, #12]
 8007988:	4298      	cmp	r0, r3
 800798a:	db00      	blt.n	800798e <_printf_float+0x272>
 800798c:	e724      	b.n	80077d8 <_printf_float+0xbc>
 800798e:	0018      	movs	r0, r3
 8007990:	e722      	b.n	80077d8 <_printf_float+0xbc>
 8007992:	002a      	movs	r2, r5
 8007994:	2301      	movs	r3, #1
 8007996:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007998:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800799a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800799c:	321a      	adds	r2, #26
 800799e:	47b8      	blx	r7
 80079a0:	3001      	adds	r0, #1
 80079a2:	d100      	bne.n	80079a6 <_printf_float+0x28a>
 80079a4:	e716      	b.n	80077d4 <_printf_float+0xb8>
 80079a6:	3401      	adds	r4, #1
 80079a8:	e7e5      	b.n	8007976 <_printf_float+0x25a>
 80079aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dc3b      	bgt.n	8007a28 <_printf_float+0x30c>
 80079b0:	2301      	movs	r3, #1
 80079b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007a24 <_printf_float+0x308>)
 80079b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80079ba:	47a0      	blx	r4
 80079bc:	3001      	adds	r0, #1
 80079be:	d100      	bne.n	80079c2 <_printf_float+0x2a6>
 80079c0:	e708      	b.n	80077d4 <_printf_float+0xb8>
 80079c2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80079c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079c6:	4333      	orrs	r3, r6
 80079c8:	d102      	bne.n	80079d0 <_printf_float+0x2b4>
 80079ca:	682b      	ldr	r3, [r5, #0]
 80079cc:	07db      	lsls	r3, r3, #31
 80079ce:	d5d5      	bpl.n	800797c <_printf_float+0x260>
 80079d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80079d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079d8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80079da:	47a0      	blx	r4
 80079dc:	2300      	movs	r3, #0
 80079de:	3001      	adds	r0, #1
 80079e0:	d100      	bne.n	80079e4 <_printf_float+0x2c8>
 80079e2:	e6f7      	b.n	80077d4 <_printf_float+0xb8>
 80079e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80079e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80079ea:	425b      	negs	r3, r3
 80079ec:	4293      	cmp	r3, r2
 80079ee:	dc01      	bgt.n	80079f4 <_printf_float+0x2d8>
 80079f0:	0033      	movs	r3, r6
 80079f2:	e792      	b.n	800791a <_printf_float+0x1fe>
 80079f4:	002a      	movs	r2, r5
 80079f6:	2301      	movs	r3, #1
 80079f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80079fe:	321a      	adds	r2, #26
 8007a00:	47a0      	blx	r4
 8007a02:	3001      	adds	r0, #1
 8007a04:	d100      	bne.n	8007a08 <_printf_float+0x2ec>
 8007a06:	e6e5      	b.n	80077d4 <_printf_float+0xb8>
 8007a08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	e7ea      	b.n	80079e4 <_printf_float+0x2c8>
 8007a0e:	46c0      	nop			@ (mov r8, r8)
 8007a10:	7fefffff 	.word	0x7fefffff
 8007a14:	0800a5fa 	.word	0x0800a5fa
 8007a18:	0800a5f6 	.word	0x0800a5f6
 8007a1c:	0800a602 	.word	0x0800a602
 8007a20:	0800a5fe 	.word	0x0800a5fe
 8007a24:	0800a606 	.word	0x0800a606
 8007a28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a2a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007a2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a2e:	429e      	cmp	r6, r3
 8007a30:	dd00      	ble.n	8007a34 <_printf_float+0x318>
 8007a32:	001e      	movs	r6, r3
 8007a34:	2e00      	cmp	r6, #0
 8007a36:	dc31      	bgt.n	8007a9c <_printf_float+0x380>
 8007a38:	43f3      	mvns	r3, r6
 8007a3a:	2400      	movs	r4, #0
 8007a3c:	17db      	asrs	r3, r3, #31
 8007a3e:	4033      	ands	r3, r6
 8007a40:	930e      	str	r3, [sp, #56]	@ 0x38
 8007a42:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007a44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a46:	1af3      	subs	r3, r6, r3
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	dc30      	bgt.n	8007aae <_printf_float+0x392>
 8007a4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a50:	429a      	cmp	r2, r3
 8007a52:	dc38      	bgt.n	8007ac6 <_printf_float+0x3aa>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	07db      	lsls	r3, r3, #31
 8007a58:	d435      	bmi.n	8007ac6 <_printf_float+0x3aa>
 8007a5a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007a5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a60:	1b9b      	subs	r3, r3, r6
 8007a62:	1b14      	subs	r4, r2, r4
 8007a64:	429c      	cmp	r4, r3
 8007a66:	dd00      	ble.n	8007a6a <_printf_float+0x34e>
 8007a68:	001c      	movs	r4, r3
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	dc34      	bgt.n	8007ad8 <_printf_float+0x3bc>
 8007a6e:	43e3      	mvns	r3, r4
 8007a70:	2600      	movs	r6, #0
 8007a72:	17db      	asrs	r3, r3, #31
 8007a74:	401c      	ands	r4, r3
 8007a76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	1b1b      	subs	r3, r3, r4
 8007a7e:	42b3      	cmp	r3, r6
 8007a80:	dc00      	bgt.n	8007a84 <_printf_float+0x368>
 8007a82:	e77b      	b.n	800797c <_printf_float+0x260>
 8007a84:	002a      	movs	r2, r5
 8007a86:	2301      	movs	r3, #1
 8007a88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a8c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007a8e:	321a      	adds	r2, #26
 8007a90:	47b8      	blx	r7
 8007a92:	3001      	adds	r0, #1
 8007a94:	d100      	bne.n	8007a98 <_printf_float+0x37c>
 8007a96:	e69d      	b.n	80077d4 <_printf_float+0xb8>
 8007a98:	3601      	adds	r6, #1
 8007a9a:	e7ec      	b.n	8007a76 <_printf_float+0x35a>
 8007a9c:	0033      	movs	r3, r6
 8007a9e:	003a      	movs	r2, r7
 8007aa0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007aa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007aa4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007aa6:	47a0      	blx	r4
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d1c5      	bne.n	8007a38 <_printf_float+0x31c>
 8007aac:	e692      	b.n	80077d4 <_printf_float+0xb8>
 8007aae:	002a      	movs	r2, r5
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ab4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ab6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007ab8:	321a      	adds	r2, #26
 8007aba:	47b0      	blx	r6
 8007abc:	3001      	adds	r0, #1
 8007abe:	d100      	bne.n	8007ac2 <_printf_float+0x3a6>
 8007ac0:	e688      	b.n	80077d4 <_printf_float+0xb8>
 8007ac2:	3401      	adds	r4, #1
 8007ac4:	e7bd      	b.n	8007a42 <_printf_float+0x326>
 8007ac6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ac8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007aca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007acc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ace:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007ad0:	47a0      	blx	r4
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d1c1      	bne.n	8007a5a <_printf_float+0x33e>
 8007ad6:	e67d      	b.n	80077d4 <_printf_float+0xb8>
 8007ad8:	19ba      	adds	r2, r7, r6
 8007ada:	0023      	movs	r3, r4
 8007adc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ae0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007ae2:	47b0      	blx	r6
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d1c2      	bne.n	8007a6e <_printf_float+0x352>
 8007ae8:	e674      	b.n	80077d4 <_printf_float+0xb8>
 8007aea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007aec:	930c      	str	r3, [sp, #48]	@ 0x30
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	dc02      	bgt.n	8007af8 <_printf_float+0x3dc>
 8007af2:	2301      	movs	r3, #1
 8007af4:	421a      	tst	r2, r3
 8007af6:	d039      	beq.n	8007b6c <_printf_float+0x450>
 8007af8:	2301      	movs	r3, #1
 8007afa:	003a      	movs	r2, r7
 8007afc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b02:	47b0      	blx	r6
 8007b04:	3001      	adds	r0, #1
 8007b06:	d100      	bne.n	8007b0a <_printf_float+0x3ee>
 8007b08:	e664      	b.n	80077d4 <_printf_float+0xb8>
 8007b0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b12:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b14:	47b0      	blx	r6
 8007b16:	3001      	adds	r0, #1
 8007b18:	d100      	bne.n	8007b1c <_printf_float+0x400>
 8007b1a:	e65b      	b.n	80077d4 <_printf_float+0xb8>
 8007b1c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007b1e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007b20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b22:	2200      	movs	r2, #0
 8007b24:	3b01      	subs	r3, #1
 8007b26:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f7f8 fc99 	bl	8000460 <__aeabi_dcmpeq>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d11a      	bne.n	8007b68 <_printf_float+0x44c>
 8007b32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b34:	1c7a      	adds	r2, r7, #1
 8007b36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b3a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b3c:	47b0      	blx	r6
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d10e      	bne.n	8007b60 <_printf_float+0x444>
 8007b42:	e647      	b.n	80077d4 <_printf_float+0xb8>
 8007b44:	002a      	movs	r2, r5
 8007b46:	2301      	movs	r3, #1
 8007b48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b4c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007b4e:	321a      	adds	r2, #26
 8007b50:	47b8      	blx	r7
 8007b52:	3001      	adds	r0, #1
 8007b54:	d100      	bne.n	8007b58 <_printf_float+0x43c>
 8007b56:	e63d      	b.n	80077d4 <_printf_float+0xb8>
 8007b58:	3601      	adds	r6, #1
 8007b5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b5c:	429e      	cmp	r6, r3
 8007b5e:	dbf1      	blt.n	8007b44 <_printf_float+0x428>
 8007b60:	002a      	movs	r2, r5
 8007b62:	0023      	movs	r3, r4
 8007b64:	3250      	adds	r2, #80	@ 0x50
 8007b66:	e6d9      	b.n	800791c <_printf_float+0x200>
 8007b68:	2600      	movs	r6, #0
 8007b6a:	e7f6      	b.n	8007b5a <_printf_float+0x43e>
 8007b6c:	003a      	movs	r2, r7
 8007b6e:	e7e2      	b.n	8007b36 <_printf_float+0x41a>
 8007b70:	002a      	movs	r2, r5
 8007b72:	2301      	movs	r3, #1
 8007b74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b78:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b7a:	3219      	adds	r2, #25
 8007b7c:	47b0      	blx	r6
 8007b7e:	3001      	adds	r0, #1
 8007b80:	d100      	bne.n	8007b84 <_printf_float+0x468>
 8007b82:	e627      	b.n	80077d4 <_printf_float+0xb8>
 8007b84:	3401      	adds	r4, #1
 8007b86:	68eb      	ldr	r3, [r5, #12]
 8007b88:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	dcef      	bgt.n	8007b70 <_printf_float+0x454>
 8007b90:	e6f8      	b.n	8007984 <_printf_float+0x268>
 8007b92:	2400      	movs	r4, #0
 8007b94:	e7f7      	b.n	8007b86 <_printf_float+0x46a>
 8007b96:	46c0      	nop			@ (mov r8, r8)

08007b98 <_printf_common>:
 8007b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b9a:	0016      	movs	r6, r2
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	688a      	ldr	r2, [r1, #8]
 8007ba0:	690b      	ldr	r3, [r1, #16]
 8007ba2:	000c      	movs	r4, r1
 8007ba4:	9000      	str	r0, [sp, #0]
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	da00      	bge.n	8007bac <_printf_common+0x14>
 8007baa:	0013      	movs	r3, r2
 8007bac:	0022      	movs	r2, r4
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	3243      	adds	r2, #67	@ 0x43
 8007bb2:	7812      	ldrb	r2, [r2, #0]
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	d001      	beq.n	8007bbc <_printf_common+0x24>
 8007bb8:	3301      	adds	r3, #1
 8007bba:	6033      	str	r3, [r6, #0]
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	069b      	lsls	r3, r3, #26
 8007bc0:	d502      	bpl.n	8007bc8 <_printf_common+0x30>
 8007bc2:	6833      	ldr	r3, [r6, #0]
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	6033      	str	r3, [r6, #0]
 8007bc8:	6822      	ldr	r2, [r4, #0]
 8007bca:	2306      	movs	r3, #6
 8007bcc:	0015      	movs	r5, r2
 8007bce:	401d      	ands	r5, r3
 8007bd0:	421a      	tst	r2, r3
 8007bd2:	d027      	beq.n	8007c24 <_printf_common+0x8c>
 8007bd4:	0023      	movs	r3, r4
 8007bd6:	3343      	adds	r3, #67	@ 0x43
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	1e5a      	subs	r2, r3, #1
 8007bdc:	4193      	sbcs	r3, r2
 8007bde:	6822      	ldr	r2, [r4, #0]
 8007be0:	0692      	lsls	r2, r2, #26
 8007be2:	d430      	bmi.n	8007c46 <_printf_common+0xae>
 8007be4:	0022      	movs	r2, r4
 8007be6:	9901      	ldr	r1, [sp, #4]
 8007be8:	9800      	ldr	r0, [sp, #0]
 8007bea:	9d08      	ldr	r5, [sp, #32]
 8007bec:	3243      	adds	r2, #67	@ 0x43
 8007bee:	47a8      	blx	r5
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d025      	beq.n	8007c40 <_printf_common+0xa8>
 8007bf4:	2206      	movs	r2, #6
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	2500      	movs	r5, #0
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d105      	bne.n	8007c0c <_printf_common+0x74>
 8007c00:	6833      	ldr	r3, [r6, #0]
 8007c02:	68e5      	ldr	r5, [r4, #12]
 8007c04:	1aed      	subs	r5, r5, r3
 8007c06:	43eb      	mvns	r3, r5
 8007c08:	17db      	asrs	r3, r3, #31
 8007c0a:	401d      	ands	r5, r3
 8007c0c:	68a3      	ldr	r3, [r4, #8]
 8007c0e:	6922      	ldr	r2, [r4, #16]
 8007c10:	4293      	cmp	r3, r2
 8007c12:	dd01      	ble.n	8007c18 <_printf_common+0x80>
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	18ed      	adds	r5, r5, r3
 8007c18:	2600      	movs	r6, #0
 8007c1a:	42b5      	cmp	r5, r6
 8007c1c:	d120      	bne.n	8007c60 <_printf_common+0xc8>
 8007c1e:	2000      	movs	r0, #0
 8007c20:	e010      	b.n	8007c44 <_printf_common+0xac>
 8007c22:	3501      	adds	r5, #1
 8007c24:	68e3      	ldr	r3, [r4, #12]
 8007c26:	6832      	ldr	r2, [r6, #0]
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	42ab      	cmp	r3, r5
 8007c2c:	ddd2      	ble.n	8007bd4 <_printf_common+0x3c>
 8007c2e:	0022      	movs	r2, r4
 8007c30:	2301      	movs	r3, #1
 8007c32:	9901      	ldr	r1, [sp, #4]
 8007c34:	9800      	ldr	r0, [sp, #0]
 8007c36:	9f08      	ldr	r7, [sp, #32]
 8007c38:	3219      	adds	r2, #25
 8007c3a:	47b8      	blx	r7
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d1f0      	bne.n	8007c22 <_printf_common+0x8a>
 8007c40:	2001      	movs	r0, #1
 8007c42:	4240      	negs	r0, r0
 8007c44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c46:	2030      	movs	r0, #48	@ 0x30
 8007c48:	18e1      	adds	r1, r4, r3
 8007c4a:	3143      	adds	r1, #67	@ 0x43
 8007c4c:	7008      	strb	r0, [r1, #0]
 8007c4e:	0021      	movs	r1, r4
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	3145      	adds	r1, #69	@ 0x45
 8007c54:	7809      	ldrb	r1, [r1, #0]
 8007c56:	18a2      	adds	r2, r4, r2
 8007c58:	3243      	adds	r2, #67	@ 0x43
 8007c5a:	3302      	adds	r3, #2
 8007c5c:	7011      	strb	r1, [r2, #0]
 8007c5e:	e7c1      	b.n	8007be4 <_printf_common+0x4c>
 8007c60:	0022      	movs	r2, r4
 8007c62:	2301      	movs	r3, #1
 8007c64:	9901      	ldr	r1, [sp, #4]
 8007c66:	9800      	ldr	r0, [sp, #0]
 8007c68:	9f08      	ldr	r7, [sp, #32]
 8007c6a:	321a      	adds	r2, #26
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	d0e6      	beq.n	8007c40 <_printf_common+0xa8>
 8007c72:	3601      	adds	r6, #1
 8007c74:	e7d1      	b.n	8007c1a <_printf_common+0x82>
	...

08007c78 <_printf_i>:
 8007c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c7a:	b08b      	sub	sp, #44	@ 0x2c
 8007c7c:	9206      	str	r2, [sp, #24]
 8007c7e:	000a      	movs	r2, r1
 8007c80:	3243      	adds	r2, #67	@ 0x43
 8007c82:	9307      	str	r3, [sp, #28]
 8007c84:	9005      	str	r0, [sp, #20]
 8007c86:	9203      	str	r2, [sp, #12]
 8007c88:	7e0a      	ldrb	r2, [r1, #24]
 8007c8a:	000c      	movs	r4, r1
 8007c8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c8e:	2a78      	cmp	r2, #120	@ 0x78
 8007c90:	d809      	bhi.n	8007ca6 <_printf_i+0x2e>
 8007c92:	2a62      	cmp	r2, #98	@ 0x62
 8007c94:	d80b      	bhi.n	8007cae <_printf_i+0x36>
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d100      	bne.n	8007c9c <_printf_i+0x24>
 8007c9a:	e0ba      	b.n	8007e12 <_printf_i+0x19a>
 8007c9c:	497a      	ldr	r1, [pc, #488]	@ (8007e88 <_printf_i+0x210>)
 8007c9e:	9104      	str	r1, [sp, #16]
 8007ca0:	2a58      	cmp	r2, #88	@ 0x58
 8007ca2:	d100      	bne.n	8007ca6 <_printf_i+0x2e>
 8007ca4:	e08e      	b.n	8007dc4 <_printf_i+0x14c>
 8007ca6:	0025      	movs	r5, r4
 8007ca8:	3542      	adds	r5, #66	@ 0x42
 8007caa:	702a      	strb	r2, [r5, #0]
 8007cac:	e022      	b.n	8007cf4 <_printf_i+0x7c>
 8007cae:	0010      	movs	r0, r2
 8007cb0:	3863      	subs	r0, #99	@ 0x63
 8007cb2:	2815      	cmp	r0, #21
 8007cb4:	d8f7      	bhi.n	8007ca6 <_printf_i+0x2e>
 8007cb6:	f7f8 fa39 	bl	800012c <__gnu_thumb1_case_shi>
 8007cba:	0016      	.short	0x0016
 8007cbc:	fff6001f 	.word	0xfff6001f
 8007cc0:	fff6fff6 	.word	0xfff6fff6
 8007cc4:	001ffff6 	.word	0x001ffff6
 8007cc8:	fff6fff6 	.word	0xfff6fff6
 8007ccc:	fff6fff6 	.word	0xfff6fff6
 8007cd0:	0036009f 	.word	0x0036009f
 8007cd4:	fff6007e 	.word	0xfff6007e
 8007cd8:	00b0fff6 	.word	0x00b0fff6
 8007cdc:	0036fff6 	.word	0x0036fff6
 8007ce0:	fff6fff6 	.word	0xfff6fff6
 8007ce4:	0082      	.short	0x0082
 8007ce6:	0025      	movs	r5, r4
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	3542      	adds	r5, #66	@ 0x42
 8007cec:	1d11      	adds	r1, r2, #4
 8007cee:	6019      	str	r1, [r3, #0]
 8007cf0:	6813      	ldr	r3, [r2, #0]
 8007cf2:	702b      	strb	r3, [r5, #0]
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e09e      	b.n	8007e36 <_printf_i+0x1be>
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	6809      	ldr	r1, [r1, #0]
 8007cfc:	1d02      	adds	r2, r0, #4
 8007cfe:	060d      	lsls	r5, r1, #24
 8007d00:	d50b      	bpl.n	8007d1a <_printf_i+0xa2>
 8007d02:	6806      	ldr	r6, [r0, #0]
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	2e00      	cmp	r6, #0
 8007d08:	da03      	bge.n	8007d12 <_printf_i+0x9a>
 8007d0a:	232d      	movs	r3, #45	@ 0x2d
 8007d0c:	9a03      	ldr	r2, [sp, #12]
 8007d0e:	4276      	negs	r6, r6
 8007d10:	7013      	strb	r3, [r2, #0]
 8007d12:	4b5d      	ldr	r3, [pc, #372]	@ (8007e88 <_printf_i+0x210>)
 8007d14:	270a      	movs	r7, #10
 8007d16:	9304      	str	r3, [sp, #16]
 8007d18:	e018      	b.n	8007d4c <_printf_i+0xd4>
 8007d1a:	6806      	ldr	r6, [r0, #0]
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	0649      	lsls	r1, r1, #25
 8007d20:	d5f1      	bpl.n	8007d06 <_printf_i+0x8e>
 8007d22:	b236      	sxth	r6, r6
 8007d24:	e7ef      	b.n	8007d06 <_printf_i+0x8e>
 8007d26:	6808      	ldr	r0, [r1, #0]
 8007d28:	6819      	ldr	r1, [r3, #0]
 8007d2a:	c940      	ldmia	r1!, {r6}
 8007d2c:	0605      	lsls	r5, r0, #24
 8007d2e:	d402      	bmi.n	8007d36 <_printf_i+0xbe>
 8007d30:	0640      	lsls	r0, r0, #25
 8007d32:	d500      	bpl.n	8007d36 <_printf_i+0xbe>
 8007d34:	b2b6      	uxth	r6, r6
 8007d36:	6019      	str	r1, [r3, #0]
 8007d38:	4b53      	ldr	r3, [pc, #332]	@ (8007e88 <_printf_i+0x210>)
 8007d3a:	270a      	movs	r7, #10
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	2a6f      	cmp	r2, #111	@ 0x6f
 8007d40:	d100      	bne.n	8007d44 <_printf_i+0xcc>
 8007d42:	3f02      	subs	r7, #2
 8007d44:	0023      	movs	r3, r4
 8007d46:	2200      	movs	r2, #0
 8007d48:	3343      	adds	r3, #67	@ 0x43
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	6863      	ldr	r3, [r4, #4]
 8007d4e:	60a3      	str	r3, [r4, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	db06      	blt.n	8007d62 <_printf_i+0xea>
 8007d54:	2104      	movs	r1, #4
 8007d56:	6822      	ldr	r2, [r4, #0]
 8007d58:	9d03      	ldr	r5, [sp, #12]
 8007d5a:	438a      	bics	r2, r1
 8007d5c:	6022      	str	r2, [r4, #0]
 8007d5e:	4333      	orrs	r3, r6
 8007d60:	d00c      	beq.n	8007d7c <_printf_i+0x104>
 8007d62:	9d03      	ldr	r5, [sp, #12]
 8007d64:	0030      	movs	r0, r6
 8007d66:	0039      	movs	r1, r7
 8007d68:	f7f8 fa7a 	bl	8000260 <__aeabi_uidivmod>
 8007d6c:	9b04      	ldr	r3, [sp, #16]
 8007d6e:	3d01      	subs	r5, #1
 8007d70:	5c5b      	ldrb	r3, [r3, r1]
 8007d72:	702b      	strb	r3, [r5, #0]
 8007d74:	0033      	movs	r3, r6
 8007d76:	0006      	movs	r6, r0
 8007d78:	429f      	cmp	r7, r3
 8007d7a:	d9f3      	bls.n	8007d64 <_printf_i+0xec>
 8007d7c:	2f08      	cmp	r7, #8
 8007d7e:	d109      	bne.n	8007d94 <_printf_i+0x11c>
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	07db      	lsls	r3, r3, #31
 8007d84:	d506      	bpl.n	8007d94 <_printf_i+0x11c>
 8007d86:	6862      	ldr	r2, [r4, #4]
 8007d88:	6923      	ldr	r3, [r4, #16]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	dc02      	bgt.n	8007d94 <_printf_i+0x11c>
 8007d8e:	2330      	movs	r3, #48	@ 0x30
 8007d90:	3d01      	subs	r5, #1
 8007d92:	702b      	strb	r3, [r5, #0]
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	1b5b      	subs	r3, r3, r5
 8007d98:	6123      	str	r3, [r4, #16]
 8007d9a:	9b07      	ldr	r3, [sp, #28]
 8007d9c:	0021      	movs	r1, r4
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	9805      	ldr	r0, [sp, #20]
 8007da2:	9b06      	ldr	r3, [sp, #24]
 8007da4:	aa09      	add	r2, sp, #36	@ 0x24
 8007da6:	f7ff fef7 	bl	8007b98 <_printf_common>
 8007daa:	3001      	adds	r0, #1
 8007dac:	d148      	bne.n	8007e40 <_printf_i+0x1c8>
 8007dae:	2001      	movs	r0, #1
 8007db0:	4240      	negs	r0, r0
 8007db2:	b00b      	add	sp, #44	@ 0x2c
 8007db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db6:	2220      	movs	r2, #32
 8007db8:	6809      	ldr	r1, [r1, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	6022      	str	r2, [r4, #0]
 8007dbe:	2278      	movs	r2, #120	@ 0x78
 8007dc0:	4932      	ldr	r1, [pc, #200]	@ (8007e8c <_printf_i+0x214>)
 8007dc2:	9104      	str	r1, [sp, #16]
 8007dc4:	0021      	movs	r1, r4
 8007dc6:	3145      	adds	r1, #69	@ 0x45
 8007dc8:	700a      	strb	r2, [r1, #0]
 8007dca:	6819      	ldr	r1, [r3, #0]
 8007dcc:	6822      	ldr	r2, [r4, #0]
 8007dce:	c940      	ldmia	r1!, {r6}
 8007dd0:	0610      	lsls	r0, r2, #24
 8007dd2:	d402      	bmi.n	8007dda <_printf_i+0x162>
 8007dd4:	0650      	lsls	r0, r2, #25
 8007dd6:	d500      	bpl.n	8007dda <_printf_i+0x162>
 8007dd8:	b2b6      	uxth	r6, r6
 8007dda:	6019      	str	r1, [r3, #0]
 8007ddc:	07d3      	lsls	r3, r2, #31
 8007dde:	d502      	bpl.n	8007de6 <_printf_i+0x16e>
 8007de0:	2320      	movs	r3, #32
 8007de2:	4313      	orrs	r3, r2
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	2e00      	cmp	r6, #0
 8007de8:	d001      	beq.n	8007dee <_printf_i+0x176>
 8007dea:	2710      	movs	r7, #16
 8007dec:	e7aa      	b.n	8007d44 <_printf_i+0xcc>
 8007dee:	2220      	movs	r2, #32
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	4393      	bics	r3, r2
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	e7f8      	b.n	8007dea <_printf_i+0x172>
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	680d      	ldr	r5, [r1, #0]
 8007dfc:	1d10      	adds	r0, r2, #4
 8007dfe:	6949      	ldr	r1, [r1, #20]
 8007e00:	6018      	str	r0, [r3, #0]
 8007e02:	6813      	ldr	r3, [r2, #0]
 8007e04:	062e      	lsls	r6, r5, #24
 8007e06:	d501      	bpl.n	8007e0c <_printf_i+0x194>
 8007e08:	6019      	str	r1, [r3, #0]
 8007e0a:	e002      	b.n	8007e12 <_printf_i+0x19a>
 8007e0c:	066d      	lsls	r5, r5, #25
 8007e0e:	d5fb      	bpl.n	8007e08 <_printf_i+0x190>
 8007e10:	8019      	strh	r1, [r3, #0]
 8007e12:	2300      	movs	r3, #0
 8007e14:	9d03      	ldr	r5, [sp, #12]
 8007e16:	6123      	str	r3, [r4, #16]
 8007e18:	e7bf      	b.n	8007d9a <_printf_i+0x122>
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	1d11      	adds	r1, r2, #4
 8007e1e:	6019      	str	r1, [r3, #0]
 8007e20:	6815      	ldr	r5, [r2, #0]
 8007e22:	2100      	movs	r1, #0
 8007e24:	0028      	movs	r0, r5
 8007e26:	6862      	ldr	r2, [r4, #4]
 8007e28:	f000 fa21 	bl	800826e <memchr>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d001      	beq.n	8007e34 <_printf_i+0x1bc>
 8007e30:	1b40      	subs	r0, r0, r5
 8007e32:	6060      	str	r0, [r4, #4]
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	6123      	str	r3, [r4, #16]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9a03      	ldr	r2, [sp, #12]
 8007e3c:	7013      	strb	r3, [r2, #0]
 8007e3e:	e7ac      	b.n	8007d9a <_printf_i+0x122>
 8007e40:	002a      	movs	r2, r5
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	9906      	ldr	r1, [sp, #24]
 8007e46:	9805      	ldr	r0, [sp, #20]
 8007e48:	9d07      	ldr	r5, [sp, #28]
 8007e4a:	47a8      	blx	r5
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d0ae      	beq.n	8007dae <_printf_i+0x136>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	079b      	lsls	r3, r3, #30
 8007e54:	d415      	bmi.n	8007e82 <_printf_i+0x20a>
 8007e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e58:	68e0      	ldr	r0, [r4, #12]
 8007e5a:	4298      	cmp	r0, r3
 8007e5c:	daa9      	bge.n	8007db2 <_printf_i+0x13a>
 8007e5e:	0018      	movs	r0, r3
 8007e60:	e7a7      	b.n	8007db2 <_printf_i+0x13a>
 8007e62:	0022      	movs	r2, r4
 8007e64:	2301      	movs	r3, #1
 8007e66:	9906      	ldr	r1, [sp, #24]
 8007e68:	9805      	ldr	r0, [sp, #20]
 8007e6a:	9e07      	ldr	r6, [sp, #28]
 8007e6c:	3219      	adds	r2, #25
 8007e6e:	47b0      	blx	r6
 8007e70:	3001      	adds	r0, #1
 8007e72:	d09c      	beq.n	8007dae <_printf_i+0x136>
 8007e74:	3501      	adds	r5, #1
 8007e76:	68e3      	ldr	r3, [r4, #12]
 8007e78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	42ab      	cmp	r3, r5
 8007e7e:	dcf0      	bgt.n	8007e62 <_printf_i+0x1ea>
 8007e80:	e7e9      	b.n	8007e56 <_printf_i+0x1de>
 8007e82:	2500      	movs	r5, #0
 8007e84:	e7f7      	b.n	8007e76 <_printf_i+0x1fe>
 8007e86:	46c0      	nop			@ (mov r8, r8)
 8007e88:	0800a608 	.word	0x0800a608
 8007e8c:	0800a619 	.word	0x0800a619

08007e90 <std>:
 8007e90:	2300      	movs	r3, #0
 8007e92:	b510      	push	{r4, lr}
 8007e94:	0004      	movs	r4, r0
 8007e96:	6003      	str	r3, [r0, #0]
 8007e98:	6043      	str	r3, [r0, #4]
 8007e9a:	6083      	str	r3, [r0, #8]
 8007e9c:	8181      	strh	r1, [r0, #12]
 8007e9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ea0:	81c2      	strh	r2, [r0, #14]
 8007ea2:	6103      	str	r3, [r0, #16]
 8007ea4:	6143      	str	r3, [r0, #20]
 8007ea6:	6183      	str	r3, [r0, #24]
 8007ea8:	0019      	movs	r1, r3
 8007eaa:	2208      	movs	r2, #8
 8007eac:	305c      	adds	r0, #92	@ 0x5c
 8007eae:	f000 f957 	bl	8008160 <memset>
 8007eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee0 <std+0x50>)
 8007eb4:	6224      	str	r4, [r4, #32]
 8007eb6:	6263      	str	r3, [r4, #36]	@ 0x24
 8007eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee4 <std+0x54>)
 8007eba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee8 <std+0x58>)
 8007ebe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8007eec <std+0x5c>)
 8007ec2:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef0 <std+0x60>)
 8007ec6:	429c      	cmp	r4, r3
 8007ec8:	d005      	beq.n	8007ed6 <std+0x46>
 8007eca:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef4 <std+0x64>)
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	d002      	beq.n	8007ed6 <std+0x46>
 8007ed0:	4b09      	ldr	r3, [pc, #36]	@ (8007ef8 <std+0x68>)
 8007ed2:	429c      	cmp	r4, r3
 8007ed4:	d103      	bne.n	8007ede <std+0x4e>
 8007ed6:	0020      	movs	r0, r4
 8007ed8:	3058      	adds	r0, #88	@ 0x58
 8007eda:	f000 f9c5 	bl	8008268 <__retarget_lock_init_recursive>
 8007ede:	bd10      	pop	{r4, pc}
 8007ee0:	080080c9 	.word	0x080080c9
 8007ee4:	080080f1 	.word	0x080080f1
 8007ee8:	08008129 	.word	0x08008129
 8007eec:	08008155 	.word	0x08008155
 8007ef0:	200008f8 	.word	0x200008f8
 8007ef4:	20000960 	.word	0x20000960
 8007ef8:	200009c8 	.word	0x200009c8

08007efc <stdio_exit_handler>:
 8007efc:	b510      	push	{r4, lr}
 8007efe:	4a03      	ldr	r2, [pc, #12]	@ (8007f0c <stdio_exit_handler+0x10>)
 8007f00:	4903      	ldr	r1, [pc, #12]	@ (8007f10 <stdio_exit_handler+0x14>)
 8007f02:	4804      	ldr	r0, [pc, #16]	@ (8007f14 <stdio_exit_handler+0x18>)
 8007f04:	f000 f86c 	bl	8007fe0 <_fwalk_sglue>
 8007f08:	bd10      	pop	{r4, pc}
 8007f0a:	46c0      	nop			@ (mov r8, r8)
 8007f0c:	20000044 	.word	0x20000044
 8007f10:	08009c8d 	.word	0x08009c8d
 8007f14:	20000054 	.word	0x20000054

08007f18 <cleanup_stdio>:
 8007f18:	6841      	ldr	r1, [r0, #4]
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <cleanup_stdio+0x30>)
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	0004      	movs	r4, r0
 8007f20:	4299      	cmp	r1, r3
 8007f22:	d001      	beq.n	8007f28 <cleanup_stdio+0x10>
 8007f24:	f001 feb2 	bl	8009c8c <_fflush_r>
 8007f28:	68a1      	ldr	r1, [r4, #8]
 8007f2a:	4b08      	ldr	r3, [pc, #32]	@ (8007f4c <cleanup_stdio+0x34>)
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	d002      	beq.n	8007f36 <cleanup_stdio+0x1e>
 8007f30:	0020      	movs	r0, r4
 8007f32:	f001 feab 	bl	8009c8c <_fflush_r>
 8007f36:	68e1      	ldr	r1, [r4, #12]
 8007f38:	4b05      	ldr	r3, [pc, #20]	@ (8007f50 <cleanup_stdio+0x38>)
 8007f3a:	4299      	cmp	r1, r3
 8007f3c:	d002      	beq.n	8007f44 <cleanup_stdio+0x2c>
 8007f3e:	0020      	movs	r0, r4
 8007f40:	f001 fea4 	bl	8009c8c <_fflush_r>
 8007f44:	bd10      	pop	{r4, pc}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	200008f8 	.word	0x200008f8
 8007f4c:	20000960 	.word	0x20000960
 8007f50:	200009c8 	.word	0x200009c8

08007f54 <global_stdio_init.part.0>:
 8007f54:	b510      	push	{r4, lr}
 8007f56:	4b09      	ldr	r3, [pc, #36]	@ (8007f7c <global_stdio_init.part.0+0x28>)
 8007f58:	4a09      	ldr	r2, [pc, #36]	@ (8007f80 <global_stdio_init.part.0+0x2c>)
 8007f5a:	2104      	movs	r1, #4
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	4809      	ldr	r0, [pc, #36]	@ (8007f84 <global_stdio_init.part.0+0x30>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	f7ff ff95 	bl	8007e90 <std>
 8007f66:	2201      	movs	r2, #1
 8007f68:	2109      	movs	r1, #9
 8007f6a:	4807      	ldr	r0, [pc, #28]	@ (8007f88 <global_stdio_init.part.0+0x34>)
 8007f6c:	f7ff ff90 	bl	8007e90 <std>
 8007f70:	2202      	movs	r2, #2
 8007f72:	2112      	movs	r1, #18
 8007f74:	4805      	ldr	r0, [pc, #20]	@ (8007f8c <global_stdio_init.part.0+0x38>)
 8007f76:	f7ff ff8b 	bl	8007e90 <std>
 8007f7a:	bd10      	pop	{r4, pc}
 8007f7c:	20000a30 	.word	0x20000a30
 8007f80:	08007efd 	.word	0x08007efd
 8007f84:	200008f8 	.word	0x200008f8
 8007f88:	20000960 	.word	0x20000960
 8007f8c:	200009c8 	.word	0x200009c8

08007f90 <__sfp_lock_acquire>:
 8007f90:	b510      	push	{r4, lr}
 8007f92:	4802      	ldr	r0, [pc, #8]	@ (8007f9c <__sfp_lock_acquire+0xc>)
 8007f94:	f000 f969 	bl	800826a <__retarget_lock_acquire_recursive>
 8007f98:	bd10      	pop	{r4, pc}
 8007f9a:	46c0      	nop			@ (mov r8, r8)
 8007f9c:	20000a39 	.word	0x20000a39

08007fa0 <__sfp_lock_release>:
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	4802      	ldr	r0, [pc, #8]	@ (8007fac <__sfp_lock_release+0xc>)
 8007fa4:	f000 f962 	bl	800826c <__retarget_lock_release_recursive>
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	46c0      	nop			@ (mov r8, r8)
 8007fac:	20000a39 	.word	0x20000a39

08007fb0 <__sinit>:
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	0004      	movs	r4, r0
 8007fb4:	f7ff ffec 	bl	8007f90 <__sfp_lock_acquire>
 8007fb8:	6a23      	ldr	r3, [r4, #32]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <__sinit+0x14>
 8007fbe:	f7ff ffef 	bl	8007fa0 <__sfp_lock_release>
 8007fc2:	bd10      	pop	{r4, pc}
 8007fc4:	4b04      	ldr	r3, [pc, #16]	@ (8007fd8 <__sinit+0x28>)
 8007fc6:	6223      	str	r3, [r4, #32]
 8007fc8:	4b04      	ldr	r3, [pc, #16]	@ (8007fdc <__sinit+0x2c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1f6      	bne.n	8007fbe <__sinit+0xe>
 8007fd0:	f7ff ffc0 	bl	8007f54 <global_stdio_init.part.0>
 8007fd4:	e7f3      	b.n	8007fbe <__sinit+0xe>
 8007fd6:	46c0      	nop			@ (mov r8, r8)
 8007fd8:	08007f19 	.word	0x08007f19
 8007fdc:	20000a30 	.word	0x20000a30

08007fe0 <_fwalk_sglue>:
 8007fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fe2:	0014      	movs	r4, r2
 8007fe4:	2600      	movs	r6, #0
 8007fe6:	9000      	str	r0, [sp, #0]
 8007fe8:	9101      	str	r1, [sp, #4]
 8007fea:	68a5      	ldr	r5, [r4, #8]
 8007fec:	6867      	ldr	r7, [r4, #4]
 8007fee:	3f01      	subs	r7, #1
 8007ff0:	d504      	bpl.n	8007ffc <_fwalk_sglue+0x1c>
 8007ff2:	6824      	ldr	r4, [r4, #0]
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	d1f8      	bne.n	8007fea <_fwalk_sglue+0xa>
 8007ff8:	0030      	movs	r0, r6
 8007ffa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ffc:	89ab      	ldrh	r3, [r5, #12]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d908      	bls.n	8008014 <_fwalk_sglue+0x34>
 8008002:	220e      	movs	r2, #14
 8008004:	5eab      	ldrsh	r3, [r5, r2]
 8008006:	3301      	adds	r3, #1
 8008008:	d004      	beq.n	8008014 <_fwalk_sglue+0x34>
 800800a:	0029      	movs	r1, r5
 800800c:	9800      	ldr	r0, [sp, #0]
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	4798      	blx	r3
 8008012:	4306      	orrs	r6, r0
 8008014:	3568      	adds	r5, #104	@ 0x68
 8008016:	e7ea      	b.n	8007fee <_fwalk_sglue+0xe>

08008018 <sniprintf>:
 8008018:	b40c      	push	{r2, r3}
 800801a:	b530      	push	{r4, r5, lr}
 800801c:	4b18      	ldr	r3, [pc, #96]	@ (8008080 <sniprintf+0x68>)
 800801e:	000c      	movs	r4, r1
 8008020:	681d      	ldr	r5, [r3, #0]
 8008022:	b09d      	sub	sp, #116	@ 0x74
 8008024:	2900      	cmp	r1, #0
 8008026:	da08      	bge.n	800803a <sniprintf+0x22>
 8008028:	238b      	movs	r3, #139	@ 0x8b
 800802a:	2001      	movs	r0, #1
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	4240      	negs	r0, r0
 8008030:	b01d      	add	sp, #116	@ 0x74
 8008032:	bc30      	pop	{r4, r5}
 8008034:	bc08      	pop	{r3}
 8008036:	b002      	add	sp, #8
 8008038:	4718      	bx	r3
 800803a:	2382      	movs	r3, #130	@ 0x82
 800803c:	466a      	mov	r2, sp
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	8293      	strh	r3, [r2, #20]
 8008042:	2300      	movs	r3, #0
 8008044:	9002      	str	r0, [sp, #8]
 8008046:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008048:	9006      	str	r0, [sp, #24]
 800804a:	4299      	cmp	r1, r3
 800804c:	d000      	beq.n	8008050 <sniprintf+0x38>
 800804e:	1e4b      	subs	r3, r1, #1
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	9307      	str	r3, [sp, #28]
 8008054:	2301      	movs	r3, #1
 8008056:	466a      	mov	r2, sp
 8008058:	425b      	negs	r3, r3
 800805a:	82d3      	strh	r3, [r2, #22]
 800805c:	0028      	movs	r0, r5
 800805e:	ab21      	add	r3, sp, #132	@ 0x84
 8008060:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008062:	a902      	add	r1, sp, #8
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	f001 fc8d 	bl	8009984 <_svfiprintf_r>
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	da01      	bge.n	8008072 <sniprintf+0x5a>
 800806e:	238b      	movs	r3, #139	@ 0x8b
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	2c00      	cmp	r4, #0
 8008074:	d0dc      	beq.n	8008030 <sniprintf+0x18>
 8008076:	2200      	movs	r2, #0
 8008078:	9b02      	ldr	r3, [sp, #8]
 800807a:	701a      	strb	r2, [r3, #0]
 800807c:	e7d8      	b.n	8008030 <sniprintf+0x18>
 800807e:	46c0      	nop			@ (mov r8, r8)
 8008080:	20000050 	.word	0x20000050

08008084 <siprintf>:
 8008084:	b40e      	push	{r1, r2, r3}
 8008086:	b510      	push	{r4, lr}
 8008088:	2400      	movs	r4, #0
 800808a:	490c      	ldr	r1, [pc, #48]	@ (80080bc <siprintf+0x38>)
 800808c:	b09d      	sub	sp, #116	@ 0x74
 800808e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008090:	9002      	str	r0, [sp, #8]
 8008092:	9006      	str	r0, [sp, #24]
 8008094:	9107      	str	r1, [sp, #28]
 8008096:	9104      	str	r1, [sp, #16]
 8008098:	4809      	ldr	r0, [pc, #36]	@ (80080c0 <siprintf+0x3c>)
 800809a:	490a      	ldr	r1, [pc, #40]	@ (80080c4 <siprintf+0x40>)
 800809c:	cb04      	ldmia	r3!, {r2}
 800809e:	9105      	str	r1, [sp, #20]
 80080a0:	6800      	ldr	r0, [r0, #0]
 80080a2:	a902      	add	r1, sp, #8
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80080a8:	f001 fc6c 	bl	8009984 <_svfiprintf_r>
 80080ac:	9b02      	ldr	r3, [sp, #8]
 80080ae:	701c      	strb	r4, [r3, #0]
 80080b0:	b01d      	add	sp, #116	@ 0x74
 80080b2:	bc10      	pop	{r4}
 80080b4:	bc08      	pop	{r3}
 80080b6:	b003      	add	sp, #12
 80080b8:	4718      	bx	r3
 80080ba:	46c0      	nop			@ (mov r8, r8)
 80080bc:	7fffffff 	.word	0x7fffffff
 80080c0:	20000050 	.word	0x20000050
 80080c4:	ffff0208 	.word	0xffff0208

080080c8 <__sread>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	000c      	movs	r4, r1
 80080cc:	250e      	movs	r5, #14
 80080ce:	5f49      	ldrsh	r1, [r1, r5]
 80080d0:	f000 f878 	bl	80081c4 <_read_r>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	db03      	blt.n	80080e0 <__sread+0x18>
 80080d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80080da:	181b      	adds	r3, r3, r0
 80080dc:	6563      	str	r3, [r4, #84]	@ 0x54
 80080de:	bd70      	pop	{r4, r5, r6, pc}
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	4a02      	ldr	r2, [pc, #8]	@ (80080ec <__sread+0x24>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	81a3      	strh	r3, [r4, #12]
 80080e8:	e7f9      	b.n	80080de <__sread+0x16>
 80080ea:	46c0      	nop			@ (mov r8, r8)
 80080ec:	ffffefff 	.word	0xffffefff

080080f0 <__swrite>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	001f      	movs	r7, r3
 80080f4:	898b      	ldrh	r3, [r1, #12]
 80080f6:	0005      	movs	r5, r0
 80080f8:	000c      	movs	r4, r1
 80080fa:	0016      	movs	r6, r2
 80080fc:	05db      	lsls	r3, r3, #23
 80080fe:	d505      	bpl.n	800810c <__swrite+0x1c>
 8008100:	230e      	movs	r3, #14
 8008102:	5ec9      	ldrsh	r1, [r1, r3]
 8008104:	2200      	movs	r2, #0
 8008106:	2302      	movs	r3, #2
 8008108:	f000 f848 	bl	800819c <_lseek_r>
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	4a05      	ldr	r2, [pc, #20]	@ (8008124 <__swrite+0x34>)
 8008110:	0028      	movs	r0, r5
 8008112:	4013      	ands	r3, r2
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	0032      	movs	r2, r6
 8008118:	230e      	movs	r3, #14
 800811a:	5ee1      	ldrsh	r1, [r4, r3]
 800811c:	003b      	movs	r3, r7
 800811e:	f000 f865 	bl	80081ec <_write_r>
 8008122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008124:	ffffefff 	.word	0xffffefff

08008128 <__sseek>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	000c      	movs	r4, r1
 800812c:	250e      	movs	r5, #14
 800812e:	5f49      	ldrsh	r1, [r1, r5]
 8008130:	f000 f834 	bl	800819c <_lseek_r>
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	1c42      	adds	r2, r0, #1
 8008138:	d103      	bne.n	8008142 <__sseek+0x1a>
 800813a:	4a05      	ldr	r2, [pc, #20]	@ (8008150 <__sseek+0x28>)
 800813c:	4013      	ands	r3, r2
 800813e:	81a3      	strh	r3, [r4, #12]
 8008140:	bd70      	pop	{r4, r5, r6, pc}
 8008142:	2280      	movs	r2, #128	@ 0x80
 8008144:	0152      	lsls	r2, r2, #5
 8008146:	4313      	orrs	r3, r2
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	6560      	str	r0, [r4, #84]	@ 0x54
 800814c:	e7f8      	b.n	8008140 <__sseek+0x18>
 800814e:	46c0      	nop			@ (mov r8, r8)
 8008150:	ffffefff 	.word	0xffffefff

08008154 <__sclose>:
 8008154:	b510      	push	{r4, lr}
 8008156:	230e      	movs	r3, #14
 8008158:	5ec9      	ldrsh	r1, [r1, r3]
 800815a:	f000 f80d 	bl	8008178 <_close_r>
 800815e:	bd10      	pop	{r4, pc}

08008160 <memset>:
 8008160:	0003      	movs	r3, r0
 8008162:	1882      	adds	r2, r0, r2
 8008164:	4293      	cmp	r3, r2
 8008166:	d100      	bne.n	800816a <memset+0xa>
 8008168:	4770      	bx	lr
 800816a:	7019      	strb	r1, [r3, #0]
 800816c:	3301      	adds	r3, #1
 800816e:	e7f9      	b.n	8008164 <memset+0x4>

08008170 <_localeconv_r>:
 8008170:	4800      	ldr	r0, [pc, #0]	@ (8008174 <_localeconv_r+0x4>)
 8008172:	4770      	bx	lr
 8008174:	20000190 	.word	0x20000190

08008178 <_close_r>:
 8008178:	2300      	movs	r3, #0
 800817a:	b570      	push	{r4, r5, r6, lr}
 800817c:	4d06      	ldr	r5, [pc, #24]	@ (8008198 <_close_r+0x20>)
 800817e:	0004      	movs	r4, r0
 8008180:	0008      	movs	r0, r1
 8008182:	602b      	str	r3, [r5, #0]
 8008184:	f7fc fef0 	bl	8004f68 <_close>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d103      	bne.n	8008194 <_close_r+0x1c>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d000      	beq.n	8008194 <_close_r+0x1c>
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	46c0      	nop			@ (mov r8, r8)
 8008198:	20000a34 	.word	0x20000a34

0800819c <_lseek_r>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	0004      	movs	r4, r0
 80081a0:	0008      	movs	r0, r1
 80081a2:	0011      	movs	r1, r2
 80081a4:	001a      	movs	r2, r3
 80081a6:	2300      	movs	r3, #0
 80081a8:	4d05      	ldr	r5, [pc, #20]	@ (80081c0 <_lseek_r+0x24>)
 80081aa:	602b      	str	r3, [r5, #0]
 80081ac:	f7fc fee6 	bl	8004f7c <_lseek>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d103      	bne.n	80081bc <_lseek_r+0x20>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d000      	beq.n	80081bc <_lseek_r+0x20>
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	bd70      	pop	{r4, r5, r6, pc}
 80081be:	46c0      	nop			@ (mov r8, r8)
 80081c0:	20000a34 	.word	0x20000a34

080081c4 <_read_r>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	0004      	movs	r4, r0
 80081c8:	0008      	movs	r0, r1
 80081ca:	0011      	movs	r1, r2
 80081cc:	001a      	movs	r2, r3
 80081ce:	2300      	movs	r3, #0
 80081d0:	4d05      	ldr	r5, [pc, #20]	@ (80081e8 <_read_r+0x24>)
 80081d2:	602b      	str	r3, [r5, #0]
 80081d4:	f7fc feae 	bl	8004f34 <_read>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d103      	bne.n	80081e4 <_read_r+0x20>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d000      	beq.n	80081e4 <_read_r+0x20>
 80081e2:	6023      	str	r3, [r4, #0]
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	46c0      	nop			@ (mov r8, r8)
 80081e8:	20000a34 	.word	0x20000a34

080081ec <_write_r>:
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	0004      	movs	r4, r0
 80081f0:	0008      	movs	r0, r1
 80081f2:	0011      	movs	r1, r2
 80081f4:	001a      	movs	r2, r3
 80081f6:	2300      	movs	r3, #0
 80081f8:	4d05      	ldr	r5, [pc, #20]	@ (8008210 <_write_r+0x24>)
 80081fa:	602b      	str	r3, [r5, #0]
 80081fc:	f7fc fea7 	bl	8004f4e <_write>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d103      	bne.n	800820c <_write_r+0x20>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d000      	beq.n	800820c <_write_r+0x20>
 800820a:	6023      	str	r3, [r4, #0]
 800820c:	bd70      	pop	{r4, r5, r6, pc}
 800820e:	46c0      	nop			@ (mov r8, r8)
 8008210:	20000a34 	.word	0x20000a34

08008214 <__errno>:
 8008214:	4b01      	ldr	r3, [pc, #4]	@ (800821c <__errno+0x8>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	4770      	bx	lr
 800821a:	46c0      	nop			@ (mov r8, r8)
 800821c:	20000050 	.word	0x20000050

08008220 <__libc_init_array>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	2600      	movs	r6, #0
 8008224:	4c0c      	ldr	r4, [pc, #48]	@ (8008258 <__libc_init_array+0x38>)
 8008226:	4d0d      	ldr	r5, [pc, #52]	@ (800825c <__libc_init_array+0x3c>)
 8008228:	1b64      	subs	r4, r4, r5
 800822a:	10a4      	asrs	r4, r4, #2
 800822c:	42a6      	cmp	r6, r4
 800822e:	d109      	bne.n	8008244 <__libc_init_array+0x24>
 8008230:	2600      	movs	r6, #0
 8008232:	f002 f8f1 	bl	800a418 <_init>
 8008236:	4c0a      	ldr	r4, [pc, #40]	@ (8008260 <__libc_init_array+0x40>)
 8008238:	4d0a      	ldr	r5, [pc, #40]	@ (8008264 <__libc_init_array+0x44>)
 800823a:	1b64      	subs	r4, r4, r5
 800823c:	10a4      	asrs	r4, r4, #2
 800823e:	42a6      	cmp	r6, r4
 8008240:	d105      	bne.n	800824e <__libc_init_array+0x2e>
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	00b3      	lsls	r3, r6, #2
 8008246:	58eb      	ldr	r3, [r5, r3]
 8008248:	4798      	blx	r3
 800824a:	3601      	adds	r6, #1
 800824c:	e7ee      	b.n	800822c <__libc_init_array+0xc>
 800824e:	00b3      	lsls	r3, r6, #2
 8008250:	58eb      	ldr	r3, [r5, r3]
 8008252:	4798      	blx	r3
 8008254:	3601      	adds	r6, #1
 8008256:	e7f2      	b.n	800823e <__libc_init_array+0x1e>
 8008258:	0800d1dc 	.word	0x0800d1dc
 800825c:	0800d1dc 	.word	0x0800d1dc
 8008260:	0800d1e0 	.word	0x0800d1e0
 8008264:	0800d1dc 	.word	0x0800d1dc

08008268 <__retarget_lock_init_recursive>:
 8008268:	4770      	bx	lr

0800826a <__retarget_lock_acquire_recursive>:
 800826a:	4770      	bx	lr

0800826c <__retarget_lock_release_recursive>:
 800826c:	4770      	bx	lr

0800826e <memchr>:
 800826e:	b2c9      	uxtb	r1, r1
 8008270:	1882      	adds	r2, r0, r2
 8008272:	4290      	cmp	r0, r2
 8008274:	d101      	bne.n	800827a <memchr+0xc>
 8008276:	2000      	movs	r0, #0
 8008278:	4770      	bx	lr
 800827a:	7803      	ldrb	r3, [r0, #0]
 800827c:	428b      	cmp	r3, r1
 800827e:	d0fb      	beq.n	8008278 <memchr+0xa>
 8008280:	3001      	adds	r0, #1
 8008282:	e7f6      	b.n	8008272 <memchr+0x4>

08008284 <memcpy>:
 8008284:	2300      	movs	r3, #0
 8008286:	b510      	push	{r4, lr}
 8008288:	429a      	cmp	r2, r3
 800828a:	d100      	bne.n	800828e <memcpy+0xa>
 800828c:	bd10      	pop	{r4, pc}
 800828e:	5ccc      	ldrb	r4, [r1, r3]
 8008290:	54c4      	strb	r4, [r0, r3]
 8008292:	3301      	adds	r3, #1
 8008294:	e7f8      	b.n	8008288 <memcpy+0x4>

08008296 <quorem>:
 8008296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008298:	6903      	ldr	r3, [r0, #16]
 800829a:	690c      	ldr	r4, [r1, #16]
 800829c:	b089      	sub	sp, #36	@ 0x24
 800829e:	9003      	str	r0, [sp, #12]
 80082a0:	9106      	str	r1, [sp, #24]
 80082a2:	2000      	movs	r0, #0
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	db63      	blt.n	8008370 <quorem+0xda>
 80082a8:	000b      	movs	r3, r1
 80082aa:	3c01      	subs	r4, #1
 80082ac:	3314      	adds	r3, #20
 80082ae:	00a5      	lsls	r5, r4, #2
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	195b      	adds	r3, r3, r5
 80082b4:	9305      	str	r3, [sp, #20]
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	3314      	adds	r3, #20
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	195d      	adds	r5, r3, r5
 80082be:	9b05      	ldr	r3, [sp, #20]
 80082c0:	682f      	ldr	r7, [r5, #0]
 80082c2:	681e      	ldr	r6, [r3, #0]
 80082c4:	0038      	movs	r0, r7
 80082c6:	3601      	adds	r6, #1
 80082c8:	0031      	movs	r1, r6
 80082ca:	f7f7 ff43 	bl	8000154 <__udivsi3>
 80082ce:	9002      	str	r0, [sp, #8]
 80082d0:	42b7      	cmp	r7, r6
 80082d2:	d327      	bcc.n	8008324 <quorem+0x8e>
 80082d4:	9b04      	ldr	r3, [sp, #16]
 80082d6:	2700      	movs	r7, #0
 80082d8:	469c      	mov	ip, r3
 80082da:	9e01      	ldr	r6, [sp, #4]
 80082dc:	9707      	str	r7, [sp, #28]
 80082de:	4662      	mov	r2, ip
 80082e0:	ca08      	ldmia	r2!, {r3}
 80082e2:	6830      	ldr	r0, [r6, #0]
 80082e4:	4694      	mov	ip, r2
 80082e6:	9a02      	ldr	r2, [sp, #8]
 80082e8:	b299      	uxth	r1, r3
 80082ea:	4351      	muls	r1, r2
 80082ec:	0c1b      	lsrs	r3, r3, #16
 80082ee:	4353      	muls	r3, r2
 80082f0:	19c9      	adds	r1, r1, r7
 80082f2:	0c0a      	lsrs	r2, r1, #16
 80082f4:	189b      	adds	r3, r3, r2
 80082f6:	b289      	uxth	r1, r1
 80082f8:	b282      	uxth	r2, r0
 80082fa:	1a52      	subs	r2, r2, r1
 80082fc:	9907      	ldr	r1, [sp, #28]
 80082fe:	0c1f      	lsrs	r7, r3, #16
 8008300:	1852      	adds	r2, r2, r1
 8008302:	0c00      	lsrs	r0, r0, #16
 8008304:	b29b      	uxth	r3, r3
 8008306:	1411      	asrs	r1, r2, #16
 8008308:	1ac3      	subs	r3, r0, r3
 800830a:	185b      	adds	r3, r3, r1
 800830c:	1419      	asrs	r1, r3, #16
 800830e:	b292      	uxth	r2, r2
 8008310:	041b      	lsls	r3, r3, #16
 8008312:	431a      	orrs	r2, r3
 8008314:	9b05      	ldr	r3, [sp, #20]
 8008316:	9107      	str	r1, [sp, #28]
 8008318:	c604      	stmia	r6!, {r2}
 800831a:	4563      	cmp	r3, ip
 800831c:	d2df      	bcs.n	80082de <quorem+0x48>
 800831e:	682b      	ldr	r3, [r5, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d02b      	beq.n	800837c <quorem+0xe6>
 8008324:	9906      	ldr	r1, [sp, #24]
 8008326:	9803      	ldr	r0, [sp, #12]
 8008328:	f001 f9b6 	bl	8009698 <__mcmp>
 800832c:	2800      	cmp	r0, #0
 800832e:	db1e      	blt.n	800836e <quorem+0xd8>
 8008330:	2600      	movs	r6, #0
 8008332:	9d01      	ldr	r5, [sp, #4]
 8008334:	9904      	ldr	r1, [sp, #16]
 8008336:	c901      	ldmia	r1!, {r0}
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	b287      	uxth	r7, r0
 800833c:	b29a      	uxth	r2, r3
 800833e:	1bd2      	subs	r2, r2, r7
 8008340:	1992      	adds	r2, r2, r6
 8008342:	0c00      	lsrs	r0, r0, #16
 8008344:	0c1b      	lsrs	r3, r3, #16
 8008346:	1a1b      	subs	r3, r3, r0
 8008348:	1410      	asrs	r0, r2, #16
 800834a:	181b      	adds	r3, r3, r0
 800834c:	141e      	asrs	r6, r3, #16
 800834e:	b292      	uxth	r2, r2
 8008350:	041b      	lsls	r3, r3, #16
 8008352:	431a      	orrs	r2, r3
 8008354:	9b05      	ldr	r3, [sp, #20]
 8008356:	c504      	stmia	r5!, {r2}
 8008358:	428b      	cmp	r3, r1
 800835a:	d2ec      	bcs.n	8008336 <quorem+0xa0>
 800835c:	9a01      	ldr	r2, [sp, #4]
 800835e:	00a3      	lsls	r3, r4, #2
 8008360:	18d3      	adds	r3, r2, r3
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	2a00      	cmp	r2, #0
 8008366:	d014      	beq.n	8008392 <quorem+0xfc>
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	3301      	adds	r3, #1
 800836c:	9302      	str	r3, [sp, #8]
 800836e:	9802      	ldr	r0, [sp, #8]
 8008370:	b009      	add	sp, #36	@ 0x24
 8008372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d104      	bne.n	8008384 <quorem+0xee>
 800837a:	3c01      	subs	r4, #1
 800837c:	9b01      	ldr	r3, [sp, #4]
 800837e:	3d04      	subs	r5, #4
 8008380:	42ab      	cmp	r3, r5
 8008382:	d3f7      	bcc.n	8008374 <quorem+0xde>
 8008384:	9b03      	ldr	r3, [sp, #12]
 8008386:	611c      	str	r4, [r3, #16]
 8008388:	e7cc      	b.n	8008324 <quorem+0x8e>
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	2a00      	cmp	r2, #0
 800838e:	d104      	bne.n	800839a <quorem+0x104>
 8008390:	3c01      	subs	r4, #1
 8008392:	9a01      	ldr	r2, [sp, #4]
 8008394:	3b04      	subs	r3, #4
 8008396:	429a      	cmp	r2, r3
 8008398:	d3f7      	bcc.n	800838a <quorem+0xf4>
 800839a:	9b03      	ldr	r3, [sp, #12]
 800839c:	611c      	str	r4, [r3, #16]
 800839e:	e7e3      	b.n	8008368 <quorem+0xd2>

080083a0 <_dtoa_r>:
 80083a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a2:	0014      	movs	r4, r2
 80083a4:	001d      	movs	r5, r3
 80083a6:	69c6      	ldr	r6, [r0, #28]
 80083a8:	b09d      	sub	sp, #116	@ 0x74
 80083aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80083ac:	950b      	str	r5, [sp, #44]	@ 0x2c
 80083ae:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80083b0:	9003      	str	r0, [sp, #12]
 80083b2:	2e00      	cmp	r6, #0
 80083b4:	d10f      	bne.n	80083d6 <_dtoa_r+0x36>
 80083b6:	2010      	movs	r0, #16
 80083b8:	f000 fe2c 	bl	8009014 <malloc>
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	1e02      	subs	r2, r0, #0
 80083c0:	61d8      	str	r0, [r3, #28]
 80083c2:	d104      	bne.n	80083ce <_dtoa_r+0x2e>
 80083c4:	21ef      	movs	r1, #239	@ 0xef
 80083c6:	4bc7      	ldr	r3, [pc, #796]	@ (80086e4 <_dtoa_r+0x344>)
 80083c8:	48c7      	ldr	r0, [pc, #796]	@ (80086e8 <_dtoa_r+0x348>)
 80083ca:	f001 fcaf 	bl	8009d2c <__assert_func>
 80083ce:	6046      	str	r6, [r0, #4]
 80083d0:	6086      	str	r6, [r0, #8]
 80083d2:	6006      	str	r6, [r0, #0]
 80083d4:	60c6      	str	r6, [r0, #12]
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	6819      	ldr	r1, [r3, #0]
 80083dc:	2900      	cmp	r1, #0
 80083de:	d00b      	beq.n	80083f8 <_dtoa_r+0x58>
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	2301      	movs	r3, #1
 80083e4:	4093      	lsls	r3, r2
 80083e6:	604a      	str	r2, [r1, #4]
 80083e8:	608b      	str	r3, [r1, #8]
 80083ea:	9803      	ldr	r0, [sp, #12]
 80083ec:	f000 ff12 	bl	8009214 <_Bfree>
 80083f0:	2200      	movs	r2, #0
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	da1e      	bge.n	800843a <_dtoa_r+0x9a>
 80083fc:	2301      	movs	r3, #1
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	006b      	lsls	r3, r5, #1
 8008402:	085b      	lsrs	r3, r3, #1
 8008404:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008406:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008408:	4bb8      	ldr	r3, [pc, #736]	@ (80086ec <_dtoa_r+0x34c>)
 800840a:	4ab8      	ldr	r2, [pc, #736]	@ (80086ec <_dtoa_r+0x34c>)
 800840c:	403b      	ands	r3, r7
 800840e:	4293      	cmp	r3, r2
 8008410:	d116      	bne.n	8008440 <_dtoa_r+0xa0>
 8008412:	4bb7      	ldr	r3, [pc, #732]	@ (80086f0 <_dtoa_r+0x350>)
 8008414:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	033b      	lsls	r3, r7, #12
 800841a:	0b1b      	lsrs	r3, r3, #12
 800841c:	4323      	orrs	r3, r4
 800841e:	d101      	bne.n	8008424 <_dtoa_r+0x84>
 8008420:	f000 fd80 	bl	8008f24 <_dtoa_r+0xb84>
 8008424:	4bb3      	ldr	r3, [pc, #716]	@ (80086f4 <_dtoa_r+0x354>)
 8008426:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008428:	9308      	str	r3, [sp, #32]
 800842a:	2a00      	cmp	r2, #0
 800842c:	d002      	beq.n	8008434 <_dtoa_r+0x94>
 800842e:	4bb2      	ldr	r3, [pc, #712]	@ (80086f8 <_dtoa_r+0x358>)
 8008430:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	9808      	ldr	r0, [sp, #32]
 8008436:	b01d      	add	sp, #116	@ 0x74
 8008438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800843a:	2300      	movs	r3, #0
 800843c:	603b      	str	r3, [r7, #0]
 800843e:	e7e2      	b.n	8008406 <_dtoa_r+0x66>
 8008440:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008444:	9212      	str	r2, [sp, #72]	@ 0x48
 8008446:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008448:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800844a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800844c:	2200      	movs	r2, #0
 800844e:	2300      	movs	r3, #0
 8008450:	f7f8 f806 	bl	8000460 <__aeabi_dcmpeq>
 8008454:	1e06      	subs	r6, r0, #0
 8008456:	d00b      	beq.n	8008470 <_dtoa_r+0xd0>
 8008458:	2301      	movs	r3, #1
 800845a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <_dtoa_r+0xca>
 8008464:	4ba5      	ldr	r3, [pc, #660]	@ (80086fc <_dtoa_r+0x35c>)
 8008466:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	4ba5      	ldr	r3, [pc, #660]	@ (8008700 <_dtoa_r+0x360>)
 800846c:	9308      	str	r3, [sp, #32]
 800846e:	e7e1      	b.n	8008434 <_dtoa_r+0x94>
 8008470:	ab1a      	add	r3, sp, #104	@ 0x68
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	9803      	ldr	r0, [sp, #12]
 800847a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800847c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800847e:	f001 f9c1 	bl	8009804 <__d2b>
 8008482:	007a      	lsls	r2, r7, #1
 8008484:	9005      	str	r0, [sp, #20]
 8008486:	0d52      	lsrs	r2, r2, #21
 8008488:	d100      	bne.n	800848c <_dtoa_r+0xec>
 800848a:	e07b      	b.n	8008584 <_dtoa_r+0x1e4>
 800848c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800848e:	9618      	str	r6, [sp, #96]	@ 0x60
 8008490:	0319      	lsls	r1, r3, #12
 8008492:	4b9c      	ldr	r3, [pc, #624]	@ (8008704 <_dtoa_r+0x364>)
 8008494:	0b09      	lsrs	r1, r1, #12
 8008496:	430b      	orrs	r3, r1
 8008498:	499b      	ldr	r1, [pc, #620]	@ (8008708 <_dtoa_r+0x368>)
 800849a:	1857      	adds	r7, r2, r1
 800849c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800849e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80084a0:	0019      	movs	r1, r3
 80084a2:	2200      	movs	r2, #0
 80084a4:	4b99      	ldr	r3, [pc, #612]	@ (800870c <_dtoa_r+0x36c>)
 80084a6:	f7fa fb75 	bl	8002b94 <__aeabi_dsub>
 80084aa:	4a99      	ldr	r2, [pc, #612]	@ (8008710 <_dtoa_r+0x370>)
 80084ac:	4b99      	ldr	r3, [pc, #612]	@ (8008714 <_dtoa_r+0x374>)
 80084ae:	f7fa f88b 	bl	80025c8 <__aeabi_dmul>
 80084b2:	4a99      	ldr	r2, [pc, #612]	@ (8008718 <_dtoa_r+0x378>)
 80084b4:	4b99      	ldr	r3, [pc, #612]	@ (800871c <_dtoa_r+0x37c>)
 80084b6:	f7f9 f887 	bl	80015c8 <__aeabi_dadd>
 80084ba:	0004      	movs	r4, r0
 80084bc:	0038      	movs	r0, r7
 80084be:	000d      	movs	r5, r1
 80084c0:	f7fa ffd0 	bl	8003464 <__aeabi_i2d>
 80084c4:	4a96      	ldr	r2, [pc, #600]	@ (8008720 <_dtoa_r+0x380>)
 80084c6:	4b97      	ldr	r3, [pc, #604]	@ (8008724 <_dtoa_r+0x384>)
 80084c8:	f7fa f87e 	bl	80025c8 <__aeabi_dmul>
 80084cc:	0002      	movs	r2, r0
 80084ce:	000b      	movs	r3, r1
 80084d0:	0020      	movs	r0, r4
 80084d2:	0029      	movs	r1, r5
 80084d4:	f7f9 f878 	bl	80015c8 <__aeabi_dadd>
 80084d8:	0004      	movs	r4, r0
 80084da:	000d      	movs	r5, r1
 80084dc:	f7fa ff86 	bl	80033ec <__aeabi_d2iz>
 80084e0:	2200      	movs	r2, #0
 80084e2:	9004      	str	r0, [sp, #16]
 80084e4:	2300      	movs	r3, #0
 80084e6:	0020      	movs	r0, r4
 80084e8:	0029      	movs	r1, r5
 80084ea:	f7f7 ffbf 	bl	800046c <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d00b      	beq.n	800850a <_dtoa_r+0x16a>
 80084f2:	9804      	ldr	r0, [sp, #16]
 80084f4:	f7fa ffb6 	bl	8003464 <__aeabi_i2d>
 80084f8:	002b      	movs	r3, r5
 80084fa:	0022      	movs	r2, r4
 80084fc:	f7f7 ffb0 	bl	8000460 <__aeabi_dcmpeq>
 8008500:	4243      	negs	r3, r0
 8008502:	4158      	adcs	r0, r3
 8008504:	9b04      	ldr	r3, [sp, #16]
 8008506:	1a1b      	subs	r3, r3, r0
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	2301      	movs	r3, #1
 800850c:	9315      	str	r3, [sp, #84]	@ 0x54
 800850e:	9b04      	ldr	r3, [sp, #16]
 8008510:	2b16      	cmp	r3, #22
 8008512:	d810      	bhi.n	8008536 <_dtoa_r+0x196>
 8008514:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008516:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008518:	9a04      	ldr	r2, [sp, #16]
 800851a:	4b83      	ldr	r3, [pc, #524]	@ (8008728 <_dtoa_r+0x388>)
 800851c:	00d2      	lsls	r2, r2, #3
 800851e:	189b      	adds	r3, r3, r2
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f7f7 ffa2 	bl	800046c <__aeabi_dcmplt>
 8008528:	2800      	cmp	r0, #0
 800852a:	d047      	beq.n	80085bc <_dtoa_r+0x21c>
 800852c:	9b04      	ldr	r3, [sp, #16]
 800852e:	3b01      	subs	r3, #1
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	2300      	movs	r3, #0
 8008534:	9315      	str	r3, [sp, #84]	@ 0x54
 8008536:	2200      	movs	r2, #0
 8008538:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800853a:	9206      	str	r2, [sp, #24]
 800853c:	1bdb      	subs	r3, r3, r7
 800853e:	1e5a      	subs	r2, r3, #1
 8008540:	d53e      	bpl.n	80085c0 <_dtoa_r+0x220>
 8008542:	2201      	movs	r2, #1
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	9306      	str	r3, [sp, #24]
 8008548:	2300      	movs	r3, #0
 800854a:	930d      	str	r3, [sp, #52]	@ 0x34
 800854c:	9b04      	ldr	r3, [sp, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	db38      	blt.n	80085c4 <_dtoa_r+0x224>
 8008552:	9a04      	ldr	r2, [sp, #16]
 8008554:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008556:	4694      	mov	ip, r2
 8008558:	4463      	add	r3, ip
 800855a:	930d      	str	r3, [sp, #52]	@ 0x34
 800855c:	2300      	movs	r3, #0
 800855e:	9214      	str	r2, [sp, #80]	@ 0x50
 8008560:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008562:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008564:	2401      	movs	r4, #1
 8008566:	2b09      	cmp	r3, #9
 8008568:	d862      	bhi.n	8008630 <_dtoa_r+0x290>
 800856a:	2b05      	cmp	r3, #5
 800856c:	dd02      	ble.n	8008574 <_dtoa_r+0x1d4>
 800856e:	2400      	movs	r4, #0
 8008570:	3b04      	subs	r3, #4
 8008572:	9322      	str	r3, [sp, #136]	@ 0x88
 8008574:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008576:	1e98      	subs	r0, r3, #2
 8008578:	2803      	cmp	r0, #3
 800857a:	d863      	bhi.n	8008644 <_dtoa_r+0x2a4>
 800857c:	f7f7 fdcc 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008580:	2b385654 	.word	0x2b385654
 8008584:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008586:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008588:	18f6      	adds	r6, r6, r3
 800858a:	4b68      	ldr	r3, [pc, #416]	@ (800872c <_dtoa_r+0x38c>)
 800858c:	18f2      	adds	r2, r6, r3
 800858e:	2a20      	cmp	r2, #32
 8008590:	dd0f      	ble.n	80085b2 <_dtoa_r+0x212>
 8008592:	2340      	movs	r3, #64	@ 0x40
 8008594:	1a9b      	subs	r3, r3, r2
 8008596:	409f      	lsls	r7, r3
 8008598:	4b65      	ldr	r3, [pc, #404]	@ (8008730 <_dtoa_r+0x390>)
 800859a:	0038      	movs	r0, r7
 800859c:	18f3      	adds	r3, r6, r3
 800859e:	40dc      	lsrs	r4, r3
 80085a0:	4320      	orrs	r0, r4
 80085a2:	f7fa ff8d 	bl	80034c0 <__aeabi_ui2d>
 80085a6:	2201      	movs	r2, #1
 80085a8:	4b62      	ldr	r3, [pc, #392]	@ (8008734 <_dtoa_r+0x394>)
 80085aa:	1e77      	subs	r7, r6, #1
 80085ac:	18cb      	adds	r3, r1, r3
 80085ae:	9218      	str	r2, [sp, #96]	@ 0x60
 80085b0:	e776      	b.n	80084a0 <_dtoa_r+0x100>
 80085b2:	2320      	movs	r3, #32
 80085b4:	0020      	movs	r0, r4
 80085b6:	1a9b      	subs	r3, r3, r2
 80085b8:	4098      	lsls	r0, r3
 80085ba:	e7f2      	b.n	80085a2 <_dtoa_r+0x202>
 80085bc:	9015      	str	r0, [sp, #84]	@ 0x54
 80085be:	e7ba      	b.n	8008536 <_dtoa_r+0x196>
 80085c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80085c2:	e7c3      	b.n	800854c <_dtoa_r+0x1ac>
 80085c4:	9b06      	ldr	r3, [sp, #24]
 80085c6:	9a04      	ldr	r2, [sp, #16]
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	9306      	str	r3, [sp, #24]
 80085cc:	4253      	negs	r3, r2
 80085ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085d0:	2300      	movs	r3, #0
 80085d2:	9314      	str	r3, [sp, #80]	@ 0x50
 80085d4:	e7c5      	b.n	8008562 <_dtoa_r+0x1c2>
 80085d6:	2301      	movs	r3, #1
 80085d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80085da:	9310      	str	r3, [sp, #64]	@ 0x40
 80085dc:	4694      	mov	ip, r2
 80085de:	9b04      	ldr	r3, [sp, #16]
 80085e0:	4463      	add	r3, ip
 80085e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80085e4:	3301      	adds	r3, #1
 80085e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	dc08      	bgt.n	80085fe <_dtoa_r+0x25e>
 80085ec:	2301      	movs	r3, #1
 80085ee:	e006      	b.n	80085fe <_dtoa_r+0x25e>
 80085f0:	2301      	movs	r3, #1
 80085f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80085f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dd28      	ble.n	800864c <_dtoa_r+0x2ac>
 80085fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80085fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085fe:	9a03      	ldr	r2, [sp, #12]
 8008600:	2100      	movs	r1, #0
 8008602:	69d0      	ldr	r0, [r2, #28]
 8008604:	2204      	movs	r2, #4
 8008606:	0015      	movs	r5, r2
 8008608:	3514      	adds	r5, #20
 800860a:	429d      	cmp	r5, r3
 800860c:	d923      	bls.n	8008656 <_dtoa_r+0x2b6>
 800860e:	6041      	str	r1, [r0, #4]
 8008610:	9803      	ldr	r0, [sp, #12]
 8008612:	f000 fdbb 	bl	800918c <_Balloc>
 8008616:	9008      	str	r0, [sp, #32]
 8008618:	2800      	cmp	r0, #0
 800861a:	d11f      	bne.n	800865c <_dtoa_r+0x2bc>
 800861c:	21b0      	movs	r1, #176	@ 0xb0
 800861e:	4b46      	ldr	r3, [pc, #280]	@ (8008738 <_dtoa_r+0x398>)
 8008620:	4831      	ldr	r0, [pc, #196]	@ (80086e8 <_dtoa_r+0x348>)
 8008622:	9a08      	ldr	r2, [sp, #32]
 8008624:	31ff      	adds	r1, #255	@ 0xff
 8008626:	e6d0      	b.n	80083ca <_dtoa_r+0x2a>
 8008628:	2300      	movs	r3, #0
 800862a:	e7e2      	b.n	80085f2 <_dtoa_r+0x252>
 800862c:	2300      	movs	r3, #0
 800862e:	e7d3      	b.n	80085d8 <_dtoa_r+0x238>
 8008630:	2300      	movs	r3, #0
 8008632:	9410      	str	r4, [sp, #64]	@ 0x40
 8008634:	9322      	str	r3, [sp, #136]	@ 0x88
 8008636:	3b01      	subs	r3, #1
 8008638:	2200      	movs	r2, #0
 800863a:	930e      	str	r3, [sp, #56]	@ 0x38
 800863c:	9309      	str	r3, [sp, #36]	@ 0x24
 800863e:	3313      	adds	r3, #19
 8008640:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008642:	e7dc      	b.n	80085fe <_dtoa_r+0x25e>
 8008644:	2301      	movs	r3, #1
 8008646:	9310      	str	r3, [sp, #64]	@ 0x40
 8008648:	3b02      	subs	r3, #2
 800864a:	e7f5      	b.n	8008638 <_dtoa_r+0x298>
 800864c:	2301      	movs	r3, #1
 800864e:	001a      	movs	r2, r3
 8008650:	930e      	str	r3, [sp, #56]	@ 0x38
 8008652:	9309      	str	r3, [sp, #36]	@ 0x24
 8008654:	e7f4      	b.n	8008640 <_dtoa_r+0x2a0>
 8008656:	3101      	adds	r1, #1
 8008658:	0052      	lsls	r2, r2, #1
 800865a:	e7d4      	b.n	8008606 <_dtoa_r+0x266>
 800865c:	9b03      	ldr	r3, [sp, #12]
 800865e:	9a08      	ldr	r2, [sp, #32]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008666:	2b0e      	cmp	r3, #14
 8008668:	d900      	bls.n	800866c <_dtoa_r+0x2cc>
 800866a:	e0d6      	b.n	800881a <_dtoa_r+0x47a>
 800866c:	2c00      	cmp	r4, #0
 800866e:	d100      	bne.n	8008672 <_dtoa_r+0x2d2>
 8008670:	e0d3      	b.n	800881a <_dtoa_r+0x47a>
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd63      	ble.n	8008740 <_dtoa_r+0x3a0>
 8008678:	210f      	movs	r1, #15
 800867a:	9a04      	ldr	r2, [sp, #16]
 800867c:	4b2a      	ldr	r3, [pc, #168]	@ (8008728 <_dtoa_r+0x388>)
 800867e:	400a      	ands	r2, r1
 8008680:	00d2      	lsls	r2, r2, #3
 8008682:	189b      	adds	r3, r3, r2
 8008684:	681e      	ldr	r6, [r3, #0]
 8008686:	685f      	ldr	r7, [r3, #4]
 8008688:	9b04      	ldr	r3, [sp, #16]
 800868a:	2402      	movs	r4, #2
 800868c:	111d      	asrs	r5, r3, #4
 800868e:	05db      	lsls	r3, r3, #23
 8008690:	d50a      	bpl.n	80086a8 <_dtoa_r+0x308>
 8008692:	4b2a      	ldr	r3, [pc, #168]	@ (800873c <_dtoa_r+0x39c>)
 8008694:	400d      	ands	r5, r1
 8008696:	6a1a      	ldr	r2, [r3, #32]
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800869c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800869e:	f7f9 fb59 	bl	8001d54 <__aeabi_ddiv>
 80086a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80086a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80086a6:	3401      	adds	r4, #1
 80086a8:	4b24      	ldr	r3, [pc, #144]	@ (800873c <_dtoa_r+0x39c>)
 80086aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80086ac:	2d00      	cmp	r5, #0
 80086ae:	d108      	bne.n	80086c2 <_dtoa_r+0x322>
 80086b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80086b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086b4:	0032      	movs	r2, r6
 80086b6:	003b      	movs	r3, r7
 80086b8:	f7f9 fb4c 	bl	8001d54 <__aeabi_ddiv>
 80086bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80086be:	910b      	str	r1, [sp, #44]	@ 0x2c
 80086c0:	e059      	b.n	8008776 <_dtoa_r+0x3d6>
 80086c2:	2301      	movs	r3, #1
 80086c4:	421d      	tst	r5, r3
 80086c6:	d009      	beq.n	80086dc <_dtoa_r+0x33c>
 80086c8:	18e4      	adds	r4, r4, r3
 80086ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086cc:	0030      	movs	r0, r6
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	0039      	movs	r1, r7
 80086d4:	f7f9 ff78 	bl	80025c8 <__aeabi_dmul>
 80086d8:	0006      	movs	r6, r0
 80086da:	000f      	movs	r7, r1
 80086dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086de:	106d      	asrs	r5, r5, #1
 80086e0:	3308      	adds	r3, #8
 80086e2:	e7e2      	b.n	80086aa <_dtoa_r+0x30a>
 80086e4:	0800a637 	.word	0x0800a637
 80086e8:	0800a64e 	.word	0x0800a64e
 80086ec:	7ff00000 	.word	0x7ff00000
 80086f0:	0000270f 	.word	0x0000270f
 80086f4:	0800a633 	.word	0x0800a633
 80086f8:	0800a636 	.word	0x0800a636
 80086fc:	0800a607 	.word	0x0800a607
 8008700:	0800a606 	.word	0x0800a606
 8008704:	3ff00000 	.word	0x3ff00000
 8008708:	fffffc01 	.word	0xfffffc01
 800870c:	3ff80000 	.word	0x3ff80000
 8008710:	636f4361 	.word	0x636f4361
 8008714:	3fd287a7 	.word	0x3fd287a7
 8008718:	8b60c8b3 	.word	0x8b60c8b3
 800871c:	3fc68a28 	.word	0x3fc68a28
 8008720:	509f79fb 	.word	0x509f79fb
 8008724:	3fd34413 	.word	0x3fd34413
 8008728:	0800d010 	.word	0x0800d010
 800872c:	00000432 	.word	0x00000432
 8008730:	00000412 	.word	0x00000412
 8008734:	fe100000 	.word	0xfe100000
 8008738:	0800a6a6 	.word	0x0800a6a6
 800873c:	0800cfe8 	.word	0x0800cfe8
 8008740:	9b04      	ldr	r3, [sp, #16]
 8008742:	2402      	movs	r4, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d016      	beq.n	8008776 <_dtoa_r+0x3d6>
 8008748:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800874a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800874c:	220f      	movs	r2, #15
 800874e:	425d      	negs	r5, r3
 8008750:	402a      	ands	r2, r5
 8008752:	4bd5      	ldr	r3, [pc, #852]	@ (8008aa8 <_dtoa_r+0x708>)
 8008754:	00d2      	lsls	r2, r2, #3
 8008756:	189b      	adds	r3, r3, r2
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f7f9 ff34 	bl	80025c8 <__aeabi_dmul>
 8008760:	2701      	movs	r7, #1
 8008762:	2300      	movs	r3, #0
 8008764:	900a      	str	r0, [sp, #40]	@ 0x28
 8008766:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008768:	4ed0      	ldr	r6, [pc, #832]	@ (8008aac <_dtoa_r+0x70c>)
 800876a:	112d      	asrs	r5, r5, #4
 800876c:	2d00      	cmp	r5, #0
 800876e:	d000      	beq.n	8008772 <_dtoa_r+0x3d2>
 8008770:	e095      	b.n	800889e <_dtoa_r+0x4fe>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1a2      	bne.n	80086bc <_dtoa_r+0x31c>
 8008776:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008778:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800877a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800877c:	2b00      	cmp	r3, #0
 800877e:	d100      	bne.n	8008782 <_dtoa_r+0x3e2>
 8008780:	e098      	b.n	80088b4 <_dtoa_r+0x514>
 8008782:	2200      	movs	r2, #0
 8008784:	0030      	movs	r0, r6
 8008786:	0039      	movs	r1, r7
 8008788:	4bc9      	ldr	r3, [pc, #804]	@ (8008ab0 <_dtoa_r+0x710>)
 800878a:	f7f7 fe6f 	bl	800046c <__aeabi_dcmplt>
 800878e:	2800      	cmp	r0, #0
 8008790:	d100      	bne.n	8008794 <_dtoa_r+0x3f4>
 8008792:	e08f      	b.n	80088b4 <_dtoa_r+0x514>
 8008794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008796:	2b00      	cmp	r3, #0
 8008798:	d100      	bne.n	800879c <_dtoa_r+0x3fc>
 800879a:	e08b      	b.n	80088b4 <_dtoa_r+0x514>
 800879c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800879e:	2b00      	cmp	r3, #0
 80087a0:	dd37      	ble.n	8008812 <_dtoa_r+0x472>
 80087a2:	9b04      	ldr	r3, [sp, #16]
 80087a4:	2200      	movs	r2, #0
 80087a6:	3b01      	subs	r3, #1
 80087a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80087aa:	0030      	movs	r0, r6
 80087ac:	4bc1      	ldr	r3, [pc, #772]	@ (8008ab4 <_dtoa_r+0x714>)
 80087ae:	0039      	movs	r1, r7
 80087b0:	f7f9 ff0a 	bl	80025c8 <__aeabi_dmul>
 80087b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80087b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80087b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087ba:	3401      	adds	r4, #1
 80087bc:	0020      	movs	r0, r4
 80087be:	9311      	str	r3, [sp, #68]	@ 0x44
 80087c0:	f7fa fe50 	bl	8003464 <__aeabi_i2d>
 80087c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087c8:	f7f9 fefe 	bl	80025c8 <__aeabi_dmul>
 80087cc:	4bba      	ldr	r3, [pc, #744]	@ (8008ab8 <_dtoa_r+0x718>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	f7f8 fefa 	bl	80015c8 <__aeabi_dadd>
 80087d4:	4bb9      	ldr	r3, [pc, #740]	@ (8008abc <_dtoa_r+0x71c>)
 80087d6:	0006      	movs	r6, r0
 80087d8:	18cf      	adds	r7, r1, r3
 80087da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d16d      	bne.n	80088bc <_dtoa_r+0x51c>
 80087e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087e4:	2200      	movs	r2, #0
 80087e6:	4bb6      	ldr	r3, [pc, #728]	@ (8008ac0 <_dtoa_r+0x720>)
 80087e8:	f7fa f9d4 	bl	8002b94 <__aeabi_dsub>
 80087ec:	0032      	movs	r2, r6
 80087ee:	003b      	movs	r3, r7
 80087f0:	0004      	movs	r4, r0
 80087f2:	000d      	movs	r5, r1
 80087f4:	f7f7 fe4e 	bl	8000494 <__aeabi_dcmpgt>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d000      	beq.n	80087fe <_dtoa_r+0x45e>
 80087fc:	e2b6      	b.n	8008d6c <_dtoa_r+0x9cc>
 80087fe:	2180      	movs	r1, #128	@ 0x80
 8008800:	0609      	lsls	r1, r1, #24
 8008802:	187b      	adds	r3, r7, r1
 8008804:	0032      	movs	r2, r6
 8008806:	0020      	movs	r0, r4
 8008808:	0029      	movs	r1, r5
 800880a:	f7f7 fe2f 	bl	800046c <__aeabi_dcmplt>
 800880e:	2800      	cmp	r0, #0
 8008810:	d128      	bne.n	8008864 <_dtoa_r+0x4c4>
 8008812:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008814:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008816:	930a      	str	r3, [sp, #40]	@ 0x28
 8008818:	940b      	str	r4, [sp, #44]	@ 0x2c
 800881a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800881c:	2b00      	cmp	r3, #0
 800881e:	da00      	bge.n	8008822 <_dtoa_r+0x482>
 8008820:	e174      	b.n	8008b0c <_dtoa_r+0x76c>
 8008822:	9a04      	ldr	r2, [sp, #16]
 8008824:	2a0e      	cmp	r2, #14
 8008826:	dd00      	ble.n	800882a <_dtoa_r+0x48a>
 8008828:	e170      	b.n	8008b0c <_dtoa_r+0x76c>
 800882a:	4b9f      	ldr	r3, [pc, #636]	@ (8008aa8 <_dtoa_r+0x708>)
 800882c:	00d2      	lsls	r2, r2, #3
 800882e:	189b      	adds	r3, r3, r2
 8008830:	685c      	ldr	r4, [r3, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	9306      	str	r3, [sp, #24]
 8008836:	9407      	str	r4, [sp, #28]
 8008838:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800883a:	2b00      	cmp	r3, #0
 800883c:	db00      	blt.n	8008840 <_dtoa_r+0x4a0>
 800883e:	e0e7      	b.n	8008a10 <_dtoa_r+0x670>
 8008840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008842:	2b00      	cmp	r3, #0
 8008844:	dd00      	ble.n	8008848 <_dtoa_r+0x4a8>
 8008846:	e0e3      	b.n	8008a10 <_dtoa_r+0x670>
 8008848:	d10c      	bne.n	8008864 <_dtoa_r+0x4c4>
 800884a:	9806      	ldr	r0, [sp, #24]
 800884c:	9907      	ldr	r1, [sp, #28]
 800884e:	2200      	movs	r2, #0
 8008850:	4b9b      	ldr	r3, [pc, #620]	@ (8008ac0 <_dtoa_r+0x720>)
 8008852:	f7f9 feb9 	bl	80025c8 <__aeabi_dmul>
 8008856:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800885a:	f7f7 fe25 	bl	80004a8 <__aeabi_dcmpge>
 800885e:	2800      	cmp	r0, #0
 8008860:	d100      	bne.n	8008864 <_dtoa_r+0x4c4>
 8008862:	e286      	b.n	8008d72 <_dtoa_r+0x9d2>
 8008864:	2600      	movs	r6, #0
 8008866:	0037      	movs	r7, r6
 8008868:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800886a:	9c08      	ldr	r4, [sp, #32]
 800886c:	43db      	mvns	r3, r3
 800886e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008870:	9704      	str	r7, [sp, #16]
 8008872:	2700      	movs	r7, #0
 8008874:	0031      	movs	r1, r6
 8008876:	9803      	ldr	r0, [sp, #12]
 8008878:	f000 fccc 	bl	8009214 <_Bfree>
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d100      	bne.n	8008884 <_dtoa_r+0x4e4>
 8008882:	e0bb      	b.n	80089fc <_dtoa_r+0x65c>
 8008884:	2f00      	cmp	r7, #0
 8008886:	d005      	beq.n	8008894 <_dtoa_r+0x4f4>
 8008888:	429f      	cmp	r7, r3
 800888a:	d003      	beq.n	8008894 <_dtoa_r+0x4f4>
 800888c:	0039      	movs	r1, r7
 800888e:	9803      	ldr	r0, [sp, #12]
 8008890:	f000 fcc0 	bl	8009214 <_Bfree>
 8008894:	9904      	ldr	r1, [sp, #16]
 8008896:	9803      	ldr	r0, [sp, #12]
 8008898:	f000 fcbc 	bl	8009214 <_Bfree>
 800889c:	e0ae      	b.n	80089fc <_dtoa_r+0x65c>
 800889e:	423d      	tst	r5, r7
 80088a0:	d005      	beq.n	80088ae <_dtoa_r+0x50e>
 80088a2:	6832      	ldr	r2, [r6, #0]
 80088a4:	6873      	ldr	r3, [r6, #4]
 80088a6:	f7f9 fe8f 	bl	80025c8 <__aeabi_dmul>
 80088aa:	003b      	movs	r3, r7
 80088ac:	3401      	adds	r4, #1
 80088ae:	106d      	asrs	r5, r5, #1
 80088b0:	3608      	adds	r6, #8
 80088b2:	e75b      	b.n	800876c <_dtoa_r+0x3cc>
 80088b4:	9b04      	ldr	r3, [sp, #16]
 80088b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80088b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ba:	e77f      	b.n	80087bc <_dtoa_r+0x41c>
 80088bc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80088be:	4b7a      	ldr	r3, [pc, #488]	@ (8008aa8 <_dtoa_r+0x708>)
 80088c0:	3a01      	subs	r2, #1
 80088c2:	00d2      	lsls	r2, r2, #3
 80088c4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80088c6:	189b      	adds	r3, r3, r2
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	2900      	cmp	r1, #0
 80088ce:	d04c      	beq.n	800896a <_dtoa_r+0x5ca>
 80088d0:	2000      	movs	r0, #0
 80088d2:	497c      	ldr	r1, [pc, #496]	@ (8008ac4 <_dtoa_r+0x724>)
 80088d4:	f7f9 fa3e 	bl	8001d54 <__aeabi_ddiv>
 80088d8:	0032      	movs	r2, r6
 80088da:	003b      	movs	r3, r7
 80088dc:	f7fa f95a 	bl	8002b94 <__aeabi_dsub>
 80088e0:	9a08      	ldr	r2, [sp, #32]
 80088e2:	0006      	movs	r6, r0
 80088e4:	4694      	mov	ip, r2
 80088e6:	000f      	movs	r7, r1
 80088e8:	9b08      	ldr	r3, [sp, #32]
 80088ea:	9316      	str	r3, [sp, #88]	@ 0x58
 80088ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80088ee:	4463      	add	r3, ip
 80088f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80088f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80088f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088f6:	f7fa fd79 	bl	80033ec <__aeabi_d2iz>
 80088fa:	0005      	movs	r5, r0
 80088fc:	f7fa fdb2 	bl	8003464 <__aeabi_i2d>
 8008900:	0002      	movs	r2, r0
 8008902:	000b      	movs	r3, r1
 8008904:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008906:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008908:	f7fa f944 	bl	8002b94 <__aeabi_dsub>
 800890c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800890e:	3530      	adds	r5, #48	@ 0x30
 8008910:	1c5c      	adds	r4, r3, #1
 8008912:	701d      	strb	r5, [r3, #0]
 8008914:	0032      	movs	r2, r6
 8008916:	003b      	movs	r3, r7
 8008918:	900a      	str	r0, [sp, #40]	@ 0x28
 800891a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800891c:	f7f7 fda6 	bl	800046c <__aeabi_dcmplt>
 8008920:	2800      	cmp	r0, #0
 8008922:	d16b      	bne.n	80089fc <_dtoa_r+0x65c>
 8008924:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008928:	2000      	movs	r0, #0
 800892a:	4961      	ldr	r1, [pc, #388]	@ (8008ab0 <_dtoa_r+0x710>)
 800892c:	f7fa f932 	bl	8002b94 <__aeabi_dsub>
 8008930:	0032      	movs	r2, r6
 8008932:	003b      	movs	r3, r7
 8008934:	f7f7 fd9a 	bl	800046c <__aeabi_dcmplt>
 8008938:	2800      	cmp	r0, #0
 800893a:	d000      	beq.n	800893e <_dtoa_r+0x59e>
 800893c:	e0c6      	b.n	8008acc <_dtoa_r+0x72c>
 800893e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008940:	42a3      	cmp	r3, r4
 8008942:	d100      	bne.n	8008946 <_dtoa_r+0x5a6>
 8008944:	e765      	b.n	8008812 <_dtoa_r+0x472>
 8008946:	2200      	movs	r2, #0
 8008948:	0030      	movs	r0, r6
 800894a:	0039      	movs	r1, r7
 800894c:	4b59      	ldr	r3, [pc, #356]	@ (8008ab4 <_dtoa_r+0x714>)
 800894e:	f7f9 fe3b 	bl	80025c8 <__aeabi_dmul>
 8008952:	2200      	movs	r2, #0
 8008954:	0006      	movs	r6, r0
 8008956:	000f      	movs	r7, r1
 8008958:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800895a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800895c:	4b55      	ldr	r3, [pc, #340]	@ (8008ab4 <_dtoa_r+0x714>)
 800895e:	f7f9 fe33 	bl	80025c8 <__aeabi_dmul>
 8008962:	9416      	str	r4, [sp, #88]	@ 0x58
 8008964:	900a      	str	r0, [sp, #40]	@ 0x28
 8008966:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008968:	e7c3      	b.n	80088f2 <_dtoa_r+0x552>
 800896a:	0030      	movs	r0, r6
 800896c:	0039      	movs	r1, r7
 800896e:	f7f9 fe2b 	bl	80025c8 <__aeabi_dmul>
 8008972:	9d08      	ldr	r5, [sp, #32]
 8008974:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008976:	002b      	movs	r3, r5
 8008978:	4694      	mov	ip, r2
 800897a:	9016      	str	r0, [sp, #88]	@ 0x58
 800897c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800897e:	4463      	add	r3, ip
 8008980:	9319      	str	r3, [sp, #100]	@ 0x64
 8008982:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008984:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008986:	f7fa fd31 	bl	80033ec <__aeabi_d2iz>
 800898a:	0004      	movs	r4, r0
 800898c:	f7fa fd6a 	bl	8003464 <__aeabi_i2d>
 8008990:	000b      	movs	r3, r1
 8008992:	0002      	movs	r2, r0
 8008994:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008996:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008998:	f7fa f8fc 	bl	8002b94 <__aeabi_dsub>
 800899c:	3430      	adds	r4, #48	@ 0x30
 800899e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089a0:	702c      	strb	r4, [r5, #0]
 80089a2:	3501      	adds	r5, #1
 80089a4:	0006      	movs	r6, r0
 80089a6:	000f      	movs	r7, r1
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	d12a      	bne.n	8008a02 <_dtoa_r+0x662>
 80089ac:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80089ae:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80089b0:	9b08      	ldr	r3, [sp, #32]
 80089b2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80089b4:	469c      	mov	ip, r3
 80089b6:	2200      	movs	r2, #0
 80089b8:	4b42      	ldr	r3, [pc, #264]	@ (8008ac4 <_dtoa_r+0x724>)
 80089ba:	4464      	add	r4, ip
 80089bc:	f7f8 fe04 	bl	80015c8 <__aeabi_dadd>
 80089c0:	0002      	movs	r2, r0
 80089c2:	000b      	movs	r3, r1
 80089c4:	0030      	movs	r0, r6
 80089c6:	0039      	movs	r1, r7
 80089c8:	f7f7 fd64 	bl	8000494 <__aeabi_dcmpgt>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d000      	beq.n	80089d2 <_dtoa_r+0x632>
 80089d0:	e07c      	b.n	8008acc <_dtoa_r+0x72c>
 80089d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80089d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089d6:	2000      	movs	r0, #0
 80089d8:	493a      	ldr	r1, [pc, #232]	@ (8008ac4 <_dtoa_r+0x724>)
 80089da:	f7fa f8db 	bl	8002b94 <__aeabi_dsub>
 80089de:	0002      	movs	r2, r0
 80089e0:	000b      	movs	r3, r1
 80089e2:	0030      	movs	r0, r6
 80089e4:	0039      	movs	r1, r7
 80089e6:	f7f7 fd41 	bl	800046c <__aeabi_dcmplt>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d100      	bne.n	80089f0 <_dtoa_r+0x650>
 80089ee:	e710      	b.n	8008812 <_dtoa_r+0x472>
 80089f0:	0023      	movs	r3, r4
 80089f2:	3c01      	subs	r4, #1
 80089f4:	7822      	ldrb	r2, [r4, #0]
 80089f6:	2a30      	cmp	r2, #48	@ 0x30
 80089f8:	d0fa      	beq.n	80089f0 <_dtoa_r+0x650>
 80089fa:	001c      	movs	r4, r3
 80089fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089fe:	9304      	str	r3, [sp, #16]
 8008a00:	e042      	b.n	8008a88 <_dtoa_r+0x6e8>
 8008a02:	2200      	movs	r2, #0
 8008a04:	4b2b      	ldr	r3, [pc, #172]	@ (8008ab4 <_dtoa_r+0x714>)
 8008a06:	f7f9 fddf 	bl	80025c8 <__aeabi_dmul>
 8008a0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008a0e:	e7b8      	b.n	8008982 <_dtoa_r+0x5e2>
 8008a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a12:	9d08      	ldr	r5, [sp, #32]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	195b      	adds	r3, r3, r5
 8008a18:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008a1a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008a1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a1e:	9a06      	ldr	r2, [sp, #24]
 8008a20:	9b07      	ldr	r3, [sp, #28]
 8008a22:	0030      	movs	r0, r6
 8008a24:	0039      	movs	r1, r7
 8008a26:	f7f9 f995 	bl	8001d54 <__aeabi_ddiv>
 8008a2a:	f7fa fcdf 	bl	80033ec <__aeabi_d2iz>
 8008a2e:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a30:	f7fa fd18 	bl	8003464 <__aeabi_i2d>
 8008a34:	9a06      	ldr	r2, [sp, #24]
 8008a36:	9b07      	ldr	r3, [sp, #28]
 8008a38:	f7f9 fdc6 	bl	80025c8 <__aeabi_dmul>
 8008a3c:	0002      	movs	r2, r0
 8008a3e:	000b      	movs	r3, r1
 8008a40:	0030      	movs	r0, r6
 8008a42:	0039      	movs	r1, r7
 8008a44:	f7fa f8a6 	bl	8002b94 <__aeabi_dsub>
 8008a48:	002b      	movs	r3, r5
 8008a4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	3230      	adds	r2, #48	@ 0x30
 8008a50:	701a      	strb	r2, [r3, #0]
 8008a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a54:	002c      	movs	r4, r5
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d14b      	bne.n	8008af2 <_dtoa_r+0x752>
 8008a5a:	0002      	movs	r2, r0
 8008a5c:	000b      	movs	r3, r1
 8008a5e:	f7f8 fdb3 	bl	80015c8 <__aeabi_dadd>
 8008a62:	9a06      	ldr	r2, [sp, #24]
 8008a64:	9b07      	ldr	r3, [sp, #28]
 8008a66:	0006      	movs	r6, r0
 8008a68:	000f      	movs	r7, r1
 8008a6a:	f7f7 fd13 	bl	8000494 <__aeabi_dcmpgt>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d12a      	bne.n	8008ac8 <_dtoa_r+0x728>
 8008a72:	9a06      	ldr	r2, [sp, #24]
 8008a74:	9b07      	ldr	r3, [sp, #28]
 8008a76:	0030      	movs	r0, r6
 8008a78:	0039      	movs	r1, r7
 8008a7a:	f7f7 fcf1 	bl	8000460 <__aeabi_dcmpeq>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d002      	beq.n	8008a88 <_dtoa_r+0x6e8>
 8008a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a84:	07dd      	lsls	r5, r3, #31
 8008a86:	d41f      	bmi.n	8008ac8 <_dtoa_r+0x728>
 8008a88:	9905      	ldr	r1, [sp, #20]
 8008a8a:	9803      	ldr	r0, [sp, #12]
 8008a8c:	f000 fbc2 	bl	8009214 <_Bfree>
 8008a90:	2300      	movs	r3, #0
 8008a92:	7023      	strb	r3, [r4, #0]
 8008a94:	9b04      	ldr	r3, [sp, #16]
 8008a96:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008a98:	3301      	adds	r3, #1
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d100      	bne.n	8008aa4 <_dtoa_r+0x704>
 8008aa2:	e4c7      	b.n	8008434 <_dtoa_r+0x94>
 8008aa4:	601c      	str	r4, [r3, #0]
 8008aa6:	e4c5      	b.n	8008434 <_dtoa_r+0x94>
 8008aa8:	0800d010 	.word	0x0800d010
 8008aac:	0800cfe8 	.word	0x0800cfe8
 8008ab0:	3ff00000 	.word	0x3ff00000
 8008ab4:	40240000 	.word	0x40240000
 8008ab8:	401c0000 	.word	0x401c0000
 8008abc:	fcc00000 	.word	0xfcc00000
 8008ac0:	40140000 	.word	0x40140000
 8008ac4:	3fe00000 	.word	0x3fe00000
 8008ac8:	9b04      	ldr	r3, [sp, #16]
 8008aca:	930c      	str	r3, [sp, #48]	@ 0x30
 8008acc:	0023      	movs	r3, r4
 8008ace:	001c      	movs	r4, r3
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	2a39      	cmp	r2, #57	@ 0x39
 8008ad6:	d108      	bne.n	8008aea <_dtoa_r+0x74a>
 8008ad8:	9a08      	ldr	r2, [sp, #32]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d1f7      	bne.n	8008ace <_dtoa_r+0x72e>
 8008ade:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008ae0:	9908      	ldr	r1, [sp, #32]
 8008ae2:	3201      	adds	r2, #1
 8008ae4:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ae6:	2230      	movs	r2, #48	@ 0x30
 8008ae8:	700a      	strb	r2, [r1, #0]
 8008aea:	781a      	ldrb	r2, [r3, #0]
 8008aec:	3201      	adds	r2, #1
 8008aee:	701a      	strb	r2, [r3, #0]
 8008af0:	e784      	b.n	80089fc <_dtoa_r+0x65c>
 8008af2:	2200      	movs	r2, #0
 8008af4:	4bc6      	ldr	r3, [pc, #792]	@ (8008e10 <_dtoa_r+0xa70>)
 8008af6:	f7f9 fd67 	bl	80025c8 <__aeabi_dmul>
 8008afa:	2200      	movs	r2, #0
 8008afc:	2300      	movs	r3, #0
 8008afe:	0006      	movs	r6, r0
 8008b00:	000f      	movs	r7, r1
 8008b02:	f7f7 fcad 	bl	8000460 <__aeabi_dcmpeq>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d089      	beq.n	8008a1e <_dtoa_r+0x67e>
 8008b0a:	e7bd      	b.n	8008a88 <_dtoa_r+0x6e8>
 8008b0c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008b0e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008b10:	9c06      	ldr	r4, [sp, #24]
 8008b12:	2f00      	cmp	r7, #0
 8008b14:	d014      	beq.n	8008b40 <_dtoa_r+0x7a0>
 8008b16:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008b18:	2a01      	cmp	r2, #1
 8008b1a:	dd00      	ble.n	8008b1e <_dtoa_r+0x77e>
 8008b1c:	e0e4      	b.n	8008ce8 <_dtoa_r+0x948>
 8008b1e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008b20:	2a00      	cmp	r2, #0
 8008b22:	d100      	bne.n	8008b26 <_dtoa_r+0x786>
 8008b24:	e0da      	b.n	8008cdc <_dtoa_r+0x93c>
 8008b26:	4abb      	ldr	r2, [pc, #748]	@ (8008e14 <_dtoa_r+0xa74>)
 8008b28:	189b      	adds	r3, r3, r2
 8008b2a:	9a06      	ldr	r2, [sp, #24]
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	18d2      	adds	r2, r2, r3
 8008b30:	9206      	str	r2, [sp, #24]
 8008b32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b34:	9803      	ldr	r0, [sp, #12]
 8008b36:	18d3      	adds	r3, r2, r3
 8008b38:	930d      	str	r3, [sp, #52]	@ 0x34
 8008b3a:	f000 fc23 	bl	8009384 <__i2b>
 8008b3e:	0007      	movs	r7, r0
 8008b40:	2c00      	cmp	r4, #0
 8008b42:	d00e      	beq.n	8008b62 <_dtoa_r+0x7c2>
 8008b44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	dd0b      	ble.n	8008b62 <_dtoa_r+0x7c2>
 8008b4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b4c:	0023      	movs	r3, r4
 8008b4e:	4294      	cmp	r4, r2
 8008b50:	dd00      	ble.n	8008b54 <_dtoa_r+0x7b4>
 8008b52:	0013      	movs	r3, r2
 8008b54:	9a06      	ldr	r2, [sp, #24]
 8008b56:	1ae4      	subs	r4, r4, r3
 8008b58:	1ad2      	subs	r2, r2, r3
 8008b5a:	9206      	str	r2, [sp, #24]
 8008b5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	930d      	str	r3, [sp, #52]	@ 0x34
 8008b62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d021      	beq.n	8008bac <_dtoa_r+0x80c>
 8008b68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d100      	bne.n	8008b70 <_dtoa_r+0x7d0>
 8008b6e:	e0d3      	b.n	8008d18 <_dtoa_r+0x978>
 8008b70:	9e05      	ldr	r6, [sp, #20]
 8008b72:	2d00      	cmp	r5, #0
 8008b74:	d014      	beq.n	8008ba0 <_dtoa_r+0x800>
 8008b76:	0039      	movs	r1, r7
 8008b78:	002a      	movs	r2, r5
 8008b7a:	9803      	ldr	r0, [sp, #12]
 8008b7c:	f000 fcc4 	bl	8009508 <__pow5mult>
 8008b80:	9a05      	ldr	r2, [sp, #20]
 8008b82:	0001      	movs	r1, r0
 8008b84:	0007      	movs	r7, r0
 8008b86:	9803      	ldr	r0, [sp, #12]
 8008b88:	f000 fc14 	bl	80093b4 <__multiply>
 8008b8c:	0006      	movs	r6, r0
 8008b8e:	9905      	ldr	r1, [sp, #20]
 8008b90:	9803      	ldr	r0, [sp, #12]
 8008b92:	f000 fb3f 	bl	8009214 <_Bfree>
 8008b96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b98:	9605      	str	r6, [sp, #20]
 8008b9a:	1b5b      	subs	r3, r3, r5
 8008b9c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b9e:	d005      	beq.n	8008bac <_dtoa_r+0x80c>
 8008ba0:	0031      	movs	r1, r6
 8008ba2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008ba4:	9803      	ldr	r0, [sp, #12]
 8008ba6:	f000 fcaf 	bl	8009508 <__pow5mult>
 8008baa:	9005      	str	r0, [sp, #20]
 8008bac:	2101      	movs	r1, #1
 8008bae:	9803      	ldr	r0, [sp, #12]
 8008bb0:	f000 fbe8 	bl	8009384 <__i2b>
 8008bb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008bb6:	0006      	movs	r6, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d100      	bne.n	8008bbe <_dtoa_r+0x81e>
 8008bbc:	e1bc      	b.n	8008f38 <_dtoa_r+0xb98>
 8008bbe:	001a      	movs	r2, r3
 8008bc0:	0001      	movs	r1, r0
 8008bc2:	9803      	ldr	r0, [sp, #12]
 8008bc4:	f000 fca0 	bl	8009508 <__pow5mult>
 8008bc8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008bca:	0006      	movs	r6, r0
 8008bcc:	2500      	movs	r5, #0
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	dc16      	bgt.n	8008c00 <_dtoa_r+0x860>
 8008bd2:	2500      	movs	r5, #0
 8008bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bd6:	42ab      	cmp	r3, r5
 8008bd8:	d10e      	bne.n	8008bf8 <_dtoa_r+0x858>
 8008bda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bdc:	031b      	lsls	r3, r3, #12
 8008bde:	42ab      	cmp	r3, r5
 8008be0:	d10a      	bne.n	8008bf8 <_dtoa_r+0x858>
 8008be2:	4b8d      	ldr	r3, [pc, #564]	@ (8008e18 <_dtoa_r+0xa78>)
 8008be4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008be6:	4213      	tst	r3, r2
 8008be8:	d006      	beq.n	8008bf8 <_dtoa_r+0x858>
 8008bea:	9b06      	ldr	r3, [sp, #24]
 8008bec:	3501      	adds	r5, #1
 8008bee:	3301      	adds	r3, #1
 8008bf0:	9306      	str	r3, [sp, #24]
 8008bf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008bf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008bfa:	2001      	movs	r0, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d008      	beq.n	8008c12 <_dtoa_r+0x872>
 8008c00:	6933      	ldr	r3, [r6, #16]
 8008c02:	3303      	adds	r3, #3
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	18f3      	adds	r3, r6, r3
 8008c08:	6858      	ldr	r0, [r3, #4]
 8008c0a:	f000 fb6b 	bl	80092e4 <__hi0bits>
 8008c0e:	2320      	movs	r3, #32
 8008c10:	1a18      	subs	r0, r3, r0
 8008c12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c14:	1818      	adds	r0, r3, r0
 8008c16:	0002      	movs	r2, r0
 8008c18:	231f      	movs	r3, #31
 8008c1a:	401a      	ands	r2, r3
 8008c1c:	4218      	tst	r0, r3
 8008c1e:	d100      	bne.n	8008c22 <_dtoa_r+0x882>
 8008c20:	e081      	b.n	8008d26 <_dtoa_r+0x986>
 8008c22:	3301      	adds	r3, #1
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	dd79      	ble.n	8008d1e <_dtoa_r+0x97e>
 8008c2a:	231c      	movs	r3, #28
 8008c2c:	1a9b      	subs	r3, r3, r2
 8008c2e:	9a06      	ldr	r2, [sp, #24]
 8008c30:	18e4      	adds	r4, r4, r3
 8008c32:	18d2      	adds	r2, r2, r3
 8008c34:	9206      	str	r2, [sp, #24]
 8008c36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c38:	18d3      	adds	r3, r2, r3
 8008c3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dd05      	ble.n	8008c4e <_dtoa_r+0x8ae>
 8008c42:	001a      	movs	r2, r3
 8008c44:	9905      	ldr	r1, [sp, #20]
 8008c46:	9803      	ldr	r0, [sp, #12]
 8008c48:	f000 fcba 	bl	80095c0 <__lshift>
 8008c4c:	9005      	str	r0, [sp, #20]
 8008c4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dd05      	ble.n	8008c60 <_dtoa_r+0x8c0>
 8008c54:	0031      	movs	r1, r6
 8008c56:	001a      	movs	r2, r3
 8008c58:	9803      	ldr	r0, [sp, #12]
 8008c5a:	f000 fcb1 	bl	80095c0 <__lshift>
 8008c5e:	0006      	movs	r6, r0
 8008c60:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d061      	beq.n	8008d2a <_dtoa_r+0x98a>
 8008c66:	0031      	movs	r1, r6
 8008c68:	9805      	ldr	r0, [sp, #20]
 8008c6a:	f000 fd15 	bl	8009698 <__mcmp>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	da5b      	bge.n	8008d2a <_dtoa_r+0x98a>
 8008c72:	9b04      	ldr	r3, [sp, #16]
 8008c74:	220a      	movs	r2, #10
 8008c76:	3b01      	subs	r3, #1
 8008c78:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c7a:	9905      	ldr	r1, [sp, #20]
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9803      	ldr	r0, [sp, #12]
 8008c80:	f000 faec 	bl	800925c <__multadd>
 8008c84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c86:	9005      	str	r0, [sp, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d100      	bne.n	8008c8e <_dtoa_r+0x8ee>
 8008c8c:	e15b      	b.n	8008f46 <_dtoa_r+0xba6>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	0039      	movs	r1, r7
 8008c92:	220a      	movs	r2, #10
 8008c94:	9803      	ldr	r0, [sp, #12]
 8008c96:	f000 fae1 	bl	800925c <__multadd>
 8008c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c9c:	0007      	movs	r7, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dc4d      	bgt.n	8008d3e <_dtoa_r+0x99e>
 8008ca2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	dd46      	ble.n	8008d36 <_dtoa_r+0x996>
 8008ca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d000      	beq.n	8008cb0 <_dtoa_r+0x910>
 8008cae:	e5db      	b.n	8008868 <_dtoa_r+0x4c8>
 8008cb0:	0031      	movs	r1, r6
 8008cb2:	2205      	movs	r2, #5
 8008cb4:	9803      	ldr	r0, [sp, #12]
 8008cb6:	f000 fad1 	bl	800925c <__multadd>
 8008cba:	0006      	movs	r6, r0
 8008cbc:	0001      	movs	r1, r0
 8008cbe:	9805      	ldr	r0, [sp, #20]
 8008cc0:	f000 fcea 	bl	8009698 <__mcmp>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	dc00      	bgt.n	8008cca <_dtoa_r+0x92a>
 8008cc8:	e5ce      	b.n	8008868 <_dtoa_r+0x4c8>
 8008cca:	9b08      	ldr	r3, [sp, #32]
 8008ccc:	9a08      	ldr	r2, [sp, #32]
 8008cce:	1c5c      	adds	r4, r3, #1
 8008cd0:	2331      	movs	r3, #49	@ 0x31
 8008cd2:	7013      	strb	r3, [r2, #0]
 8008cd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cda:	e5c9      	b.n	8008870 <_dtoa_r+0x4d0>
 8008cdc:	2336      	movs	r3, #54	@ 0x36
 8008cde:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ce0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	9c06      	ldr	r4, [sp, #24]
 8008ce6:	e720      	b.n	8008b2a <_dtoa_r+0x78a>
 8008ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cea:	1e5d      	subs	r5, r3, #1
 8008cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cee:	42ab      	cmp	r3, r5
 8008cf0:	db08      	blt.n	8008d04 <_dtoa_r+0x964>
 8008cf2:	1b5d      	subs	r5, r3, r5
 8008cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	daf4      	bge.n	8008ce4 <_dtoa_r+0x944>
 8008cfa:	9b06      	ldr	r3, [sp, #24]
 8008cfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cfe:	1a9c      	subs	r4, r3, r2
 8008d00:	2300      	movs	r3, #0
 8008d02:	e712      	b.n	8008b2a <_dtoa_r+0x78a>
 8008d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d08:	1aeb      	subs	r3, r5, r3
 8008d0a:	18d3      	adds	r3, r2, r3
 8008d0c:	9314      	str	r3, [sp, #80]	@ 0x50
 8008d0e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008d10:	9c06      	ldr	r4, [sp, #24]
 8008d12:	2500      	movs	r5, #0
 8008d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d16:	e708      	b.n	8008b2a <_dtoa_r+0x78a>
 8008d18:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008d1a:	9905      	ldr	r1, [sp, #20]
 8008d1c:	e742      	b.n	8008ba4 <_dtoa_r+0x804>
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d08c      	beq.n	8008c3c <_dtoa_r+0x89c>
 8008d22:	331c      	adds	r3, #28
 8008d24:	e783      	b.n	8008c2e <_dtoa_r+0x88e>
 8008d26:	0013      	movs	r3, r2
 8008d28:	e7fb      	b.n	8008d22 <_dtoa_r+0x982>
 8008d2a:	9b04      	ldr	r3, [sp, #16]
 8008d2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d30:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	ddb5      	ble.n	8008ca2 <_dtoa_r+0x902>
 8008d36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d100      	bne.n	8008d3e <_dtoa_r+0x99e>
 8008d3c:	e107      	b.n	8008f4e <_dtoa_r+0xbae>
 8008d3e:	2c00      	cmp	r4, #0
 8008d40:	dd05      	ble.n	8008d4e <_dtoa_r+0x9ae>
 8008d42:	0039      	movs	r1, r7
 8008d44:	0022      	movs	r2, r4
 8008d46:	9803      	ldr	r0, [sp, #12]
 8008d48:	f000 fc3a 	bl	80095c0 <__lshift>
 8008d4c:	0007      	movs	r7, r0
 8008d4e:	9704      	str	r7, [sp, #16]
 8008d50:	2d00      	cmp	r5, #0
 8008d52:	d020      	beq.n	8008d96 <_dtoa_r+0x9f6>
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	9803      	ldr	r0, [sp, #12]
 8008d58:	f000 fa18 	bl	800918c <_Balloc>
 8008d5c:	1e04      	subs	r4, r0, #0
 8008d5e:	d10c      	bne.n	8008d7a <_dtoa_r+0x9da>
 8008d60:	0022      	movs	r2, r4
 8008d62:	4b2e      	ldr	r3, [pc, #184]	@ (8008e1c <_dtoa_r+0xa7c>)
 8008d64:	482e      	ldr	r0, [pc, #184]	@ (8008e20 <_dtoa_r+0xa80>)
 8008d66:	492f      	ldr	r1, [pc, #188]	@ (8008e24 <_dtoa_r+0xa84>)
 8008d68:	f7ff fb2f 	bl	80083ca <_dtoa_r+0x2a>
 8008d6c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008d6e:	0037      	movs	r7, r6
 8008d70:	e7ab      	b.n	8008cca <_dtoa_r+0x92a>
 8008d72:	9b04      	ldr	r3, [sp, #16]
 8008d74:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008d76:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d78:	e7f9      	b.n	8008d6e <_dtoa_r+0x9ce>
 8008d7a:	0039      	movs	r1, r7
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	310c      	adds	r1, #12
 8008d80:	3202      	adds	r2, #2
 8008d82:	0092      	lsls	r2, r2, #2
 8008d84:	300c      	adds	r0, #12
 8008d86:	f7ff fa7d 	bl	8008284 <memcpy>
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	0021      	movs	r1, r4
 8008d8e:	9803      	ldr	r0, [sp, #12]
 8008d90:	f000 fc16 	bl	80095c0 <__lshift>
 8008d94:	9004      	str	r0, [sp, #16]
 8008d96:	9b08      	ldr	r3, [sp, #32]
 8008d98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d9a:	9306      	str	r3, [sp, #24]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	189b      	adds	r3, r3, r2
 8008da0:	2201      	movs	r2, #1
 8008da2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008da4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008da6:	4013      	ands	r3, r2
 8008da8:	930e      	str	r3, [sp, #56]	@ 0x38
 8008daa:	0031      	movs	r1, r6
 8008dac:	9805      	ldr	r0, [sp, #20]
 8008dae:	f7ff fa72 	bl	8008296 <quorem>
 8008db2:	0039      	movs	r1, r7
 8008db4:	0005      	movs	r5, r0
 8008db6:	900a      	str	r0, [sp, #40]	@ 0x28
 8008db8:	9805      	ldr	r0, [sp, #20]
 8008dba:	f000 fc6d 	bl	8009698 <__mcmp>
 8008dbe:	9a04      	ldr	r2, [sp, #16]
 8008dc0:	900d      	str	r0, [sp, #52]	@ 0x34
 8008dc2:	0031      	movs	r1, r6
 8008dc4:	9803      	ldr	r0, [sp, #12]
 8008dc6:	f000 fc83 	bl	80096d0 <__mdiff>
 8008dca:	2201      	movs	r2, #1
 8008dcc:	68c3      	ldr	r3, [r0, #12]
 8008dce:	0004      	movs	r4, r0
 8008dd0:	3530      	adds	r5, #48	@ 0x30
 8008dd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d104      	bne.n	8008de2 <_dtoa_r+0xa42>
 8008dd8:	0001      	movs	r1, r0
 8008dda:	9805      	ldr	r0, [sp, #20]
 8008ddc:	f000 fc5c 	bl	8009698 <__mcmp>
 8008de0:	9009      	str	r0, [sp, #36]	@ 0x24
 8008de2:	0021      	movs	r1, r4
 8008de4:	9803      	ldr	r0, [sp, #12]
 8008de6:	f000 fa15 	bl	8009214 <_Bfree>
 8008dea:	9b06      	ldr	r3, [sp, #24]
 8008dec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008dee:	1c5c      	adds	r4, r3, #1
 8008df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df2:	4313      	orrs	r3, r2
 8008df4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008df6:	4313      	orrs	r3, r2
 8008df8:	d116      	bne.n	8008e28 <_dtoa_r+0xa88>
 8008dfa:	2d39      	cmp	r5, #57	@ 0x39
 8008dfc:	d02f      	beq.n	8008e5e <_dtoa_r+0xabe>
 8008dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	dd01      	ble.n	8008e08 <_dtoa_r+0xa68>
 8008e04:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008e06:	3531      	adds	r5, #49	@ 0x31
 8008e08:	9b06      	ldr	r3, [sp, #24]
 8008e0a:	701d      	strb	r5, [r3, #0]
 8008e0c:	e532      	b.n	8008874 <_dtoa_r+0x4d4>
 8008e0e:	46c0      	nop			@ (mov r8, r8)
 8008e10:	40240000 	.word	0x40240000
 8008e14:	00000433 	.word	0x00000433
 8008e18:	7ff00000 	.word	0x7ff00000
 8008e1c:	0800a6a6 	.word	0x0800a6a6
 8008e20:	0800a64e 	.word	0x0800a64e
 8008e24:	000002ef 	.word	0x000002ef
 8008e28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	db04      	blt.n	8008e38 <_dtoa_r+0xa98>
 8008e2e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008e30:	4313      	orrs	r3, r2
 8008e32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e34:	4313      	orrs	r3, r2
 8008e36:	d11e      	bne.n	8008e76 <_dtoa_r+0xad6>
 8008e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dde4      	ble.n	8008e08 <_dtoa_r+0xa68>
 8008e3e:	9905      	ldr	r1, [sp, #20]
 8008e40:	2201      	movs	r2, #1
 8008e42:	9803      	ldr	r0, [sp, #12]
 8008e44:	f000 fbbc 	bl	80095c0 <__lshift>
 8008e48:	0031      	movs	r1, r6
 8008e4a:	9005      	str	r0, [sp, #20]
 8008e4c:	f000 fc24 	bl	8009698 <__mcmp>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	dc02      	bgt.n	8008e5a <_dtoa_r+0xaba>
 8008e54:	d1d8      	bne.n	8008e08 <_dtoa_r+0xa68>
 8008e56:	07eb      	lsls	r3, r5, #31
 8008e58:	d5d6      	bpl.n	8008e08 <_dtoa_r+0xa68>
 8008e5a:	2d39      	cmp	r5, #57	@ 0x39
 8008e5c:	d1d2      	bne.n	8008e04 <_dtoa_r+0xa64>
 8008e5e:	2339      	movs	r3, #57	@ 0x39
 8008e60:	9a06      	ldr	r2, [sp, #24]
 8008e62:	7013      	strb	r3, [r2, #0]
 8008e64:	0023      	movs	r3, r4
 8008e66:	001c      	movs	r4, r3
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	2a39      	cmp	r2, #57	@ 0x39
 8008e6e:	d050      	beq.n	8008f12 <_dtoa_r+0xb72>
 8008e70:	3201      	adds	r2, #1
 8008e72:	701a      	strb	r2, [r3, #0]
 8008e74:	e4fe      	b.n	8008874 <_dtoa_r+0x4d4>
 8008e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	dd03      	ble.n	8008e84 <_dtoa_r+0xae4>
 8008e7c:	2d39      	cmp	r5, #57	@ 0x39
 8008e7e:	d0ee      	beq.n	8008e5e <_dtoa_r+0xabe>
 8008e80:	3501      	adds	r5, #1
 8008e82:	e7c1      	b.n	8008e08 <_dtoa_r+0xa68>
 8008e84:	9b06      	ldr	r3, [sp, #24]
 8008e86:	9a06      	ldr	r2, [sp, #24]
 8008e88:	701d      	strb	r5, [r3, #0]
 8008e8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d02b      	beq.n	8008ee8 <_dtoa_r+0xb48>
 8008e90:	2300      	movs	r3, #0
 8008e92:	220a      	movs	r2, #10
 8008e94:	9905      	ldr	r1, [sp, #20]
 8008e96:	9803      	ldr	r0, [sp, #12]
 8008e98:	f000 f9e0 	bl	800925c <__multadd>
 8008e9c:	9b04      	ldr	r3, [sp, #16]
 8008e9e:	9005      	str	r0, [sp, #20]
 8008ea0:	429f      	cmp	r7, r3
 8008ea2:	d109      	bne.n	8008eb8 <_dtoa_r+0xb18>
 8008ea4:	0039      	movs	r1, r7
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	220a      	movs	r2, #10
 8008eaa:	9803      	ldr	r0, [sp, #12]
 8008eac:	f000 f9d6 	bl	800925c <__multadd>
 8008eb0:	0007      	movs	r7, r0
 8008eb2:	9004      	str	r0, [sp, #16]
 8008eb4:	9406      	str	r4, [sp, #24]
 8008eb6:	e778      	b.n	8008daa <_dtoa_r+0xa0a>
 8008eb8:	0039      	movs	r1, r7
 8008eba:	2300      	movs	r3, #0
 8008ebc:	220a      	movs	r2, #10
 8008ebe:	9803      	ldr	r0, [sp, #12]
 8008ec0:	f000 f9cc 	bl	800925c <__multadd>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	0007      	movs	r7, r0
 8008ec8:	220a      	movs	r2, #10
 8008eca:	9904      	ldr	r1, [sp, #16]
 8008ecc:	9803      	ldr	r0, [sp, #12]
 8008ece:	f000 f9c5 	bl	800925c <__multadd>
 8008ed2:	9004      	str	r0, [sp, #16]
 8008ed4:	e7ee      	b.n	8008eb4 <_dtoa_r+0xb14>
 8008ed6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ed8:	2401      	movs	r4, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	dd00      	ble.n	8008ee0 <_dtoa_r+0xb40>
 8008ede:	001c      	movs	r4, r3
 8008ee0:	9704      	str	r7, [sp, #16]
 8008ee2:	2700      	movs	r7, #0
 8008ee4:	9b08      	ldr	r3, [sp, #32]
 8008ee6:	191c      	adds	r4, r3, r4
 8008ee8:	9905      	ldr	r1, [sp, #20]
 8008eea:	2201      	movs	r2, #1
 8008eec:	9803      	ldr	r0, [sp, #12]
 8008eee:	f000 fb67 	bl	80095c0 <__lshift>
 8008ef2:	0031      	movs	r1, r6
 8008ef4:	9005      	str	r0, [sp, #20]
 8008ef6:	f000 fbcf 	bl	8009698 <__mcmp>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	dcb2      	bgt.n	8008e64 <_dtoa_r+0xac4>
 8008efe:	d101      	bne.n	8008f04 <_dtoa_r+0xb64>
 8008f00:	07ed      	lsls	r5, r5, #31
 8008f02:	d4af      	bmi.n	8008e64 <_dtoa_r+0xac4>
 8008f04:	0023      	movs	r3, r4
 8008f06:	001c      	movs	r4, r3
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	781a      	ldrb	r2, [r3, #0]
 8008f0c:	2a30      	cmp	r2, #48	@ 0x30
 8008f0e:	d0fa      	beq.n	8008f06 <_dtoa_r+0xb66>
 8008f10:	e4b0      	b.n	8008874 <_dtoa_r+0x4d4>
 8008f12:	9a08      	ldr	r2, [sp, #32]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d1a6      	bne.n	8008e66 <_dtoa_r+0xac6>
 8008f18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f1e:	2331      	movs	r3, #49	@ 0x31
 8008f20:	7013      	strb	r3, [r2, #0]
 8008f22:	e4a7      	b.n	8008874 <_dtoa_r+0x4d4>
 8008f24:	4b14      	ldr	r3, [pc, #80]	@ (8008f78 <_dtoa_r+0xbd8>)
 8008f26:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008f28:	9308      	str	r3, [sp, #32]
 8008f2a:	4b14      	ldr	r3, [pc, #80]	@ (8008f7c <_dtoa_r+0xbdc>)
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	d001      	beq.n	8008f34 <_dtoa_r+0xb94>
 8008f30:	f7ff fa7e 	bl	8008430 <_dtoa_r+0x90>
 8008f34:	f7ff fa7e 	bl	8008434 <_dtoa_r+0x94>
 8008f38:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	dc00      	bgt.n	8008f40 <_dtoa_r+0xba0>
 8008f3e:	e648      	b.n	8008bd2 <_dtoa_r+0x832>
 8008f40:	2001      	movs	r0, #1
 8008f42:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008f44:	e665      	b.n	8008c12 <_dtoa_r+0x872>
 8008f46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dc00      	bgt.n	8008f4e <_dtoa_r+0xbae>
 8008f4c:	e6a9      	b.n	8008ca2 <_dtoa_r+0x902>
 8008f4e:	2400      	movs	r4, #0
 8008f50:	0031      	movs	r1, r6
 8008f52:	9805      	ldr	r0, [sp, #20]
 8008f54:	f7ff f99f 	bl	8008296 <quorem>
 8008f58:	9b08      	ldr	r3, [sp, #32]
 8008f5a:	3030      	adds	r0, #48	@ 0x30
 8008f5c:	5518      	strb	r0, [r3, r4]
 8008f5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f60:	3401      	adds	r4, #1
 8008f62:	0005      	movs	r5, r0
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	ddb6      	ble.n	8008ed6 <_dtoa_r+0xb36>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	220a      	movs	r2, #10
 8008f6c:	9905      	ldr	r1, [sp, #20]
 8008f6e:	9803      	ldr	r0, [sp, #12]
 8008f70:	f000 f974 	bl	800925c <__multadd>
 8008f74:	9005      	str	r0, [sp, #20]
 8008f76:	e7eb      	b.n	8008f50 <_dtoa_r+0xbb0>
 8008f78:	0800a62a 	.word	0x0800a62a
 8008f7c:	0800a632 	.word	0x0800a632

08008f80 <_free_r>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	0005      	movs	r5, r0
 8008f84:	1e0c      	subs	r4, r1, #0
 8008f86:	d010      	beq.n	8008faa <_free_r+0x2a>
 8008f88:	3c04      	subs	r4, #4
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	da00      	bge.n	8008f92 <_free_r+0x12>
 8008f90:	18e4      	adds	r4, r4, r3
 8008f92:	0028      	movs	r0, r5
 8008f94:	f000 f8ea 	bl	800916c <__malloc_lock>
 8008f98:	4a1d      	ldr	r2, [pc, #116]	@ (8009010 <_free_r+0x90>)
 8008f9a:	6813      	ldr	r3, [r2, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d105      	bne.n	8008fac <_free_r+0x2c>
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	6014      	str	r4, [r2, #0]
 8008fa4:	0028      	movs	r0, r5
 8008fa6:	f000 f8e9 	bl	800917c <__malloc_unlock>
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	d908      	bls.n	8008fc2 <_free_r+0x42>
 8008fb0:	6820      	ldr	r0, [r4, #0]
 8008fb2:	1821      	adds	r1, r4, r0
 8008fb4:	428b      	cmp	r3, r1
 8008fb6:	d1f3      	bne.n	8008fa0 <_free_r+0x20>
 8008fb8:	6819      	ldr	r1, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	1809      	adds	r1, r1, r0
 8008fbe:	6021      	str	r1, [r4, #0]
 8008fc0:	e7ee      	b.n	8008fa0 <_free_r+0x20>
 8008fc2:	001a      	movs	r2, r3
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <_free_r+0x4e>
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	d9f9      	bls.n	8008fc2 <_free_r+0x42>
 8008fce:	6811      	ldr	r1, [r2, #0]
 8008fd0:	1850      	adds	r0, r2, r1
 8008fd2:	42a0      	cmp	r0, r4
 8008fd4:	d10b      	bne.n	8008fee <_free_r+0x6e>
 8008fd6:	6820      	ldr	r0, [r4, #0]
 8008fd8:	1809      	adds	r1, r1, r0
 8008fda:	1850      	adds	r0, r2, r1
 8008fdc:	6011      	str	r1, [r2, #0]
 8008fde:	4283      	cmp	r3, r0
 8008fe0:	d1e0      	bne.n	8008fa4 <_free_r+0x24>
 8008fe2:	6818      	ldr	r0, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	1841      	adds	r1, r0, r1
 8008fe8:	6011      	str	r1, [r2, #0]
 8008fea:	6053      	str	r3, [r2, #4]
 8008fec:	e7da      	b.n	8008fa4 <_free_r+0x24>
 8008fee:	42a0      	cmp	r0, r4
 8008ff0:	d902      	bls.n	8008ff8 <_free_r+0x78>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	e7d5      	b.n	8008fa4 <_free_r+0x24>
 8008ff8:	6820      	ldr	r0, [r4, #0]
 8008ffa:	1821      	adds	r1, r4, r0
 8008ffc:	428b      	cmp	r3, r1
 8008ffe:	d103      	bne.n	8009008 <_free_r+0x88>
 8009000:	6819      	ldr	r1, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	1809      	adds	r1, r1, r0
 8009006:	6021      	str	r1, [r4, #0]
 8009008:	6063      	str	r3, [r4, #4]
 800900a:	6054      	str	r4, [r2, #4]
 800900c:	e7ca      	b.n	8008fa4 <_free_r+0x24>
 800900e:	46c0      	nop			@ (mov r8, r8)
 8009010:	20000a40 	.word	0x20000a40

08009014 <malloc>:
 8009014:	b510      	push	{r4, lr}
 8009016:	4b03      	ldr	r3, [pc, #12]	@ (8009024 <malloc+0x10>)
 8009018:	0001      	movs	r1, r0
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	f000 f826 	bl	800906c <_malloc_r>
 8009020:	bd10      	pop	{r4, pc}
 8009022:	46c0      	nop			@ (mov r8, r8)
 8009024:	20000050 	.word	0x20000050

08009028 <sbrk_aligned>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	4e0f      	ldr	r6, [pc, #60]	@ (8009068 <sbrk_aligned+0x40>)
 800902c:	000d      	movs	r5, r1
 800902e:	6831      	ldr	r1, [r6, #0]
 8009030:	0004      	movs	r4, r0
 8009032:	2900      	cmp	r1, #0
 8009034:	d102      	bne.n	800903c <sbrk_aligned+0x14>
 8009036:	f000 fe67 	bl	8009d08 <_sbrk_r>
 800903a:	6030      	str	r0, [r6, #0]
 800903c:	0029      	movs	r1, r5
 800903e:	0020      	movs	r0, r4
 8009040:	f000 fe62 	bl	8009d08 <_sbrk_r>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d103      	bne.n	8009050 <sbrk_aligned+0x28>
 8009048:	2501      	movs	r5, #1
 800904a:	426d      	negs	r5, r5
 800904c:	0028      	movs	r0, r5
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	2303      	movs	r3, #3
 8009052:	1cc5      	adds	r5, r0, #3
 8009054:	439d      	bics	r5, r3
 8009056:	42a8      	cmp	r0, r5
 8009058:	d0f8      	beq.n	800904c <sbrk_aligned+0x24>
 800905a:	1a29      	subs	r1, r5, r0
 800905c:	0020      	movs	r0, r4
 800905e:	f000 fe53 	bl	8009d08 <_sbrk_r>
 8009062:	3001      	adds	r0, #1
 8009064:	d1f2      	bne.n	800904c <sbrk_aligned+0x24>
 8009066:	e7ef      	b.n	8009048 <sbrk_aligned+0x20>
 8009068:	20000a3c 	.word	0x20000a3c

0800906c <_malloc_r>:
 800906c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800906e:	2203      	movs	r2, #3
 8009070:	1ccb      	adds	r3, r1, #3
 8009072:	4393      	bics	r3, r2
 8009074:	3308      	adds	r3, #8
 8009076:	0005      	movs	r5, r0
 8009078:	001f      	movs	r7, r3
 800907a:	2b0c      	cmp	r3, #12
 800907c:	d234      	bcs.n	80090e8 <_malloc_r+0x7c>
 800907e:	270c      	movs	r7, #12
 8009080:	42b9      	cmp	r1, r7
 8009082:	d833      	bhi.n	80090ec <_malloc_r+0x80>
 8009084:	0028      	movs	r0, r5
 8009086:	f000 f871 	bl	800916c <__malloc_lock>
 800908a:	4e37      	ldr	r6, [pc, #220]	@ (8009168 <_malloc_r+0xfc>)
 800908c:	6833      	ldr	r3, [r6, #0]
 800908e:	001c      	movs	r4, r3
 8009090:	2c00      	cmp	r4, #0
 8009092:	d12f      	bne.n	80090f4 <_malloc_r+0x88>
 8009094:	0039      	movs	r1, r7
 8009096:	0028      	movs	r0, r5
 8009098:	f7ff ffc6 	bl	8009028 <sbrk_aligned>
 800909c:	0004      	movs	r4, r0
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d15f      	bne.n	8009162 <_malloc_r+0xf6>
 80090a2:	6834      	ldr	r4, [r6, #0]
 80090a4:	9400      	str	r4, [sp, #0]
 80090a6:	9b00      	ldr	r3, [sp, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d14a      	bne.n	8009142 <_malloc_r+0xd6>
 80090ac:	2c00      	cmp	r4, #0
 80090ae:	d052      	beq.n	8009156 <_malloc_r+0xea>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	0028      	movs	r0, r5
 80090b4:	18e3      	adds	r3, r4, r3
 80090b6:	9900      	ldr	r1, [sp, #0]
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	f000 fe25 	bl	8009d08 <_sbrk_r>
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	4283      	cmp	r3, r0
 80090c2:	d148      	bne.n	8009156 <_malloc_r+0xea>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	0028      	movs	r0, r5
 80090c8:	1aff      	subs	r7, r7, r3
 80090ca:	0039      	movs	r1, r7
 80090cc:	f7ff ffac 	bl	8009028 <sbrk_aligned>
 80090d0:	3001      	adds	r0, #1
 80090d2:	d040      	beq.n	8009156 <_malloc_r+0xea>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	19db      	adds	r3, r3, r7
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	6833      	ldr	r3, [r6, #0]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	2a00      	cmp	r2, #0
 80090e0:	d133      	bne.n	800914a <_malloc_r+0xde>
 80090e2:	9b00      	ldr	r3, [sp, #0]
 80090e4:	6033      	str	r3, [r6, #0]
 80090e6:	e019      	b.n	800911c <_malloc_r+0xb0>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	dac9      	bge.n	8009080 <_malloc_r+0x14>
 80090ec:	230c      	movs	r3, #12
 80090ee:	602b      	str	r3, [r5, #0]
 80090f0:	2000      	movs	r0, #0
 80090f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090f4:	6821      	ldr	r1, [r4, #0]
 80090f6:	1bc9      	subs	r1, r1, r7
 80090f8:	d420      	bmi.n	800913c <_malloc_r+0xd0>
 80090fa:	290b      	cmp	r1, #11
 80090fc:	d90a      	bls.n	8009114 <_malloc_r+0xa8>
 80090fe:	19e2      	adds	r2, r4, r7
 8009100:	6027      	str	r7, [r4, #0]
 8009102:	42a3      	cmp	r3, r4
 8009104:	d104      	bne.n	8009110 <_malloc_r+0xa4>
 8009106:	6032      	str	r2, [r6, #0]
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	6011      	str	r1, [r2, #0]
 800910c:	6053      	str	r3, [r2, #4]
 800910e:	e005      	b.n	800911c <_malloc_r+0xb0>
 8009110:	605a      	str	r2, [r3, #4]
 8009112:	e7f9      	b.n	8009108 <_malloc_r+0x9c>
 8009114:	6862      	ldr	r2, [r4, #4]
 8009116:	42a3      	cmp	r3, r4
 8009118:	d10e      	bne.n	8009138 <_malloc_r+0xcc>
 800911a:	6032      	str	r2, [r6, #0]
 800911c:	0028      	movs	r0, r5
 800911e:	f000 f82d 	bl	800917c <__malloc_unlock>
 8009122:	0020      	movs	r0, r4
 8009124:	2207      	movs	r2, #7
 8009126:	300b      	adds	r0, #11
 8009128:	1d23      	adds	r3, r4, #4
 800912a:	4390      	bics	r0, r2
 800912c:	1ac2      	subs	r2, r0, r3
 800912e:	4298      	cmp	r0, r3
 8009130:	d0df      	beq.n	80090f2 <_malloc_r+0x86>
 8009132:	1a1b      	subs	r3, r3, r0
 8009134:	50a3      	str	r3, [r4, r2]
 8009136:	e7dc      	b.n	80090f2 <_malloc_r+0x86>
 8009138:	605a      	str	r2, [r3, #4]
 800913a:	e7ef      	b.n	800911c <_malloc_r+0xb0>
 800913c:	0023      	movs	r3, r4
 800913e:	6864      	ldr	r4, [r4, #4]
 8009140:	e7a6      	b.n	8009090 <_malloc_r+0x24>
 8009142:	9c00      	ldr	r4, [sp, #0]
 8009144:	6863      	ldr	r3, [r4, #4]
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	e7ad      	b.n	80090a6 <_malloc_r+0x3a>
 800914a:	001a      	movs	r2, r3
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	42a3      	cmp	r3, r4
 8009150:	d1fb      	bne.n	800914a <_malloc_r+0xde>
 8009152:	2300      	movs	r3, #0
 8009154:	e7da      	b.n	800910c <_malloc_r+0xa0>
 8009156:	230c      	movs	r3, #12
 8009158:	0028      	movs	r0, r5
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	f000 f80e 	bl	800917c <__malloc_unlock>
 8009160:	e7c6      	b.n	80090f0 <_malloc_r+0x84>
 8009162:	6007      	str	r7, [r0, #0]
 8009164:	e7da      	b.n	800911c <_malloc_r+0xb0>
 8009166:	46c0      	nop			@ (mov r8, r8)
 8009168:	20000a40 	.word	0x20000a40

0800916c <__malloc_lock>:
 800916c:	b510      	push	{r4, lr}
 800916e:	4802      	ldr	r0, [pc, #8]	@ (8009178 <__malloc_lock+0xc>)
 8009170:	f7ff f87b 	bl	800826a <__retarget_lock_acquire_recursive>
 8009174:	bd10      	pop	{r4, pc}
 8009176:	46c0      	nop			@ (mov r8, r8)
 8009178:	20000a38 	.word	0x20000a38

0800917c <__malloc_unlock>:
 800917c:	b510      	push	{r4, lr}
 800917e:	4802      	ldr	r0, [pc, #8]	@ (8009188 <__malloc_unlock+0xc>)
 8009180:	f7ff f874 	bl	800826c <__retarget_lock_release_recursive>
 8009184:	bd10      	pop	{r4, pc}
 8009186:	46c0      	nop			@ (mov r8, r8)
 8009188:	20000a38 	.word	0x20000a38

0800918c <_Balloc>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	69c5      	ldr	r5, [r0, #28]
 8009190:	0006      	movs	r6, r0
 8009192:	000c      	movs	r4, r1
 8009194:	2d00      	cmp	r5, #0
 8009196:	d10e      	bne.n	80091b6 <_Balloc+0x2a>
 8009198:	2010      	movs	r0, #16
 800919a:	f7ff ff3b 	bl	8009014 <malloc>
 800919e:	1e02      	subs	r2, r0, #0
 80091a0:	61f0      	str	r0, [r6, #28]
 80091a2:	d104      	bne.n	80091ae <_Balloc+0x22>
 80091a4:	216b      	movs	r1, #107	@ 0x6b
 80091a6:	4b19      	ldr	r3, [pc, #100]	@ (800920c <_Balloc+0x80>)
 80091a8:	4819      	ldr	r0, [pc, #100]	@ (8009210 <_Balloc+0x84>)
 80091aa:	f000 fdbf 	bl	8009d2c <__assert_func>
 80091ae:	6045      	str	r5, [r0, #4]
 80091b0:	6085      	str	r5, [r0, #8]
 80091b2:	6005      	str	r5, [r0, #0]
 80091b4:	60c5      	str	r5, [r0, #12]
 80091b6:	69f5      	ldr	r5, [r6, #28]
 80091b8:	68eb      	ldr	r3, [r5, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d013      	beq.n	80091e6 <_Balloc+0x5a>
 80091be:	69f3      	ldr	r3, [r6, #28]
 80091c0:	00a2      	lsls	r2, r4, #2
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	189b      	adds	r3, r3, r2
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d118      	bne.n	80091fe <_Balloc+0x72>
 80091cc:	2101      	movs	r1, #1
 80091ce:	000d      	movs	r5, r1
 80091d0:	40a5      	lsls	r5, r4
 80091d2:	1d6a      	adds	r2, r5, #5
 80091d4:	0030      	movs	r0, r6
 80091d6:	0092      	lsls	r2, r2, #2
 80091d8:	f000 fdc6 	bl	8009d68 <_calloc_r>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d00c      	beq.n	80091fa <_Balloc+0x6e>
 80091e0:	6044      	str	r4, [r0, #4]
 80091e2:	6085      	str	r5, [r0, #8]
 80091e4:	e00d      	b.n	8009202 <_Balloc+0x76>
 80091e6:	2221      	movs	r2, #33	@ 0x21
 80091e8:	2104      	movs	r1, #4
 80091ea:	0030      	movs	r0, r6
 80091ec:	f000 fdbc 	bl	8009d68 <_calloc_r>
 80091f0:	69f3      	ldr	r3, [r6, #28]
 80091f2:	60e8      	str	r0, [r5, #12]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e1      	bne.n	80091be <_Balloc+0x32>
 80091fa:	2000      	movs	r0, #0
 80091fc:	bd70      	pop	{r4, r5, r6, pc}
 80091fe:	6802      	ldr	r2, [r0, #0]
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	2300      	movs	r3, #0
 8009204:	6103      	str	r3, [r0, #16]
 8009206:	60c3      	str	r3, [r0, #12]
 8009208:	e7f8      	b.n	80091fc <_Balloc+0x70>
 800920a:	46c0      	nop			@ (mov r8, r8)
 800920c:	0800a637 	.word	0x0800a637
 8009210:	0800a6b7 	.word	0x0800a6b7

08009214 <_Bfree>:
 8009214:	b570      	push	{r4, r5, r6, lr}
 8009216:	69c6      	ldr	r6, [r0, #28]
 8009218:	0005      	movs	r5, r0
 800921a:	000c      	movs	r4, r1
 800921c:	2e00      	cmp	r6, #0
 800921e:	d10e      	bne.n	800923e <_Bfree+0x2a>
 8009220:	2010      	movs	r0, #16
 8009222:	f7ff fef7 	bl	8009014 <malloc>
 8009226:	1e02      	subs	r2, r0, #0
 8009228:	61e8      	str	r0, [r5, #28]
 800922a:	d104      	bne.n	8009236 <_Bfree+0x22>
 800922c:	218f      	movs	r1, #143	@ 0x8f
 800922e:	4b09      	ldr	r3, [pc, #36]	@ (8009254 <_Bfree+0x40>)
 8009230:	4809      	ldr	r0, [pc, #36]	@ (8009258 <_Bfree+0x44>)
 8009232:	f000 fd7b 	bl	8009d2c <__assert_func>
 8009236:	6046      	str	r6, [r0, #4]
 8009238:	6086      	str	r6, [r0, #8]
 800923a:	6006      	str	r6, [r0, #0]
 800923c:	60c6      	str	r6, [r0, #12]
 800923e:	2c00      	cmp	r4, #0
 8009240:	d007      	beq.n	8009252 <_Bfree+0x3e>
 8009242:	69eb      	ldr	r3, [r5, #28]
 8009244:	6862      	ldr	r2, [r4, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	0092      	lsls	r2, r2, #2
 800924a:	189b      	adds	r3, r3, r2
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	601c      	str	r4, [r3, #0]
 8009252:	bd70      	pop	{r4, r5, r6, pc}
 8009254:	0800a637 	.word	0x0800a637
 8009258:	0800a6b7 	.word	0x0800a6b7

0800925c <__multadd>:
 800925c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800925e:	000f      	movs	r7, r1
 8009260:	9001      	str	r0, [sp, #4]
 8009262:	000c      	movs	r4, r1
 8009264:	001e      	movs	r6, r3
 8009266:	2000      	movs	r0, #0
 8009268:	690d      	ldr	r5, [r1, #16]
 800926a:	3714      	adds	r7, #20
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	3001      	adds	r0, #1
 8009270:	b299      	uxth	r1, r3
 8009272:	4351      	muls	r1, r2
 8009274:	0c1b      	lsrs	r3, r3, #16
 8009276:	4353      	muls	r3, r2
 8009278:	1989      	adds	r1, r1, r6
 800927a:	0c0e      	lsrs	r6, r1, #16
 800927c:	199b      	adds	r3, r3, r6
 800927e:	0c1e      	lsrs	r6, r3, #16
 8009280:	b289      	uxth	r1, r1
 8009282:	041b      	lsls	r3, r3, #16
 8009284:	185b      	adds	r3, r3, r1
 8009286:	c708      	stmia	r7!, {r3}
 8009288:	4285      	cmp	r5, r0
 800928a:	dcef      	bgt.n	800926c <__multadd+0x10>
 800928c:	2e00      	cmp	r6, #0
 800928e:	d022      	beq.n	80092d6 <__multadd+0x7a>
 8009290:	68a3      	ldr	r3, [r4, #8]
 8009292:	42ab      	cmp	r3, r5
 8009294:	dc19      	bgt.n	80092ca <__multadd+0x6e>
 8009296:	6861      	ldr	r1, [r4, #4]
 8009298:	9801      	ldr	r0, [sp, #4]
 800929a:	3101      	adds	r1, #1
 800929c:	f7ff ff76 	bl	800918c <_Balloc>
 80092a0:	1e07      	subs	r7, r0, #0
 80092a2:	d105      	bne.n	80092b0 <__multadd+0x54>
 80092a4:	003a      	movs	r2, r7
 80092a6:	21ba      	movs	r1, #186	@ 0xba
 80092a8:	4b0c      	ldr	r3, [pc, #48]	@ (80092dc <__multadd+0x80>)
 80092aa:	480d      	ldr	r0, [pc, #52]	@ (80092e0 <__multadd+0x84>)
 80092ac:	f000 fd3e 	bl	8009d2c <__assert_func>
 80092b0:	0021      	movs	r1, r4
 80092b2:	6922      	ldr	r2, [r4, #16]
 80092b4:	310c      	adds	r1, #12
 80092b6:	3202      	adds	r2, #2
 80092b8:	0092      	lsls	r2, r2, #2
 80092ba:	300c      	adds	r0, #12
 80092bc:	f7fe ffe2 	bl	8008284 <memcpy>
 80092c0:	0021      	movs	r1, r4
 80092c2:	9801      	ldr	r0, [sp, #4]
 80092c4:	f7ff ffa6 	bl	8009214 <_Bfree>
 80092c8:	003c      	movs	r4, r7
 80092ca:	1d2b      	adds	r3, r5, #4
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	18e3      	adds	r3, r4, r3
 80092d0:	3501      	adds	r5, #1
 80092d2:	605e      	str	r6, [r3, #4]
 80092d4:	6125      	str	r5, [r4, #16]
 80092d6:	0020      	movs	r0, r4
 80092d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092da:	46c0      	nop			@ (mov r8, r8)
 80092dc:	0800a6a6 	.word	0x0800a6a6
 80092e0:	0800a6b7 	.word	0x0800a6b7

080092e4 <__hi0bits>:
 80092e4:	2280      	movs	r2, #128	@ 0x80
 80092e6:	0003      	movs	r3, r0
 80092e8:	0252      	lsls	r2, r2, #9
 80092ea:	2000      	movs	r0, #0
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d201      	bcs.n	80092f4 <__hi0bits+0x10>
 80092f0:	041b      	lsls	r3, r3, #16
 80092f2:	3010      	adds	r0, #16
 80092f4:	2280      	movs	r2, #128	@ 0x80
 80092f6:	0452      	lsls	r2, r2, #17
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d201      	bcs.n	8009300 <__hi0bits+0x1c>
 80092fc:	3008      	adds	r0, #8
 80092fe:	021b      	lsls	r3, r3, #8
 8009300:	2280      	movs	r2, #128	@ 0x80
 8009302:	0552      	lsls	r2, r2, #21
 8009304:	4293      	cmp	r3, r2
 8009306:	d201      	bcs.n	800930c <__hi0bits+0x28>
 8009308:	3004      	adds	r0, #4
 800930a:	011b      	lsls	r3, r3, #4
 800930c:	2280      	movs	r2, #128	@ 0x80
 800930e:	05d2      	lsls	r2, r2, #23
 8009310:	4293      	cmp	r3, r2
 8009312:	d201      	bcs.n	8009318 <__hi0bits+0x34>
 8009314:	3002      	adds	r0, #2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	2b00      	cmp	r3, #0
 800931a:	db03      	blt.n	8009324 <__hi0bits+0x40>
 800931c:	3001      	adds	r0, #1
 800931e:	4213      	tst	r3, r2
 8009320:	d100      	bne.n	8009324 <__hi0bits+0x40>
 8009322:	2020      	movs	r0, #32
 8009324:	4770      	bx	lr

08009326 <__lo0bits>:
 8009326:	6803      	ldr	r3, [r0, #0]
 8009328:	0001      	movs	r1, r0
 800932a:	2207      	movs	r2, #7
 800932c:	0018      	movs	r0, r3
 800932e:	4010      	ands	r0, r2
 8009330:	4213      	tst	r3, r2
 8009332:	d00d      	beq.n	8009350 <__lo0bits+0x2a>
 8009334:	3a06      	subs	r2, #6
 8009336:	2000      	movs	r0, #0
 8009338:	4213      	tst	r3, r2
 800933a:	d105      	bne.n	8009348 <__lo0bits+0x22>
 800933c:	3002      	adds	r0, #2
 800933e:	4203      	tst	r3, r0
 8009340:	d003      	beq.n	800934a <__lo0bits+0x24>
 8009342:	40d3      	lsrs	r3, r2
 8009344:	0010      	movs	r0, r2
 8009346:	600b      	str	r3, [r1, #0]
 8009348:	4770      	bx	lr
 800934a:	089b      	lsrs	r3, r3, #2
 800934c:	600b      	str	r3, [r1, #0]
 800934e:	e7fb      	b.n	8009348 <__lo0bits+0x22>
 8009350:	b29a      	uxth	r2, r3
 8009352:	2a00      	cmp	r2, #0
 8009354:	d101      	bne.n	800935a <__lo0bits+0x34>
 8009356:	2010      	movs	r0, #16
 8009358:	0c1b      	lsrs	r3, r3, #16
 800935a:	b2da      	uxtb	r2, r3
 800935c:	2a00      	cmp	r2, #0
 800935e:	d101      	bne.n	8009364 <__lo0bits+0x3e>
 8009360:	3008      	adds	r0, #8
 8009362:	0a1b      	lsrs	r3, r3, #8
 8009364:	071a      	lsls	r2, r3, #28
 8009366:	d101      	bne.n	800936c <__lo0bits+0x46>
 8009368:	3004      	adds	r0, #4
 800936a:	091b      	lsrs	r3, r3, #4
 800936c:	079a      	lsls	r2, r3, #30
 800936e:	d101      	bne.n	8009374 <__lo0bits+0x4e>
 8009370:	3002      	adds	r0, #2
 8009372:	089b      	lsrs	r3, r3, #2
 8009374:	07da      	lsls	r2, r3, #31
 8009376:	d4e9      	bmi.n	800934c <__lo0bits+0x26>
 8009378:	3001      	adds	r0, #1
 800937a:	085b      	lsrs	r3, r3, #1
 800937c:	d1e6      	bne.n	800934c <__lo0bits+0x26>
 800937e:	2020      	movs	r0, #32
 8009380:	e7e2      	b.n	8009348 <__lo0bits+0x22>
	...

08009384 <__i2b>:
 8009384:	b510      	push	{r4, lr}
 8009386:	000c      	movs	r4, r1
 8009388:	2101      	movs	r1, #1
 800938a:	f7ff feff 	bl	800918c <_Balloc>
 800938e:	2800      	cmp	r0, #0
 8009390:	d107      	bne.n	80093a2 <__i2b+0x1e>
 8009392:	2146      	movs	r1, #70	@ 0x46
 8009394:	4c05      	ldr	r4, [pc, #20]	@ (80093ac <__i2b+0x28>)
 8009396:	0002      	movs	r2, r0
 8009398:	4b05      	ldr	r3, [pc, #20]	@ (80093b0 <__i2b+0x2c>)
 800939a:	0020      	movs	r0, r4
 800939c:	31ff      	adds	r1, #255	@ 0xff
 800939e:	f000 fcc5 	bl	8009d2c <__assert_func>
 80093a2:	2301      	movs	r3, #1
 80093a4:	6144      	str	r4, [r0, #20]
 80093a6:	6103      	str	r3, [r0, #16]
 80093a8:	bd10      	pop	{r4, pc}
 80093aa:	46c0      	nop			@ (mov r8, r8)
 80093ac:	0800a6b7 	.word	0x0800a6b7
 80093b0:	0800a6a6 	.word	0x0800a6a6

080093b4 <__multiply>:
 80093b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b6:	0014      	movs	r4, r2
 80093b8:	690a      	ldr	r2, [r1, #16]
 80093ba:	6923      	ldr	r3, [r4, #16]
 80093bc:	000d      	movs	r5, r1
 80093be:	b089      	sub	sp, #36	@ 0x24
 80093c0:	429a      	cmp	r2, r3
 80093c2:	db02      	blt.n	80093ca <__multiply+0x16>
 80093c4:	0023      	movs	r3, r4
 80093c6:	000c      	movs	r4, r1
 80093c8:	001d      	movs	r5, r3
 80093ca:	6927      	ldr	r7, [r4, #16]
 80093cc:	692e      	ldr	r6, [r5, #16]
 80093ce:	6861      	ldr	r1, [r4, #4]
 80093d0:	19bb      	adds	r3, r7, r6
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	68a3      	ldr	r3, [r4, #8]
 80093d6:	19ba      	adds	r2, r7, r6
 80093d8:	4293      	cmp	r3, r2
 80093da:	da00      	bge.n	80093de <__multiply+0x2a>
 80093dc:	3101      	adds	r1, #1
 80093de:	f7ff fed5 	bl	800918c <_Balloc>
 80093e2:	4684      	mov	ip, r0
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d106      	bne.n	80093f6 <__multiply+0x42>
 80093e8:	21b1      	movs	r1, #177	@ 0xb1
 80093ea:	4662      	mov	r2, ip
 80093ec:	4b44      	ldr	r3, [pc, #272]	@ (8009500 <__multiply+0x14c>)
 80093ee:	4845      	ldr	r0, [pc, #276]	@ (8009504 <__multiply+0x150>)
 80093f0:	0049      	lsls	r1, r1, #1
 80093f2:	f000 fc9b 	bl	8009d2c <__assert_func>
 80093f6:	0002      	movs	r2, r0
 80093f8:	19bb      	adds	r3, r7, r6
 80093fa:	3214      	adds	r2, #20
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	18d3      	adds	r3, r2, r3
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	2100      	movs	r1, #0
 8009404:	0013      	movs	r3, r2
 8009406:	9801      	ldr	r0, [sp, #4]
 8009408:	4283      	cmp	r3, r0
 800940a:	d328      	bcc.n	800945e <__multiply+0xaa>
 800940c:	0023      	movs	r3, r4
 800940e:	00bf      	lsls	r7, r7, #2
 8009410:	3314      	adds	r3, #20
 8009412:	9304      	str	r3, [sp, #16]
 8009414:	3514      	adds	r5, #20
 8009416:	19db      	adds	r3, r3, r7
 8009418:	00b6      	lsls	r6, r6, #2
 800941a:	9302      	str	r3, [sp, #8]
 800941c:	19ab      	adds	r3, r5, r6
 800941e:	9307      	str	r3, [sp, #28]
 8009420:	2304      	movs	r3, #4
 8009422:	9305      	str	r3, [sp, #20]
 8009424:	0023      	movs	r3, r4
 8009426:	9902      	ldr	r1, [sp, #8]
 8009428:	3315      	adds	r3, #21
 800942a:	4299      	cmp	r1, r3
 800942c:	d305      	bcc.n	800943a <__multiply+0x86>
 800942e:	1b0c      	subs	r4, r1, r4
 8009430:	3c15      	subs	r4, #21
 8009432:	08a4      	lsrs	r4, r4, #2
 8009434:	3401      	adds	r4, #1
 8009436:	00a3      	lsls	r3, r4, #2
 8009438:	9305      	str	r3, [sp, #20]
 800943a:	9b07      	ldr	r3, [sp, #28]
 800943c:	429d      	cmp	r5, r3
 800943e:	d310      	bcc.n	8009462 <__multiply+0xae>
 8009440:	9b00      	ldr	r3, [sp, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	dd05      	ble.n	8009452 <__multiply+0x9e>
 8009446:	9b01      	ldr	r3, [sp, #4]
 8009448:	3b04      	subs	r3, #4
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d052      	beq.n	80094f8 <__multiply+0x144>
 8009452:	4663      	mov	r3, ip
 8009454:	4660      	mov	r0, ip
 8009456:	9a00      	ldr	r2, [sp, #0]
 8009458:	611a      	str	r2, [r3, #16]
 800945a:	b009      	add	sp, #36	@ 0x24
 800945c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800945e:	c302      	stmia	r3!, {r1}
 8009460:	e7d1      	b.n	8009406 <__multiply+0x52>
 8009462:	682c      	ldr	r4, [r5, #0]
 8009464:	b2a4      	uxth	r4, r4
 8009466:	2c00      	cmp	r4, #0
 8009468:	d01f      	beq.n	80094aa <__multiply+0xf6>
 800946a:	2300      	movs	r3, #0
 800946c:	0017      	movs	r7, r2
 800946e:	9e04      	ldr	r6, [sp, #16]
 8009470:	9303      	str	r3, [sp, #12]
 8009472:	ce08      	ldmia	r6!, {r3}
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	9306      	str	r3, [sp, #24]
 8009478:	466b      	mov	r3, sp
 800947a:	8b1b      	ldrh	r3, [r3, #24]
 800947c:	b288      	uxth	r0, r1
 800947e:	4363      	muls	r3, r4
 8009480:	181b      	adds	r3, r3, r0
 8009482:	9803      	ldr	r0, [sp, #12]
 8009484:	0c09      	lsrs	r1, r1, #16
 8009486:	181b      	adds	r3, r3, r0
 8009488:	9806      	ldr	r0, [sp, #24]
 800948a:	0c00      	lsrs	r0, r0, #16
 800948c:	4360      	muls	r0, r4
 800948e:	1840      	adds	r0, r0, r1
 8009490:	0c19      	lsrs	r1, r3, #16
 8009492:	1841      	adds	r1, r0, r1
 8009494:	0c08      	lsrs	r0, r1, #16
 8009496:	b29b      	uxth	r3, r3
 8009498:	0409      	lsls	r1, r1, #16
 800949a:	4319      	orrs	r1, r3
 800949c:	9b02      	ldr	r3, [sp, #8]
 800949e:	9003      	str	r0, [sp, #12]
 80094a0:	c702      	stmia	r7!, {r1}
 80094a2:	42b3      	cmp	r3, r6
 80094a4:	d8e5      	bhi.n	8009472 <__multiply+0xbe>
 80094a6:	9b05      	ldr	r3, [sp, #20]
 80094a8:	50d0      	str	r0, [r2, r3]
 80094aa:	682c      	ldr	r4, [r5, #0]
 80094ac:	0c24      	lsrs	r4, r4, #16
 80094ae:	d020      	beq.n	80094f2 <__multiply+0x13e>
 80094b0:	2100      	movs	r1, #0
 80094b2:	0010      	movs	r0, r2
 80094b4:	6813      	ldr	r3, [r2, #0]
 80094b6:	9e04      	ldr	r6, [sp, #16]
 80094b8:	9103      	str	r1, [sp, #12]
 80094ba:	6831      	ldr	r1, [r6, #0]
 80094bc:	6807      	ldr	r7, [r0, #0]
 80094be:	b289      	uxth	r1, r1
 80094c0:	4361      	muls	r1, r4
 80094c2:	0c3f      	lsrs	r7, r7, #16
 80094c4:	19c9      	adds	r1, r1, r7
 80094c6:	9f03      	ldr	r7, [sp, #12]
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	19c9      	adds	r1, r1, r7
 80094cc:	040f      	lsls	r7, r1, #16
 80094ce:	431f      	orrs	r7, r3
 80094d0:	6007      	str	r7, [r0, #0]
 80094d2:	ce80      	ldmia	r6!, {r7}
 80094d4:	6843      	ldr	r3, [r0, #4]
 80094d6:	0c3f      	lsrs	r7, r7, #16
 80094d8:	4367      	muls	r7, r4
 80094da:	b29b      	uxth	r3, r3
 80094dc:	0c09      	lsrs	r1, r1, #16
 80094de:	18fb      	adds	r3, r7, r3
 80094e0:	185b      	adds	r3, r3, r1
 80094e2:	0c19      	lsrs	r1, r3, #16
 80094e4:	9103      	str	r1, [sp, #12]
 80094e6:	9902      	ldr	r1, [sp, #8]
 80094e8:	3004      	adds	r0, #4
 80094ea:	42b1      	cmp	r1, r6
 80094ec:	d8e5      	bhi.n	80094ba <__multiply+0x106>
 80094ee:	9905      	ldr	r1, [sp, #20]
 80094f0:	5053      	str	r3, [r2, r1]
 80094f2:	3504      	adds	r5, #4
 80094f4:	3204      	adds	r2, #4
 80094f6:	e7a0      	b.n	800943a <__multiply+0x86>
 80094f8:	9b00      	ldr	r3, [sp, #0]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	e79f      	b.n	8009440 <__multiply+0x8c>
 8009500:	0800a6a6 	.word	0x0800a6a6
 8009504:	0800a6b7 	.word	0x0800a6b7

08009508 <__pow5mult>:
 8009508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800950a:	2303      	movs	r3, #3
 800950c:	0015      	movs	r5, r2
 800950e:	0007      	movs	r7, r0
 8009510:	000e      	movs	r6, r1
 8009512:	401a      	ands	r2, r3
 8009514:	421d      	tst	r5, r3
 8009516:	d008      	beq.n	800952a <__pow5mult+0x22>
 8009518:	4925      	ldr	r1, [pc, #148]	@ (80095b0 <__pow5mult+0xa8>)
 800951a:	3a01      	subs	r2, #1
 800951c:	0092      	lsls	r2, r2, #2
 800951e:	5852      	ldr	r2, [r2, r1]
 8009520:	2300      	movs	r3, #0
 8009522:	0031      	movs	r1, r6
 8009524:	f7ff fe9a 	bl	800925c <__multadd>
 8009528:	0006      	movs	r6, r0
 800952a:	10ad      	asrs	r5, r5, #2
 800952c:	d03d      	beq.n	80095aa <__pow5mult+0xa2>
 800952e:	69fc      	ldr	r4, [r7, #28]
 8009530:	2c00      	cmp	r4, #0
 8009532:	d10f      	bne.n	8009554 <__pow5mult+0x4c>
 8009534:	2010      	movs	r0, #16
 8009536:	f7ff fd6d 	bl	8009014 <malloc>
 800953a:	1e02      	subs	r2, r0, #0
 800953c:	61f8      	str	r0, [r7, #28]
 800953e:	d105      	bne.n	800954c <__pow5mult+0x44>
 8009540:	21b4      	movs	r1, #180	@ 0xb4
 8009542:	4b1c      	ldr	r3, [pc, #112]	@ (80095b4 <__pow5mult+0xac>)
 8009544:	481c      	ldr	r0, [pc, #112]	@ (80095b8 <__pow5mult+0xb0>)
 8009546:	31ff      	adds	r1, #255	@ 0xff
 8009548:	f000 fbf0 	bl	8009d2c <__assert_func>
 800954c:	6044      	str	r4, [r0, #4]
 800954e:	6084      	str	r4, [r0, #8]
 8009550:	6004      	str	r4, [r0, #0]
 8009552:	60c4      	str	r4, [r0, #12]
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	689c      	ldr	r4, [r3, #8]
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	2c00      	cmp	r4, #0
 800955c:	d108      	bne.n	8009570 <__pow5mult+0x68>
 800955e:	0038      	movs	r0, r7
 8009560:	4916      	ldr	r1, [pc, #88]	@ (80095bc <__pow5mult+0xb4>)
 8009562:	f7ff ff0f 	bl	8009384 <__i2b>
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	0004      	movs	r4, r0
 800956a:	6098      	str	r0, [r3, #8]
 800956c:	2300      	movs	r3, #0
 800956e:	6003      	str	r3, [r0, #0]
 8009570:	2301      	movs	r3, #1
 8009572:	421d      	tst	r5, r3
 8009574:	d00a      	beq.n	800958c <__pow5mult+0x84>
 8009576:	0031      	movs	r1, r6
 8009578:	0022      	movs	r2, r4
 800957a:	0038      	movs	r0, r7
 800957c:	f7ff ff1a 	bl	80093b4 <__multiply>
 8009580:	0031      	movs	r1, r6
 8009582:	9001      	str	r0, [sp, #4]
 8009584:	0038      	movs	r0, r7
 8009586:	f7ff fe45 	bl	8009214 <_Bfree>
 800958a:	9e01      	ldr	r6, [sp, #4]
 800958c:	106d      	asrs	r5, r5, #1
 800958e:	d00c      	beq.n	80095aa <__pow5mult+0xa2>
 8009590:	6820      	ldr	r0, [r4, #0]
 8009592:	2800      	cmp	r0, #0
 8009594:	d107      	bne.n	80095a6 <__pow5mult+0x9e>
 8009596:	0022      	movs	r2, r4
 8009598:	0021      	movs	r1, r4
 800959a:	0038      	movs	r0, r7
 800959c:	f7ff ff0a 	bl	80093b4 <__multiply>
 80095a0:	2300      	movs	r3, #0
 80095a2:	6020      	str	r0, [r4, #0]
 80095a4:	6003      	str	r3, [r0, #0]
 80095a6:	0004      	movs	r4, r0
 80095a8:	e7e2      	b.n	8009570 <__pow5mult+0x68>
 80095aa:	0030      	movs	r0, r6
 80095ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095ae:	46c0      	nop			@ (mov r8, r8)
 80095b0:	0800cfdc 	.word	0x0800cfdc
 80095b4:	0800a637 	.word	0x0800a637
 80095b8:	0800a6b7 	.word	0x0800a6b7
 80095bc:	00000271 	.word	0x00000271

080095c0 <__lshift>:
 80095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c2:	000c      	movs	r4, r1
 80095c4:	0016      	movs	r6, r2
 80095c6:	6923      	ldr	r3, [r4, #16]
 80095c8:	1157      	asrs	r7, r2, #5
 80095ca:	b085      	sub	sp, #20
 80095cc:	18fb      	adds	r3, r7, r3
 80095ce:	9301      	str	r3, [sp, #4]
 80095d0:	3301      	adds	r3, #1
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	6849      	ldr	r1, [r1, #4]
 80095d6:	68a3      	ldr	r3, [r4, #8]
 80095d8:	9002      	str	r0, [sp, #8]
 80095da:	9a00      	ldr	r2, [sp, #0]
 80095dc:	4293      	cmp	r3, r2
 80095de:	db10      	blt.n	8009602 <__lshift+0x42>
 80095e0:	9802      	ldr	r0, [sp, #8]
 80095e2:	f7ff fdd3 	bl	800918c <_Balloc>
 80095e6:	2300      	movs	r3, #0
 80095e8:	0001      	movs	r1, r0
 80095ea:	0005      	movs	r5, r0
 80095ec:	001a      	movs	r2, r3
 80095ee:	3114      	adds	r1, #20
 80095f0:	4298      	cmp	r0, r3
 80095f2:	d10c      	bne.n	800960e <__lshift+0x4e>
 80095f4:	21ef      	movs	r1, #239	@ 0xef
 80095f6:	002a      	movs	r2, r5
 80095f8:	4b25      	ldr	r3, [pc, #148]	@ (8009690 <__lshift+0xd0>)
 80095fa:	4826      	ldr	r0, [pc, #152]	@ (8009694 <__lshift+0xd4>)
 80095fc:	0049      	lsls	r1, r1, #1
 80095fe:	f000 fb95 	bl	8009d2c <__assert_func>
 8009602:	3101      	adds	r1, #1
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	e7e8      	b.n	80095da <__lshift+0x1a>
 8009608:	0098      	lsls	r0, r3, #2
 800960a:	500a      	str	r2, [r1, r0]
 800960c:	3301      	adds	r3, #1
 800960e:	42bb      	cmp	r3, r7
 8009610:	dbfa      	blt.n	8009608 <__lshift+0x48>
 8009612:	43fb      	mvns	r3, r7
 8009614:	17db      	asrs	r3, r3, #31
 8009616:	401f      	ands	r7, r3
 8009618:	00bf      	lsls	r7, r7, #2
 800961a:	0023      	movs	r3, r4
 800961c:	201f      	movs	r0, #31
 800961e:	19c9      	adds	r1, r1, r7
 8009620:	0037      	movs	r7, r6
 8009622:	6922      	ldr	r2, [r4, #16]
 8009624:	3314      	adds	r3, #20
 8009626:	0092      	lsls	r2, r2, #2
 8009628:	189a      	adds	r2, r3, r2
 800962a:	4007      	ands	r7, r0
 800962c:	4206      	tst	r6, r0
 800962e:	d029      	beq.n	8009684 <__lshift+0xc4>
 8009630:	3001      	adds	r0, #1
 8009632:	1bc0      	subs	r0, r0, r7
 8009634:	9003      	str	r0, [sp, #12]
 8009636:	468c      	mov	ip, r1
 8009638:	2000      	movs	r0, #0
 800963a:	681e      	ldr	r6, [r3, #0]
 800963c:	40be      	lsls	r6, r7
 800963e:	4306      	orrs	r6, r0
 8009640:	4660      	mov	r0, ip
 8009642:	c040      	stmia	r0!, {r6}
 8009644:	4684      	mov	ip, r0
 8009646:	9e03      	ldr	r6, [sp, #12]
 8009648:	cb01      	ldmia	r3!, {r0}
 800964a:	40f0      	lsrs	r0, r6
 800964c:	429a      	cmp	r2, r3
 800964e:	d8f4      	bhi.n	800963a <__lshift+0x7a>
 8009650:	0026      	movs	r6, r4
 8009652:	3615      	adds	r6, #21
 8009654:	2304      	movs	r3, #4
 8009656:	42b2      	cmp	r2, r6
 8009658:	d304      	bcc.n	8009664 <__lshift+0xa4>
 800965a:	1b13      	subs	r3, r2, r4
 800965c:	3b15      	subs	r3, #21
 800965e:	089b      	lsrs	r3, r3, #2
 8009660:	3301      	adds	r3, #1
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	50c8      	str	r0, [r1, r3]
 8009666:	2800      	cmp	r0, #0
 8009668:	d002      	beq.n	8009670 <__lshift+0xb0>
 800966a:	9b01      	ldr	r3, [sp, #4]
 800966c:	3302      	adds	r3, #2
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	9b00      	ldr	r3, [sp, #0]
 8009672:	9802      	ldr	r0, [sp, #8]
 8009674:	3b01      	subs	r3, #1
 8009676:	0021      	movs	r1, r4
 8009678:	612b      	str	r3, [r5, #16]
 800967a:	f7ff fdcb 	bl	8009214 <_Bfree>
 800967e:	0028      	movs	r0, r5
 8009680:	b005      	add	sp, #20
 8009682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009684:	cb01      	ldmia	r3!, {r0}
 8009686:	c101      	stmia	r1!, {r0}
 8009688:	429a      	cmp	r2, r3
 800968a:	d8fb      	bhi.n	8009684 <__lshift+0xc4>
 800968c:	e7f0      	b.n	8009670 <__lshift+0xb0>
 800968e:	46c0      	nop			@ (mov r8, r8)
 8009690:	0800a6a6 	.word	0x0800a6a6
 8009694:	0800a6b7 	.word	0x0800a6b7

08009698 <__mcmp>:
 8009698:	b530      	push	{r4, r5, lr}
 800969a:	690b      	ldr	r3, [r1, #16]
 800969c:	6904      	ldr	r4, [r0, #16]
 800969e:	0002      	movs	r2, r0
 80096a0:	1ae0      	subs	r0, r4, r3
 80096a2:	429c      	cmp	r4, r3
 80096a4:	d10f      	bne.n	80096c6 <__mcmp+0x2e>
 80096a6:	3214      	adds	r2, #20
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	3114      	adds	r1, #20
 80096ac:	0014      	movs	r4, r2
 80096ae:	18c9      	adds	r1, r1, r3
 80096b0:	18d2      	adds	r2, r2, r3
 80096b2:	3a04      	subs	r2, #4
 80096b4:	3904      	subs	r1, #4
 80096b6:	6815      	ldr	r5, [r2, #0]
 80096b8:	680b      	ldr	r3, [r1, #0]
 80096ba:	429d      	cmp	r5, r3
 80096bc:	d004      	beq.n	80096c8 <__mcmp+0x30>
 80096be:	2001      	movs	r0, #1
 80096c0:	429d      	cmp	r5, r3
 80096c2:	d200      	bcs.n	80096c6 <__mcmp+0x2e>
 80096c4:	3802      	subs	r0, #2
 80096c6:	bd30      	pop	{r4, r5, pc}
 80096c8:	4294      	cmp	r4, r2
 80096ca:	d3f2      	bcc.n	80096b2 <__mcmp+0x1a>
 80096cc:	e7fb      	b.n	80096c6 <__mcmp+0x2e>
	...

080096d0 <__mdiff>:
 80096d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096d2:	000c      	movs	r4, r1
 80096d4:	b087      	sub	sp, #28
 80096d6:	9000      	str	r0, [sp, #0]
 80096d8:	0011      	movs	r1, r2
 80096da:	0020      	movs	r0, r4
 80096dc:	0017      	movs	r7, r2
 80096de:	f7ff ffdb 	bl	8009698 <__mcmp>
 80096e2:	1e05      	subs	r5, r0, #0
 80096e4:	d110      	bne.n	8009708 <__mdiff+0x38>
 80096e6:	0001      	movs	r1, r0
 80096e8:	9800      	ldr	r0, [sp, #0]
 80096ea:	f7ff fd4f 	bl	800918c <_Balloc>
 80096ee:	1e02      	subs	r2, r0, #0
 80096f0:	d104      	bne.n	80096fc <__mdiff+0x2c>
 80096f2:	4b40      	ldr	r3, [pc, #256]	@ (80097f4 <__mdiff+0x124>)
 80096f4:	4840      	ldr	r0, [pc, #256]	@ (80097f8 <__mdiff+0x128>)
 80096f6:	4941      	ldr	r1, [pc, #260]	@ (80097fc <__mdiff+0x12c>)
 80096f8:	f000 fb18 	bl	8009d2c <__assert_func>
 80096fc:	2301      	movs	r3, #1
 80096fe:	6145      	str	r5, [r0, #20]
 8009700:	6103      	str	r3, [r0, #16]
 8009702:	0010      	movs	r0, r2
 8009704:	b007      	add	sp, #28
 8009706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009708:	2600      	movs	r6, #0
 800970a:	42b0      	cmp	r0, r6
 800970c:	da03      	bge.n	8009716 <__mdiff+0x46>
 800970e:	0023      	movs	r3, r4
 8009710:	003c      	movs	r4, r7
 8009712:	001f      	movs	r7, r3
 8009714:	3601      	adds	r6, #1
 8009716:	6861      	ldr	r1, [r4, #4]
 8009718:	9800      	ldr	r0, [sp, #0]
 800971a:	f7ff fd37 	bl	800918c <_Balloc>
 800971e:	1e02      	subs	r2, r0, #0
 8009720:	d103      	bne.n	800972a <__mdiff+0x5a>
 8009722:	4b34      	ldr	r3, [pc, #208]	@ (80097f4 <__mdiff+0x124>)
 8009724:	4834      	ldr	r0, [pc, #208]	@ (80097f8 <__mdiff+0x128>)
 8009726:	4936      	ldr	r1, [pc, #216]	@ (8009800 <__mdiff+0x130>)
 8009728:	e7e6      	b.n	80096f8 <__mdiff+0x28>
 800972a:	6923      	ldr	r3, [r4, #16]
 800972c:	3414      	adds	r4, #20
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	18e3      	adds	r3, r4, r3
 8009734:	0021      	movs	r1, r4
 8009736:	9401      	str	r4, [sp, #4]
 8009738:	003c      	movs	r4, r7
 800973a:	9302      	str	r3, [sp, #8]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	3414      	adds	r4, #20
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	18e3      	adds	r3, r4, r3
 8009744:	9303      	str	r3, [sp, #12]
 8009746:	0003      	movs	r3, r0
 8009748:	60c6      	str	r6, [r0, #12]
 800974a:	468c      	mov	ip, r1
 800974c:	2000      	movs	r0, #0
 800974e:	3314      	adds	r3, #20
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	9305      	str	r3, [sp, #20]
 8009754:	4663      	mov	r3, ip
 8009756:	cb20      	ldmia	r3!, {r5}
 8009758:	b2a9      	uxth	r1, r5
 800975a:	000e      	movs	r6, r1
 800975c:	469c      	mov	ip, r3
 800975e:	cc08      	ldmia	r4!, {r3}
 8009760:	0c2d      	lsrs	r5, r5, #16
 8009762:	b299      	uxth	r1, r3
 8009764:	1a71      	subs	r1, r6, r1
 8009766:	1809      	adds	r1, r1, r0
 8009768:	0c1b      	lsrs	r3, r3, #16
 800976a:	1408      	asrs	r0, r1, #16
 800976c:	1aeb      	subs	r3, r5, r3
 800976e:	181b      	adds	r3, r3, r0
 8009770:	1418      	asrs	r0, r3, #16
 8009772:	b289      	uxth	r1, r1
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	4319      	orrs	r1, r3
 8009778:	9b05      	ldr	r3, [sp, #20]
 800977a:	c302      	stmia	r3!, {r1}
 800977c:	9305      	str	r3, [sp, #20]
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	42a3      	cmp	r3, r4
 8009782:	d8e7      	bhi.n	8009754 <__mdiff+0x84>
 8009784:	0039      	movs	r1, r7
 8009786:	9c03      	ldr	r4, [sp, #12]
 8009788:	3115      	adds	r1, #21
 800978a:	2304      	movs	r3, #4
 800978c:	428c      	cmp	r4, r1
 800978e:	d304      	bcc.n	800979a <__mdiff+0xca>
 8009790:	1be3      	subs	r3, r4, r7
 8009792:	3b15      	subs	r3, #21
 8009794:	089b      	lsrs	r3, r3, #2
 8009796:	3301      	adds	r3, #1
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	9901      	ldr	r1, [sp, #4]
 800979c:	18cd      	adds	r5, r1, r3
 800979e:	9904      	ldr	r1, [sp, #16]
 80097a0:	002e      	movs	r6, r5
 80097a2:	18cb      	adds	r3, r1, r3
 80097a4:	001f      	movs	r7, r3
 80097a6:	9902      	ldr	r1, [sp, #8]
 80097a8:	428e      	cmp	r6, r1
 80097aa:	d311      	bcc.n	80097d0 <__mdiff+0x100>
 80097ac:	9c02      	ldr	r4, [sp, #8]
 80097ae:	1ee9      	subs	r1, r5, #3
 80097b0:	2000      	movs	r0, #0
 80097b2:	428c      	cmp	r4, r1
 80097b4:	d304      	bcc.n	80097c0 <__mdiff+0xf0>
 80097b6:	0021      	movs	r1, r4
 80097b8:	3103      	adds	r1, #3
 80097ba:	1b49      	subs	r1, r1, r5
 80097bc:	0889      	lsrs	r1, r1, #2
 80097be:	0088      	lsls	r0, r1, #2
 80097c0:	181b      	adds	r3, r3, r0
 80097c2:	3b04      	subs	r3, #4
 80097c4:	6819      	ldr	r1, [r3, #0]
 80097c6:	2900      	cmp	r1, #0
 80097c8:	d010      	beq.n	80097ec <__mdiff+0x11c>
 80097ca:	9b00      	ldr	r3, [sp, #0]
 80097cc:	6113      	str	r3, [r2, #16]
 80097ce:	e798      	b.n	8009702 <__mdiff+0x32>
 80097d0:	4684      	mov	ip, r0
 80097d2:	ce02      	ldmia	r6!, {r1}
 80097d4:	b288      	uxth	r0, r1
 80097d6:	4460      	add	r0, ip
 80097d8:	1400      	asrs	r0, r0, #16
 80097da:	0c0c      	lsrs	r4, r1, #16
 80097dc:	1904      	adds	r4, r0, r4
 80097de:	4461      	add	r1, ip
 80097e0:	1420      	asrs	r0, r4, #16
 80097e2:	b289      	uxth	r1, r1
 80097e4:	0424      	lsls	r4, r4, #16
 80097e6:	4321      	orrs	r1, r4
 80097e8:	c702      	stmia	r7!, {r1}
 80097ea:	e7dc      	b.n	80097a6 <__mdiff+0xd6>
 80097ec:	9900      	ldr	r1, [sp, #0]
 80097ee:	3901      	subs	r1, #1
 80097f0:	9100      	str	r1, [sp, #0]
 80097f2:	e7e6      	b.n	80097c2 <__mdiff+0xf2>
 80097f4:	0800a6a6 	.word	0x0800a6a6
 80097f8:	0800a6b7 	.word	0x0800a6b7
 80097fc:	00000237 	.word	0x00000237
 8009800:	00000245 	.word	0x00000245

08009804 <__d2b>:
 8009804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009806:	2101      	movs	r1, #1
 8009808:	0016      	movs	r6, r2
 800980a:	001f      	movs	r7, r3
 800980c:	f7ff fcbe 	bl	800918c <_Balloc>
 8009810:	1e04      	subs	r4, r0, #0
 8009812:	d105      	bne.n	8009820 <__d2b+0x1c>
 8009814:	0022      	movs	r2, r4
 8009816:	4b25      	ldr	r3, [pc, #148]	@ (80098ac <__d2b+0xa8>)
 8009818:	4825      	ldr	r0, [pc, #148]	@ (80098b0 <__d2b+0xac>)
 800981a:	4926      	ldr	r1, [pc, #152]	@ (80098b4 <__d2b+0xb0>)
 800981c:	f000 fa86 	bl	8009d2c <__assert_func>
 8009820:	033b      	lsls	r3, r7, #12
 8009822:	007d      	lsls	r5, r7, #1
 8009824:	0b1b      	lsrs	r3, r3, #12
 8009826:	0d6d      	lsrs	r5, r5, #21
 8009828:	d002      	beq.n	8009830 <__d2b+0x2c>
 800982a:	2280      	movs	r2, #128	@ 0x80
 800982c:	0352      	lsls	r2, r2, #13
 800982e:	4313      	orrs	r3, r2
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	2e00      	cmp	r6, #0
 8009834:	d025      	beq.n	8009882 <__d2b+0x7e>
 8009836:	4668      	mov	r0, sp
 8009838:	9600      	str	r6, [sp, #0]
 800983a:	f7ff fd74 	bl	8009326 <__lo0bits>
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	9900      	ldr	r1, [sp, #0]
 8009842:	2800      	cmp	r0, #0
 8009844:	d01b      	beq.n	800987e <__d2b+0x7a>
 8009846:	2220      	movs	r2, #32
 8009848:	001e      	movs	r6, r3
 800984a:	1a12      	subs	r2, r2, r0
 800984c:	4096      	lsls	r6, r2
 800984e:	0032      	movs	r2, r6
 8009850:	40c3      	lsrs	r3, r0
 8009852:	430a      	orrs	r2, r1
 8009854:	6162      	str	r2, [r4, #20]
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	9e01      	ldr	r6, [sp, #4]
 800985a:	61a6      	str	r6, [r4, #24]
 800985c:	1e73      	subs	r3, r6, #1
 800985e:	419e      	sbcs	r6, r3
 8009860:	3601      	adds	r6, #1
 8009862:	6126      	str	r6, [r4, #16]
 8009864:	2d00      	cmp	r5, #0
 8009866:	d014      	beq.n	8009892 <__d2b+0x8e>
 8009868:	2635      	movs	r6, #53	@ 0x35
 800986a:	4b13      	ldr	r3, [pc, #76]	@ (80098b8 <__d2b+0xb4>)
 800986c:	18ed      	adds	r5, r5, r3
 800986e:	9b08      	ldr	r3, [sp, #32]
 8009870:	182d      	adds	r5, r5, r0
 8009872:	601d      	str	r5, [r3, #0]
 8009874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009876:	1a36      	subs	r6, r6, r0
 8009878:	601e      	str	r6, [r3, #0]
 800987a:	0020      	movs	r0, r4
 800987c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800987e:	6161      	str	r1, [r4, #20]
 8009880:	e7ea      	b.n	8009858 <__d2b+0x54>
 8009882:	a801      	add	r0, sp, #4
 8009884:	f7ff fd4f 	bl	8009326 <__lo0bits>
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	2601      	movs	r6, #1
 800988c:	6163      	str	r3, [r4, #20]
 800988e:	3020      	adds	r0, #32
 8009890:	e7e7      	b.n	8009862 <__d2b+0x5e>
 8009892:	4b0a      	ldr	r3, [pc, #40]	@ (80098bc <__d2b+0xb8>)
 8009894:	18c0      	adds	r0, r0, r3
 8009896:	9b08      	ldr	r3, [sp, #32]
 8009898:	6018      	str	r0, [r3, #0]
 800989a:	4b09      	ldr	r3, [pc, #36]	@ (80098c0 <__d2b+0xbc>)
 800989c:	18f3      	adds	r3, r6, r3
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	18e3      	adds	r3, r4, r3
 80098a2:	6958      	ldr	r0, [r3, #20]
 80098a4:	f7ff fd1e 	bl	80092e4 <__hi0bits>
 80098a8:	0176      	lsls	r6, r6, #5
 80098aa:	e7e3      	b.n	8009874 <__d2b+0x70>
 80098ac:	0800a6a6 	.word	0x0800a6a6
 80098b0:	0800a6b7 	.word	0x0800a6b7
 80098b4:	0000030f 	.word	0x0000030f
 80098b8:	fffffbcd 	.word	0xfffffbcd
 80098bc:	fffffbce 	.word	0xfffffbce
 80098c0:	3fffffff 	.word	0x3fffffff

080098c4 <__ssputs_r>:
 80098c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c6:	688e      	ldr	r6, [r1, #8]
 80098c8:	b085      	sub	sp, #20
 80098ca:	001f      	movs	r7, r3
 80098cc:	000c      	movs	r4, r1
 80098ce:	680b      	ldr	r3, [r1, #0]
 80098d0:	9002      	str	r0, [sp, #8]
 80098d2:	9203      	str	r2, [sp, #12]
 80098d4:	42be      	cmp	r6, r7
 80098d6:	d830      	bhi.n	800993a <__ssputs_r+0x76>
 80098d8:	210c      	movs	r1, #12
 80098da:	5e62      	ldrsh	r2, [r4, r1]
 80098dc:	2190      	movs	r1, #144	@ 0x90
 80098de:	00c9      	lsls	r1, r1, #3
 80098e0:	420a      	tst	r2, r1
 80098e2:	d028      	beq.n	8009936 <__ssputs_r+0x72>
 80098e4:	2003      	movs	r0, #3
 80098e6:	6921      	ldr	r1, [r4, #16]
 80098e8:	1a5b      	subs	r3, r3, r1
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	6963      	ldr	r3, [r4, #20]
 80098ee:	4343      	muls	r3, r0
 80098f0:	9801      	ldr	r0, [sp, #4]
 80098f2:	0fdd      	lsrs	r5, r3, #31
 80098f4:	18ed      	adds	r5, r5, r3
 80098f6:	1c7b      	adds	r3, r7, #1
 80098f8:	181b      	adds	r3, r3, r0
 80098fa:	106d      	asrs	r5, r5, #1
 80098fc:	42ab      	cmp	r3, r5
 80098fe:	d900      	bls.n	8009902 <__ssputs_r+0x3e>
 8009900:	001d      	movs	r5, r3
 8009902:	0552      	lsls	r2, r2, #21
 8009904:	d528      	bpl.n	8009958 <__ssputs_r+0x94>
 8009906:	0029      	movs	r1, r5
 8009908:	9802      	ldr	r0, [sp, #8]
 800990a:	f7ff fbaf 	bl	800906c <_malloc_r>
 800990e:	1e06      	subs	r6, r0, #0
 8009910:	d02c      	beq.n	800996c <__ssputs_r+0xa8>
 8009912:	9a01      	ldr	r2, [sp, #4]
 8009914:	6921      	ldr	r1, [r4, #16]
 8009916:	f7fe fcb5 	bl	8008284 <memcpy>
 800991a:	89a2      	ldrh	r2, [r4, #12]
 800991c:	4b18      	ldr	r3, [pc, #96]	@ (8009980 <__ssputs_r+0xbc>)
 800991e:	401a      	ands	r2, r3
 8009920:	2380      	movs	r3, #128	@ 0x80
 8009922:	4313      	orrs	r3, r2
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	9b01      	ldr	r3, [sp, #4]
 8009928:	6126      	str	r6, [r4, #16]
 800992a:	18f6      	adds	r6, r6, r3
 800992c:	6026      	str	r6, [r4, #0]
 800992e:	003e      	movs	r6, r7
 8009930:	6165      	str	r5, [r4, #20]
 8009932:	1aed      	subs	r5, r5, r3
 8009934:	60a5      	str	r5, [r4, #8]
 8009936:	42be      	cmp	r6, r7
 8009938:	d900      	bls.n	800993c <__ssputs_r+0x78>
 800993a:	003e      	movs	r6, r7
 800993c:	0032      	movs	r2, r6
 800993e:	9903      	ldr	r1, [sp, #12]
 8009940:	6820      	ldr	r0, [r4, #0]
 8009942:	f000 f9ce 	bl	8009ce2 <memmove>
 8009946:	2000      	movs	r0, #0
 8009948:	68a3      	ldr	r3, [r4, #8]
 800994a:	1b9b      	subs	r3, r3, r6
 800994c:	60a3      	str	r3, [r4, #8]
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	199b      	adds	r3, r3, r6
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	b005      	add	sp, #20
 8009956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009958:	002a      	movs	r2, r5
 800995a:	9802      	ldr	r0, [sp, #8]
 800995c:	f000 fa43 	bl	8009de6 <_realloc_r>
 8009960:	1e06      	subs	r6, r0, #0
 8009962:	d1e0      	bne.n	8009926 <__ssputs_r+0x62>
 8009964:	6921      	ldr	r1, [r4, #16]
 8009966:	9802      	ldr	r0, [sp, #8]
 8009968:	f7ff fb0a 	bl	8008f80 <_free_r>
 800996c:	230c      	movs	r3, #12
 800996e:	2001      	movs	r0, #1
 8009970:	9a02      	ldr	r2, [sp, #8]
 8009972:	4240      	negs	r0, r0
 8009974:	6013      	str	r3, [r2, #0]
 8009976:	89a2      	ldrh	r2, [r4, #12]
 8009978:	3334      	adds	r3, #52	@ 0x34
 800997a:	4313      	orrs	r3, r2
 800997c:	81a3      	strh	r3, [r4, #12]
 800997e:	e7e9      	b.n	8009954 <__ssputs_r+0x90>
 8009980:	fffffb7f 	.word	0xfffffb7f

08009984 <_svfiprintf_r>:
 8009984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009986:	b0a1      	sub	sp, #132	@ 0x84
 8009988:	9003      	str	r0, [sp, #12]
 800998a:	001d      	movs	r5, r3
 800998c:	898b      	ldrh	r3, [r1, #12]
 800998e:	000f      	movs	r7, r1
 8009990:	0016      	movs	r6, r2
 8009992:	061b      	lsls	r3, r3, #24
 8009994:	d511      	bpl.n	80099ba <_svfiprintf_r+0x36>
 8009996:	690b      	ldr	r3, [r1, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10e      	bne.n	80099ba <_svfiprintf_r+0x36>
 800999c:	2140      	movs	r1, #64	@ 0x40
 800999e:	f7ff fb65 	bl	800906c <_malloc_r>
 80099a2:	6038      	str	r0, [r7, #0]
 80099a4:	6138      	str	r0, [r7, #16]
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d105      	bne.n	80099b6 <_svfiprintf_r+0x32>
 80099aa:	230c      	movs	r3, #12
 80099ac:	9a03      	ldr	r2, [sp, #12]
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	2001      	movs	r0, #1
 80099b2:	4240      	negs	r0, r0
 80099b4:	e0cf      	b.n	8009b56 <_svfiprintf_r+0x1d2>
 80099b6:	2340      	movs	r3, #64	@ 0x40
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	2300      	movs	r3, #0
 80099bc:	ac08      	add	r4, sp, #32
 80099be:	6163      	str	r3, [r4, #20]
 80099c0:	3320      	adds	r3, #32
 80099c2:	7663      	strb	r3, [r4, #25]
 80099c4:	3310      	adds	r3, #16
 80099c6:	76a3      	strb	r3, [r4, #26]
 80099c8:	9507      	str	r5, [sp, #28]
 80099ca:	0035      	movs	r5, r6
 80099cc:	782b      	ldrb	r3, [r5, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <_svfiprintf_r+0x52>
 80099d2:	2b25      	cmp	r3, #37	@ 0x25
 80099d4:	d148      	bne.n	8009a68 <_svfiprintf_r+0xe4>
 80099d6:	1bab      	subs	r3, r5, r6
 80099d8:	9305      	str	r3, [sp, #20]
 80099da:	42b5      	cmp	r5, r6
 80099dc:	d00b      	beq.n	80099f6 <_svfiprintf_r+0x72>
 80099de:	0032      	movs	r2, r6
 80099e0:	0039      	movs	r1, r7
 80099e2:	9803      	ldr	r0, [sp, #12]
 80099e4:	f7ff ff6e 	bl	80098c4 <__ssputs_r>
 80099e8:	3001      	adds	r0, #1
 80099ea:	d100      	bne.n	80099ee <_svfiprintf_r+0x6a>
 80099ec:	e0ae      	b.n	8009b4c <_svfiprintf_r+0x1c8>
 80099ee:	6963      	ldr	r3, [r4, #20]
 80099f0:	9a05      	ldr	r2, [sp, #20]
 80099f2:	189b      	adds	r3, r3, r2
 80099f4:	6163      	str	r3, [r4, #20]
 80099f6:	782b      	ldrb	r3, [r5, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d100      	bne.n	80099fe <_svfiprintf_r+0x7a>
 80099fc:	e0a6      	b.n	8009b4c <_svfiprintf_r+0x1c8>
 80099fe:	2201      	movs	r2, #1
 8009a00:	2300      	movs	r3, #0
 8009a02:	4252      	negs	r2, r2
 8009a04:	6062      	str	r2, [r4, #4]
 8009a06:	a904      	add	r1, sp, #16
 8009a08:	3254      	adds	r2, #84	@ 0x54
 8009a0a:	1852      	adds	r2, r2, r1
 8009a0c:	1c6e      	adds	r6, r5, #1
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	60e3      	str	r3, [r4, #12]
 8009a12:	60a3      	str	r3, [r4, #8]
 8009a14:	7013      	strb	r3, [r2, #0]
 8009a16:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009a18:	4b54      	ldr	r3, [pc, #336]	@ (8009b6c <_svfiprintf_r+0x1e8>)
 8009a1a:	2205      	movs	r2, #5
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	7831      	ldrb	r1, [r6, #0]
 8009a20:	9305      	str	r3, [sp, #20]
 8009a22:	f7fe fc24 	bl	800826e <memchr>
 8009a26:	1c75      	adds	r5, r6, #1
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d11f      	bne.n	8009a6c <_svfiprintf_r+0xe8>
 8009a2c:	6822      	ldr	r2, [r4, #0]
 8009a2e:	06d3      	lsls	r3, r2, #27
 8009a30:	d504      	bpl.n	8009a3c <_svfiprintf_r+0xb8>
 8009a32:	2353      	movs	r3, #83	@ 0x53
 8009a34:	a904      	add	r1, sp, #16
 8009a36:	185b      	adds	r3, r3, r1
 8009a38:	2120      	movs	r1, #32
 8009a3a:	7019      	strb	r1, [r3, #0]
 8009a3c:	0713      	lsls	r3, r2, #28
 8009a3e:	d504      	bpl.n	8009a4a <_svfiprintf_r+0xc6>
 8009a40:	2353      	movs	r3, #83	@ 0x53
 8009a42:	a904      	add	r1, sp, #16
 8009a44:	185b      	adds	r3, r3, r1
 8009a46:	212b      	movs	r1, #43	@ 0x2b
 8009a48:	7019      	strb	r1, [r3, #0]
 8009a4a:	7833      	ldrb	r3, [r6, #0]
 8009a4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a4e:	d016      	beq.n	8009a7e <_svfiprintf_r+0xfa>
 8009a50:	0035      	movs	r5, r6
 8009a52:	2100      	movs	r1, #0
 8009a54:	200a      	movs	r0, #10
 8009a56:	68e3      	ldr	r3, [r4, #12]
 8009a58:	782a      	ldrb	r2, [r5, #0]
 8009a5a:	1c6e      	adds	r6, r5, #1
 8009a5c:	3a30      	subs	r2, #48	@ 0x30
 8009a5e:	2a09      	cmp	r2, #9
 8009a60:	d950      	bls.n	8009b04 <_svfiprintf_r+0x180>
 8009a62:	2900      	cmp	r1, #0
 8009a64:	d111      	bne.n	8009a8a <_svfiprintf_r+0x106>
 8009a66:	e017      	b.n	8009a98 <_svfiprintf_r+0x114>
 8009a68:	3501      	adds	r5, #1
 8009a6a:	e7af      	b.n	80099cc <_svfiprintf_r+0x48>
 8009a6c:	9b05      	ldr	r3, [sp, #20]
 8009a6e:	6822      	ldr	r2, [r4, #0]
 8009a70:	1ac0      	subs	r0, r0, r3
 8009a72:	2301      	movs	r3, #1
 8009a74:	4083      	lsls	r3, r0
 8009a76:	4313      	orrs	r3, r2
 8009a78:	002e      	movs	r6, r5
 8009a7a:	6023      	str	r3, [r4, #0]
 8009a7c:	e7cc      	b.n	8009a18 <_svfiprintf_r+0x94>
 8009a7e:	9b07      	ldr	r3, [sp, #28]
 8009a80:	1d19      	adds	r1, r3, #4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	9107      	str	r1, [sp, #28]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	db01      	blt.n	8009a8e <_svfiprintf_r+0x10a>
 8009a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a8c:	e004      	b.n	8009a98 <_svfiprintf_r+0x114>
 8009a8e:	425b      	negs	r3, r3
 8009a90:	60e3      	str	r3, [r4, #12]
 8009a92:	2302      	movs	r3, #2
 8009a94:	4313      	orrs	r3, r2
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	782b      	ldrb	r3, [r5, #0]
 8009a9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a9c:	d10c      	bne.n	8009ab8 <_svfiprintf_r+0x134>
 8009a9e:	786b      	ldrb	r3, [r5, #1]
 8009aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aa2:	d134      	bne.n	8009b0e <_svfiprintf_r+0x18a>
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	3502      	adds	r5, #2
 8009aa8:	1d1a      	adds	r2, r3, #4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	9207      	str	r2, [sp, #28]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	da01      	bge.n	8009ab6 <_svfiprintf_r+0x132>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	425b      	negs	r3, r3
 8009ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ab8:	4e2d      	ldr	r6, [pc, #180]	@ (8009b70 <_svfiprintf_r+0x1ec>)
 8009aba:	2203      	movs	r2, #3
 8009abc:	0030      	movs	r0, r6
 8009abe:	7829      	ldrb	r1, [r5, #0]
 8009ac0:	f7fe fbd5 	bl	800826e <memchr>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d006      	beq.n	8009ad6 <_svfiprintf_r+0x152>
 8009ac8:	2340      	movs	r3, #64	@ 0x40
 8009aca:	1b80      	subs	r0, r0, r6
 8009acc:	4083      	lsls	r3, r0
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	3501      	adds	r5, #1
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	7829      	ldrb	r1, [r5, #0]
 8009ad8:	2206      	movs	r2, #6
 8009ada:	4826      	ldr	r0, [pc, #152]	@ (8009b74 <_svfiprintf_r+0x1f0>)
 8009adc:	1c6e      	adds	r6, r5, #1
 8009ade:	7621      	strb	r1, [r4, #24]
 8009ae0:	f7fe fbc5 	bl	800826e <memchr>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d038      	beq.n	8009b5a <_svfiprintf_r+0x1d6>
 8009ae8:	4b23      	ldr	r3, [pc, #140]	@ (8009b78 <_svfiprintf_r+0x1f4>)
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d122      	bne.n	8009b34 <_svfiprintf_r+0x1b0>
 8009aee:	2207      	movs	r2, #7
 8009af0:	9b07      	ldr	r3, [sp, #28]
 8009af2:	3307      	adds	r3, #7
 8009af4:	4393      	bics	r3, r2
 8009af6:	3308      	adds	r3, #8
 8009af8:	9307      	str	r3, [sp, #28]
 8009afa:	6963      	ldr	r3, [r4, #20]
 8009afc:	9a04      	ldr	r2, [sp, #16]
 8009afe:	189b      	adds	r3, r3, r2
 8009b00:	6163      	str	r3, [r4, #20]
 8009b02:	e762      	b.n	80099ca <_svfiprintf_r+0x46>
 8009b04:	4343      	muls	r3, r0
 8009b06:	0035      	movs	r5, r6
 8009b08:	2101      	movs	r1, #1
 8009b0a:	189b      	adds	r3, r3, r2
 8009b0c:	e7a4      	b.n	8009a58 <_svfiprintf_r+0xd4>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	200a      	movs	r0, #10
 8009b12:	0019      	movs	r1, r3
 8009b14:	3501      	adds	r5, #1
 8009b16:	6063      	str	r3, [r4, #4]
 8009b18:	782a      	ldrb	r2, [r5, #0]
 8009b1a:	1c6e      	adds	r6, r5, #1
 8009b1c:	3a30      	subs	r2, #48	@ 0x30
 8009b1e:	2a09      	cmp	r2, #9
 8009b20:	d903      	bls.n	8009b2a <_svfiprintf_r+0x1a6>
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0c8      	beq.n	8009ab8 <_svfiprintf_r+0x134>
 8009b26:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b28:	e7c6      	b.n	8009ab8 <_svfiprintf_r+0x134>
 8009b2a:	4341      	muls	r1, r0
 8009b2c:	0035      	movs	r5, r6
 8009b2e:	2301      	movs	r3, #1
 8009b30:	1889      	adds	r1, r1, r2
 8009b32:	e7f1      	b.n	8009b18 <_svfiprintf_r+0x194>
 8009b34:	aa07      	add	r2, sp, #28
 8009b36:	9200      	str	r2, [sp, #0]
 8009b38:	0021      	movs	r1, r4
 8009b3a:	003a      	movs	r2, r7
 8009b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009b7c <_svfiprintf_r+0x1f8>)
 8009b3e:	9803      	ldr	r0, [sp, #12]
 8009b40:	f7fd fdec 	bl	800771c <_printf_float>
 8009b44:	9004      	str	r0, [sp, #16]
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	d1d6      	bne.n	8009afa <_svfiprintf_r+0x176>
 8009b4c:	89bb      	ldrh	r3, [r7, #12]
 8009b4e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009b50:	065b      	lsls	r3, r3, #25
 8009b52:	d500      	bpl.n	8009b56 <_svfiprintf_r+0x1d2>
 8009b54:	e72c      	b.n	80099b0 <_svfiprintf_r+0x2c>
 8009b56:	b021      	add	sp, #132	@ 0x84
 8009b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b5a:	aa07      	add	r2, sp, #28
 8009b5c:	9200      	str	r2, [sp, #0]
 8009b5e:	0021      	movs	r1, r4
 8009b60:	003a      	movs	r2, r7
 8009b62:	4b06      	ldr	r3, [pc, #24]	@ (8009b7c <_svfiprintf_r+0x1f8>)
 8009b64:	9803      	ldr	r0, [sp, #12]
 8009b66:	f7fe f887 	bl	8007c78 <_printf_i>
 8009b6a:	e7eb      	b.n	8009b44 <_svfiprintf_r+0x1c0>
 8009b6c:	0800a710 	.word	0x0800a710
 8009b70:	0800a716 	.word	0x0800a716
 8009b74:	0800a71a 	.word	0x0800a71a
 8009b78:	0800771d 	.word	0x0800771d
 8009b7c:	080098c5 	.word	0x080098c5

08009b80 <__sflush_r>:
 8009b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b82:	220c      	movs	r2, #12
 8009b84:	5e8b      	ldrsh	r3, [r1, r2]
 8009b86:	0005      	movs	r5, r0
 8009b88:	000c      	movs	r4, r1
 8009b8a:	071a      	lsls	r2, r3, #28
 8009b8c:	d456      	bmi.n	8009c3c <__sflush_r+0xbc>
 8009b8e:	684a      	ldr	r2, [r1, #4]
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	dc02      	bgt.n	8009b9a <__sflush_r+0x1a>
 8009b94:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009b96:	2a00      	cmp	r2, #0
 8009b98:	dd4e      	ble.n	8009c38 <__sflush_r+0xb8>
 8009b9a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009b9c:	2f00      	cmp	r7, #0
 8009b9e:	d04b      	beq.n	8009c38 <__sflush_r+0xb8>
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2080      	movs	r0, #128	@ 0x80
 8009ba4:	682e      	ldr	r6, [r5, #0]
 8009ba6:	602a      	str	r2, [r5, #0]
 8009ba8:	001a      	movs	r2, r3
 8009baa:	0140      	lsls	r0, r0, #5
 8009bac:	6a21      	ldr	r1, [r4, #32]
 8009bae:	4002      	ands	r2, r0
 8009bb0:	4203      	tst	r3, r0
 8009bb2:	d033      	beq.n	8009c1c <__sflush_r+0x9c>
 8009bb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	075b      	lsls	r3, r3, #29
 8009bba:	d506      	bpl.n	8009bca <__sflush_r+0x4a>
 8009bbc:	6863      	ldr	r3, [r4, #4]
 8009bbe:	1ad2      	subs	r2, r2, r3
 8009bc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <__sflush_r+0x4a>
 8009bc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bc8:	1ad2      	subs	r2, r2, r3
 8009bca:	2300      	movs	r3, #0
 8009bcc:	0028      	movs	r0, r5
 8009bce:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009bd0:	6a21      	ldr	r1, [r4, #32]
 8009bd2:	47b8      	blx	r7
 8009bd4:	89a2      	ldrh	r2, [r4, #12]
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d106      	bne.n	8009be8 <__sflush_r+0x68>
 8009bda:	6829      	ldr	r1, [r5, #0]
 8009bdc:	291d      	cmp	r1, #29
 8009bde:	d846      	bhi.n	8009c6e <__sflush_r+0xee>
 8009be0:	4b29      	ldr	r3, [pc, #164]	@ (8009c88 <__sflush_r+0x108>)
 8009be2:	40cb      	lsrs	r3, r1
 8009be4:	07db      	lsls	r3, r3, #31
 8009be6:	d542      	bpl.n	8009c6e <__sflush_r+0xee>
 8009be8:	2300      	movs	r3, #0
 8009bea:	6063      	str	r3, [r4, #4]
 8009bec:	6923      	ldr	r3, [r4, #16]
 8009bee:	6023      	str	r3, [r4, #0]
 8009bf0:	04d2      	lsls	r2, r2, #19
 8009bf2:	d505      	bpl.n	8009c00 <__sflush_r+0x80>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	d102      	bne.n	8009bfe <__sflush_r+0x7e>
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d100      	bne.n	8009c00 <__sflush_r+0x80>
 8009bfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c02:	602e      	str	r6, [r5, #0]
 8009c04:	2900      	cmp	r1, #0
 8009c06:	d017      	beq.n	8009c38 <__sflush_r+0xb8>
 8009c08:	0023      	movs	r3, r4
 8009c0a:	3344      	adds	r3, #68	@ 0x44
 8009c0c:	4299      	cmp	r1, r3
 8009c0e:	d002      	beq.n	8009c16 <__sflush_r+0x96>
 8009c10:	0028      	movs	r0, r5
 8009c12:	f7ff f9b5 	bl	8008f80 <_free_r>
 8009c16:	2300      	movs	r3, #0
 8009c18:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c1a:	e00d      	b.n	8009c38 <__sflush_r+0xb8>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	0028      	movs	r0, r5
 8009c20:	47b8      	blx	r7
 8009c22:	0002      	movs	r2, r0
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d1c6      	bne.n	8009bb6 <__sflush_r+0x36>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0c3      	beq.n	8009bb6 <__sflush_r+0x36>
 8009c2e:	2b1d      	cmp	r3, #29
 8009c30:	d001      	beq.n	8009c36 <__sflush_r+0xb6>
 8009c32:	2b16      	cmp	r3, #22
 8009c34:	d11a      	bne.n	8009c6c <__sflush_r+0xec>
 8009c36:	602e      	str	r6, [r5, #0]
 8009c38:	2000      	movs	r0, #0
 8009c3a:	e01e      	b.n	8009c7a <__sflush_r+0xfa>
 8009c3c:	690e      	ldr	r6, [r1, #16]
 8009c3e:	2e00      	cmp	r6, #0
 8009c40:	d0fa      	beq.n	8009c38 <__sflush_r+0xb8>
 8009c42:	680f      	ldr	r7, [r1, #0]
 8009c44:	600e      	str	r6, [r1, #0]
 8009c46:	1bba      	subs	r2, r7, r6
 8009c48:	9201      	str	r2, [sp, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	079b      	lsls	r3, r3, #30
 8009c4e:	d100      	bne.n	8009c52 <__sflush_r+0xd2>
 8009c50:	694a      	ldr	r2, [r1, #20]
 8009c52:	60a2      	str	r2, [r4, #8]
 8009c54:	9b01      	ldr	r3, [sp, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	ddee      	ble.n	8009c38 <__sflush_r+0xb8>
 8009c5a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009c5c:	0032      	movs	r2, r6
 8009c5e:	001f      	movs	r7, r3
 8009c60:	0028      	movs	r0, r5
 8009c62:	9b01      	ldr	r3, [sp, #4]
 8009c64:	6a21      	ldr	r1, [r4, #32]
 8009c66:	47b8      	blx	r7
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	dc07      	bgt.n	8009c7c <__sflush_r+0xfc>
 8009c6c:	89a2      	ldrh	r2, [r4, #12]
 8009c6e:	2340      	movs	r3, #64	@ 0x40
 8009c70:	2001      	movs	r0, #1
 8009c72:	4313      	orrs	r3, r2
 8009c74:	b21b      	sxth	r3, r3
 8009c76:	81a3      	strh	r3, [r4, #12]
 8009c78:	4240      	negs	r0, r0
 8009c7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c7c:	9b01      	ldr	r3, [sp, #4]
 8009c7e:	1836      	adds	r6, r6, r0
 8009c80:	1a1b      	subs	r3, r3, r0
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	e7e6      	b.n	8009c54 <__sflush_r+0xd4>
 8009c86:	46c0      	nop			@ (mov r8, r8)
 8009c88:	20400001 	.word	0x20400001

08009c8c <_fflush_r>:
 8009c8c:	690b      	ldr	r3, [r1, #16]
 8009c8e:	b570      	push	{r4, r5, r6, lr}
 8009c90:	0005      	movs	r5, r0
 8009c92:	000c      	movs	r4, r1
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <_fflush_r+0x12>
 8009c98:	2500      	movs	r5, #0
 8009c9a:	0028      	movs	r0, r5
 8009c9c:	bd70      	pop	{r4, r5, r6, pc}
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d004      	beq.n	8009cac <_fflush_r+0x20>
 8009ca2:	6a03      	ldr	r3, [r0, #32]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <_fflush_r+0x20>
 8009ca8:	f7fe f982 	bl	8007fb0 <__sinit>
 8009cac:	220c      	movs	r2, #12
 8009cae:	5ea3      	ldrsh	r3, [r4, r2]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0f1      	beq.n	8009c98 <_fflush_r+0xc>
 8009cb4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cb6:	07d2      	lsls	r2, r2, #31
 8009cb8:	d404      	bmi.n	8009cc4 <_fflush_r+0x38>
 8009cba:	059b      	lsls	r3, r3, #22
 8009cbc:	d402      	bmi.n	8009cc4 <_fflush_r+0x38>
 8009cbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cc0:	f7fe fad3 	bl	800826a <__retarget_lock_acquire_recursive>
 8009cc4:	0028      	movs	r0, r5
 8009cc6:	0021      	movs	r1, r4
 8009cc8:	f7ff ff5a 	bl	8009b80 <__sflush_r>
 8009ccc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cce:	0005      	movs	r5, r0
 8009cd0:	07db      	lsls	r3, r3, #31
 8009cd2:	d4e2      	bmi.n	8009c9a <_fflush_r+0xe>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	059b      	lsls	r3, r3, #22
 8009cd8:	d4df      	bmi.n	8009c9a <_fflush_r+0xe>
 8009cda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cdc:	f7fe fac6 	bl	800826c <__retarget_lock_release_recursive>
 8009ce0:	e7db      	b.n	8009c9a <_fflush_r+0xe>

08009ce2 <memmove>:
 8009ce2:	b510      	push	{r4, lr}
 8009ce4:	4288      	cmp	r0, r1
 8009ce6:	d902      	bls.n	8009cee <memmove+0xc>
 8009ce8:	188b      	adds	r3, r1, r2
 8009cea:	4298      	cmp	r0, r3
 8009cec:	d308      	bcc.n	8009d00 <memmove+0x1e>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d007      	beq.n	8009d04 <memmove+0x22>
 8009cf4:	5ccc      	ldrb	r4, [r1, r3]
 8009cf6:	54c4      	strb	r4, [r0, r3]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	e7f9      	b.n	8009cf0 <memmove+0xe>
 8009cfc:	5c8b      	ldrb	r3, [r1, r2]
 8009cfe:	5483      	strb	r3, [r0, r2]
 8009d00:	3a01      	subs	r2, #1
 8009d02:	d2fb      	bcs.n	8009cfc <memmove+0x1a>
 8009d04:	bd10      	pop	{r4, pc}
	...

08009d08 <_sbrk_r>:
 8009d08:	2300      	movs	r3, #0
 8009d0a:	b570      	push	{r4, r5, r6, lr}
 8009d0c:	4d06      	ldr	r5, [pc, #24]	@ (8009d28 <_sbrk_r+0x20>)
 8009d0e:	0004      	movs	r4, r0
 8009d10:	0008      	movs	r0, r1
 8009d12:	602b      	str	r3, [r5, #0]
 8009d14:	f7fb f934 	bl	8004f80 <_sbrk>
 8009d18:	1c43      	adds	r3, r0, #1
 8009d1a:	d103      	bne.n	8009d24 <_sbrk_r+0x1c>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d000      	beq.n	8009d24 <_sbrk_r+0x1c>
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	bd70      	pop	{r4, r5, r6, pc}
 8009d26:	46c0      	nop			@ (mov r8, r8)
 8009d28:	20000a34 	.word	0x20000a34

08009d2c <__assert_func>:
 8009d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009d2e:	0014      	movs	r4, r2
 8009d30:	001a      	movs	r2, r3
 8009d32:	4b09      	ldr	r3, [pc, #36]	@ (8009d58 <__assert_func+0x2c>)
 8009d34:	0005      	movs	r5, r0
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	000e      	movs	r6, r1
 8009d3a:	68d8      	ldr	r0, [r3, #12]
 8009d3c:	4b07      	ldr	r3, [pc, #28]	@ (8009d5c <__assert_func+0x30>)
 8009d3e:	2c00      	cmp	r4, #0
 8009d40:	d101      	bne.n	8009d46 <__assert_func+0x1a>
 8009d42:	4b07      	ldr	r3, [pc, #28]	@ (8009d60 <__assert_func+0x34>)
 8009d44:	001c      	movs	r4, r3
 8009d46:	4907      	ldr	r1, [pc, #28]	@ (8009d64 <__assert_func+0x38>)
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	9402      	str	r4, [sp, #8]
 8009d4c:	002b      	movs	r3, r5
 8009d4e:	9600      	str	r6, [sp, #0]
 8009d50:	f000 f886 	bl	8009e60 <fiprintf>
 8009d54:	f000 f894 	bl	8009e80 <abort>
 8009d58:	20000050 	.word	0x20000050
 8009d5c:	0800a729 	.word	0x0800a729
 8009d60:	0800a5f5 	.word	0x0800a5f5
 8009d64:	0800a736 	.word	0x0800a736

08009d68 <_calloc_r>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	0c0b      	lsrs	r3, r1, #16
 8009d6c:	0c15      	lsrs	r5, r2, #16
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d11e      	bne.n	8009db0 <_calloc_r+0x48>
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	d10c      	bne.n	8009d90 <_calloc_r+0x28>
 8009d76:	b289      	uxth	r1, r1
 8009d78:	b294      	uxth	r4, r2
 8009d7a:	434c      	muls	r4, r1
 8009d7c:	0021      	movs	r1, r4
 8009d7e:	f7ff f975 	bl	800906c <_malloc_r>
 8009d82:	1e05      	subs	r5, r0, #0
 8009d84:	d01b      	beq.n	8009dbe <_calloc_r+0x56>
 8009d86:	0022      	movs	r2, r4
 8009d88:	2100      	movs	r1, #0
 8009d8a:	f7fe f9e9 	bl	8008160 <memset>
 8009d8e:	e016      	b.n	8009dbe <_calloc_r+0x56>
 8009d90:	1c2b      	adds	r3, r5, #0
 8009d92:	1c0c      	adds	r4, r1, #0
 8009d94:	b289      	uxth	r1, r1
 8009d96:	b292      	uxth	r2, r2
 8009d98:	434a      	muls	r2, r1
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	b2a1      	uxth	r1, r4
 8009d9e:	4359      	muls	r1, r3
 8009da0:	0c14      	lsrs	r4, r2, #16
 8009da2:	190c      	adds	r4, r1, r4
 8009da4:	0c23      	lsrs	r3, r4, #16
 8009da6:	d107      	bne.n	8009db8 <_calloc_r+0x50>
 8009da8:	0424      	lsls	r4, r4, #16
 8009daa:	b292      	uxth	r2, r2
 8009dac:	4314      	orrs	r4, r2
 8009dae:	e7e5      	b.n	8009d7c <_calloc_r+0x14>
 8009db0:	2d00      	cmp	r5, #0
 8009db2:	d101      	bne.n	8009db8 <_calloc_r+0x50>
 8009db4:	1c14      	adds	r4, r2, #0
 8009db6:	e7ed      	b.n	8009d94 <_calloc_r+0x2c>
 8009db8:	230c      	movs	r3, #12
 8009dba:	2500      	movs	r5, #0
 8009dbc:	6003      	str	r3, [r0, #0]
 8009dbe:	0028      	movs	r0, r5
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}

08009dc2 <__ascii_mbtowc>:
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	d100      	bne.n	8009dca <__ascii_mbtowc+0x8>
 8009dc8:	a901      	add	r1, sp, #4
 8009dca:	1e10      	subs	r0, r2, #0
 8009dcc:	d006      	beq.n	8009ddc <__ascii_mbtowc+0x1a>
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d006      	beq.n	8009de0 <__ascii_mbtowc+0x1e>
 8009dd2:	7813      	ldrb	r3, [r2, #0]
 8009dd4:	600b      	str	r3, [r1, #0]
 8009dd6:	7810      	ldrb	r0, [r2, #0]
 8009dd8:	1e43      	subs	r3, r0, #1
 8009dda:	4198      	sbcs	r0, r3
 8009ddc:	b002      	add	sp, #8
 8009dde:	4770      	bx	lr
 8009de0:	2002      	movs	r0, #2
 8009de2:	4240      	negs	r0, r0
 8009de4:	e7fa      	b.n	8009ddc <__ascii_mbtowc+0x1a>

08009de6 <_realloc_r>:
 8009de6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009de8:	0006      	movs	r6, r0
 8009dea:	000c      	movs	r4, r1
 8009dec:	0015      	movs	r5, r2
 8009dee:	2900      	cmp	r1, #0
 8009df0:	d105      	bne.n	8009dfe <_realloc_r+0x18>
 8009df2:	0011      	movs	r1, r2
 8009df4:	f7ff f93a 	bl	800906c <_malloc_r>
 8009df8:	0004      	movs	r4, r0
 8009dfa:	0020      	movs	r0, r4
 8009dfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009dfe:	2a00      	cmp	r2, #0
 8009e00:	d103      	bne.n	8009e0a <_realloc_r+0x24>
 8009e02:	f7ff f8bd 	bl	8008f80 <_free_r>
 8009e06:	002c      	movs	r4, r5
 8009e08:	e7f7      	b.n	8009dfa <_realloc_r+0x14>
 8009e0a:	f000 f840 	bl	8009e8e <_malloc_usable_size_r>
 8009e0e:	0007      	movs	r7, r0
 8009e10:	4285      	cmp	r5, r0
 8009e12:	d802      	bhi.n	8009e1a <_realloc_r+0x34>
 8009e14:	0843      	lsrs	r3, r0, #1
 8009e16:	42ab      	cmp	r3, r5
 8009e18:	d3ef      	bcc.n	8009dfa <_realloc_r+0x14>
 8009e1a:	0029      	movs	r1, r5
 8009e1c:	0030      	movs	r0, r6
 8009e1e:	f7ff f925 	bl	800906c <_malloc_r>
 8009e22:	9001      	str	r0, [sp, #4]
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d101      	bne.n	8009e2c <_realloc_r+0x46>
 8009e28:	9c01      	ldr	r4, [sp, #4]
 8009e2a:	e7e6      	b.n	8009dfa <_realloc_r+0x14>
 8009e2c:	002a      	movs	r2, r5
 8009e2e:	42bd      	cmp	r5, r7
 8009e30:	d900      	bls.n	8009e34 <_realloc_r+0x4e>
 8009e32:	003a      	movs	r2, r7
 8009e34:	0021      	movs	r1, r4
 8009e36:	9801      	ldr	r0, [sp, #4]
 8009e38:	f7fe fa24 	bl	8008284 <memcpy>
 8009e3c:	0021      	movs	r1, r4
 8009e3e:	0030      	movs	r0, r6
 8009e40:	f7ff f89e 	bl	8008f80 <_free_r>
 8009e44:	e7f0      	b.n	8009e28 <_realloc_r+0x42>

08009e46 <__ascii_wctomb>:
 8009e46:	0003      	movs	r3, r0
 8009e48:	1e08      	subs	r0, r1, #0
 8009e4a:	d005      	beq.n	8009e58 <__ascii_wctomb+0x12>
 8009e4c:	2aff      	cmp	r2, #255	@ 0xff
 8009e4e:	d904      	bls.n	8009e5a <__ascii_wctomb+0x14>
 8009e50:	228a      	movs	r2, #138	@ 0x8a
 8009e52:	2001      	movs	r0, #1
 8009e54:	601a      	str	r2, [r3, #0]
 8009e56:	4240      	negs	r0, r0
 8009e58:	4770      	bx	lr
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	700a      	strb	r2, [r1, #0]
 8009e5e:	e7fb      	b.n	8009e58 <__ascii_wctomb+0x12>

08009e60 <fiprintf>:
 8009e60:	b40e      	push	{r1, r2, r3}
 8009e62:	b517      	push	{r0, r1, r2, r4, lr}
 8009e64:	4c05      	ldr	r4, [pc, #20]	@ (8009e7c <fiprintf+0x1c>)
 8009e66:	ab05      	add	r3, sp, #20
 8009e68:	cb04      	ldmia	r3!, {r2}
 8009e6a:	0001      	movs	r1, r0
 8009e6c:	6820      	ldr	r0, [r4, #0]
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	f000 f83c 	bl	8009eec <_vfiprintf_r>
 8009e74:	bc1e      	pop	{r1, r2, r3, r4}
 8009e76:	bc08      	pop	{r3}
 8009e78:	b003      	add	sp, #12
 8009e7a:	4718      	bx	r3
 8009e7c:	20000050 	.word	0x20000050

08009e80 <abort>:
 8009e80:	2006      	movs	r0, #6
 8009e82:	b510      	push	{r4, lr}
 8009e84:	f000 fa18 	bl	800a2b8 <raise>
 8009e88:	2001      	movs	r0, #1
 8009e8a:	f7fb f84d 	bl	8004f28 <_exit>

08009e8e <_malloc_usable_size_r>:
 8009e8e:	1f0b      	subs	r3, r1, #4
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	1f18      	subs	r0, r3, #4
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	da01      	bge.n	8009e9c <_malloc_usable_size_r+0xe>
 8009e98:	580b      	ldr	r3, [r1, r0]
 8009e9a:	18c0      	adds	r0, r0, r3
 8009e9c:	4770      	bx	lr

08009e9e <__sfputc_r>:
 8009e9e:	6893      	ldr	r3, [r2, #8]
 8009ea0:	b510      	push	{r4, lr}
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	6093      	str	r3, [r2, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	da04      	bge.n	8009eb4 <__sfputc_r+0x16>
 8009eaa:	6994      	ldr	r4, [r2, #24]
 8009eac:	42a3      	cmp	r3, r4
 8009eae:	db07      	blt.n	8009ec0 <__sfputc_r+0x22>
 8009eb0:	290a      	cmp	r1, #10
 8009eb2:	d005      	beq.n	8009ec0 <__sfputc_r+0x22>
 8009eb4:	6813      	ldr	r3, [r2, #0]
 8009eb6:	1c58      	adds	r0, r3, #1
 8009eb8:	6010      	str	r0, [r2, #0]
 8009eba:	7019      	strb	r1, [r3, #0]
 8009ebc:	0008      	movs	r0, r1
 8009ebe:	bd10      	pop	{r4, pc}
 8009ec0:	f000 f930 	bl	800a124 <__swbuf_r>
 8009ec4:	0001      	movs	r1, r0
 8009ec6:	e7f9      	b.n	8009ebc <__sfputc_r+0x1e>

08009ec8 <__sfputs_r>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	0006      	movs	r6, r0
 8009ecc:	000f      	movs	r7, r1
 8009ece:	0014      	movs	r4, r2
 8009ed0:	18d5      	adds	r5, r2, r3
 8009ed2:	42ac      	cmp	r4, r5
 8009ed4:	d101      	bne.n	8009eda <__sfputs_r+0x12>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	e007      	b.n	8009eea <__sfputs_r+0x22>
 8009eda:	7821      	ldrb	r1, [r4, #0]
 8009edc:	003a      	movs	r2, r7
 8009ede:	0030      	movs	r0, r6
 8009ee0:	f7ff ffdd 	bl	8009e9e <__sfputc_r>
 8009ee4:	3401      	adds	r4, #1
 8009ee6:	1c43      	adds	r3, r0, #1
 8009ee8:	d1f3      	bne.n	8009ed2 <__sfputs_r+0xa>
 8009eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009eec <_vfiprintf_r>:
 8009eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eee:	b0a1      	sub	sp, #132	@ 0x84
 8009ef0:	000f      	movs	r7, r1
 8009ef2:	0015      	movs	r5, r2
 8009ef4:	001e      	movs	r6, r3
 8009ef6:	9003      	str	r0, [sp, #12]
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d004      	beq.n	8009f06 <_vfiprintf_r+0x1a>
 8009efc:	6a03      	ldr	r3, [r0, #32]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <_vfiprintf_r+0x1a>
 8009f02:	f7fe f855 	bl	8007fb0 <__sinit>
 8009f06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f08:	07db      	lsls	r3, r3, #31
 8009f0a:	d405      	bmi.n	8009f18 <_vfiprintf_r+0x2c>
 8009f0c:	89bb      	ldrh	r3, [r7, #12]
 8009f0e:	059b      	lsls	r3, r3, #22
 8009f10:	d402      	bmi.n	8009f18 <_vfiprintf_r+0x2c>
 8009f12:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009f14:	f7fe f9a9 	bl	800826a <__retarget_lock_acquire_recursive>
 8009f18:	89bb      	ldrh	r3, [r7, #12]
 8009f1a:	071b      	lsls	r3, r3, #28
 8009f1c:	d502      	bpl.n	8009f24 <_vfiprintf_r+0x38>
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d113      	bne.n	8009f4c <_vfiprintf_r+0x60>
 8009f24:	0039      	movs	r1, r7
 8009f26:	9803      	ldr	r0, [sp, #12]
 8009f28:	f000 f93e 	bl	800a1a8 <__swsetup_r>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d00d      	beq.n	8009f4c <_vfiprintf_r+0x60>
 8009f30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f32:	07db      	lsls	r3, r3, #31
 8009f34:	d503      	bpl.n	8009f3e <_vfiprintf_r+0x52>
 8009f36:	2001      	movs	r0, #1
 8009f38:	4240      	negs	r0, r0
 8009f3a:	b021      	add	sp, #132	@ 0x84
 8009f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f3e:	89bb      	ldrh	r3, [r7, #12]
 8009f40:	059b      	lsls	r3, r3, #22
 8009f42:	d4f8      	bmi.n	8009f36 <_vfiprintf_r+0x4a>
 8009f44:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009f46:	f7fe f991 	bl	800826c <__retarget_lock_release_recursive>
 8009f4a:	e7f4      	b.n	8009f36 <_vfiprintf_r+0x4a>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	ac08      	add	r4, sp, #32
 8009f50:	6163      	str	r3, [r4, #20]
 8009f52:	3320      	adds	r3, #32
 8009f54:	7663      	strb	r3, [r4, #25]
 8009f56:	3310      	adds	r3, #16
 8009f58:	76a3      	strb	r3, [r4, #26]
 8009f5a:	9607      	str	r6, [sp, #28]
 8009f5c:	002e      	movs	r6, r5
 8009f5e:	7833      	ldrb	r3, [r6, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <_vfiprintf_r+0x7c>
 8009f64:	2b25      	cmp	r3, #37	@ 0x25
 8009f66:	d148      	bne.n	8009ffa <_vfiprintf_r+0x10e>
 8009f68:	1b73      	subs	r3, r6, r5
 8009f6a:	9305      	str	r3, [sp, #20]
 8009f6c:	42ae      	cmp	r6, r5
 8009f6e:	d00b      	beq.n	8009f88 <_vfiprintf_r+0x9c>
 8009f70:	002a      	movs	r2, r5
 8009f72:	0039      	movs	r1, r7
 8009f74:	9803      	ldr	r0, [sp, #12]
 8009f76:	f7ff ffa7 	bl	8009ec8 <__sfputs_r>
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	d100      	bne.n	8009f80 <_vfiprintf_r+0x94>
 8009f7e:	e0ae      	b.n	800a0de <_vfiprintf_r+0x1f2>
 8009f80:	6963      	ldr	r3, [r4, #20]
 8009f82:	9a05      	ldr	r2, [sp, #20]
 8009f84:	189b      	adds	r3, r3, r2
 8009f86:	6163      	str	r3, [r4, #20]
 8009f88:	7833      	ldrb	r3, [r6, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d100      	bne.n	8009f90 <_vfiprintf_r+0xa4>
 8009f8e:	e0a6      	b.n	800a0de <_vfiprintf_r+0x1f2>
 8009f90:	2201      	movs	r2, #1
 8009f92:	2300      	movs	r3, #0
 8009f94:	4252      	negs	r2, r2
 8009f96:	6062      	str	r2, [r4, #4]
 8009f98:	a904      	add	r1, sp, #16
 8009f9a:	3254      	adds	r2, #84	@ 0x54
 8009f9c:	1852      	adds	r2, r2, r1
 8009f9e:	1c75      	adds	r5, r6, #1
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	60e3      	str	r3, [r4, #12]
 8009fa4:	60a3      	str	r3, [r4, #8]
 8009fa6:	7013      	strb	r3, [r2, #0]
 8009fa8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009faa:	4b59      	ldr	r3, [pc, #356]	@ (800a110 <_vfiprintf_r+0x224>)
 8009fac:	2205      	movs	r2, #5
 8009fae:	0018      	movs	r0, r3
 8009fb0:	7829      	ldrb	r1, [r5, #0]
 8009fb2:	9305      	str	r3, [sp, #20]
 8009fb4:	f7fe f95b 	bl	800826e <memchr>
 8009fb8:	1c6e      	adds	r6, r5, #1
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d11f      	bne.n	8009ffe <_vfiprintf_r+0x112>
 8009fbe:	6822      	ldr	r2, [r4, #0]
 8009fc0:	06d3      	lsls	r3, r2, #27
 8009fc2:	d504      	bpl.n	8009fce <_vfiprintf_r+0xe2>
 8009fc4:	2353      	movs	r3, #83	@ 0x53
 8009fc6:	a904      	add	r1, sp, #16
 8009fc8:	185b      	adds	r3, r3, r1
 8009fca:	2120      	movs	r1, #32
 8009fcc:	7019      	strb	r1, [r3, #0]
 8009fce:	0713      	lsls	r3, r2, #28
 8009fd0:	d504      	bpl.n	8009fdc <_vfiprintf_r+0xf0>
 8009fd2:	2353      	movs	r3, #83	@ 0x53
 8009fd4:	a904      	add	r1, sp, #16
 8009fd6:	185b      	adds	r3, r3, r1
 8009fd8:	212b      	movs	r1, #43	@ 0x2b
 8009fda:	7019      	strb	r1, [r3, #0]
 8009fdc:	782b      	ldrb	r3, [r5, #0]
 8009fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fe0:	d016      	beq.n	800a010 <_vfiprintf_r+0x124>
 8009fe2:	002e      	movs	r6, r5
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	200a      	movs	r0, #10
 8009fe8:	68e3      	ldr	r3, [r4, #12]
 8009fea:	7832      	ldrb	r2, [r6, #0]
 8009fec:	1c75      	adds	r5, r6, #1
 8009fee:	3a30      	subs	r2, #48	@ 0x30
 8009ff0:	2a09      	cmp	r2, #9
 8009ff2:	d950      	bls.n	800a096 <_vfiprintf_r+0x1aa>
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	d111      	bne.n	800a01c <_vfiprintf_r+0x130>
 8009ff8:	e017      	b.n	800a02a <_vfiprintf_r+0x13e>
 8009ffa:	3601      	adds	r6, #1
 8009ffc:	e7af      	b.n	8009f5e <_vfiprintf_r+0x72>
 8009ffe:	9b05      	ldr	r3, [sp, #20]
 800a000:	6822      	ldr	r2, [r4, #0]
 800a002:	1ac0      	subs	r0, r0, r3
 800a004:	2301      	movs	r3, #1
 800a006:	4083      	lsls	r3, r0
 800a008:	4313      	orrs	r3, r2
 800a00a:	0035      	movs	r5, r6
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	e7cc      	b.n	8009faa <_vfiprintf_r+0xbe>
 800a010:	9b07      	ldr	r3, [sp, #28]
 800a012:	1d19      	adds	r1, r3, #4
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	9107      	str	r1, [sp, #28]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	db01      	blt.n	800a020 <_vfiprintf_r+0x134>
 800a01c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a01e:	e004      	b.n	800a02a <_vfiprintf_r+0x13e>
 800a020:	425b      	negs	r3, r3
 800a022:	60e3      	str	r3, [r4, #12]
 800a024:	2302      	movs	r3, #2
 800a026:	4313      	orrs	r3, r2
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	7833      	ldrb	r3, [r6, #0]
 800a02c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a02e:	d10c      	bne.n	800a04a <_vfiprintf_r+0x15e>
 800a030:	7873      	ldrb	r3, [r6, #1]
 800a032:	2b2a      	cmp	r3, #42	@ 0x2a
 800a034:	d134      	bne.n	800a0a0 <_vfiprintf_r+0x1b4>
 800a036:	9b07      	ldr	r3, [sp, #28]
 800a038:	3602      	adds	r6, #2
 800a03a:	1d1a      	adds	r2, r3, #4
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	9207      	str	r2, [sp, #28]
 800a040:	2b00      	cmp	r3, #0
 800a042:	da01      	bge.n	800a048 <_vfiprintf_r+0x15c>
 800a044:	2301      	movs	r3, #1
 800a046:	425b      	negs	r3, r3
 800a048:	9309      	str	r3, [sp, #36]	@ 0x24
 800a04a:	4d32      	ldr	r5, [pc, #200]	@ (800a114 <_vfiprintf_r+0x228>)
 800a04c:	2203      	movs	r2, #3
 800a04e:	0028      	movs	r0, r5
 800a050:	7831      	ldrb	r1, [r6, #0]
 800a052:	f7fe f90c 	bl	800826e <memchr>
 800a056:	2800      	cmp	r0, #0
 800a058:	d006      	beq.n	800a068 <_vfiprintf_r+0x17c>
 800a05a:	2340      	movs	r3, #64	@ 0x40
 800a05c:	1b40      	subs	r0, r0, r5
 800a05e:	4083      	lsls	r3, r0
 800a060:	6822      	ldr	r2, [r4, #0]
 800a062:	3601      	adds	r6, #1
 800a064:	4313      	orrs	r3, r2
 800a066:	6023      	str	r3, [r4, #0]
 800a068:	7831      	ldrb	r1, [r6, #0]
 800a06a:	2206      	movs	r2, #6
 800a06c:	482a      	ldr	r0, [pc, #168]	@ (800a118 <_vfiprintf_r+0x22c>)
 800a06e:	1c75      	adds	r5, r6, #1
 800a070:	7621      	strb	r1, [r4, #24]
 800a072:	f7fe f8fc 	bl	800826e <memchr>
 800a076:	2800      	cmp	r0, #0
 800a078:	d040      	beq.n	800a0fc <_vfiprintf_r+0x210>
 800a07a:	4b28      	ldr	r3, [pc, #160]	@ (800a11c <_vfiprintf_r+0x230>)
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d122      	bne.n	800a0c6 <_vfiprintf_r+0x1da>
 800a080:	2207      	movs	r2, #7
 800a082:	9b07      	ldr	r3, [sp, #28]
 800a084:	3307      	adds	r3, #7
 800a086:	4393      	bics	r3, r2
 800a088:	3308      	adds	r3, #8
 800a08a:	9307      	str	r3, [sp, #28]
 800a08c:	6963      	ldr	r3, [r4, #20]
 800a08e:	9a04      	ldr	r2, [sp, #16]
 800a090:	189b      	adds	r3, r3, r2
 800a092:	6163      	str	r3, [r4, #20]
 800a094:	e762      	b.n	8009f5c <_vfiprintf_r+0x70>
 800a096:	4343      	muls	r3, r0
 800a098:	002e      	movs	r6, r5
 800a09a:	2101      	movs	r1, #1
 800a09c:	189b      	adds	r3, r3, r2
 800a09e:	e7a4      	b.n	8009fea <_vfiprintf_r+0xfe>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	200a      	movs	r0, #10
 800a0a4:	0019      	movs	r1, r3
 800a0a6:	3601      	adds	r6, #1
 800a0a8:	6063      	str	r3, [r4, #4]
 800a0aa:	7832      	ldrb	r2, [r6, #0]
 800a0ac:	1c75      	adds	r5, r6, #1
 800a0ae:	3a30      	subs	r2, #48	@ 0x30
 800a0b0:	2a09      	cmp	r2, #9
 800a0b2:	d903      	bls.n	800a0bc <_vfiprintf_r+0x1d0>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d0c8      	beq.n	800a04a <_vfiprintf_r+0x15e>
 800a0b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0ba:	e7c6      	b.n	800a04a <_vfiprintf_r+0x15e>
 800a0bc:	4341      	muls	r1, r0
 800a0be:	002e      	movs	r6, r5
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	1889      	adds	r1, r1, r2
 800a0c4:	e7f1      	b.n	800a0aa <_vfiprintf_r+0x1be>
 800a0c6:	aa07      	add	r2, sp, #28
 800a0c8:	9200      	str	r2, [sp, #0]
 800a0ca:	0021      	movs	r1, r4
 800a0cc:	003a      	movs	r2, r7
 800a0ce:	4b14      	ldr	r3, [pc, #80]	@ (800a120 <_vfiprintf_r+0x234>)
 800a0d0:	9803      	ldr	r0, [sp, #12]
 800a0d2:	f7fd fb23 	bl	800771c <_printf_float>
 800a0d6:	9004      	str	r0, [sp, #16]
 800a0d8:	9b04      	ldr	r3, [sp, #16]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	d1d6      	bne.n	800a08c <_vfiprintf_r+0x1a0>
 800a0de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0e0:	07db      	lsls	r3, r3, #31
 800a0e2:	d405      	bmi.n	800a0f0 <_vfiprintf_r+0x204>
 800a0e4:	89bb      	ldrh	r3, [r7, #12]
 800a0e6:	059b      	lsls	r3, r3, #22
 800a0e8:	d402      	bmi.n	800a0f0 <_vfiprintf_r+0x204>
 800a0ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a0ec:	f7fe f8be 	bl	800826c <__retarget_lock_release_recursive>
 800a0f0:	89bb      	ldrh	r3, [r7, #12]
 800a0f2:	065b      	lsls	r3, r3, #25
 800a0f4:	d500      	bpl.n	800a0f8 <_vfiprintf_r+0x20c>
 800a0f6:	e71e      	b.n	8009f36 <_vfiprintf_r+0x4a>
 800a0f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a0fa:	e71e      	b.n	8009f3a <_vfiprintf_r+0x4e>
 800a0fc:	aa07      	add	r2, sp, #28
 800a0fe:	9200      	str	r2, [sp, #0]
 800a100:	0021      	movs	r1, r4
 800a102:	003a      	movs	r2, r7
 800a104:	4b06      	ldr	r3, [pc, #24]	@ (800a120 <_vfiprintf_r+0x234>)
 800a106:	9803      	ldr	r0, [sp, #12]
 800a108:	f7fd fdb6 	bl	8007c78 <_printf_i>
 800a10c:	e7e3      	b.n	800a0d6 <_vfiprintf_r+0x1ea>
 800a10e:	46c0      	nop			@ (mov r8, r8)
 800a110:	0800a710 	.word	0x0800a710
 800a114:	0800a716 	.word	0x0800a716
 800a118:	0800a71a 	.word	0x0800a71a
 800a11c:	0800771d 	.word	0x0800771d
 800a120:	08009ec9 	.word	0x08009ec9

0800a124 <__swbuf_r>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	0006      	movs	r6, r0
 800a128:	000d      	movs	r5, r1
 800a12a:	0014      	movs	r4, r2
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d004      	beq.n	800a13a <__swbuf_r+0x16>
 800a130:	6a03      	ldr	r3, [r0, #32]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <__swbuf_r+0x16>
 800a136:	f7fd ff3b 	bl	8007fb0 <__sinit>
 800a13a:	69a3      	ldr	r3, [r4, #24]
 800a13c:	60a3      	str	r3, [r4, #8]
 800a13e:	89a3      	ldrh	r3, [r4, #12]
 800a140:	071b      	lsls	r3, r3, #28
 800a142:	d502      	bpl.n	800a14a <__swbuf_r+0x26>
 800a144:	6923      	ldr	r3, [r4, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d109      	bne.n	800a15e <__swbuf_r+0x3a>
 800a14a:	0021      	movs	r1, r4
 800a14c:	0030      	movs	r0, r6
 800a14e:	f000 f82b 	bl	800a1a8 <__swsetup_r>
 800a152:	2800      	cmp	r0, #0
 800a154:	d003      	beq.n	800a15e <__swbuf_r+0x3a>
 800a156:	2501      	movs	r5, #1
 800a158:	426d      	negs	r5, r5
 800a15a:	0028      	movs	r0, r5
 800a15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a15e:	6923      	ldr	r3, [r4, #16]
 800a160:	6820      	ldr	r0, [r4, #0]
 800a162:	b2ef      	uxtb	r7, r5
 800a164:	1ac0      	subs	r0, r0, r3
 800a166:	6963      	ldr	r3, [r4, #20]
 800a168:	b2ed      	uxtb	r5, r5
 800a16a:	4283      	cmp	r3, r0
 800a16c:	dc05      	bgt.n	800a17a <__swbuf_r+0x56>
 800a16e:	0021      	movs	r1, r4
 800a170:	0030      	movs	r0, r6
 800a172:	f7ff fd8b 	bl	8009c8c <_fflush_r>
 800a176:	2800      	cmp	r0, #0
 800a178:	d1ed      	bne.n	800a156 <__swbuf_r+0x32>
 800a17a:	68a3      	ldr	r3, [r4, #8]
 800a17c:	3001      	adds	r0, #1
 800a17e:	3b01      	subs	r3, #1
 800a180:	60a3      	str	r3, [r4, #8]
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	6022      	str	r2, [r4, #0]
 800a188:	701f      	strb	r7, [r3, #0]
 800a18a:	6963      	ldr	r3, [r4, #20]
 800a18c:	4283      	cmp	r3, r0
 800a18e:	d004      	beq.n	800a19a <__swbuf_r+0x76>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	07db      	lsls	r3, r3, #31
 800a194:	d5e1      	bpl.n	800a15a <__swbuf_r+0x36>
 800a196:	2d0a      	cmp	r5, #10
 800a198:	d1df      	bne.n	800a15a <__swbuf_r+0x36>
 800a19a:	0021      	movs	r1, r4
 800a19c:	0030      	movs	r0, r6
 800a19e:	f7ff fd75 	bl	8009c8c <_fflush_r>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d0d9      	beq.n	800a15a <__swbuf_r+0x36>
 800a1a6:	e7d6      	b.n	800a156 <__swbuf_r+0x32>

0800a1a8 <__swsetup_r>:
 800a1a8:	4b2d      	ldr	r3, [pc, #180]	@ (800a260 <__swsetup_r+0xb8>)
 800a1aa:	b570      	push	{r4, r5, r6, lr}
 800a1ac:	0005      	movs	r5, r0
 800a1ae:	6818      	ldr	r0, [r3, #0]
 800a1b0:	000c      	movs	r4, r1
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d004      	beq.n	800a1c0 <__swsetup_r+0x18>
 800a1b6:	6a03      	ldr	r3, [r0, #32]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <__swsetup_r+0x18>
 800a1bc:	f7fd fef8 	bl	8007fb0 <__sinit>
 800a1c0:	220c      	movs	r2, #12
 800a1c2:	5ea3      	ldrsh	r3, [r4, r2]
 800a1c4:	071a      	lsls	r2, r3, #28
 800a1c6:	d423      	bmi.n	800a210 <__swsetup_r+0x68>
 800a1c8:	06da      	lsls	r2, r3, #27
 800a1ca:	d407      	bmi.n	800a1dc <__swsetup_r+0x34>
 800a1cc:	2209      	movs	r2, #9
 800a1ce:	602a      	str	r2, [r5, #0]
 800a1d0:	2240      	movs	r2, #64	@ 0x40
 800a1d2:	2001      	movs	r0, #1
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	81a3      	strh	r3, [r4, #12]
 800a1d8:	4240      	negs	r0, r0
 800a1da:	e03a      	b.n	800a252 <__swsetup_r+0xaa>
 800a1dc:	075b      	lsls	r3, r3, #29
 800a1de:	d513      	bpl.n	800a208 <__swsetup_r+0x60>
 800a1e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1e2:	2900      	cmp	r1, #0
 800a1e4:	d008      	beq.n	800a1f8 <__swsetup_r+0x50>
 800a1e6:	0023      	movs	r3, r4
 800a1e8:	3344      	adds	r3, #68	@ 0x44
 800a1ea:	4299      	cmp	r1, r3
 800a1ec:	d002      	beq.n	800a1f4 <__swsetup_r+0x4c>
 800a1ee:	0028      	movs	r0, r5
 800a1f0:	f7fe fec6 	bl	8008f80 <_free_r>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1f8:	2224      	movs	r2, #36	@ 0x24
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	4393      	bics	r3, r2
 800a1fe:	81a3      	strh	r3, [r4, #12]
 800a200:	2300      	movs	r3, #0
 800a202:	6063      	str	r3, [r4, #4]
 800a204:	6923      	ldr	r3, [r4, #16]
 800a206:	6023      	str	r3, [r4, #0]
 800a208:	2308      	movs	r3, #8
 800a20a:	89a2      	ldrh	r2, [r4, #12]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	81a3      	strh	r3, [r4, #12]
 800a210:	6923      	ldr	r3, [r4, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10b      	bne.n	800a22e <__swsetup_r+0x86>
 800a216:	21a0      	movs	r1, #160	@ 0xa0
 800a218:	2280      	movs	r2, #128	@ 0x80
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	0089      	lsls	r1, r1, #2
 800a21e:	0092      	lsls	r2, r2, #2
 800a220:	400b      	ands	r3, r1
 800a222:	4293      	cmp	r3, r2
 800a224:	d003      	beq.n	800a22e <__swsetup_r+0x86>
 800a226:	0021      	movs	r1, r4
 800a228:	0028      	movs	r0, r5
 800a22a:	f000 f88f 	bl	800a34c <__smakebuf_r>
 800a22e:	220c      	movs	r2, #12
 800a230:	5ea3      	ldrsh	r3, [r4, r2]
 800a232:	2101      	movs	r1, #1
 800a234:	001a      	movs	r2, r3
 800a236:	400a      	ands	r2, r1
 800a238:	420b      	tst	r3, r1
 800a23a:	d00b      	beq.n	800a254 <__swsetup_r+0xac>
 800a23c:	2200      	movs	r2, #0
 800a23e:	60a2      	str	r2, [r4, #8]
 800a240:	6962      	ldr	r2, [r4, #20]
 800a242:	4252      	negs	r2, r2
 800a244:	61a2      	str	r2, [r4, #24]
 800a246:	2000      	movs	r0, #0
 800a248:	6922      	ldr	r2, [r4, #16]
 800a24a:	4282      	cmp	r2, r0
 800a24c:	d101      	bne.n	800a252 <__swsetup_r+0xaa>
 800a24e:	061a      	lsls	r2, r3, #24
 800a250:	d4be      	bmi.n	800a1d0 <__swsetup_r+0x28>
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	0799      	lsls	r1, r3, #30
 800a256:	d400      	bmi.n	800a25a <__swsetup_r+0xb2>
 800a258:	6962      	ldr	r2, [r4, #20]
 800a25a:	60a2      	str	r2, [r4, #8]
 800a25c:	e7f3      	b.n	800a246 <__swsetup_r+0x9e>
 800a25e:	46c0      	nop			@ (mov r8, r8)
 800a260:	20000050 	.word	0x20000050

0800a264 <_raise_r>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	0004      	movs	r4, r0
 800a268:	000d      	movs	r5, r1
 800a26a:	291f      	cmp	r1, #31
 800a26c:	d904      	bls.n	800a278 <_raise_r+0x14>
 800a26e:	2316      	movs	r3, #22
 800a270:	6003      	str	r3, [r0, #0]
 800a272:	2001      	movs	r0, #1
 800a274:	4240      	negs	r0, r0
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d004      	beq.n	800a288 <_raise_r+0x24>
 800a27e:	008a      	lsls	r2, r1, #2
 800a280:	189b      	adds	r3, r3, r2
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	2a00      	cmp	r2, #0
 800a286:	d108      	bne.n	800a29a <_raise_r+0x36>
 800a288:	0020      	movs	r0, r4
 800a28a:	f000 f831 	bl	800a2f0 <_getpid_r>
 800a28e:	002a      	movs	r2, r5
 800a290:	0001      	movs	r1, r0
 800a292:	0020      	movs	r0, r4
 800a294:	f000 f81a 	bl	800a2cc <_kill_r>
 800a298:	e7ed      	b.n	800a276 <_raise_r+0x12>
 800a29a:	2a01      	cmp	r2, #1
 800a29c:	d009      	beq.n	800a2b2 <_raise_r+0x4e>
 800a29e:	1c51      	adds	r1, r2, #1
 800a2a0:	d103      	bne.n	800a2aa <_raise_r+0x46>
 800a2a2:	2316      	movs	r3, #22
 800a2a4:	6003      	str	r3, [r0, #0]
 800a2a6:	2001      	movs	r0, #1
 800a2a8:	e7e5      	b.n	800a276 <_raise_r+0x12>
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	0028      	movs	r0, r5
 800a2ae:	6019      	str	r1, [r3, #0]
 800a2b0:	4790      	blx	r2
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	e7df      	b.n	800a276 <_raise_r+0x12>
	...

0800a2b8 <raise>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	4b03      	ldr	r3, [pc, #12]	@ (800a2c8 <raise+0x10>)
 800a2bc:	0001      	movs	r1, r0
 800a2be:	6818      	ldr	r0, [r3, #0]
 800a2c0:	f7ff ffd0 	bl	800a264 <_raise_r>
 800a2c4:	bd10      	pop	{r4, pc}
 800a2c6:	46c0      	nop			@ (mov r8, r8)
 800a2c8:	20000050 	.word	0x20000050

0800a2cc <_kill_r>:
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	b570      	push	{r4, r5, r6, lr}
 800a2d0:	4d06      	ldr	r5, [pc, #24]	@ (800a2ec <_kill_r+0x20>)
 800a2d2:	0004      	movs	r4, r0
 800a2d4:	0008      	movs	r0, r1
 800a2d6:	0011      	movs	r1, r2
 800a2d8:	602b      	str	r3, [r5, #0]
 800a2da:	f7fa fe1d 	bl	8004f18 <_kill>
 800a2de:	1c43      	adds	r3, r0, #1
 800a2e0:	d103      	bne.n	800a2ea <_kill_r+0x1e>
 800a2e2:	682b      	ldr	r3, [r5, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d000      	beq.n	800a2ea <_kill_r+0x1e>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}
 800a2ec:	20000a34 	.word	0x20000a34

0800a2f0 <_getpid_r>:
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	f7fa fe0f 	bl	8004f14 <_getpid>
 800a2f6:	bd10      	pop	{r4, pc}

0800a2f8 <__swhatbuf_r>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	000e      	movs	r6, r1
 800a2fc:	001d      	movs	r5, r3
 800a2fe:	230e      	movs	r3, #14
 800a300:	5ec9      	ldrsh	r1, [r1, r3]
 800a302:	0014      	movs	r4, r2
 800a304:	b096      	sub	sp, #88	@ 0x58
 800a306:	2900      	cmp	r1, #0
 800a308:	da0c      	bge.n	800a324 <__swhatbuf_r+0x2c>
 800a30a:	89b2      	ldrh	r2, [r6, #12]
 800a30c:	2380      	movs	r3, #128	@ 0x80
 800a30e:	0011      	movs	r1, r2
 800a310:	4019      	ands	r1, r3
 800a312:	421a      	tst	r2, r3
 800a314:	d114      	bne.n	800a340 <__swhatbuf_r+0x48>
 800a316:	2380      	movs	r3, #128	@ 0x80
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	2000      	movs	r0, #0
 800a31c:	6029      	str	r1, [r5, #0]
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	b016      	add	sp, #88	@ 0x58
 800a322:	bd70      	pop	{r4, r5, r6, pc}
 800a324:	466a      	mov	r2, sp
 800a326:	f000 f853 	bl	800a3d0 <_fstat_r>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	dbed      	blt.n	800a30a <__swhatbuf_r+0x12>
 800a32e:	23f0      	movs	r3, #240	@ 0xf0
 800a330:	9901      	ldr	r1, [sp, #4]
 800a332:	021b      	lsls	r3, r3, #8
 800a334:	4019      	ands	r1, r3
 800a336:	4b04      	ldr	r3, [pc, #16]	@ (800a348 <__swhatbuf_r+0x50>)
 800a338:	18c9      	adds	r1, r1, r3
 800a33a:	424b      	negs	r3, r1
 800a33c:	4159      	adcs	r1, r3
 800a33e:	e7ea      	b.n	800a316 <__swhatbuf_r+0x1e>
 800a340:	2100      	movs	r1, #0
 800a342:	2340      	movs	r3, #64	@ 0x40
 800a344:	e7e9      	b.n	800a31a <__swhatbuf_r+0x22>
 800a346:	46c0      	nop			@ (mov r8, r8)
 800a348:	ffffe000 	.word	0xffffe000

0800a34c <__smakebuf_r>:
 800a34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a34e:	2602      	movs	r6, #2
 800a350:	898b      	ldrh	r3, [r1, #12]
 800a352:	0005      	movs	r5, r0
 800a354:	000c      	movs	r4, r1
 800a356:	b085      	sub	sp, #20
 800a358:	4233      	tst	r3, r6
 800a35a:	d007      	beq.n	800a36c <__smakebuf_r+0x20>
 800a35c:	0023      	movs	r3, r4
 800a35e:	3347      	adds	r3, #71	@ 0x47
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	6123      	str	r3, [r4, #16]
 800a364:	2301      	movs	r3, #1
 800a366:	6163      	str	r3, [r4, #20]
 800a368:	b005      	add	sp, #20
 800a36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a36c:	ab03      	add	r3, sp, #12
 800a36e:	aa02      	add	r2, sp, #8
 800a370:	f7ff ffc2 	bl	800a2f8 <__swhatbuf_r>
 800a374:	9f02      	ldr	r7, [sp, #8]
 800a376:	9001      	str	r0, [sp, #4]
 800a378:	0039      	movs	r1, r7
 800a37a:	0028      	movs	r0, r5
 800a37c:	f7fe fe76 	bl	800906c <_malloc_r>
 800a380:	2800      	cmp	r0, #0
 800a382:	d108      	bne.n	800a396 <__smakebuf_r+0x4a>
 800a384:	220c      	movs	r2, #12
 800a386:	5ea3      	ldrsh	r3, [r4, r2]
 800a388:	059a      	lsls	r2, r3, #22
 800a38a:	d4ed      	bmi.n	800a368 <__smakebuf_r+0x1c>
 800a38c:	2203      	movs	r2, #3
 800a38e:	4393      	bics	r3, r2
 800a390:	431e      	orrs	r6, r3
 800a392:	81a6      	strh	r6, [r4, #12]
 800a394:	e7e2      	b.n	800a35c <__smakebuf_r+0x10>
 800a396:	2380      	movs	r3, #128	@ 0x80
 800a398:	89a2      	ldrh	r2, [r4, #12]
 800a39a:	6020      	str	r0, [r4, #0]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	81a3      	strh	r3, [r4, #12]
 800a3a0:	9b03      	ldr	r3, [sp, #12]
 800a3a2:	6120      	str	r0, [r4, #16]
 800a3a4:	6167      	str	r7, [r4, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00c      	beq.n	800a3c4 <__smakebuf_r+0x78>
 800a3aa:	0028      	movs	r0, r5
 800a3ac:	230e      	movs	r3, #14
 800a3ae:	5ee1      	ldrsh	r1, [r4, r3]
 800a3b0:	f000 f820 	bl	800a3f4 <_isatty_r>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d005      	beq.n	800a3c4 <__smakebuf_r+0x78>
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	89a2      	ldrh	r2, [r4, #12]
 800a3bc:	439a      	bics	r2, r3
 800a3be:	3b02      	subs	r3, #2
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	9a01      	ldr	r2, [sp, #4]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	81a3      	strh	r3, [r4, #12]
 800a3cc:	e7cc      	b.n	800a368 <__smakebuf_r+0x1c>
	...

0800a3d0 <_fstat_r>:
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	b570      	push	{r4, r5, r6, lr}
 800a3d4:	4d06      	ldr	r5, [pc, #24]	@ (800a3f0 <_fstat_r+0x20>)
 800a3d6:	0004      	movs	r4, r0
 800a3d8:	0008      	movs	r0, r1
 800a3da:	0011      	movs	r1, r2
 800a3dc:	602b      	str	r3, [r5, #0]
 800a3de:	f7fa fdc6 	bl	8004f6e <_fstat>
 800a3e2:	1c43      	adds	r3, r0, #1
 800a3e4:	d103      	bne.n	800a3ee <_fstat_r+0x1e>
 800a3e6:	682b      	ldr	r3, [r5, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d000      	beq.n	800a3ee <_fstat_r+0x1e>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	20000a34 	.word	0x20000a34

0800a3f4 <_isatty_r>:
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	b570      	push	{r4, r5, r6, lr}
 800a3f8:	4d06      	ldr	r5, [pc, #24]	@ (800a414 <_isatty_r+0x20>)
 800a3fa:	0004      	movs	r4, r0
 800a3fc:	0008      	movs	r0, r1
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	f7fa fdba 	bl	8004f78 <_isatty>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d103      	bne.n	800a410 <_isatty_r+0x1c>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d000      	beq.n	800a410 <_isatty_r+0x1c>
 800a40e:	6023      	str	r3, [r4, #0]
 800a410:	bd70      	pop	{r4, r5, r6, pc}
 800a412:	46c0      	nop			@ (mov r8, r8)
 800a414:	20000a34 	.word	0x20000a34

0800a418 <_init>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	46c0      	nop			@ (mov r8, r8)
 800a41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41e:	bc08      	pop	{r3}
 800a420:	469e      	mov	lr, r3
 800a422:	4770      	bx	lr

0800a424 <_fini>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	46c0      	nop			@ (mov r8, r8)
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr
