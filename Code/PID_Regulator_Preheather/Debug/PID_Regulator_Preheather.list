
PID_Regulator_Preheather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004108  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080041c8  080041c8  000051c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004240  08004240  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004240  08004240  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004240  08004240  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004240  08004240  00005240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004244  08004244  00005244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004248  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000010  08004258  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004258  00006280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d05f  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6a  00000000  00000000  00013097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00015008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ec  00000000  00000000  00015b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001037d  00000000  00000000  00016454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcf6  00000000  00000000  000267d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000601a0  00000000  00000000  000364c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00096667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002924  00000000  00000000  000966ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  00098fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080041b0 	.word	0x080041b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080041b0 	.word	0x080041b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_fsub>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	4647      	mov	r7, r8
 8000224:	46ce      	mov	lr, r9
 8000226:	0243      	lsls	r3, r0, #9
 8000228:	b580      	push	{r7, lr}
 800022a:	0a5f      	lsrs	r7, r3, #9
 800022c:	099b      	lsrs	r3, r3, #6
 800022e:	0045      	lsls	r5, r0, #1
 8000230:	004a      	lsls	r2, r1, #1
 8000232:	469c      	mov	ip, r3
 8000234:	024b      	lsls	r3, r1, #9
 8000236:	0fc4      	lsrs	r4, r0, #31
 8000238:	0fce      	lsrs	r6, r1, #31
 800023a:	0e2d      	lsrs	r5, r5, #24
 800023c:	0a58      	lsrs	r0, r3, #9
 800023e:	0e12      	lsrs	r2, r2, #24
 8000240:	0999      	lsrs	r1, r3, #6
 8000242:	2aff      	cmp	r2, #255	@ 0xff
 8000244:	d06b      	beq.n	800031e <__aeabi_fsub+0xfe>
 8000246:	2301      	movs	r3, #1
 8000248:	405e      	eors	r6, r3
 800024a:	1aab      	subs	r3, r5, r2
 800024c:	42b4      	cmp	r4, r6
 800024e:	d04b      	beq.n	80002e8 <__aeabi_fsub+0xc8>
 8000250:	2b00      	cmp	r3, #0
 8000252:	dc00      	bgt.n	8000256 <__aeabi_fsub+0x36>
 8000254:	e0ff      	b.n	8000456 <__aeabi_fsub+0x236>
 8000256:	2a00      	cmp	r2, #0
 8000258:	d100      	bne.n	800025c <__aeabi_fsub+0x3c>
 800025a:	e088      	b.n	800036e <__aeabi_fsub+0x14e>
 800025c:	2dff      	cmp	r5, #255	@ 0xff
 800025e:	d100      	bne.n	8000262 <__aeabi_fsub+0x42>
 8000260:	e0ef      	b.n	8000442 <__aeabi_fsub+0x222>
 8000262:	2280      	movs	r2, #128	@ 0x80
 8000264:	04d2      	lsls	r2, r2, #19
 8000266:	4311      	orrs	r1, r2
 8000268:	2001      	movs	r0, #1
 800026a:	2b1b      	cmp	r3, #27
 800026c:	dc08      	bgt.n	8000280 <__aeabi_fsub+0x60>
 800026e:	0008      	movs	r0, r1
 8000270:	2220      	movs	r2, #32
 8000272:	40d8      	lsrs	r0, r3
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	4099      	lsls	r1, r3
 8000278:	000b      	movs	r3, r1
 800027a:	1e5a      	subs	r2, r3, #1
 800027c:	4193      	sbcs	r3, r2
 800027e:	4318      	orrs	r0, r3
 8000280:	4663      	mov	r3, ip
 8000282:	1a1b      	subs	r3, r3, r0
 8000284:	469c      	mov	ip, r3
 8000286:	4663      	mov	r3, ip
 8000288:	015b      	lsls	r3, r3, #5
 800028a:	d400      	bmi.n	800028e <__aeabi_fsub+0x6e>
 800028c:	e0cd      	b.n	800042a <__aeabi_fsub+0x20a>
 800028e:	4663      	mov	r3, ip
 8000290:	019f      	lsls	r7, r3, #6
 8000292:	09bf      	lsrs	r7, r7, #6
 8000294:	0038      	movs	r0, r7
 8000296:	f000 fe3f 	bl	8000f18 <__clzsi2>
 800029a:	003b      	movs	r3, r7
 800029c:	3805      	subs	r0, #5
 800029e:	4083      	lsls	r3, r0
 80002a0:	4285      	cmp	r5, r0
 80002a2:	dc00      	bgt.n	80002a6 <__aeabi_fsub+0x86>
 80002a4:	e0a2      	b.n	80003ec <__aeabi_fsub+0x1cc>
 80002a6:	4ab7      	ldr	r2, [pc, #732]	@ (8000584 <__aeabi_fsub+0x364>)
 80002a8:	1a2d      	subs	r5, r5, r0
 80002aa:	401a      	ands	r2, r3
 80002ac:	4694      	mov	ip, r2
 80002ae:	075a      	lsls	r2, r3, #29
 80002b0:	d100      	bne.n	80002b4 <__aeabi_fsub+0x94>
 80002b2:	e0c3      	b.n	800043c <__aeabi_fsub+0x21c>
 80002b4:	220f      	movs	r2, #15
 80002b6:	4013      	ands	r3, r2
 80002b8:	2b04      	cmp	r3, #4
 80002ba:	d100      	bne.n	80002be <__aeabi_fsub+0x9e>
 80002bc:	e0be      	b.n	800043c <__aeabi_fsub+0x21c>
 80002be:	2304      	movs	r3, #4
 80002c0:	4698      	mov	r8, r3
 80002c2:	44c4      	add	ip, r8
 80002c4:	4663      	mov	r3, ip
 80002c6:	015b      	lsls	r3, r3, #5
 80002c8:	d400      	bmi.n	80002cc <__aeabi_fsub+0xac>
 80002ca:	e0b7      	b.n	800043c <__aeabi_fsub+0x21c>
 80002cc:	1c68      	adds	r0, r5, #1
 80002ce:	2dfe      	cmp	r5, #254	@ 0xfe
 80002d0:	d000      	beq.n	80002d4 <__aeabi_fsub+0xb4>
 80002d2:	e0a5      	b.n	8000420 <__aeabi_fsub+0x200>
 80002d4:	20ff      	movs	r0, #255	@ 0xff
 80002d6:	2200      	movs	r2, #0
 80002d8:	05c0      	lsls	r0, r0, #23
 80002da:	4310      	orrs	r0, r2
 80002dc:	07e4      	lsls	r4, r4, #31
 80002de:	4320      	orrs	r0, r4
 80002e0:	bcc0      	pop	{r6, r7}
 80002e2:	46b9      	mov	r9, r7
 80002e4:	46b0      	mov	r8, r6
 80002e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	dc00      	bgt.n	80002ee <__aeabi_fsub+0xce>
 80002ec:	e1eb      	b.n	80006c6 <__aeabi_fsub+0x4a6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d046      	beq.n	8000380 <__aeabi_fsub+0x160>
 80002f2:	2dff      	cmp	r5, #255	@ 0xff
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fsub+0xd8>
 80002f6:	e0a4      	b.n	8000442 <__aeabi_fsub+0x222>
 80002f8:	2280      	movs	r2, #128	@ 0x80
 80002fa:	04d2      	lsls	r2, r2, #19
 80002fc:	4311      	orrs	r1, r2
 80002fe:	2b1b      	cmp	r3, #27
 8000300:	dc00      	bgt.n	8000304 <__aeabi_fsub+0xe4>
 8000302:	e0fb      	b.n	80004fc <__aeabi_fsub+0x2dc>
 8000304:	2305      	movs	r3, #5
 8000306:	4698      	mov	r8, r3
 8000308:	002b      	movs	r3, r5
 800030a:	44c4      	add	ip, r8
 800030c:	4662      	mov	r2, ip
 800030e:	08d7      	lsrs	r7, r2, #3
 8000310:	2bff      	cmp	r3, #255	@ 0xff
 8000312:	d100      	bne.n	8000316 <__aeabi_fsub+0xf6>
 8000314:	e095      	b.n	8000442 <__aeabi_fsub+0x222>
 8000316:	027a      	lsls	r2, r7, #9
 8000318:	0a52      	lsrs	r2, r2, #9
 800031a:	b2d8      	uxtb	r0, r3
 800031c:	e7dc      	b.n	80002d8 <__aeabi_fsub+0xb8>
 800031e:	002b      	movs	r3, r5
 8000320:	3bff      	subs	r3, #255	@ 0xff
 8000322:	4699      	mov	r9, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d118      	bne.n	800035a <__aeabi_fsub+0x13a>
 8000328:	2301      	movs	r3, #1
 800032a:	405e      	eors	r6, r3
 800032c:	42b4      	cmp	r4, r6
 800032e:	d100      	bne.n	8000332 <__aeabi_fsub+0x112>
 8000330:	e0ca      	b.n	80004c8 <__aeabi_fsub+0x2a8>
 8000332:	464b      	mov	r3, r9
 8000334:	2b00      	cmp	r3, #0
 8000336:	d02d      	beq.n	8000394 <__aeabi_fsub+0x174>
 8000338:	2d00      	cmp	r5, #0
 800033a:	d000      	beq.n	800033e <__aeabi_fsub+0x11e>
 800033c:	e13c      	b.n	80005b8 <__aeabi_fsub+0x398>
 800033e:	23ff      	movs	r3, #255	@ 0xff
 8000340:	4664      	mov	r4, ip
 8000342:	2c00      	cmp	r4, #0
 8000344:	d100      	bne.n	8000348 <__aeabi_fsub+0x128>
 8000346:	e15f      	b.n	8000608 <__aeabi_fsub+0x3e8>
 8000348:	1e5d      	subs	r5, r3, #1
 800034a:	2b01      	cmp	r3, #1
 800034c:	d100      	bne.n	8000350 <__aeabi_fsub+0x130>
 800034e:	e174      	b.n	800063a <__aeabi_fsub+0x41a>
 8000350:	0034      	movs	r4, r6
 8000352:	2bff      	cmp	r3, #255	@ 0xff
 8000354:	d074      	beq.n	8000440 <__aeabi_fsub+0x220>
 8000356:	002b      	movs	r3, r5
 8000358:	e103      	b.n	8000562 <__aeabi_fsub+0x342>
 800035a:	42b4      	cmp	r4, r6
 800035c:	d100      	bne.n	8000360 <__aeabi_fsub+0x140>
 800035e:	e09c      	b.n	800049a <__aeabi_fsub+0x27a>
 8000360:	2b00      	cmp	r3, #0
 8000362:	d017      	beq.n	8000394 <__aeabi_fsub+0x174>
 8000364:	2d00      	cmp	r5, #0
 8000366:	d0ea      	beq.n	800033e <__aeabi_fsub+0x11e>
 8000368:	0007      	movs	r7, r0
 800036a:	0034      	movs	r4, r6
 800036c:	e06c      	b.n	8000448 <__aeabi_fsub+0x228>
 800036e:	2900      	cmp	r1, #0
 8000370:	d0cc      	beq.n	800030c <__aeabi_fsub+0xec>
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	2b01      	cmp	r3, #1
 8000376:	d02b      	beq.n	80003d0 <__aeabi_fsub+0x1b0>
 8000378:	2bff      	cmp	r3, #255	@ 0xff
 800037a:	d062      	beq.n	8000442 <__aeabi_fsub+0x222>
 800037c:	0013      	movs	r3, r2
 800037e:	e773      	b.n	8000268 <__aeabi_fsub+0x48>
 8000380:	2900      	cmp	r1, #0
 8000382:	d0c3      	beq.n	800030c <__aeabi_fsub+0xec>
 8000384:	1e5a      	subs	r2, r3, #1
 8000386:	2b01      	cmp	r3, #1
 8000388:	d100      	bne.n	800038c <__aeabi_fsub+0x16c>
 800038a:	e11e      	b.n	80005ca <__aeabi_fsub+0x3aa>
 800038c:	2bff      	cmp	r3, #255	@ 0xff
 800038e:	d058      	beq.n	8000442 <__aeabi_fsub+0x222>
 8000390:	0013      	movs	r3, r2
 8000392:	e7b4      	b.n	80002fe <__aeabi_fsub+0xde>
 8000394:	22fe      	movs	r2, #254	@ 0xfe
 8000396:	1c6b      	adds	r3, r5, #1
 8000398:	421a      	tst	r2, r3
 800039a:	d10d      	bne.n	80003b8 <__aeabi_fsub+0x198>
 800039c:	2d00      	cmp	r5, #0
 800039e:	d060      	beq.n	8000462 <__aeabi_fsub+0x242>
 80003a0:	4663      	mov	r3, ip
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d000      	beq.n	80003a8 <__aeabi_fsub+0x188>
 80003a6:	e120      	b.n	80005ea <__aeabi_fsub+0x3ca>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	d000      	beq.n	80003ae <__aeabi_fsub+0x18e>
 80003ac:	e128      	b.n	8000600 <__aeabi_fsub+0x3e0>
 80003ae:	2280      	movs	r2, #128	@ 0x80
 80003b0:	2400      	movs	r4, #0
 80003b2:	20ff      	movs	r0, #255	@ 0xff
 80003b4:	03d2      	lsls	r2, r2, #15
 80003b6:	e78f      	b.n	80002d8 <__aeabi_fsub+0xb8>
 80003b8:	4663      	mov	r3, ip
 80003ba:	1a5f      	subs	r7, r3, r1
 80003bc:	017b      	lsls	r3, r7, #5
 80003be:	d500      	bpl.n	80003c2 <__aeabi_fsub+0x1a2>
 80003c0:	e0fe      	b.n	80005c0 <__aeabi_fsub+0x3a0>
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d000      	beq.n	80003c8 <__aeabi_fsub+0x1a8>
 80003c6:	e765      	b.n	8000294 <__aeabi_fsub+0x74>
 80003c8:	2400      	movs	r4, #0
 80003ca:	2000      	movs	r0, #0
 80003cc:	2200      	movs	r2, #0
 80003ce:	e783      	b.n	80002d8 <__aeabi_fsub+0xb8>
 80003d0:	4663      	mov	r3, ip
 80003d2:	1a59      	subs	r1, r3, r1
 80003d4:	014b      	lsls	r3, r1, #5
 80003d6:	d400      	bmi.n	80003da <__aeabi_fsub+0x1ba>
 80003d8:	e119      	b.n	800060e <__aeabi_fsub+0x3ee>
 80003da:	018f      	lsls	r7, r1, #6
 80003dc:	09bf      	lsrs	r7, r7, #6
 80003de:	0038      	movs	r0, r7
 80003e0:	f000 fd9a 	bl	8000f18 <__clzsi2>
 80003e4:	003b      	movs	r3, r7
 80003e6:	3805      	subs	r0, #5
 80003e8:	4083      	lsls	r3, r0
 80003ea:	2501      	movs	r5, #1
 80003ec:	2220      	movs	r2, #32
 80003ee:	1b40      	subs	r0, r0, r5
 80003f0:	3001      	adds	r0, #1
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	0019      	movs	r1, r3
 80003f6:	4093      	lsls	r3, r2
 80003f8:	40c1      	lsrs	r1, r0
 80003fa:	1e5a      	subs	r2, r3, #1
 80003fc:	4193      	sbcs	r3, r2
 80003fe:	4319      	orrs	r1, r3
 8000400:	468c      	mov	ip, r1
 8000402:	1e0b      	subs	r3, r1, #0
 8000404:	d0e1      	beq.n	80003ca <__aeabi_fsub+0x1aa>
 8000406:	075b      	lsls	r3, r3, #29
 8000408:	d100      	bne.n	800040c <__aeabi_fsub+0x1ec>
 800040a:	e152      	b.n	80006b2 <__aeabi_fsub+0x492>
 800040c:	230f      	movs	r3, #15
 800040e:	2500      	movs	r5, #0
 8000410:	400b      	ands	r3, r1
 8000412:	2b04      	cmp	r3, #4
 8000414:	d000      	beq.n	8000418 <__aeabi_fsub+0x1f8>
 8000416:	e752      	b.n	80002be <__aeabi_fsub+0x9e>
 8000418:	2001      	movs	r0, #1
 800041a:	014a      	lsls	r2, r1, #5
 800041c:	d400      	bmi.n	8000420 <__aeabi_fsub+0x200>
 800041e:	e092      	b.n	8000546 <__aeabi_fsub+0x326>
 8000420:	b2c0      	uxtb	r0, r0
 8000422:	4663      	mov	r3, ip
 8000424:	019a      	lsls	r2, r3, #6
 8000426:	0a52      	lsrs	r2, r2, #9
 8000428:	e756      	b.n	80002d8 <__aeabi_fsub+0xb8>
 800042a:	4663      	mov	r3, ip
 800042c:	075b      	lsls	r3, r3, #29
 800042e:	d005      	beq.n	800043c <__aeabi_fsub+0x21c>
 8000430:	230f      	movs	r3, #15
 8000432:	4662      	mov	r2, ip
 8000434:	4013      	ands	r3, r2
 8000436:	2b04      	cmp	r3, #4
 8000438:	d000      	beq.n	800043c <__aeabi_fsub+0x21c>
 800043a:	e740      	b.n	80002be <__aeabi_fsub+0x9e>
 800043c:	002b      	movs	r3, r5
 800043e:	e765      	b.n	800030c <__aeabi_fsub+0xec>
 8000440:	0007      	movs	r7, r0
 8000442:	2f00      	cmp	r7, #0
 8000444:	d100      	bne.n	8000448 <__aeabi_fsub+0x228>
 8000446:	e745      	b.n	80002d4 <__aeabi_fsub+0xb4>
 8000448:	2280      	movs	r2, #128	@ 0x80
 800044a:	03d2      	lsls	r2, r2, #15
 800044c:	433a      	orrs	r2, r7
 800044e:	0252      	lsls	r2, r2, #9
 8000450:	20ff      	movs	r0, #255	@ 0xff
 8000452:	0a52      	lsrs	r2, r2, #9
 8000454:	e740      	b.n	80002d8 <__aeabi_fsub+0xb8>
 8000456:	2b00      	cmp	r3, #0
 8000458:	d179      	bne.n	800054e <__aeabi_fsub+0x32e>
 800045a:	22fe      	movs	r2, #254	@ 0xfe
 800045c:	1c6b      	adds	r3, r5, #1
 800045e:	421a      	tst	r2, r3
 8000460:	d1aa      	bne.n	80003b8 <__aeabi_fsub+0x198>
 8000462:	4663      	mov	r3, ip
 8000464:	2b00      	cmp	r3, #0
 8000466:	d100      	bne.n	800046a <__aeabi_fsub+0x24a>
 8000468:	e0f5      	b.n	8000656 <__aeabi_fsub+0x436>
 800046a:	2900      	cmp	r1, #0
 800046c:	d100      	bne.n	8000470 <__aeabi_fsub+0x250>
 800046e:	e0d1      	b.n	8000614 <__aeabi_fsub+0x3f4>
 8000470:	1a5f      	subs	r7, r3, r1
 8000472:	2380      	movs	r3, #128	@ 0x80
 8000474:	04db      	lsls	r3, r3, #19
 8000476:	421f      	tst	r7, r3
 8000478:	d100      	bne.n	800047c <__aeabi_fsub+0x25c>
 800047a:	e10e      	b.n	800069a <__aeabi_fsub+0x47a>
 800047c:	4662      	mov	r2, ip
 800047e:	2401      	movs	r4, #1
 8000480:	1a8a      	subs	r2, r1, r2
 8000482:	4694      	mov	ip, r2
 8000484:	2000      	movs	r0, #0
 8000486:	4034      	ands	r4, r6
 8000488:	2a00      	cmp	r2, #0
 800048a:	d100      	bne.n	800048e <__aeabi_fsub+0x26e>
 800048c:	e724      	b.n	80002d8 <__aeabi_fsub+0xb8>
 800048e:	2001      	movs	r0, #1
 8000490:	421a      	tst	r2, r3
 8000492:	d1c6      	bne.n	8000422 <__aeabi_fsub+0x202>
 8000494:	2300      	movs	r3, #0
 8000496:	08d7      	lsrs	r7, r2, #3
 8000498:	e73d      	b.n	8000316 <__aeabi_fsub+0xf6>
 800049a:	2b00      	cmp	r3, #0
 800049c:	d017      	beq.n	80004ce <__aeabi_fsub+0x2ae>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d000      	beq.n	80004a4 <__aeabi_fsub+0x284>
 80004a2:	e0af      	b.n	8000604 <__aeabi_fsub+0x3e4>
 80004a4:	23ff      	movs	r3, #255	@ 0xff
 80004a6:	4665      	mov	r5, ip
 80004a8:	2d00      	cmp	r5, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_fsub+0x28e>
 80004ac:	e0ad      	b.n	800060a <__aeabi_fsub+0x3ea>
 80004ae:	1e5e      	subs	r6, r3, #1
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fsub+0x296>
 80004b4:	e089      	b.n	80005ca <__aeabi_fsub+0x3aa>
 80004b6:	2bff      	cmp	r3, #255	@ 0xff
 80004b8:	d0c2      	beq.n	8000440 <__aeabi_fsub+0x220>
 80004ba:	2e1b      	cmp	r6, #27
 80004bc:	dc00      	bgt.n	80004c0 <__aeabi_fsub+0x2a0>
 80004be:	e0ab      	b.n	8000618 <__aeabi_fsub+0x3f8>
 80004c0:	1d4b      	adds	r3, r1, #5
 80004c2:	469c      	mov	ip, r3
 80004c4:	0013      	movs	r3, r2
 80004c6:	e721      	b.n	800030c <__aeabi_fsub+0xec>
 80004c8:	464b      	mov	r3, r9
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d170      	bne.n	80005b0 <__aeabi_fsub+0x390>
 80004ce:	22fe      	movs	r2, #254	@ 0xfe
 80004d0:	1c6b      	adds	r3, r5, #1
 80004d2:	421a      	tst	r2, r3
 80004d4:	d15e      	bne.n	8000594 <__aeabi_fsub+0x374>
 80004d6:	2d00      	cmp	r5, #0
 80004d8:	d000      	beq.n	80004dc <__aeabi_fsub+0x2bc>
 80004da:	e0c3      	b.n	8000664 <__aeabi_fsub+0x444>
 80004dc:	4663      	mov	r3, ip
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_fsub+0x2c4>
 80004e2:	e0d0      	b.n	8000686 <__aeabi_fsub+0x466>
 80004e4:	2900      	cmp	r1, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_fsub+0x2ca>
 80004e8:	e094      	b.n	8000614 <__aeabi_fsub+0x3f4>
 80004ea:	000a      	movs	r2, r1
 80004ec:	4462      	add	r2, ip
 80004ee:	0153      	lsls	r3, r2, #5
 80004f0:	d400      	bmi.n	80004f4 <__aeabi_fsub+0x2d4>
 80004f2:	e0d8      	b.n	80006a6 <__aeabi_fsub+0x486>
 80004f4:	0192      	lsls	r2, r2, #6
 80004f6:	2001      	movs	r0, #1
 80004f8:	0a52      	lsrs	r2, r2, #9
 80004fa:	e6ed      	b.n	80002d8 <__aeabi_fsub+0xb8>
 80004fc:	0008      	movs	r0, r1
 80004fe:	2220      	movs	r2, #32
 8000500:	40d8      	lsrs	r0, r3
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	4099      	lsls	r1, r3
 8000506:	000b      	movs	r3, r1
 8000508:	1e5a      	subs	r2, r3, #1
 800050a:	4193      	sbcs	r3, r2
 800050c:	4303      	orrs	r3, r0
 800050e:	449c      	add	ip, r3
 8000510:	4663      	mov	r3, ip
 8000512:	015b      	lsls	r3, r3, #5
 8000514:	d589      	bpl.n	800042a <__aeabi_fsub+0x20a>
 8000516:	3501      	adds	r5, #1
 8000518:	2dff      	cmp	r5, #255	@ 0xff
 800051a:	d100      	bne.n	800051e <__aeabi_fsub+0x2fe>
 800051c:	e6da      	b.n	80002d4 <__aeabi_fsub+0xb4>
 800051e:	4662      	mov	r2, ip
 8000520:	2301      	movs	r3, #1
 8000522:	4919      	ldr	r1, [pc, #100]	@ (8000588 <__aeabi_fsub+0x368>)
 8000524:	4013      	ands	r3, r2
 8000526:	0852      	lsrs	r2, r2, #1
 8000528:	400a      	ands	r2, r1
 800052a:	431a      	orrs	r2, r3
 800052c:	0013      	movs	r3, r2
 800052e:	4694      	mov	ip, r2
 8000530:	075b      	lsls	r3, r3, #29
 8000532:	d004      	beq.n	800053e <__aeabi_fsub+0x31e>
 8000534:	230f      	movs	r3, #15
 8000536:	4013      	ands	r3, r2
 8000538:	2b04      	cmp	r3, #4
 800053a:	d000      	beq.n	800053e <__aeabi_fsub+0x31e>
 800053c:	e6bf      	b.n	80002be <__aeabi_fsub+0x9e>
 800053e:	4663      	mov	r3, ip
 8000540:	015b      	lsls	r3, r3, #5
 8000542:	d500      	bpl.n	8000546 <__aeabi_fsub+0x326>
 8000544:	e6c2      	b.n	80002cc <__aeabi_fsub+0xac>
 8000546:	4663      	mov	r3, ip
 8000548:	08df      	lsrs	r7, r3, #3
 800054a:	002b      	movs	r3, r5
 800054c:	e6e3      	b.n	8000316 <__aeabi_fsub+0xf6>
 800054e:	1b53      	subs	r3, r2, r5
 8000550:	2d00      	cmp	r5, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_fsub+0x336>
 8000554:	e6f4      	b.n	8000340 <__aeabi_fsub+0x120>
 8000556:	2080      	movs	r0, #128	@ 0x80
 8000558:	4664      	mov	r4, ip
 800055a:	04c0      	lsls	r0, r0, #19
 800055c:	4304      	orrs	r4, r0
 800055e:	46a4      	mov	ip, r4
 8000560:	0034      	movs	r4, r6
 8000562:	2001      	movs	r0, #1
 8000564:	2b1b      	cmp	r3, #27
 8000566:	dc09      	bgt.n	800057c <__aeabi_fsub+0x35c>
 8000568:	2520      	movs	r5, #32
 800056a:	4660      	mov	r0, ip
 800056c:	40d8      	lsrs	r0, r3
 800056e:	1aeb      	subs	r3, r5, r3
 8000570:	4665      	mov	r5, ip
 8000572:	409d      	lsls	r5, r3
 8000574:	002b      	movs	r3, r5
 8000576:	1e5d      	subs	r5, r3, #1
 8000578:	41ab      	sbcs	r3, r5
 800057a:	4318      	orrs	r0, r3
 800057c:	1a0b      	subs	r3, r1, r0
 800057e:	469c      	mov	ip, r3
 8000580:	0015      	movs	r5, r2
 8000582:	e680      	b.n	8000286 <__aeabi_fsub+0x66>
 8000584:	fbffffff 	.word	0xfbffffff
 8000588:	7dffffff 	.word	0x7dffffff
 800058c:	22fe      	movs	r2, #254	@ 0xfe
 800058e:	1c6b      	adds	r3, r5, #1
 8000590:	4213      	tst	r3, r2
 8000592:	d0a3      	beq.n	80004dc <__aeabi_fsub+0x2bc>
 8000594:	2bff      	cmp	r3, #255	@ 0xff
 8000596:	d100      	bne.n	800059a <__aeabi_fsub+0x37a>
 8000598:	e69c      	b.n	80002d4 <__aeabi_fsub+0xb4>
 800059a:	4461      	add	r1, ip
 800059c:	0849      	lsrs	r1, r1, #1
 800059e:	074a      	lsls	r2, r1, #29
 80005a0:	d049      	beq.n	8000636 <__aeabi_fsub+0x416>
 80005a2:	220f      	movs	r2, #15
 80005a4:	400a      	ands	r2, r1
 80005a6:	2a04      	cmp	r2, #4
 80005a8:	d045      	beq.n	8000636 <__aeabi_fsub+0x416>
 80005aa:	1d0a      	adds	r2, r1, #4
 80005ac:	4694      	mov	ip, r2
 80005ae:	e6ad      	b.n	800030c <__aeabi_fsub+0xec>
 80005b0:	2d00      	cmp	r5, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fsub+0x396>
 80005b4:	e776      	b.n	80004a4 <__aeabi_fsub+0x284>
 80005b6:	e68d      	b.n	80002d4 <__aeabi_fsub+0xb4>
 80005b8:	0034      	movs	r4, r6
 80005ba:	20ff      	movs	r0, #255	@ 0xff
 80005bc:	2200      	movs	r2, #0
 80005be:	e68b      	b.n	80002d8 <__aeabi_fsub+0xb8>
 80005c0:	4663      	mov	r3, ip
 80005c2:	2401      	movs	r4, #1
 80005c4:	1acf      	subs	r7, r1, r3
 80005c6:	4034      	ands	r4, r6
 80005c8:	e664      	b.n	8000294 <__aeabi_fsub+0x74>
 80005ca:	4461      	add	r1, ip
 80005cc:	014b      	lsls	r3, r1, #5
 80005ce:	d56d      	bpl.n	80006ac <__aeabi_fsub+0x48c>
 80005d0:	0848      	lsrs	r0, r1, #1
 80005d2:	4944      	ldr	r1, [pc, #272]	@ (80006e4 <__aeabi_fsub+0x4c4>)
 80005d4:	4001      	ands	r1, r0
 80005d6:	0743      	lsls	r3, r0, #29
 80005d8:	d02c      	beq.n	8000634 <__aeabi_fsub+0x414>
 80005da:	230f      	movs	r3, #15
 80005dc:	4003      	ands	r3, r0
 80005de:	2b04      	cmp	r3, #4
 80005e0:	d028      	beq.n	8000634 <__aeabi_fsub+0x414>
 80005e2:	1d0b      	adds	r3, r1, #4
 80005e4:	469c      	mov	ip, r3
 80005e6:	2302      	movs	r3, #2
 80005e8:	e690      	b.n	800030c <__aeabi_fsub+0xec>
 80005ea:	2900      	cmp	r1, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fsub+0x3d0>
 80005ee:	e72b      	b.n	8000448 <__aeabi_fsub+0x228>
 80005f0:	2380      	movs	r3, #128	@ 0x80
 80005f2:	03db      	lsls	r3, r3, #15
 80005f4:	429f      	cmp	r7, r3
 80005f6:	d200      	bcs.n	80005fa <__aeabi_fsub+0x3da>
 80005f8:	e726      	b.n	8000448 <__aeabi_fsub+0x228>
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d300      	bcc.n	8000600 <__aeabi_fsub+0x3e0>
 80005fe:	e723      	b.n	8000448 <__aeabi_fsub+0x228>
 8000600:	2401      	movs	r4, #1
 8000602:	4034      	ands	r4, r6
 8000604:	0007      	movs	r7, r0
 8000606:	e71f      	b.n	8000448 <__aeabi_fsub+0x228>
 8000608:	0034      	movs	r4, r6
 800060a:	468c      	mov	ip, r1
 800060c:	e67e      	b.n	800030c <__aeabi_fsub+0xec>
 800060e:	2301      	movs	r3, #1
 8000610:	08cf      	lsrs	r7, r1, #3
 8000612:	e680      	b.n	8000316 <__aeabi_fsub+0xf6>
 8000614:	2300      	movs	r3, #0
 8000616:	e67e      	b.n	8000316 <__aeabi_fsub+0xf6>
 8000618:	2020      	movs	r0, #32
 800061a:	4665      	mov	r5, ip
 800061c:	1b80      	subs	r0, r0, r6
 800061e:	4085      	lsls	r5, r0
 8000620:	4663      	mov	r3, ip
 8000622:	0028      	movs	r0, r5
 8000624:	40f3      	lsrs	r3, r6
 8000626:	1e45      	subs	r5, r0, #1
 8000628:	41a8      	sbcs	r0, r5
 800062a:	4303      	orrs	r3, r0
 800062c:	469c      	mov	ip, r3
 800062e:	0015      	movs	r5, r2
 8000630:	448c      	add	ip, r1
 8000632:	e76d      	b.n	8000510 <__aeabi_fsub+0x2f0>
 8000634:	2302      	movs	r3, #2
 8000636:	08cf      	lsrs	r7, r1, #3
 8000638:	e66d      	b.n	8000316 <__aeabi_fsub+0xf6>
 800063a:	1b0f      	subs	r7, r1, r4
 800063c:	017b      	lsls	r3, r7, #5
 800063e:	d528      	bpl.n	8000692 <__aeabi_fsub+0x472>
 8000640:	01bf      	lsls	r7, r7, #6
 8000642:	09bf      	lsrs	r7, r7, #6
 8000644:	0038      	movs	r0, r7
 8000646:	f000 fc67 	bl	8000f18 <__clzsi2>
 800064a:	003b      	movs	r3, r7
 800064c:	3805      	subs	r0, #5
 800064e:	4083      	lsls	r3, r0
 8000650:	0034      	movs	r4, r6
 8000652:	2501      	movs	r5, #1
 8000654:	e6ca      	b.n	80003ec <__aeabi_fsub+0x1cc>
 8000656:	2900      	cmp	r1, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fsub+0x43c>
 800065a:	e6b5      	b.n	80003c8 <__aeabi_fsub+0x1a8>
 800065c:	2401      	movs	r4, #1
 800065e:	0007      	movs	r7, r0
 8000660:	4034      	ands	r4, r6
 8000662:	e658      	b.n	8000316 <__aeabi_fsub+0xf6>
 8000664:	4663      	mov	r3, ip
 8000666:	2b00      	cmp	r3, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fsub+0x44c>
 800066a:	e6e9      	b.n	8000440 <__aeabi_fsub+0x220>
 800066c:	2900      	cmp	r1, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fsub+0x452>
 8000670:	e6ea      	b.n	8000448 <__aeabi_fsub+0x228>
 8000672:	2380      	movs	r3, #128	@ 0x80
 8000674:	03db      	lsls	r3, r3, #15
 8000676:	429f      	cmp	r7, r3
 8000678:	d200      	bcs.n	800067c <__aeabi_fsub+0x45c>
 800067a:	e6e5      	b.n	8000448 <__aeabi_fsub+0x228>
 800067c:	4298      	cmp	r0, r3
 800067e:	d300      	bcc.n	8000682 <__aeabi_fsub+0x462>
 8000680:	e6e2      	b.n	8000448 <__aeabi_fsub+0x228>
 8000682:	0007      	movs	r7, r0
 8000684:	e6e0      	b.n	8000448 <__aeabi_fsub+0x228>
 8000686:	2900      	cmp	r1, #0
 8000688:	d100      	bne.n	800068c <__aeabi_fsub+0x46c>
 800068a:	e69e      	b.n	80003ca <__aeabi_fsub+0x1aa>
 800068c:	2300      	movs	r3, #0
 800068e:	08cf      	lsrs	r7, r1, #3
 8000690:	e641      	b.n	8000316 <__aeabi_fsub+0xf6>
 8000692:	0034      	movs	r4, r6
 8000694:	2301      	movs	r3, #1
 8000696:	08ff      	lsrs	r7, r7, #3
 8000698:	e63d      	b.n	8000316 <__aeabi_fsub+0xf6>
 800069a:	2f00      	cmp	r7, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fsub+0x480>
 800069e:	e693      	b.n	80003c8 <__aeabi_fsub+0x1a8>
 80006a0:	2300      	movs	r3, #0
 80006a2:	08ff      	lsrs	r7, r7, #3
 80006a4:	e637      	b.n	8000316 <__aeabi_fsub+0xf6>
 80006a6:	2300      	movs	r3, #0
 80006a8:	08d7      	lsrs	r7, r2, #3
 80006aa:	e634      	b.n	8000316 <__aeabi_fsub+0xf6>
 80006ac:	2301      	movs	r3, #1
 80006ae:	08cf      	lsrs	r7, r1, #3
 80006b0:	e631      	b.n	8000316 <__aeabi_fsub+0xf6>
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	000b      	movs	r3, r1
 80006b6:	04d2      	lsls	r2, r2, #19
 80006b8:	2001      	movs	r0, #1
 80006ba:	4013      	ands	r3, r2
 80006bc:	4211      	tst	r1, r2
 80006be:	d000      	beq.n	80006c2 <__aeabi_fsub+0x4a2>
 80006c0:	e6ae      	b.n	8000420 <__aeabi_fsub+0x200>
 80006c2:	08cf      	lsrs	r7, r1, #3
 80006c4:	e627      	b.n	8000316 <__aeabi_fsub+0xf6>
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d100      	bne.n	80006cc <__aeabi_fsub+0x4ac>
 80006ca:	e75f      	b.n	800058c <__aeabi_fsub+0x36c>
 80006cc:	1b56      	subs	r6, r2, r5
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d101      	bne.n	80006d6 <__aeabi_fsub+0x4b6>
 80006d2:	0033      	movs	r3, r6
 80006d4:	e6e7      	b.n	80004a6 <__aeabi_fsub+0x286>
 80006d6:	2380      	movs	r3, #128	@ 0x80
 80006d8:	4660      	mov	r0, ip
 80006da:	04db      	lsls	r3, r3, #19
 80006dc:	4318      	orrs	r0, r3
 80006de:	4684      	mov	ip, r0
 80006e0:	e6eb      	b.n	80004ba <__aeabi_fsub+0x29a>
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	7dffffff 	.word	0x7dffffff

080006e8 <__aeabi_i2f>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d012      	beq.n	8000714 <__aeabi_i2f+0x2c>
 80006ee:	17c3      	asrs	r3, r0, #31
 80006f0:	18c5      	adds	r5, r0, r3
 80006f2:	405d      	eors	r5, r3
 80006f4:	0fc4      	lsrs	r4, r0, #31
 80006f6:	0028      	movs	r0, r5
 80006f8:	f000 fc0e 	bl	8000f18 <__clzsi2>
 80006fc:	239e      	movs	r3, #158	@ 0x9e
 80006fe:	1a1b      	subs	r3, r3, r0
 8000700:	2b96      	cmp	r3, #150	@ 0x96
 8000702:	dc0f      	bgt.n	8000724 <__aeabi_i2f+0x3c>
 8000704:	2808      	cmp	r0, #8
 8000706:	d038      	beq.n	800077a <__aeabi_i2f+0x92>
 8000708:	3808      	subs	r0, #8
 800070a:	4085      	lsls	r5, r0
 800070c:	026d      	lsls	r5, r5, #9
 800070e:	0a6d      	lsrs	r5, r5, #9
 8000710:	b2d8      	uxtb	r0, r3
 8000712:	e002      	b.n	800071a <__aeabi_i2f+0x32>
 8000714:	2400      	movs	r4, #0
 8000716:	2000      	movs	r0, #0
 8000718:	2500      	movs	r5, #0
 800071a:	05c0      	lsls	r0, r0, #23
 800071c:	4328      	orrs	r0, r5
 800071e:	07e4      	lsls	r4, r4, #31
 8000720:	4320      	orrs	r0, r4
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	2b99      	cmp	r3, #153	@ 0x99
 8000726:	dc14      	bgt.n	8000752 <__aeabi_i2f+0x6a>
 8000728:	1f42      	subs	r2, r0, #5
 800072a:	4095      	lsls	r5, r2
 800072c:	002a      	movs	r2, r5
 800072e:	4915      	ldr	r1, [pc, #84]	@ (8000784 <__aeabi_i2f+0x9c>)
 8000730:	4011      	ands	r1, r2
 8000732:	0755      	lsls	r5, r2, #29
 8000734:	d01c      	beq.n	8000770 <__aeabi_i2f+0x88>
 8000736:	250f      	movs	r5, #15
 8000738:	402a      	ands	r2, r5
 800073a:	2a04      	cmp	r2, #4
 800073c:	d018      	beq.n	8000770 <__aeabi_i2f+0x88>
 800073e:	3104      	adds	r1, #4
 8000740:	08ca      	lsrs	r2, r1, #3
 8000742:	0149      	lsls	r1, r1, #5
 8000744:	d515      	bpl.n	8000772 <__aeabi_i2f+0x8a>
 8000746:	239f      	movs	r3, #159	@ 0x9f
 8000748:	0252      	lsls	r2, r2, #9
 800074a:	1a18      	subs	r0, r3, r0
 800074c:	0a55      	lsrs	r5, r2, #9
 800074e:	b2c0      	uxtb	r0, r0
 8000750:	e7e3      	b.n	800071a <__aeabi_i2f+0x32>
 8000752:	2205      	movs	r2, #5
 8000754:	0029      	movs	r1, r5
 8000756:	1a12      	subs	r2, r2, r0
 8000758:	40d1      	lsrs	r1, r2
 800075a:	0002      	movs	r2, r0
 800075c:	321b      	adds	r2, #27
 800075e:	4095      	lsls	r5, r2
 8000760:	002a      	movs	r2, r5
 8000762:	1e55      	subs	r5, r2, #1
 8000764:	41aa      	sbcs	r2, r5
 8000766:	430a      	orrs	r2, r1
 8000768:	4906      	ldr	r1, [pc, #24]	@ (8000784 <__aeabi_i2f+0x9c>)
 800076a:	4011      	ands	r1, r2
 800076c:	0755      	lsls	r5, r2, #29
 800076e:	d1e2      	bne.n	8000736 <__aeabi_i2f+0x4e>
 8000770:	08ca      	lsrs	r2, r1, #3
 8000772:	0252      	lsls	r2, r2, #9
 8000774:	0a55      	lsrs	r5, r2, #9
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	e7cf      	b.n	800071a <__aeabi_i2f+0x32>
 800077a:	026d      	lsls	r5, r5, #9
 800077c:	0a6d      	lsrs	r5, r5, #9
 800077e:	308e      	adds	r0, #142	@ 0x8e
 8000780:	e7cb      	b.n	800071a <__aeabi_i2f+0x32>
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	fbffffff 	.word	0xfbffffff

08000788 <__aeabi_ddiv>:
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	46de      	mov	lr, fp
 800078c:	4645      	mov	r5, r8
 800078e:	4657      	mov	r7, sl
 8000790:	464e      	mov	r6, r9
 8000792:	b5e0      	push	{r5, r6, r7, lr}
 8000794:	b087      	sub	sp, #28
 8000796:	9200      	str	r2, [sp, #0]
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	030b      	lsls	r3, r1, #12
 800079c:	0b1b      	lsrs	r3, r3, #12
 800079e:	469b      	mov	fp, r3
 80007a0:	0fca      	lsrs	r2, r1, #31
 80007a2:	004b      	lsls	r3, r1, #1
 80007a4:	0004      	movs	r4, r0
 80007a6:	4680      	mov	r8, r0
 80007a8:	0d5b      	lsrs	r3, r3, #21
 80007aa:	9202      	str	r2, [sp, #8]
 80007ac:	d100      	bne.n	80007b0 <__aeabi_ddiv+0x28>
 80007ae:	e098      	b.n	80008e2 <__aeabi_ddiv+0x15a>
 80007b0:	4a7c      	ldr	r2, [pc, #496]	@ (80009a4 <__aeabi_ddiv+0x21c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d037      	beq.n	8000826 <__aeabi_ddiv+0x9e>
 80007b6:	4659      	mov	r1, fp
 80007b8:	0f42      	lsrs	r2, r0, #29
 80007ba:	00c9      	lsls	r1, r1, #3
 80007bc:	430a      	orrs	r2, r1
 80007be:	2180      	movs	r1, #128	@ 0x80
 80007c0:	0409      	lsls	r1, r1, #16
 80007c2:	4311      	orrs	r1, r2
 80007c4:	00c2      	lsls	r2, r0, #3
 80007c6:	4690      	mov	r8, r2
 80007c8:	4a77      	ldr	r2, [pc, #476]	@ (80009a8 <__aeabi_ddiv+0x220>)
 80007ca:	4689      	mov	r9, r1
 80007cc:	4692      	mov	sl, r2
 80007ce:	449a      	add	sl, r3
 80007d0:	2300      	movs	r3, #0
 80007d2:	2400      	movs	r4, #0
 80007d4:	9303      	str	r3, [sp, #12]
 80007d6:	9e00      	ldr	r6, [sp, #0]
 80007d8:	9f01      	ldr	r7, [sp, #4]
 80007da:	033b      	lsls	r3, r7, #12
 80007dc:	0b1b      	lsrs	r3, r3, #12
 80007de:	469b      	mov	fp, r3
 80007e0:	007b      	lsls	r3, r7, #1
 80007e2:	0030      	movs	r0, r6
 80007e4:	0d5b      	lsrs	r3, r3, #21
 80007e6:	0ffd      	lsrs	r5, r7, #31
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d059      	beq.n	80008a0 <__aeabi_ddiv+0x118>
 80007ec:	4a6d      	ldr	r2, [pc, #436]	@ (80009a4 <__aeabi_ddiv+0x21c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d048      	beq.n	8000884 <__aeabi_ddiv+0xfc>
 80007f2:	4659      	mov	r1, fp
 80007f4:	0f72      	lsrs	r2, r6, #29
 80007f6:	00c9      	lsls	r1, r1, #3
 80007f8:	430a      	orrs	r2, r1
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	0409      	lsls	r1, r1, #16
 80007fe:	4311      	orrs	r1, r2
 8000800:	468b      	mov	fp, r1
 8000802:	4969      	ldr	r1, [pc, #420]	@ (80009a8 <__aeabi_ddiv+0x220>)
 8000804:	00f2      	lsls	r2, r6, #3
 8000806:	468c      	mov	ip, r1
 8000808:	4651      	mov	r1, sl
 800080a:	4463      	add	r3, ip
 800080c:	1acb      	subs	r3, r1, r3
 800080e:	469a      	mov	sl, r3
 8000810:	2100      	movs	r1, #0
 8000812:	9e02      	ldr	r6, [sp, #8]
 8000814:	406e      	eors	r6, r5
 8000816:	b2f6      	uxtb	r6, r6
 8000818:	2c0f      	cmp	r4, #15
 800081a:	d900      	bls.n	800081e <__aeabi_ddiv+0x96>
 800081c:	e0ce      	b.n	80009bc <__aeabi_ddiv+0x234>
 800081e:	4b63      	ldr	r3, [pc, #396]	@ (80009ac <__aeabi_ddiv+0x224>)
 8000820:	00a4      	lsls	r4, r4, #2
 8000822:	591b      	ldr	r3, [r3, r4]
 8000824:	469f      	mov	pc, r3
 8000826:	465a      	mov	r2, fp
 8000828:	4302      	orrs	r2, r0
 800082a:	4691      	mov	r9, r2
 800082c:	d000      	beq.n	8000830 <__aeabi_ddiv+0xa8>
 800082e:	e090      	b.n	8000952 <__aeabi_ddiv+0x1ca>
 8000830:	469a      	mov	sl, r3
 8000832:	2302      	movs	r3, #2
 8000834:	4690      	mov	r8, r2
 8000836:	2408      	movs	r4, #8
 8000838:	9303      	str	r3, [sp, #12]
 800083a:	e7cc      	b.n	80007d6 <__aeabi_ddiv+0x4e>
 800083c:	46cb      	mov	fp, r9
 800083e:	4642      	mov	r2, r8
 8000840:	9d02      	ldr	r5, [sp, #8]
 8000842:	9903      	ldr	r1, [sp, #12]
 8000844:	2902      	cmp	r1, #2
 8000846:	d100      	bne.n	800084a <__aeabi_ddiv+0xc2>
 8000848:	e1de      	b.n	8000c08 <__aeabi_ddiv+0x480>
 800084a:	2903      	cmp	r1, #3
 800084c:	d100      	bne.n	8000850 <__aeabi_ddiv+0xc8>
 800084e:	e08d      	b.n	800096c <__aeabi_ddiv+0x1e4>
 8000850:	2901      	cmp	r1, #1
 8000852:	d000      	beq.n	8000856 <__aeabi_ddiv+0xce>
 8000854:	e179      	b.n	8000b4a <__aeabi_ddiv+0x3c2>
 8000856:	002e      	movs	r6, r5
 8000858:	2200      	movs	r2, #0
 800085a:	2300      	movs	r3, #0
 800085c:	2400      	movs	r4, #0
 800085e:	4690      	mov	r8, r2
 8000860:	051b      	lsls	r3, r3, #20
 8000862:	4323      	orrs	r3, r4
 8000864:	07f6      	lsls	r6, r6, #31
 8000866:	4333      	orrs	r3, r6
 8000868:	4640      	mov	r0, r8
 800086a:	0019      	movs	r1, r3
 800086c:	b007      	add	sp, #28
 800086e:	bcf0      	pop	{r4, r5, r6, r7}
 8000870:	46bb      	mov	fp, r7
 8000872:	46b2      	mov	sl, r6
 8000874:	46a9      	mov	r9, r5
 8000876:	46a0      	mov	r8, r4
 8000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087a:	2200      	movs	r2, #0
 800087c:	2400      	movs	r4, #0
 800087e:	4690      	mov	r8, r2
 8000880:	4b48      	ldr	r3, [pc, #288]	@ (80009a4 <__aeabi_ddiv+0x21c>)
 8000882:	e7ed      	b.n	8000860 <__aeabi_ddiv+0xd8>
 8000884:	465a      	mov	r2, fp
 8000886:	9b00      	ldr	r3, [sp, #0]
 8000888:	431a      	orrs	r2, r3
 800088a:	4b49      	ldr	r3, [pc, #292]	@ (80009b0 <__aeabi_ddiv+0x228>)
 800088c:	469c      	mov	ip, r3
 800088e:	44e2      	add	sl, ip
 8000890:	2a00      	cmp	r2, #0
 8000892:	d159      	bne.n	8000948 <__aeabi_ddiv+0x1c0>
 8000894:	2302      	movs	r3, #2
 8000896:	431c      	orrs	r4, r3
 8000898:	2300      	movs	r3, #0
 800089a:	2102      	movs	r1, #2
 800089c:	469b      	mov	fp, r3
 800089e:	e7b8      	b.n	8000812 <__aeabi_ddiv+0x8a>
 80008a0:	465a      	mov	r2, fp
 80008a2:	9b00      	ldr	r3, [sp, #0]
 80008a4:	431a      	orrs	r2, r3
 80008a6:	d049      	beq.n	800093c <__aeabi_ddiv+0x1b4>
 80008a8:	465b      	mov	r3, fp
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_ddiv+0x128>
 80008ae:	e19c      	b.n	8000bea <__aeabi_ddiv+0x462>
 80008b0:	4658      	mov	r0, fp
 80008b2:	f000 fb31 	bl	8000f18 <__clzsi2>
 80008b6:	0002      	movs	r2, r0
 80008b8:	0003      	movs	r3, r0
 80008ba:	3a0b      	subs	r2, #11
 80008bc:	271d      	movs	r7, #29
 80008be:	9e00      	ldr	r6, [sp, #0]
 80008c0:	1aba      	subs	r2, r7, r2
 80008c2:	0019      	movs	r1, r3
 80008c4:	4658      	mov	r0, fp
 80008c6:	40d6      	lsrs	r6, r2
 80008c8:	3908      	subs	r1, #8
 80008ca:	4088      	lsls	r0, r1
 80008cc:	0032      	movs	r2, r6
 80008ce:	4302      	orrs	r2, r0
 80008d0:	4693      	mov	fp, r2
 80008d2:	9a00      	ldr	r2, [sp, #0]
 80008d4:	408a      	lsls	r2, r1
 80008d6:	4937      	ldr	r1, [pc, #220]	@ (80009b4 <__aeabi_ddiv+0x22c>)
 80008d8:	4453      	add	r3, sl
 80008da:	468a      	mov	sl, r1
 80008dc:	2100      	movs	r1, #0
 80008de:	449a      	add	sl, r3
 80008e0:	e797      	b.n	8000812 <__aeabi_ddiv+0x8a>
 80008e2:	465b      	mov	r3, fp
 80008e4:	4303      	orrs	r3, r0
 80008e6:	4699      	mov	r9, r3
 80008e8:	d021      	beq.n	800092e <__aeabi_ddiv+0x1a6>
 80008ea:	465b      	mov	r3, fp
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_ddiv+0x16a>
 80008f0:	e169      	b.n	8000bc6 <__aeabi_ddiv+0x43e>
 80008f2:	4658      	mov	r0, fp
 80008f4:	f000 fb10 	bl	8000f18 <__clzsi2>
 80008f8:	230b      	movs	r3, #11
 80008fa:	425b      	negs	r3, r3
 80008fc:	469c      	mov	ip, r3
 80008fe:	0002      	movs	r2, r0
 8000900:	4484      	add	ip, r0
 8000902:	4666      	mov	r6, ip
 8000904:	231d      	movs	r3, #29
 8000906:	1b9b      	subs	r3, r3, r6
 8000908:	0026      	movs	r6, r4
 800090a:	0011      	movs	r1, r2
 800090c:	4658      	mov	r0, fp
 800090e:	40de      	lsrs	r6, r3
 8000910:	3908      	subs	r1, #8
 8000912:	4088      	lsls	r0, r1
 8000914:	0033      	movs	r3, r6
 8000916:	4303      	orrs	r3, r0
 8000918:	4699      	mov	r9, r3
 800091a:	0023      	movs	r3, r4
 800091c:	408b      	lsls	r3, r1
 800091e:	4698      	mov	r8, r3
 8000920:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <__aeabi_ddiv+0x230>)
 8000922:	2400      	movs	r4, #0
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	469a      	mov	sl, r3
 8000928:	2300      	movs	r3, #0
 800092a:	9303      	str	r3, [sp, #12]
 800092c:	e753      	b.n	80007d6 <__aeabi_ddiv+0x4e>
 800092e:	2300      	movs	r3, #0
 8000930:	4698      	mov	r8, r3
 8000932:	469a      	mov	sl, r3
 8000934:	3301      	adds	r3, #1
 8000936:	2404      	movs	r4, #4
 8000938:	9303      	str	r3, [sp, #12]
 800093a:	e74c      	b.n	80007d6 <__aeabi_ddiv+0x4e>
 800093c:	2301      	movs	r3, #1
 800093e:	431c      	orrs	r4, r3
 8000940:	2300      	movs	r3, #0
 8000942:	2101      	movs	r1, #1
 8000944:	469b      	mov	fp, r3
 8000946:	e764      	b.n	8000812 <__aeabi_ddiv+0x8a>
 8000948:	2303      	movs	r3, #3
 800094a:	0032      	movs	r2, r6
 800094c:	2103      	movs	r1, #3
 800094e:	431c      	orrs	r4, r3
 8000950:	e75f      	b.n	8000812 <__aeabi_ddiv+0x8a>
 8000952:	469a      	mov	sl, r3
 8000954:	2303      	movs	r3, #3
 8000956:	46d9      	mov	r9, fp
 8000958:	240c      	movs	r4, #12
 800095a:	9303      	str	r3, [sp, #12]
 800095c:	e73b      	b.n	80007d6 <__aeabi_ddiv+0x4e>
 800095e:	2300      	movs	r3, #0
 8000960:	2480      	movs	r4, #128	@ 0x80
 8000962:	4698      	mov	r8, r3
 8000964:	2600      	movs	r6, #0
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <__aeabi_ddiv+0x21c>)
 8000968:	0324      	lsls	r4, r4, #12
 800096a:	e779      	b.n	8000860 <__aeabi_ddiv+0xd8>
 800096c:	2480      	movs	r4, #128	@ 0x80
 800096e:	465b      	mov	r3, fp
 8000970:	0324      	lsls	r4, r4, #12
 8000972:	431c      	orrs	r4, r3
 8000974:	0324      	lsls	r4, r4, #12
 8000976:	002e      	movs	r6, r5
 8000978:	4690      	mov	r8, r2
 800097a:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <__aeabi_ddiv+0x21c>)
 800097c:	0b24      	lsrs	r4, r4, #12
 800097e:	e76f      	b.n	8000860 <__aeabi_ddiv+0xd8>
 8000980:	2480      	movs	r4, #128	@ 0x80
 8000982:	464b      	mov	r3, r9
 8000984:	0324      	lsls	r4, r4, #12
 8000986:	4223      	tst	r3, r4
 8000988:	d002      	beq.n	8000990 <__aeabi_ddiv+0x208>
 800098a:	465b      	mov	r3, fp
 800098c:	4223      	tst	r3, r4
 800098e:	d0f0      	beq.n	8000972 <__aeabi_ddiv+0x1ea>
 8000990:	2480      	movs	r4, #128	@ 0x80
 8000992:	464b      	mov	r3, r9
 8000994:	0324      	lsls	r4, r4, #12
 8000996:	431c      	orrs	r4, r3
 8000998:	0324      	lsls	r4, r4, #12
 800099a:	9e02      	ldr	r6, [sp, #8]
 800099c:	4b01      	ldr	r3, [pc, #4]	@ (80009a4 <__aeabi_ddiv+0x21c>)
 800099e:	0b24      	lsrs	r4, r4, #12
 80009a0:	e75e      	b.n	8000860 <__aeabi_ddiv+0xd8>
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	000007ff 	.word	0x000007ff
 80009a8:	fffffc01 	.word	0xfffffc01
 80009ac:	080041c8 	.word	0x080041c8
 80009b0:	fffff801 	.word	0xfffff801
 80009b4:	000003f3 	.word	0x000003f3
 80009b8:	fffffc0d 	.word	0xfffffc0d
 80009bc:	45cb      	cmp	fp, r9
 80009be:	d200      	bcs.n	80009c2 <__aeabi_ddiv+0x23a>
 80009c0:	e0f8      	b.n	8000bb4 <__aeabi_ddiv+0x42c>
 80009c2:	d100      	bne.n	80009c6 <__aeabi_ddiv+0x23e>
 80009c4:	e0f3      	b.n	8000bae <__aeabi_ddiv+0x426>
 80009c6:	2301      	movs	r3, #1
 80009c8:	425b      	negs	r3, r3
 80009ca:	469c      	mov	ip, r3
 80009cc:	4644      	mov	r4, r8
 80009ce:	4648      	mov	r0, r9
 80009d0:	2500      	movs	r5, #0
 80009d2:	44e2      	add	sl, ip
 80009d4:	465b      	mov	r3, fp
 80009d6:	0e17      	lsrs	r7, r2, #24
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	431f      	orrs	r7, r3
 80009dc:	0c19      	lsrs	r1, r3, #16
 80009de:	043b      	lsls	r3, r7, #16
 80009e0:	0212      	lsls	r2, r2, #8
 80009e2:	9700      	str	r7, [sp, #0]
 80009e4:	0c1f      	lsrs	r7, r3, #16
 80009e6:	4691      	mov	r9, r2
 80009e8:	9102      	str	r1, [sp, #8]
 80009ea:	9703      	str	r7, [sp, #12]
 80009ec:	f7ff fc12 	bl	8000214 <__aeabi_uidivmod>
 80009f0:	0002      	movs	r2, r0
 80009f2:	437a      	muls	r2, r7
 80009f4:	040b      	lsls	r3, r1, #16
 80009f6:	0c21      	lsrs	r1, r4, #16
 80009f8:	4680      	mov	r8, r0
 80009fa:	4319      	orrs	r1, r3
 80009fc:	428a      	cmp	r2, r1
 80009fe:	d909      	bls.n	8000a14 <__aeabi_ddiv+0x28c>
 8000a00:	9f00      	ldr	r7, [sp, #0]
 8000a02:	2301      	movs	r3, #1
 8000a04:	46bc      	mov	ip, r7
 8000a06:	425b      	negs	r3, r3
 8000a08:	4461      	add	r1, ip
 8000a0a:	469c      	mov	ip, r3
 8000a0c:	44e0      	add	r8, ip
 8000a0e:	428f      	cmp	r7, r1
 8000a10:	d800      	bhi.n	8000a14 <__aeabi_ddiv+0x28c>
 8000a12:	e15c      	b.n	8000cce <__aeabi_ddiv+0x546>
 8000a14:	1a88      	subs	r0, r1, r2
 8000a16:	9902      	ldr	r1, [sp, #8]
 8000a18:	f7ff fbfc 	bl	8000214 <__aeabi_uidivmod>
 8000a1c:	9a03      	ldr	r2, [sp, #12]
 8000a1e:	0424      	lsls	r4, r4, #16
 8000a20:	4342      	muls	r2, r0
 8000a22:	0409      	lsls	r1, r1, #16
 8000a24:	0c24      	lsrs	r4, r4, #16
 8000a26:	0003      	movs	r3, r0
 8000a28:	430c      	orrs	r4, r1
 8000a2a:	42a2      	cmp	r2, r4
 8000a2c:	d906      	bls.n	8000a3c <__aeabi_ddiv+0x2b4>
 8000a2e:	9900      	ldr	r1, [sp, #0]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	468c      	mov	ip, r1
 8000a34:	4464      	add	r4, ip
 8000a36:	42a1      	cmp	r1, r4
 8000a38:	d800      	bhi.n	8000a3c <__aeabi_ddiv+0x2b4>
 8000a3a:	e142      	b.n	8000cc2 <__aeabi_ddiv+0x53a>
 8000a3c:	1aa0      	subs	r0, r4, r2
 8000a3e:	4642      	mov	r2, r8
 8000a40:	0412      	lsls	r2, r2, #16
 8000a42:	431a      	orrs	r2, r3
 8000a44:	4693      	mov	fp, r2
 8000a46:	464b      	mov	r3, r9
 8000a48:	4659      	mov	r1, fp
 8000a4a:	0c1b      	lsrs	r3, r3, #16
 8000a4c:	001f      	movs	r7, r3
 8000a4e:	9304      	str	r3, [sp, #16]
 8000a50:	040b      	lsls	r3, r1, #16
 8000a52:	4649      	mov	r1, r9
 8000a54:	0409      	lsls	r1, r1, #16
 8000a56:	0c09      	lsrs	r1, r1, #16
 8000a58:	000c      	movs	r4, r1
 8000a5a:	0c1b      	lsrs	r3, r3, #16
 8000a5c:	435c      	muls	r4, r3
 8000a5e:	0c12      	lsrs	r2, r2, #16
 8000a60:	437b      	muls	r3, r7
 8000a62:	4688      	mov	r8, r1
 8000a64:	4351      	muls	r1, r2
 8000a66:	437a      	muls	r2, r7
 8000a68:	0c27      	lsrs	r7, r4, #16
 8000a6a:	46bc      	mov	ip, r7
 8000a6c:	185b      	adds	r3, r3, r1
 8000a6e:	4463      	add	r3, ip
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d903      	bls.n	8000a7c <__aeabi_ddiv+0x2f4>
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	0249      	lsls	r1, r1, #9
 8000a78:	468c      	mov	ip, r1
 8000a7a:	4462      	add	r2, ip
 8000a7c:	0c19      	lsrs	r1, r3, #16
 8000a7e:	0424      	lsls	r4, r4, #16
 8000a80:	041b      	lsls	r3, r3, #16
 8000a82:	0c24      	lsrs	r4, r4, #16
 8000a84:	188a      	adds	r2, r1, r2
 8000a86:	191c      	adds	r4, r3, r4
 8000a88:	4290      	cmp	r0, r2
 8000a8a:	d302      	bcc.n	8000a92 <__aeabi_ddiv+0x30a>
 8000a8c:	d116      	bne.n	8000abc <__aeabi_ddiv+0x334>
 8000a8e:	42a5      	cmp	r5, r4
 8000a90:	d214      	bcs.n	8000abc <__aeabi_ddiv+0x334>
 8000a92:	465b      	mov	r3, fp
 8000a94:	9f00      	ldr	r7, [sp, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	444d      	add	r5, r9
 8000a9a:	9305      	str	r3, [sp, #20]
 8000a9c:	454d      	cmp	r5, r9
 8000a9e:	419b      	sbcs	r3, r3
 8000aa0:	46bc      	mov	ip, r7
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	4463      	add	r3, ip
 8000aa6:	18c0      	adds	r0, r0, r3
 8000aa8:	4287      	cmp	r7, r0
 8000aaa:	d300      	bcc.n	8000aae <__aeabi_ddiv+0x326>
 8000aac:	e102      	b.n	8000cb4 <__aeabi_ddiv+0x52c>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	d900      	bls.n	8000ab4 <__aeabi_ddiv+0x32c>
 8000ab2:	e129      	b.n	8000d08 <__aeabi_ddiv+0x580>
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_ddiv+0x330>
 8000ab6:	e124      	b.n	8000d02 <__aeabi_ddiv+0x57a>
 8000ab8:	9b05      	ldr	r3, [sp, #20]
 8000aba:	469b      	mov	fp, r3
 8000abc:	1b2c      	subs	r4, r5, r4
 8000abe:	42a5      	cmp	r5, r4
 8000ac0:	41ad      	sbcs	r5, r5
 8000ac2:	9b00      	ldr	r3, [sp, #0]
 8000ac4:	1a80      	subs	r0, r0, r2
 8000ac6:	426d      	negs	r5, r5
 8000ac8:	1b40      	subs	r0, r0, r5
 8000aca:	4283      	cmp	r3, r0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_ddiv+0x348>
 8000ace:	e10f      	b.n	8000cf0 <__aeabi_ddiv+0x568>
 8000ad0:	9902      	ldr	r1, [sp, #8]
 8000ad2:	f7ff fb9f 	bl	8000214 <__aeabi_uidivmod>
 8000ad6:	9a03      	ldr	r2, [sp, #12]
 8000ad8:	040b      	lsls	r3, r1, #16
 8000ada:	4342      	muls	r2, r0
 8000adc:	0c21      	lsrs	r1, r4, #16
 8000ade:	0005      	movs	r5, r0
 8000ae0:	4319      	orrs	r1, r3
 8000ae2:	428a      	cmp	r2, r1
 8000ae4:	d900      	bls.n	8000ae8 <__aeabi_ddiv+0x360>
 8000ae6:	e0cb      	b.n	8000c80 <__aeabi_ddiv+0x4f8>
 8000ae8:	1a88      	subs	r0, r1, r2
 8000aea:	9902      	ldr	r1, [sp, #8]
 8000aec:	f7ff fb92 	bl	8000214 <__aeabi_uidivmod>
 8000af0:	9a03      	ldr	r2, [sp, #12]
 8000af2:	0424      	lsls	r4, r4, #16
 8000af4:	4342      	muls	r2, r0
 8000af6:	0409      	lsls	r1, r1, #16
 8000af8:	0c24      	lsrs	r4, r4, #16
 8000afa:	0003      	movs	r3, r0
 8000afc:	430c      	orrs	r4, r1
 8000afe:	42a2      	cmp	r2, r4
 8000b00:	d900      	bls.n	8000b04 <__aeabi_ddiv+0x37c>
 8000b02:	e0ca      	b.n	8000c9a <__aeabi_ddiv+0x512>
 8000b04:	4641      	mov	r1, r8
 8000b06:	1aa4      	subs	r4, r4, r2
 8000b08:	042a      	lsls	r2, r5, #16
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	9f04      	ldr	r7, [sp, #16]
 8000b0e:	0413      	lsls	r3, r2, #16
 8000b10:	0c1b      	lsrs	r3, r3, #16
 8000b12:	4359      	muls	r1, r3
 8000b14:	4640      	mov	r0, r8
 8000b16:	437b      	muls	r3, r7
 8000b18:	469c      	mov	ip, r3
 8000b1a:	0c15      	lsrs	r5, r2, #16
 8000b1c:	4368      	muls	r0, r5
 8000b1e:	0c0b      	lsrs	r3, r1, #16
 8000b20:	4484      	add	ip, r0
 8000b22:	4463      	add	r3, ip
 8000b24:	437d      	muls	r5, r7
 8000b26:	4298      	cmp	r0, r3
 8000b28:	d903      	bls.n	8000b32 <__aeabi_ddiv+0x3aa>
 8000b2a:	2080      	movs	r0, #128	@ 0x80
 8000b2c:	0240      	lsls	r0, r0, #9
 8000b2e:	4684      	mov	ip, r0
 8000b30:	4465      	add	r5, ip
 8000b32:	0c18      	lsrs	r0, r3, #16
 8000b34:	0409      	lsls	r1, r1, #16
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	0c09      	lsrs	r1, r1, #16
 8000b3a:	1940      	adds	r0, r0, r5
 8000b3c:	185b      	adds	r3, r3, r1
 8000b3e:	4284      	cmp	r4, r0
 8000b40:	d327      	bcc.n	8000b92 <__aeabi_ddiv+0x40a>
 8000b42:	d023      	beq.n	8000b8c <__aeabi_ddiv+0x404>
 8000b44:	2301      	movs	r3, #1
 8000b46:	0035      	movs	r5, r6
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	4b94      	ldr	r3, [pc, #592]	@ (8000d9c <__aeabi_ddiv+0x614>)
 8000b4c:	4453      	add	r3, sl
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dd60      	ble.n	8000c14 <__aeabi_ddiv+0x48c>
 8000b52:	0751      	lsls	r1, r2, #29
 8000b54:	d000      	beq.n	8000b58 <__aeabi_ddiv+0x3d0>
 8000b56:	e086      	b.n	8000c66 <__aeabi_ddiv+0x4de>
 8000b58:	002e      	movs	r6, r5
 8000b5a:	08d1      	lsrs	r1, r2, #3
 8000b5c:	465a      	mov	r2, fp
 8000b5e:	01d2      	lsls	r2, r2, #7
 8000b60:	d506      	bpl.n	8000b70 <__aeabi_ddiv+0x3e8>
 8000b62:	465a      	mov	r2, fp
 8000b64:	4b8e      	ldr	r3, [pc, #568]	@ (8000da0 <__aeabi_ddiv+0x618>)
 8000b66:	401a      	ands	r2, r3
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	4693      	mov	fp, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	4453      	add	r3, sl
 8000b70:	4a8c      	ldr	r2, [pc, #560]	@ (8000da4 <__aeabi_ddiv+0x61c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	dd00      	ble.n	8000b78 <__aeabi_ddiv+0x3f0>
 8000b76:	e680      	b.n	800087a <__aeabi_ddiv+0xf2>
 8000b78:	465a      	mov	r2, fp
 8000b7a:	0752      	lsls	r2, r2, #29
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	4690      	mov	r8, r2
 8000b80:	465a      	mov	r2, fp
 8000b82:	055b      	lsls	r3, r3, #21
 8000b84:	0254      	lsls	r4, r2, #9
 8000b86:	0b24      	lsrs	r4, r4, #12
 8000b88:	0d5b      	lsrs	r3, r3, #21
 8000b8a:	e669      	b.n	8000860 <__aeabi_ddiv+0xd8>
 8000b8c:	0035      	movs	r5, r6
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0db      	beq.n	8000b4a <__aeabi_ddiv+0x3c2>
 8000b92:	9d00      	ldr	r5, [sp, #0]
 8000b94:	1e51      	subs	r1, r2, #1
 8000b96:	46ac      	mov	ip, r5
 8000b98:	4464      	add	r4, ip
 8000b9a:	42ac      	cmp	r4, r5
 8000b9c:	d200      	bcs.n	8000ba0 <__aeabi_ddiv+0x418>
 8000b9e:	e09e      	b.n	8000cde <__aeabi_ddiv+0x556>
 8000ba0:	4284      	cmp	r4, r0
 8000ba2:	d200      	bcs.n	8000ba6 <__aeabi_ddiv+0x41e>
 8000ba4:	e0e1      	b.n	8000d6a <__aeabi_ddiv+0x5e2>
 8000ba6:	d100      	bne.n	8000baa <__aeabi_ddiv+0x422>
 8000ba8:	e0ee      	b.n	8000d88 <__aeabi_ddiv+0x600>
 8000baa:	000a      	movs	r2, r1
 8000bac:	e7ca      	b.n	8000b44 <__aeabi_ddiv+0x3bc>
 8000bae:	4542      	cmp	r2, r8
 8000bb0:	d900      	bls.n	8000bb4 <__aeabi_ddiv+0x42c>
 8000bb2:	e708      	b.n	80009c6 <__aeabi_ddiv+0x23e>
 8000bb4:	464b      	mov	r3, r9
 8000bb6:	07dc      	lsls	r4, r3, #31
 8000bb8:	0858      	lsrs	r0, r3, #1
 8000bba:	4643      	mov	r3, r8
 8000bbc:	085b      	lsrs	r3, r3, #1
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	4643      	mov	r3, r8
 8000bc2:	07dd      	lsls	r5, r3, #31
 8000bc4:	e706      	b.n	80009d4 <__aeabi_ddiv+0x24c>
 8000bc6:	f000 f9a7 	bl	8000f18 <__clzsi2>
 8000bca:	2315      	movs	r3, #21
 8000bcc:	469c      	mov	ip, r3
 8000bce:	4484      	add	ip, r0
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	3220      	adds	r2, #32
 8000bd6:	2b1c      	cmp	r3, #28
 8000bd8:	dc00      	bgt.n	8000bdc <__aeabi_ddiv+0x454>
 8000bda:	e692      	b.n	8000902 <__aeabi_ddiv+0x17a>
 8000bdc:	0023      	movs	r3, r4
 8000bde:	3808      	subs	r0, #8
 8000be0:	4083      	lsls	r3, r0
 8000be2:	4699      	mov	r9, r3
 8000be4:	2300      	movs	r3, #0
 8000be6:	4698      	mov	r8, r3
 8000be8:	e69a      	b.n	8000920 <__aeabi_ddiv+0x198>
 8000bea:	f000 f995 	bl	8000f18 <__clzsi2>
 8000bee:	0002      	movs	r2, r0
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	3215      	adds	r2, #21
 8000bf4:	3320      	adds	r3, #32
 8000bf6:	2a1c      	cmp	r2, #28
 8000bf8:	dc00      	bgt.n	8000bfc <__aeabi_ddiv+0x474>
 8000bfa:	e65f      	b.n	80008bc <__aeabi_ddiv+0x134>
 8000bfc:	9900      	ldr	r1, [sp, #0]
 8000bfe:	3808      	subs	r0, #8
 8000c00:	4081      	lsls	r1, r0
 8000c02:	2200      	movs	r2, #0
 8000c04:	468b      	mov	fp, r1
 8000c06:	e666      	b.n	80008d6 <__aeabi_ddiv+0x14e>
 8000c08:	2200      	movs	r2, #0
 8000c0a:	002e      	movs	r6, r5
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4b65      	ldr	r3, [pc, #404]	@ (8000da8 <__aeabi_ddiv+0x620>)
 8000c12:	e625      	b.n	8000860 <__aeabi_ddiv+0xd8>
 8000c14:	002e      	movs	r6, r5
 8000c16:	2101      	movs	r1, #1
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	2938      	cmp	r1, #56	@ 0x38
 8000c1c:	dd00      	ble.n	8000c20 <__aeabi_ddiv+0x498>
 8000c1e:	e61b      	b.n	8000858 <__aeabi_ddiv+0xd0>
 8000c20:	291f      	cmp	r1, #31
 8000c22:	dc7e      	bgt.n	8000d22 <__aeabi_ddiv+0x59a>
 8000c24:	4861      	ldr	r0, [pc, #388]	@ (8000dac <__aeabi_ddiv+0x624>)
 8000c26:	0014      	movs	r4, r2
 8000c28:	4450      	add	r0, sl
 8000c2a:	465b      	mov	r3, fp
 8000c2c:	4082      	lsls	r2, r0
 8000c2e:	4083      	lsls	r3, r0
 8000c30:	40cc      	lsrs	r4, r1
 8000c32:	1e50      	subs	r0, r2, #1
 8000c34:	4182      	sbcs	r2, r0
 8000c36:	4323      	orrs	r3, r4
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	465b      	mov	r3, fp
 8000c3c:	40cb      	lsrs	r3, r1
 8000c3e:	0751      	lsls	r1, r2, #29
 8000c40:	d009      	beq.n	8000c56 <__aeabi_ddiv+0x4ce>
 8000c42:	210f      	movs	r1, #15
 8000c44:	4011      	ands	r1, r2
 8000c46:	2904      	cmp	r1, #4
 8000c48:	d005      	beq.n	8000c56 <__aeabi_ddiv+0x4ce>
 8000c4a:	1d11      	adds	r1, r2, #4
 8000c4c:	4291      	cmp	r1, r2
 8000c4e:	4192      	sbcs	r2, r2
 8000c50:	4252      	negs	r2, r2
 8000c52:	189b      	adds	r3, r3, r2
 8000c54:	000a      	movs	r2, r1
 8000c56:	0219      	lsls	r1, r3, #8
 8000c58:	d400      	bmi.n	8000c5c <__aeabi_ddiv+0x4d4>
 8000c5a:	e09b      	b.n	8000d94 <__aeabi_ddiv+0x60c>
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2301      	movs	r3, #1
 8000c60:	2400      	movs	r4, #0
 8000c62:	4690      	mov	r8, r2
 8000c64:	e5fc      	b.n	8000860 <__aeabi_ddiv+0xd8>
 8000c66:	210f      	movs	r1, #15
 8000c68:	4011      	ands	r1, r2
 8000c6a:	2904      	cmp	r1, #4
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_ddiv+0x4e8>
 8000c6e:	e773      	b.n	8000b58 <__aeabi_ddiv+0x3d0>
 8000c70:	1d11      	adds	r1, r2, #4
 8000c72:	4291      	cmp	r1, r2
 8000c74:	4192      	sbcs	r2, r2
 8000c76:	4252      	negs	r2, r2
 8000c78:	002e      	movs	r6, r5
 8000c7a:	08c9      	lsrs	r1, r1, #3
 8000c7c:	4493      	add	fp, r2
 8000c7e:	e76d      	b.n	8000b5c <__aeabi_ddiv+0x3d4>
 8000c80:	9b00      	ldr	r3, [sp, #0]
 8000c82:	3d01      	subs	r5, #1
 8000c84:	469c      	mov	ip, r3
 8000c86:	4461      	add	r1, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d900      	bls.n	8000c8e <__aeabi_ddiv+0x506>
 8000c8c:	e72c      	b.n	8000ae8 <__aeabi_ddiv+0x360>
 8000c8e:	428a      	cmp	r2, r1
 8000c90:	d800      	bhi.n	8000c94 <__aeabi_ddiv+0x50c>
 8000c92:	e729      	b.n	8000ae8 <__aeabi_ddiv+0x360>
 8000c94:	1e85      	subs	r5, r0, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e726      	b.n	8000ae8 <__aeabi_ddiv+0x360>
 8000c9a:	9900      	ldr	r1, [sp, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	468c      	mov	ip, r1
 8000ca0:	4464      	add	r4, ip
 8000ca2:	42a1      	cmp	r1, r4
 8000ca4:	d900      	bls.n	8000ca8 <__aeabi_ddiv+0x520>
 8000ca6:	e72d      	b.n	8000b04 <__aeabi_ddiv+0x37c>
 8000ca8:	42a2      	cmp	r2, r4
 8000caa:	d800      	bhi.n	8000cae <__aeabi_ddiv+0x526>
 8000cac:	e72a      	b.n	8000b04 <__aeabi_ddiv+0x37c>
 8000cae:	1e83      	subs	r3, r0, #2
 8000cb0:	4464      	add	r4, ip
 8000cb2:	e727      	b.n	8000b04 <__aeabi_ddiv+0x37c>
 8000cb4:	4287      	cmp	r7, r0
 8000cb6:	d000      	beq.n	8000cba <__aeabi_ddiv+0x532>
 8000cb8:	e6fe      	b.n	8000ab8 <__aeabi_ddiv+0x330>
 8000cba:	45a9      	cmp	r9, r5
 8000cbc:	d900      	bls.n	8000cc0 <__aeabi_ddiv+0x538>
 8000cbe:	e6fb      	b.n	8000ab8 <__aeabi_ddiv+0x330>
 8000cc0:	e6f5      	b.n	8000aae <__aeabi_ddiv+0x326>
 8000cc2:	42a2      	cmp	r2, r4
 8000cc4:	d800      	bhi.n	8000cc8 <__aeabi_ddiv+0x540>
 8000cc6:	e6b9      	b.n	8000a3c <__aeabi_ddiv+0x2b4>
 8000cc8:	1e83      	subs	r3, r0, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	e6b6      	b.n	8000a3c <__aeabi_ddiv+0x2b4>
 8000cce:	428a      	cmp	r2, r1
 8000cd0:	d800      	bhi.n	8000cd4 <__aeabi_ddiv+0x54c>
 8000cd2:	e69f      	b.n	8000a14 <__aeabi_ddiv+0x28c>
 8000cd4:	46bc      	mov	ip, r7
 8000cd6:	1e83      	subs	r3, r0, #2
 8000cd8:	4698      	mov	r8, r3
 8000cda:	4461      	add	r1, ip
 8000cdc:	e69a      	b.n	8000a14 <__aeabi_ddiv+0x28c>
 8000cde:	000a      	movs	r2, r1
 8000ce0:	4284      	cmp	r4, r0
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_ddiv+0x55e>
 8000ce4:	e72e      	b.n	8000b44 <__aeabi_ddiv+0x3bc>
 8000ce6:	454b      	cmp	r3, r9
 8000ce8:	d000      	beq.n	8000cec <__aeabi_ddiv+0x564>
 8000cea:	e72b      	b.n	8000b44 <__aeabi_ddiv+0x3bc>
 8000cec:	0035      	movs	r5, r6
 8000cee:	e72c      	b.n	8000b4a <__aeabi_ddiv+0x3c2>
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d9c <__aeabi_ddiv+0x614>)
 8000cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8000db0 <__aeabi_ddiv+0x628>)
 8000cf4:	4453      	add	r3, sl
 8000cf6:	4592      	cmp	sl, r2
 8000cf8:	db43      	blt.n	8000d82 <__aeabi_ddiv+0x5fa>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4493      	add	fp, r2
 8000d00:	e72c      	b.n	8000b5c <__aeabi_ddiv+0x3d4>
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	d800      	bhi.n	8000d08 <__aeabi_ddiv+0x580>
 8000d06:	e6d7      	b.n	8000ab8 <__aeabi_ddiv+0x330>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	469c      	mov	ip, r3
 8000d0e:	9900      	ldr	r1, [sp, #0]
 8000d10:	444d      	add	r5, r9
 8000d12:	454d      	cmp	r5, r9
 8000d14:	419b      	sbcs	r3, r3
 8000d16:	44e3      	add	fp, ip
 8000d18:	468c      	mov	ip, r1
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	4463      	add	r3, ip
 8000d1e:	18c0      	adds	r0, r0, r3
 8000d20:	e6cc      	b.n	8000abc <__aeabi_ddiv+0x334>
 8000d22:	201f      	movs	r0, #31
 8000d24:	4240      	negs	r0, r0
 8000d26:	1ac3      	subs	r3, r0, r3
 8000d28:	4658      	mov	r0, fp
 8000d2a:	40d8      	lsrs	r0, r3
 8000d2c:	2920      	cmp	r1, #32
 8000d2e:	d004      	beq.n	8000d3a <__aeabi_ddiv+0x5b2>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <__aeabi_ddiv+0x62c>)
 8000d34:	4453      	add	r3, sl
 8000d36:	4099      	lsls	r1, r3
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	1e53      	subs	r3, r2, #1
 8000d3c:	419a      	sbcs	r2, r3
 8000d3e:	2307      	movs	r3, #7
 8000d40:	0019      	movs	r1, r3
 8000d42:	4302      	orrs	r2, r0
 8000d44:	2400      	movs	r4, #0
 8000d46:	4011      	ands	r1, r2
 8000d48:	4213      	tst	r3, r2
 8000d4a:	d009      	beq.n	8000d60 <__aeabi_ddiv+0x5d8>
 8000d4c:	3308      	adds	r3, #8
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d01d      	beq.n	8000d90 <__aeabi_ddiv+0x608>
 8000d54:	1d13      	adds	r3, r2, #4
 8000d56:	4293      	cmp	r3, r2
 8000d58:	4189      	sbcs	r1, r1
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	4249      	negs	r1, r1
 8000d5e:	0749      	lsls	r1, r1, #29
 8000d60:	08d2      	lsrs	r2, r2, #3
 8000d62:	430a      	orrs	r2, r1
 8000d64:	4690      	mov	r8, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e57a      	b.n	8000860 <__aeabi_ddiv+0xd8>
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	9f00      	ldr	r7, [sp, #0]
 8000d6e:	004d      	lsls	r5, r1, #1
 8000d70:	454d      	cmp	r5, r9
 8000d72:	4189      	sbcs	r1, r1
 8000d74:	46bc      	mov	ip, r7
 8000d76:	4249      	negs	r1, r1
 8000d78:	4461      	add	r1, ip
 8000d7a:	46a9      	mov	r9, r5
 8000d7c:	3a02      	subs	r2, #2
 8000d7e:	1864      	adds	r4, r4, r1
 8000d80:	e7ae      	b.n	8000ce0 <__aeabi_ddiv+0x558>
 8000d82:	2201      	movs	r2, #1
 8000d84:	4252      	negs	r2, r2
 8000d86:	e746      	b.n	8000c16 <__aeabi_ddiv+0x48e>
 8000d88:	4599      	cmp	r9, r3
 8000d8a:	d3ee      	bcc.n	8000d6a <__aeabi_ddiv+0x5e2>
 8000d8c:	000a      	movs	r2, r1
 8000d8e:	e7aa      	b.n	8000ce6 <__aeabi_ddiv+0x55e>
 8000d90:	2100      	movs	r1, #0
 8000d92:	e7e5      	b.n	8000d60 <__aeabi_ddiv+0x5d8>
 8000d94:	0759      	lsls	r1, r3, #29
 8000d96:	025b      	lsls	r3, r3, #9
 8000d98:	0b1c      	lsrs	r4, r3, #12
 8000d9a:	e7e1      	b.n	8000d60 <__aeabi_ddiv+0x5d8>
 8000d9c:	000003ff 	.word	0x000003ff
 8000da0:	feffffff 	.word	0xfeffffff
 8000da4:	000007fe 	.word	0x000007fe
 8000da8:	000007ff 	.word	0x000007ff
 8000dac:	0000041e 	.word	0x0000041e
 8000db0:	fffffc02 	.word	0xfffffc02
 8000db4:	0000043e 	.word	0x0000043e

08000db8 <__aeabi_i2d>:
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d016      	beq.n	8000dec <__aeabi_i2d+0x34>
 8000dbe:	17c3      	asrs	r3, r0, #31
 8000dc0:	18c5      	adds	r5, r0, r3
 8000dc2:	405d      	eors	r5, r3
 8000dc4:	0fc4      	lsrs	r4, r0, #31
 8000dc6:	0028      	movs	r0, r5
 8000dc8:	f000 f8a6 	bl	8000f18 <__clzsi2>
 8000dcc:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <__aeabi_i2d+0x58>)
 8000dce:	1a1b      	subs	r3, r3, r0
 8000dd0:	055b      	lsls	r3, r3, #21
 8000dd2:	0d5b      	lsrs	r3, r3, #21
 8000dd4:	280a      	cmp	r0, #10
 8000dd6:	dc14      	bgt.n	8000e02 <__aeabi_i2d+0x4a>
 8000dd8:	0002      	movs	r2, r0
 8000dda:	002e      	movs	r6, r5
 8000ddc:	3215      	adds	r2, #21
 8000dde:	4096      	lsls	r6, r2
 8000de0:	220b      	movs	r2, #11
 8000de2:	1a12      	subs	r2, r2, r0
 8000de4:	40d5      	lsrs	r5, r2
 8000de6:	032d      	lsls	r5, r5, #12
 8000de8:	0b2d      	lsrs	r5, r5, #12
 8000dea:	e003      	b.n	8000df4 <__aeabi_i2d+0x3c>
 8000dec:	2400      	movs	r4, #0
 8000dee:	2300      	movs	r3, #0
 8000df0:	2500      	movs	r5, #0
 8000df2:	2600      	movs	r6, #0
 8000df4:	051b      	lsls	r3, r3, #20
 8000df6:	432b      	orrs	r3, r5
 8000df8:	07e4      	lsls	r4, r4, #31
 8000dfa:	4323      	orrs	r3, r4
 8000dfc:	0030      	movs	r0, r6
 8000dfe:	0019      	movs	r1, r3
 8000e00:	bd70      	pop	{r4, r5, r6, pc}
 8000e02:	380b      	subs	r0, #11
 8000e04:	4085      	lsls	r5, r0
 8000e06:	032d      	lsls	r5, r5, #12
 8000e08:	2600      	movs	r6, #0
 8000e0a:	0b2d      	lsrs	r5, r5, #12
 8000e0c:	e7f2      	b.n	8000df4 <__aeabi_i2d+0x3c>
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	0000041e 	.word	0x0000041e

08000e14 <__aeabi_d2f>:
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	004b      	lsls	r3, r1, #1
 8000e18:	030f      	lsls	r7, r1, #12
 8000e1a:	0d5b      	lsrs	r3, r3, #21
 8000e1c:	4c3a      	ldr	r4, [pc, #232]	@ (8000f08 <__aeabi_d2f+0xf4>)
 8000e1e:	0f45      	lsrs	r5, r0, #29
 8000e20:	b083      	sub	sp, #12
 8000e22:	0a7f      	lsrs	r7, r7, #9
 8000e24:	1c5e      	adds	r6, r3, #1
 8000e26:	432f      	orrs	r7, r5
 8000e28:	9000      	str	r0, [sp, #0]
 8000e2a:	9101      	str	r1, [sp, #4]
 8000e2c:	0fca      	lsrs	r2, r1, #31
 8000e2e:	00c5      	lsls	r5, r0, #3
 8000e30:	4226      	tst	r6, r4
 8000e32:	d00b      	beq.n	8000e4c <__aeabi_d2f+0x38>
 8000e34:	4935      	ldr	r1, [pc, #212]	@ (8000f0c <__aeabi_d2f+0xf8>)
 8000e36:	185c      	adds	r4, r3, r1
 8000e38:	2cfe      	cmp	r4, #254	@ 0xfe
 8000e3a:	dd13      	ble.n	8000e64 <__aeabi_d2f+0x50>
 8000e3c:	20ff      	movs	r0, #255	@ 0xff
 8000e3e:	2300      	movs	r3, #0
 8000e40:	05c0      	lsls	r0, r0, #23
 8000e42:	4318      	orrs	r0, r3
 8000e44:	07d2      	lsls	r2, r2, #31
 8000e46:	4310      	orrs	r0, r2
 8000e48:	b003      	add	sp, #12
 8000e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4c:	433d      	orrs	r5, r7
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <__aeabi_d2f+0x42>
 8000e52:	2000      	movs	r0, #0
 8000e54:	e7f4      	b.n	8000e40 <__aeabi_d2f+0x2c>
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0f0      	beq.n	8000e3c <__aeabi_d2f+0x28>
 8000e5a:	2380      	movs	r3, #128	@ 0x80
 8000e5c:	03db      	lsls	r3, r3, #15
 8000e5e:	20ff      	movs	r0, #255	@ 0xff
 8000e60:	433b      	orrs	r3, r7
 8000e62:	e7ed      	b.n	8000e40 <__aeabi_d2f+0x2c>
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	dd0c      	ble.n	8000e82 <__aeabi_d2f+0x6e>
 8000e68:	9b00      	ldr	r3, [sp, #0]
 8000e6a:	00ff      	lsls	r7, r7, #3
 8000e6c:	019b      	lsls	r3, r3, #6
 8000e6e:	1e58      	subs	r0, r3, #1
 8000e70:	4183      	sbcs	r3, r0
 8000e72:	0f69      	lsrs	r1, r5, #29
 8000e74:	433b      	orrs	r3, r7
 8000e76:	430b      	orrs	r3, r1
 8000e78:	0759      	lsls	r1, r3, #29
 8000e7a:	d127      	bne.n	8000ecc <__aeabi_d2f+0xb8>
 8000e7c:	08db      	lsrs	r3, r3, #3
 8000e7e:	b2e0      	uxtb	r0, r4
 8000e80:	e7de      	b.n	8000e40 <__aeabi_d2f+0x2c>
 8000e82:	0021      	movs	r1, r4
 8000e84:	3117      	adds	r1, #23
 8000e86:	db31      	blt.n	8000eec <__aeabi_d2f+0xd8>
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	201e      	movs	r0, #30
 8000e8c:	0409      	lsls	r1, r1, #16
 8000e8e:	4339      	orrs	r1, r7
 8000e90:	1b00      	subs	r0, r0, r4
 8000e92:	281f      	cmp	r0, #31
 8000e94:	dd2d      	ble.n	8000ef2 <__aeabi_d2f+0xde>
 8000e96:	2602      	movs	r6, #2
 8000e98:	4276      	negs	r6, r6
 8000e9a:	1b34      	subs	r4, r6, r4
 8000e9c:	000e      	movs	r6, r1
 8000e9e:	40e6      	lsrs	r6, r4
 8000ea0:	0034      	movs	r4, r6
 8000ea2:	2820      	cmp	r0, #32
 8000ea4:	d004      	beq.n	8000eb0 <__aeabi_d2f+0x9c>
 8000ea6:	481a      	ldr	r0, [pc, #104]	@ (8000f10 <__aeabi_d2f+0xfc>)
 8000ea8:	4684      	mov	ip, r0
 8000eaa:	4463      	add	r3, ip
 8000eac:	4099      	lsls	r1, r3
 8000eae:	430d      	orrs	r5, r1
 8000eb0:	002b      	movs	r3, r5
 8000eb2:	1e59      	subs	r1, r3, #1
 8000eb4:	418b      	sbcs	r3, r1
 8000eb6:	4323      	orrs	r3, r4
 8000eb8:	0759      	lsls	r1, r3, #29
 8000eba:	d003      	beq.n	8000ec4 <__aeabi_d2f+0xb0>
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	4019      	ands	r1, r3
 8000ec0:	2904      	cmp	r1, #4
 8000ec2:	d10b      	bne.n	8000edc <__aeabi_d2f+0xc8>
 8000ec4:	019b      	lsls	r3, r3, #6
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	0a5b      	lsrs	r3, r3, #9
 8000eca:	e7b9      	b.n	8000e40 <__aeabi_d2f+0x2c>
 8000ecc:	210f      	movs	r1, #15
 8000ece:	4019      	ands	r1, r3
 8000ed0:	2904      	cmp	r1, #4
 8000ed2:	d104      	bne.n	8000ede <__aeabi_d2f+0xca>
 8000ed4:	019b      	lsls	r3, r3, #6
 8000ed6:	0a5b      	lsrs	r3, r3, #9
 8000ed8:	b2e0      	uxtb	r0, r4
 8000eda:	e7b1      	b.n	8000e40 <__aeabi_d2f+0x2c>
 8000edc:	2400      	movs	r4, #0
 8000ede:	3304      	adds	r3, #4
 8000ee0:	0159      	lsls	r1, r3, #5
 8000ee2:	d5f7      	bpl.n	8000ed4 <__aeabi_d2f+0xc0>
 8000ee4:	3401      	adds	r4, #1
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	b2e0      	uxtb	r0, r4
 8000eea:	e7a9      	b.n	8000e40 <__aeabi_d2f+0x2c>
 8000eec:	2000      	movs	r0, #0
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e7a6      	b.n	8000e40 <__aeabi_d2f+0x2c>
 8000ef2:	4c08      	ldr	r4, [pc, #32]	@ (8000f14 <__aeabi_d2f+0x100>)
 8000ef4:	191c      	adds	r4, r3, r4
 8000ef6:	002b      	movs	r3, r5
 8000ef8:	40a5      	lsls	r5, r4
 8000efa:	40c3      	lsrs	r3, r0
 8000efc:	40a1      	lsls	r1, r4
 8000efe:	1e68      	subs	r0, r5, #1
 8000f00:	4185      	sbcs	r5, r0
 8000f02:	4329      	orrs	r1, r5
 8000f04:	430b      	orrs	r3, r1
 8000f06:	e7d7      	b.n	8000eb8 <__aeabi_d2f+0xa4>
 8000f08:	000007fe 	.word	0x000007fe
 8000f0c:	fffffc80 	.word	0xfffffc80
 8000f10:	fffffca2 	.word	0xfffffca2
 8000f14:	fffffc82 	.word	0xfffffc82

08000f18 <__clzsi2>:
 8000f18:	211c      	movs	r1, #28
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	d301      	bcc.n	8000f26 <__clzsi2+0xe>
 8000f22:	0c00      	lsrs	r0, r0, #16
 8000f24:	3910      	subs	r1, #16
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	4298      	cmp	r0, r3
 8000f2a:	d301      	bcc.n	8000f30 <__clzsi2+0x18>
 8000f2c:	0a00      	lsrs	r0, r0, #8
 8000f2e:	3908      	subs	r1, #8
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d301      	bcc.n	8000f3a <__clzsi2+0x22>
 8000f36:	0900      	lsrs	r0, r0, #4
 8000f38:	3904      	subs	r1, #4
 8000f3a:	a202      	add	r2, pc, #8	@ (adr r2, 8000f44 <__clzsi2+0x2c>)
 8000f3c:	5c10      	ldrb	r0, [r2, r0]
 8000f3e:	1840      	adds	r0, r0, r1
 8000f40:	4770      	bx	lr
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	02020304 	.word	0x02020304
 8000f48:	01010101 	.word	0x01010101
	...

08000f54 <Max31855_Read_Temp>:

uint8_t Error=0;                                      // Thermocouple Connection acknowledge Flag
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
// ------------------- Functions ----------------
float Max31855_Read_Temp(int sensor){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
int Temp=0;                                           // Temperature Variable
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
if(sensor == 1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d115      	bne.n	8000f92 <Max31855_Read_Temp+0x3e>
{
HAL_GPIO_WritePin(SSPORT1,SSPIN1,GPIO_PIN_RESET);       // Low State for SPI Communication
 8000f66:	2390      	movs	r3, #144	@ 0x90
 8000f68:	05db      	lsls	r3, r3, #23
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f001 f8c8 	bl	8002104 <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,4,1000);                // DATA Transfer
 8000f74:	23fa      	movs	r3, #250	@ 0xfa
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4943      	ldr	r1, [pc, #268]	@ (8001088 <Max31855_Read_Temp+0x134>)
 8000f7a:	4844      	ldr	r0, [pc, #272]	@ (800108c <Max31855_Read_Temp+0x138>)
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	f002 f81f 	bl	8002fc0 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT1,SSPIN1,GPIO_PIN_SET);		  // High State for SPI Communication
 8000f82:	2390      	movs	r3, #144	@ 0x90
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	2201      	movs	r2, #1
 8000f88:	2110      	movs	r1, #16
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f001 f8ba 	bl	8002104 <HAL_GPIO_WritePin>
 8000f90:	e019      	b.n	8000fc6 <Max31855_Read_Temp+0x72>
}
else if(sensor==2){
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d116      	bne.n	8000fc6 <Max31855_Read_Temp+0x72>
	HAL_GPIO_WritePin(SSPORT2,SSPIN2,GPIO_PIN_RESET);       // Low State for SPI Communication
 8000f98:	2380      	movs	r3, #128	@ 0x80
 8000f9a:	0219      	lsls	r1, r3, #8
 8000f9c:	2390      	movs	r3, #144	@ 0x90
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f001 f8ae 	bl	8002104 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,4,1000);                // DATA Transfer
 8000fa8:	23fa      	movs	r3, #250	@ 0xfa
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4936      	ldr	r1, [pc, #216]	@ (8001088 <Max31855_Read_Temp+0x134>)
 8000fae:	4837      	ldr	r0, [pc, #220]	@ (800108c <Max31855_Read_Temp+0x138>)
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	f002 f805 	bl	8002fc0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT2,SSPIN2,GPIO_PIN_SET);
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	0219      	lsls	r1, r3, #8
 8000fba:	2390      	movs	r3, #144	@ 0x90
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f001 f89f 	bl	8002104 <HAL_GPIO_WritePin>
}
Error=DATARX[3]&0x07;								  // Error Detection
 8000fc6:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <Max31855_Read_Temp+0x134>)
 8000fc8:	78db      	ldrb	r3, [r3, #3]
 8000fca:	2207      	movs	r2, #7
 8000fcc:	4013      	ands	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <Max31855_Read_Temp+0x13c>)
 8000fd2:	701a      	strb	r2, [r3, #0]
sign=(DATARX[0]&(0x80))>>7;							  // Sign Bit calculation
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001088 <Max31855_Read_Temp+0x134>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	09db      	lsrs	r3, r3, #7
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	001a      	movs	r2, r3
 8000fde:	4b2d      	ldr	r3, [pc, #180]	@ (8001094 <Max31855_Read_Temp+0x140>)
 8000fe0:	601a      	str	r2, [r3, #0]

if(DATARX[3] & 0x07)								  // Returns Error Number
 8000fe2:	4b29      	ldr	r3, [pc, #164]	@ (8001088 <Max31855_Read_Temp+0x134>)
 8000fe4:	78db      	ldrb	r3, [r3, #3]
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	2307      	movs	r3, #7
 8000fea:	4013      	ands	r3, r2
 8000fec:	d00a      	beq.n	8001004 <Max31855_Read_Temp+0xb0>
return(-1*(DATARX[3] & 0x07));
 8000fee:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <Max31855_Read_Temp+0x134>)
 8000ff0:	78db      	ldrb	r3, [r3, #3]
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff fb74 	bl	80006e8 <__aeabi_i2f>
 8001000:	1c03      	adds	r3, r0, #0
 8001002:	e03c      	b.n	800107e <Max31855_Read_Temp+0x12a>

else if(sign==1){									  // Negative Temperature
 8001004:	4b23      	ldr	r3, [pc, #140]	@ (8001094 <Max31855_Read_Temp+0x140>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d121      	bne.n	8001050 <Max31855_Read_Temp+0xfc>
Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <Max31855_Read_Temp+0x134>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	4a1d      	ldr	r2, [pc, #116]	@ (8001088 <Max31855_Read_Temp+0x134>)
 8001014:	7852      	ldrb	r2, [r2, #1]
 8001016:	0892      	lsrs	r2, r2, #2
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	4313      	orrs	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
Temp&=0b01111111111111;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	04db      	lsls	r3, r3, #19
 8001022:	0cdb      	lsrs	r3, r3, #19
 8001024:	60fb      	str	r3, [r7, #12]
Temp^=0b01111111111111;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <Max31855_Read_Temp+0x144>)
 800102a:	4053      	eors	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
return((double)-Temp/4);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	425b      	negs	r3, r3
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff fec0 	bl	8000db8 <__aeabi_i2d>
 8001038:	2200      	movs	r2, #0
 800103a:	4b18      	ldr	r3, [pc, #96]	@ (800109c <Max31855_Read_Temp+0x148>)
 800103c:	f7ff fba4 	bl	8000788 <__aeabi_ddiv>
 8001040:	0002      	movs	r2, r0
 8001042:	000b      	movs	r3, r1
 8001044:	0010      	movs	r0, r2
 8001046:	0019      	movs	r1, r3
 8001048:	f7ff fee4 	bl	8000e14 <__aeabi_d2f>
 800104c:	1c03      	adds	r3, r0, #0
 800104e:	e016      	b.n	800107e <Max31855_Read_Temp+0x12a>
	}

else												  // Positive Temperature
{
		Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8001050:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <Max31855_Read_Temp+0x134>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	019b      	lsls	r3, r3, #6
 8001056:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <Max31855_Read_Temp+0x134>)
 8001058:	7852      	ldrb	r2, [r2, #1]
 800105a:	0892      	lsrs	r2, r2, #2
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
		return((double)Temp / 4);
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff fea8 	bl	8000db8 <__aeabi_i2d>
 8001068:	2200      	movs	r2, #0
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <Max31855_Read_Temp+0x148>)
 800106c:	f7ff fb8c 	bl	8000788 <__aeabi_ddiv>
 8001070:	0002      	movs	r2, r0
 8001072:	000b      	movs	r3, r1
 8001074:	0010      	movs	r0, r2
 8001076:	0019      	movs	r1, r3
 8001078:	f7ff fecc 	bl	8000e14 <__aeabi_d2f>
 800107c:	1c03      	adds	r3, r0, #0
}
}
 800107e:	1c18      	adds	r0, r3, #0
 8001080:	46bd      	mov	sp, r7
 8001082:	b004      	add	sp, #16
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	20000034 	.word	0x20000034
 800108c:	2000008c 	.word	0x2000008c
 8001090:	2000002c 	.word	0x2000002c
 8001094:	20000030 	.word	0x20000030
 8001098:	00001fff 	.word	0x00001fff
 800109c:	40100000 	.word	0x40100000

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a4:	f000 fc76 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a8:	f000 f85e 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ac:	f000 f9c6 	bl	800143c <MX_GPIO_Init>
  MX_DMA_Init();
 80010b0:	f000 f9a6 	bl	8001400 <MX_DMA_Init>
  MX_I2C2_Init();
 80010b4:	f000 f8ba 	bl	800122c <MX_I2C2_Init>
  MX_SPI1_Init();
 80010b8:	f000 f8f8 	bl	80012ac <MX_SPI1_Init>
  MX_SPI2_Init();
 80010bc:	f000 f936 	bl	800132c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80010c0:	f000 f96e 	bl	80013a0 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //real_temperature_heater = Max31855_Read_Temp(1);
	  real_temperature_element = Max31855_Read_Temp(2);//dodac obsluge bledu
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff ff45 	bl	8000f54 <Max31855_Read_Temp>
 80010ca:	1c02      	adds	r2, r0, #0
 80010cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <main+0xa8>)
 80010ce:	601a      	str	r2, [r3, #0]
	  switch(Error){
 80010d0:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <main+0xac>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d008      	beq.n	80010ea <main+0x4a>
 80010d8:	dc09      	bgt.n	80010ee <main+0x4e>
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d009      	beq.n	80010f2 <main+0x52>
 80010de:	dc06      	bgt.n	80010ee <main+0x4e>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <main+0x56>
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d008      	beq.n	80010fa <main+0x5a>
	  	break;
	  case 4:

	  	break;
	  default:
	  	break;
 80010e8:	e001      	b.n	80010ee <main+0x4e>
	  	break;
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	e006      	b.n	80010fc <main+0x5c>
	  	break;
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	e004      	b.n	80010fc <main+0x5c>
	  	break;
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	e002      	b.n	80010fc <main+0x5c>
	  	break;
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	e000      	b.n	80010fc <main+0x5c>
	  	break;
 80010fa:	46c0      	nop			@ (mov r8, r8)
	  }
	  if(temp_select == 1 ){
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <main+0xb0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d104      	bne.n	800110e <main+0x6e>
		  selected_temperature = real_temperature_heater;
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <main+0xb4>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <main+0xb8>)
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e007      	b.n	800111e <main+0x7e>
	  }
	  else if(temp_select== 2){
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <main+0xb0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d103      	bne.n	800111e <main+0x7e>
		  selected_temperature = real_temperature_element;
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <main+0xa8>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <main+0xb8>)
 800111c:	601a      	str	r2, [r3, #0]
	  }
	  PID_error = set_temperature - selected_temperature;
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <main+0xbc>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <main+0xb8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	1c19      	adds	r1, r3, #0
 8001128:	1c10      	adds	r0, r2, #0
 800112a:	f7ff f879 	bl	8000220 <__aeabi_fsub>
 800112e:	1c03      	adds	r3, r0, #0
 8001130:	1c1a      	adds	r2, r3, #0
 8001132:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <main+0xc0>)
 8001134:	601a      	str	r2, [r3, #0]

	  if (zero_cross_detected){
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <main+0xc4>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0c2      	beq.n	80010c4 <main+0x24>

	        zero_cross_detected = false;
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <main+0xc4>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	  real_temperature_element = Max31855_Read_Temp(2);//dodac obsluge bledu
 8001144:	e7be      	b.n	80010c4 <main+0x24>
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	2000026c 	.word	0x2000026c
 800114c:	2000002c 	.word	0x2000002c
 8001150:	20000000 	.word	0x20000000
 8001154:	20000268 	.word	0x20000268
 8001158:	20000274 	.word	0x20000274
 800115c:	20000270 	.word	0x20000270
 8001160:	20000278 	.word	0x20000278
 8001164:	20000264 	.word	0x20000264

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b095      	sub	sp, #84	@ 0x54
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	2420      	movs	r4, #32
 8001170:	193b      	adds	r3, r7, r4
 8001172:	0018      	movs	r0, r3
 8001174:	2330      	movs	r3, #48	@ 0x30
 8001176:	001a      	movs	r2, r3
 8001178:	2100      	movs	r1, #0
 800117a:	f002 ffed 	bl	8004158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117e:	2310      	movs	r3, #16
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	0018      	movs	r0, r3
 8001184:	2310      	movs	r3, #16
 8001186:	001a      	movs	r2, r3
 8001188:	2100      	movs	r1, #0
 800118a:	f002 ffe5 	bl	8004158 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118e:	003b      	movs	r3, r7
 8001190:	0018      	movs	r0, r3
 8001192:	2310      	movs	r3, #16
 8001194:	001a      	movs	r2, r3
 8001196:	2100      	movs	r1, #0
 8001198:	f002 ffde 	bl	8004158 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119c:	0021      	movs	r1, r4
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2202      	movs	r2, #2
 80011a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2201      	movs	r2, #1
 80011a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2210      	movs	r2, #16
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2202      	movs	r2, #2
 80011b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	22a0      	movs	r2, #160	@ 0xa0
 80011c0:	0392      	lsls	r2, r2, #14
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	0018      	movs	r0, r3
 80011ce:	f001 f911 	bl	80023f4 <HAL_RCC_OscConfig>
 80011d2:	1e03      	subs	r3, r0, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011d6:	f000 f9d5 	bl	8001584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	2110      	movs	r1, #16
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2207      	movs	r2, #7
 80011e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2202      	movs	r2, #2
 80011e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2101      	movs	r1, #1
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 fc15 	bl	8002a28 <HAL_RCC_ClockConfig>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001202:	f000 f9bf 	bl	8001584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001206:	003b      	movs	r3, r7
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800120c:	003b      	movs	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001212:	003b      	movs	r3, r7
 8001214:	0018      	movs	r0, r3
 8001216:	f001 fd4d 	bl	8002cb4 <HAL_RCCEx_PeriphCLKConfig>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800121e:	f000 f9b1 	bl	8001584 <Error_Handler>
  }
}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b015      	add	sp, #84	@ 0x54
 8001228:	bd90      	pop	{r4, r7, pc}
	...

0800122c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001230:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <MX_I2C2_Init+0x74>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	@ (80012a4 <MX_I2C2_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 8001236:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <MX_I2C2_Init+0x74>)
 8001238:	4a1b      	ldr	r2, [pc, #108]	@ (80012a8 <MX_I2C2_Init+0x7c>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800123c:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <MX_I2C2_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <MX_I2C2_Init+0x74>)
 8001244:	2201      	movs	r2, #1
 8001246:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <MX_I2C2_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_I2C2_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <MX_I2C2_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_I2C2_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_I2C2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_I2C2_Init+0x74>)
 8001268:	0018      	movs	r0, r3
 800126a:	f000 ff85 	bl	8002178 <HAL_I2C_Init>
 800126e:	1e03      	subs	r3, r0, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001272:	f000 f987 	bl	8001584 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <MX_I2C2_Init+0x74>)
 8001278:	2100      	movs	r1, #0
 800127a:	0018      	movs	r0, r3
 800127c:	f001 f822 	bl	80022c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001280:	1e03      	subs	r3, r0, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001284:	f000 f97e 	bl	8001584 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <MX_I2C2_Init+0x74>)
 800128a:	2100      	movs	r1, #0
 800128c:	0018      	movs	r0, r3
 800128e:	f001 f865 	bl	800235c <HAL_I2CEx_ConfigDigitalFilter>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d001      	beq.n	800129a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001296:	f000 f975 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000038 	.word	0x20000038
 80012a4:	40005800 	.word	0x40005800
 80012a8:	0090194b 	.word	0x0090194b

080012ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001328 <MX_SPI1_Init+0x7c>)
 80012b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012b8:	2282      	movs	r2, #130	@ 0x82
 80012ba:	0052      	lsls	r2, r2, #1
 80012bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012c0:	2280      	movs	r2, #128	@ 0x80
 80012c2:	00d2      	lsls	r2, r2, #3
 80012c4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012c8:	22e0      	movs	r2, #224	@ 0xe0
 80012ca:	00d2      	lsls	r2, r2, #3
 80012cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012da:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012dc:	2280      	movs	r2, #128	@ 0x80
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012e4:	2218      	movs	r2, #24
 80012e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <MX_SPI1_Init+0x78>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <MX_SPI1_Init+0x78>)
 8001302:	2200      	movs	r2, #0
 8001304:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <MX_SPI1_Init+0x78>)
 8001308:	2208      	movs	r2, #8
 800130a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <MX_SPI1_Init+0x78>)
 800130e:	0018      	movs	r0, r3
 8001310:	f001 fd9e 	bl	8002e50 <HAL_SPI_Init>
 8001314:	1e03      	subs	r3, r0, #0
 8001316:	d001      	beq.n	800131c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001318:	f000 f934 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800131c:	46c0      	nop			@ (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	2000008c 	.word	0x2000008c
 8001328:	40013000 	.word	0x40013000

0800132c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <MX_SPI2_Init+0x6c>)
 8001332:	4a1a      	ldr	r2, [pc, #104]	@ (800139c <MX_SPI2_Init+0x70>)
 8001334:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <MX_SPI2_Init+0x6c>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800133c:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <MX_SPI2_Init+0x6c>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <MX_SPI2_Init+0x6c>)
 8001344:	22e0      	movs	r2, #224	@ 0xe0
 8001346:	00d2      	lsls	r2, r2, #3
 8001348:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134a:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <MX_SPI2_Init+0x6c>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_SPI2_Init+0x6c>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <MX_SPI2_Init+0x6c>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800135c:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_SPI2_Init+0x6c>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <MX_SPI2_Init+0x6c>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_SPI2_Init+0x6c>)
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <MX_SPI2_Init+0x6c>)
 8001370:	2207      	movs	r2, #7
 8001372:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_SPI2_Init+0x6c>)
 8001376:	2200      	movs	r2, #0
 8001378:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <MX_SPI2_Init+0x6c>)
 800137c:	2200      	movs	r2, #0
 800137e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <MX_SPI2_Init+0x6c>)
 8001382:	0018      	movs	r0, r3
 8001384:	f001 fd64 	bl	8002e50 <HAL_SPI_Init>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 800138c:	f000 f8fa 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	200000f0 	.word	0x200000f0
 800139c:	40003800 	.word	0x40003800

080013a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013a6:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <MX_USART1_UART_Init+0x5c>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013ac:	2296      	movs	r2, #150	@ 0x96
 80013ae:	0192      	lsls	r2, r2, #6
 80013b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013e2:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <MX_USART1_UART_Init+0x58>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f002 faf3 	bl	80039d0 <HAL_UART_Init>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ee:	f000 f8c9 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200001dc 	.word	0x200001dc
 80013fc:	40013800 	.word	0x40013800

08001400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_DMA_Init+0x38>)
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <MX_DMA_Init+0x38>)
 800140c:	2101      	movs	r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_DMA_Init+0x38>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	2201      	movs	r2, #1
 8001418:	4013      	ands	r3, r2
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	200b      	movs	r0, #11
 8001424:	f000 fbc6 	bl	8001bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001428:	200b      	movs	r0, #11
 800142a:	f000 fbd8 	bl	8001bde <HAL_NVIC_EnableIRQ>

}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b002      	add	sp, #8
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	40021000 	.word	0x40021000

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b089      	sub	sp, #36	@ 0x24
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	240c      	movs	r4, #12
 8001444:	193b      	adds	r3, r7, r4
 8001446:	0018      	movs	r0, r3
 8001448:	2314      	movs	r3, #20
 800144a:	001a      	movs	r2, r3
 800144c:	2100      	movs	r1, #0
 800144e:	f002 fe83 	bl	8004158 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001452:	4b41      	ldr	r3, [pc, #260]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	4b40      	ldr	r3, [pc, #256]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	03c9      	lsls	r1, r1, #15
 800145c:	430a      	orrs	r2, r1
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	03db      	lsls	r3, r3, #15
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	4b39      	ldr	r3, [pc, #228]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	0289      	lsls	r1, r1, #10
 8001478:	430a      	orrs	r2, r1
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	4b36      	ldr	r3, [pc, #216]	@ (8001558 <MX_GPIO_Init+0x11c>)
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	029b      	lsls	r3, r3, #10
 8001484:	4013      	ands	r3, r2
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b33      	ldr	r3, [pc, #204]	@ (8001558 <MX_GPIO_Init+0x11c>)
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	4b32      	ldr	r3, [pc, #200]	@ (8001558 <MX_GPIO_Init+0x11c>)
 8001490:	2180      	movs	r1, #128	@ 0x80
 8001492:	02c9      	lsls	r1, r1, #11
 8001494:	430a      	orrs	r2, r1
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <MX_GPIO_Init+0x11c>)
 800149a:	695a      	ldr	r2, [r3, #20]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	02db      	lsls	r3, r3, #11
 80014a0:	4013      	ands	r3, r2
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 80014a6:	492d      	ldr	r1, [pc, #180]	@ (800155c <MX_GPIO_Init+0x120>)
 80014a8:	2390      	movs	r3, #144	@ 0x90
 80014aa:	05db      	lsls	r3, r3, #23
 80014ac:	2200      	movs	r2, #0
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fe28 	bl	8002104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2284      	movs	r2, #132	@ 0x84
 80014be:	0392      	lsls	r2, r2, #14
 80014c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	193a      	adds	r2, r7, r4
 80014ca:	2390      	movs	r3, #144	@ 0x90
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 fca7 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	4a20      	ldr	r2, [pc, #128]	@ (800155c <MX_GPIO_Init+0x120>)
 80014da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	193b      	adds	r3, r7, r4
 80014de:	2201      	movs	r2, #1
 80014e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	193b      	adds	r3, r7, r4
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	193b      	adds	r3, r7, r4
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	193a      	adds	r2, r7, r4
 80014f0:	2390      	movs	r3, #144	@ 0x90
 80014f2:	05db      	lsls	r3, r3, #23
 80014f4:	0011      	movs	r1, r2
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 fc94 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	2204      	movs	r2, #4
 8001500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	193b      	adds	r3, r7, r4
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	193b      	adds	r3, r7, r4
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	193a      	adds	r2, r7, r4
 8001510:	2390      	movs	r3, #144	@ 0x90
 8001512:	05db      	lsls	r3, r3, #23
 8001514:	0011      	movs	r1, r2
 8001516:	0018      	movs	r0, r3
 8001518:	f000 fc84 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800151c:	0021      	movs	r1, r4
 800151e:	187b      	adds	r3, r7, r1
 8001520:	22c0      	movs	r2, #192	@ 0xc0
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2200      	movs	r2, #0
 800152a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	187b      	adds	r3, r7, r1
 8001534:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <MX_GPIO_Init+0x124>)
 8001536:	0019      	movs	r1, r3
 8001538:	0010      	movs	r0, r2
 800153a:	f000 fc73 	bl	8001e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2005      	movs	r0, #5
 8001544:	f000 fb36 	bl	8001bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001548:	2005      	movs	r0, #5
 800154a:	f000 fb48 	bl	8001bde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b009      	add	sp, #36	@ 0x24
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	40021000 	.word	0x40021000
 800155c:	00008012 	.word	0x00008012
 8001560:	48000400 	.word	0x48000400

08001564 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	0002      	movs	r2, r0
 800156c:	1dbb      	adds	r3, r7, #6
 800156e:	801a      	strh	r2, [r3, #0]
	zero_cross_detected = true;
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]

}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	20000264 	.word	0x20000264

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	46c0      	nop			@ (mov r8, r8)
 800158e:	e7fd      	b.n	800158c <Error_Handler+0x8>

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <HAL_MspInit+0x44>)
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_MspInit+0x44>)
 800159c:	2101      	movs	r1, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	619a      	str	r2, [r3, #24]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <HAL_MspInit+0x44>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2201      	movs	r2, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_MspInit+0x44>)
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_MspInit+0x44>)
 80015b4:	2180      	movs	r1, #128	@ 0x80
 80015b6:	0549      	lsls	r1, r1, #21
 80015b8:	430a      	orrs	r2, r1
 80015ba:	61da      	str	r2, [r3, #28]
 80015bc:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_MspInit+0x44>)
 80015be:	69da      	ldr	r2, [r3, #28]
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	055b      	lsls	r3, r3, #21
 80015c4:	4013      	ands	r3, r2
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b002      	add	sp, #8
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	40021000 	.word	0x40021000

080015d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b08b      	sub	sp, #44	@ 0x2c
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	2414      	movs	r4, #20
 80015e2:	193b      	adds	r3, r7, r4
 80015e4:	0018      	movs	r0, r3
 80015e6:	2314      	movs	r3, #20
 80015e8:	001a      	movs	r2, r3
 80015ea:	2100      	movs	r1, #0
 80015ec:	f002 fdb4 	bl	8004158 <memset>
  if(hi2c->Instance==I2C2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_I2C_MspInit+0x90>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d132      	bne.n	8001660 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <HAL_I2C_MspInit+0x94>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_I2C_MspInit+0x94>)
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	02c9      	lsls	r1, r1, #11
 8001604:	430a      	orrs	r2, r1
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_I2C_MspInit+0x94>)
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	02db      	lsls	r3, r3, #11
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001616:	193b      	adds	r3, r7, r4
 8001618:	22c0      	movs	r2, #192	@ 0xc0
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161e:	0021      	movs	r1, r4
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2212      	movs	r2, #18
 8001624:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2203      	movs	r2, #3
 8001630:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2201      	movs	r2, #1
 8001636:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	187b      	adds	r3, r7, r1
 800163a:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <HAL_I2C_MspInit+0x98>)
 800163c:	0019      	movs	r1, r3
 800163e:	0010      	movs	r0, r2
 8001640:	f000 fbf0 	bl	8001e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_I2C_MspInit+0x94>)
 8001646:	69da      	ldr	r2, [r3, #28]
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <HAL_I2C_MspInit+0x94>)
 800164a:	2180      	movs	r1, #128	@ 0x80
 800164c:	03c9      	lsls	r1, r1, #15
 800164e:	430a      	orrs	r2, r1
 8001650:	61da      	str	r2, [r3, #28]
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_I2C_MspInit+0x94>)
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	03db      	lsls	r3, r3, #15
 800165a:	4013      	ands	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001660:	46c0      	nop			@ (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b00b      	add	sp, #44	@ 0x2c
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	40005800 	.word	0x40005800
 800166c:	40021000 	.word	0x40021000
 8001670:	48000400 	.word	0x48000400

08001674 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b08d      	sub	sp, #52	@ 0x34
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	241c      	movs	r4, #28
 800167e:	193b      	adds	r3, r7, r4
 8001680:	0018      	movs	r0, r3
 8001682:	2314      	movs	r3, #20
 8001684:	001a      	movs	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	f002 fd66 	bl	8004158 <memset>
  if(hspi->Instance==SPI1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a5f      	ldr	r2, [pc, #380]	@ (8001810 <HAL_SPI_MspInit+0x19c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d133      	bne.n	80016fe <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001696:	4b5f      	ldr	r3, [pc, #380]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	4b5e      	ldr	r3, [pc, #376]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 800169c:	2180      	movs	r1, #128	@ 0x80
 800169e:	0149      	lsls	r1, r1, #5
 80016a0:	430a      	orrs	r2, r1
 80016a2:	619a      	str	r2, [r3, #24]
 80016a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 80016a6:	699a      	ldr	r2, [r3, #24]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b58      	ldr	r3, [pc, #352]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	4b57      	ldr	r3, [pc, #348]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 80016b8:	2180      	movs	r1, #128	@ 0x80
 80016ba:	0289      	lsls	r1, r1, #10
 80016bc:	430a      	orrs	r2, r1
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	4b54      	ldr	r3, [pc, #336]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016ce:	0021      	movs	r1, r4
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2260      	movs	r2, #96	@ 0x60
 80016d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2202      	movs	r2, #2
 80016da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	2203      	movs	r2, #3
 80016e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	187a      	adds	r2, r7, r1
 80016f0:	2390      	movs	r3, #144	@ 0x90
 80016f2:	05db      	lsls	r3, r3, #23
 80016f4:	0011      	movs	r1, r2
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 fb94 	bl	8001e24 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016fc:	e084      	b.n	8001808 <HAL_SPI_MspInit+0x194>
  else if(hspi->Instance==SPI2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a45      	ldr	r2, [pc, #276]	@ (8001818 <HAL_SPI_MspInit+0x1a4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d000      	beq.n	800170a <HAL_SPI_MspInit+0x96>
 8001708:	e07e      	b.n	8001808 <HAL_SPI_MspInit+0x194>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800170a:	4b42      	ldr	r3, [pc, #264]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 8001710:	2180      	movs	r1, #128	@ 0x80
 8001712:	01c9      	lsls	r1, r1, #7
 8001714:	430a      	orrs	r2, r1
 8001716:	61da      	str	r2, [r3, #28]
 8001718:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	01db      	lsls	r3, r3, #7
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b3b      	ldr	r3, [pc, #236]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 800172c:	2180      	movs	r1, #128	@ 0x80
 800172e:	02c9      	lsls	r1, r1, #11
 8001730:	430a      	orrs	r2, r1
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <HAL_SPI_MspInit+0x1a0>)
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	2380      	movs	r3, #128	@ 0x80
 800173a:	02db      	lsls	r3, r3, #11
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001742:	211c      	movs	r1, #28
 8001744:	187b      	adds	r3, r7, r1
 8001746:	22f0      	movs	r2, #240	@ 0xf0
 8001748:	0212      	lsls	r2, r2, #8
 800174a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2202      	movs	r2, #2
 8001750:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	187b      	adds	r3, r7, r1
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001758:	187b      	adds	r3, r7, r1
 800175a:	2203      	movs	r2, #3
 800175c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	187b      	adds	r3, r7, r1
 8001766:	4a2d      	ldr	r2, [pc, #180]	@ (800181c <HAL_SPI_MspInit+0x1a8>)
 8001768:	0019      	movs	r1, r3
 800176a:	0010      	movs	r0, r2
 800176c:	f000 fb5a 	bl	8001e24 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001770:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 8001772:	4a2c      	ldr	r2, [pc, #176]	@ (8001824 <HAL_SPI_MspInit+0x1b0>)
 8001774:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001776:	4b2a      	ldr	r3, [pc, #168]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800177c:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001782:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 8001784:	2280      	movs	r2, #128	@ 0x80
 8001786:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001788:	4b25      	ldr	r3, [pc, #148]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800178e:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001794:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 fa38 	bl	8001c18 <HAL_DMA_Init>
 80017a8:	1e03      	subs	r3, r0, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_SPI_MspInit+0x13c>
      Error_Handler();
 80017ac:	f7ff feea 	bl	8001584 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 80017b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_SPI_MspInit+0x1ac>)
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 80017be:	4a1b      	ldr	r2, [pc, #108]	@ (800182c <HAL_SPI_MspInit+0x1b8>)
 80017c0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c2:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 80017c4:	2210      	movs	r2, #16
 80017c6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c8:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017ce:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 80017d0:	2280      	movs	r2, #128	@ 0x80
 80017d2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017da:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 fa12 	bl	8001c18 <HAL_DMA_Init>
 80017f4:	1e03      	subs	r3, r0, #0
 80017f6:	d001      	beq.n	80017fc <HAL_SPI_MspInit+0x188>
      Error_Handler();
 80017f8:	f7ff fec4 	bl	8001584 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 8001800:	655a      	str	r2, [r3, #84]	@ 0x54
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_SPI_MspInit+0x1b4>)
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001808:	46c0      	nop			@ (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b00d      	add	sp, #52	@ 0x34
 800180e:	bd90      	pop	{r4, r7, pc}
 8001810:	40013000 	.word	0x40013000
 8001814:	40021000 	.word	0x40021000
 8001818:	40003800 	.word	0x40003800
 800181c:	48000400 	.word	0x48000400
 8001820:	20000154 	.word	0x20000154
 8001824:	40020044 	.word	0x40020044
 8001828:	20000198 	.word	0x20000198
 800182c:	40020058 	.word	0x40020058

08001830 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b08b      	sub	sp, #44	@ 0x2c
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	2414      	movs	r4, #20
 800183a:	193b      	adds	r3, r7, r4
 800183c:	0018      	movs	r0, r3
 800183e:	2314      	movs	r3, #20
 8001840:	001a      	movs	r2, r3
 8001842:	2100      	movs	r1, #0
 8001844:	f002 fc88 	bl	8004158 <memset>
  if(huart->Instance==USART1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1d      	ldr	r2, [pc, #116]	@ (80018c4 <HAL_UART_MspInit+0x94>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d133      	bne.n	80018ba <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001852:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <HAL_UART_MspInit+0x98>)
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <HAL_UART_MspInit+0x98>)
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	01c9      	lsls	r1, r1, #7
 800185c:	430a      	orrs	r2, r1
 800185e:	619a      	str	r2, [r3, #24]
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <HAL_UART_MspInit+0x98>)
 8001862:	699a      	ldr	r2, [r3, #24]
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	01db      	lsls	r3, r3, #7
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <HAL_UART_MspInit+0x98>)
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_UART_MspInit+0x98>)
 8001874:	2180      	movs	r1, #128	@ 0x80
 8001876:	0289      	lsls	r1, r1, #10
 8001878:	430a      	orrs	r2, r1
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_UART_MspInit+0x98>)
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	029b      	lsls	r3, r3, #10
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800188a:	193b      	adds	r3, r7, r4
 800188c:	22c0      	movs	r2, #192	@ 0xc0
 800188e:	00d2      	lsls	r2, r2, #3
 8001890:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	0021      	movs	r1, r4
 8001894:	187b      	adds	r3, r7, r1
 8001896:	2202      	movs	r2, #2
 8001898:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	187b      	adds	r3, r7, r1
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	2203      	movs	r2, #3
 80018a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	2201      	movs	r2, #1
 80018aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	187a      	adds	r2, r7, r1
 80018ae:	2390      	movs	r3, #144	@ 0x90
 80018b0:	05db      	lsls	r3, r3, #23
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f000 fab5 	bl	8001e24 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b00b      	add	sp, #44	@ 0x2c
 80018c0:	bd90      	pop	{r4, r7, pc}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40021000 	.word	0x40021000

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d0:	46c0      	nop			@ (mov r8, r8)
 80018d2:	e7fd      	b.n	80018d0 <NMI_Handler+0x4>

080018d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	e7fd      	b.n	80018d8 <HardFault_Handler+0x4>

080018dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018e0:	46c0      	nop			@ (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f4:	f000 f896 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f8:	46c0      	nop			@ (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 fc1c 	bl	8002140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001908:	46c0      	nop			@ (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <DMA1_Channel4_5_IRQHandler+0x1c>)
 8001916:	0018      	movs	r0, r3
 8001918:	f000 f9c6 	bl	8001ca8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <DMA1_Channel4_5_IRQHandler+0x20>)
 800191e:	0018      	movs	r0, r3
 8001920:	f000 f9c2 	bl	8001ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001924:	46c0      	nop			@ (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	20000154 	.word	0x20000154
 8001930:	20000198 	.word	0x20000198

08001934 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001938:	46c0      	nop			@ (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001940:	480d      	ldr	r0, [pc, #52]	@ (8001978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001942:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001944:	f7ff fff6 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <LoopForever+0x6>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	@ (8001980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <LoopForever+0xe>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	@ (800198c <LoopForever+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800196e:	f002 fbfb 	bl	8004168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001972:	f7ff fb95 	bl	80010a0 <main>

08001976 <LoopForever>:

LoopForever:
    b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
  ldr   r0, =_estack
 8001978:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001984:	08004248 	.word	0x08004248
  ldr r2, =_sbss
 8001988:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800198c:	20000280 	.word	0x20000280

08001990 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC1_IRQHandler>
	...

08001994 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_Init+0x24>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_Init+0x24>)
 800199e:	2110      	movs	r1, #16
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f809 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019aa:	f7ff fdf1 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	40022000 	.word	0x40022000

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <HAL_InitTick+0x5c>)
 80019c6:	681c      	ldr	r4, [r3, #0]
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <HAL_InitTick+0x60>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	0019      	movs	r1, r3
 80019ce:	23fa      	movs	r3, #250	@ 0xfa
 80019d0:	0098      	lsls	r0, r3, #2
 80019d2:	f7fe fb99 	bl	8000108 <__udivsi3>
 80019d6:	0003      	movs	r3, r0
 80019d8:	0019      	movs	r1, r3
 80019da:	0020      	movs	r0, r4
 80019dc:	f7fe fb94 	bl	8000108 <__udivsi3>
 80019e0:	0003      	movs	r3, r0
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f90b 	bl	8001bfe <HAL_SYSTICK_Config>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e00f      	b.n	8001a10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d80b      	bhi.n	8001a0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	2301      	movs	r3, #1
 80019fa:	425b      	negs	r3, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 f8d8 	bl	8001bb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_InitTick+0x64>)
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b003      	add	sp, #12
 8001a16:	bd90      	pop	{r4, r7, pc}
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	20000008 	.word	0x20000008

08001a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_IncTick+0x1c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_IncTick+0x20>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	18d2      	adds	r2, r2, r3
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <HAL_IncTick+0x20>)
 8001a36:	601a      	str	r2, [r3, #0]
}
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	2000000c 	.word	0x2000000c
 8001a44:	2000027c 	.word	0x2000027c

08001a48 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	@ (8001a58 <HAL_GetTick+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	2000027c 	.word	0x2000027c

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	0002      	movs	r2, r0
 8001a64:	1dfb      	adds	r3, r7, #7
 8001a66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a6e:	d809      	bhi.n	8001a84 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a70:	1dfb      	adds	r3, r7, #7
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	001a      	movs	r2, r3
 8001a76:	231f      	movs	r3, #31
 8001a78:	401a      	ands	r2, r3
 8001a7a:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <__NVIC_EnableIRQ+0x30>)
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	4091      	lsls	r1, r2
 8001a80:	000a      	movs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
  }
}
 8001a84:	46c0      	nop			@ (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	0002      	movs	r2, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001aa4:	d828      	bhi.n	8001af8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b64 <__NVIC_SetPriority+0xd4>)
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	33c0      	adds	r3, #192	@ 0xc0
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	589b      	ldr	r3, [r3, r2]
 8001ab6:	1dfa      	adds	r2, r7, #7
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	0011      	movs	r1, r2
 8001abc:	2203      	movs	r2, #3
 8001abe:	400a      	ands	r2, r1
 8001ac0:	00d2      	lsls	r2, r2, #3
 8001ac2:	21ff      	movs	r1, #255	@ 0xff
 8001ac4:	4091      	lsls	r1, r2
 8001ac6:	000a      	movs	r2, r1
 8001ac8:	43d2      	mvns	r2, r2
 8001aca:	401a      	ands	r2, r3
 8001acc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	019b      	lsls	r3, r3, #6
 8001ad2:	22ff      	movs	r2, #255	@ 0xff
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	0018      	movs	r0, r3
 8001adc:	2303      	movs	r3, #3
 8001ade:	4003      	ands	r3, r0
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae4:	481f      	ldr	r0, [pc, #124]	@ (8001b64 <__NVIC_SetPriority+0xd4>)
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	430a      	orrs	r2, r1
 8001af0:	33c0      	adds	r3, #192	@ 0xc0
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001af6:	e031      	b.n	8001b5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b68 <__NVIC_SetPriority+0xd8>)
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	0019      	movs	r1, r3
 8001b00:	230f      	movs	r3, #15
 8001b02:	400b      	ands	r3, r1
 8001b04:	3b08      	subs	r3, #8
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	3306      	adds	r3, #6
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	18d3      	adds	r3, r2, r3
 8001b0e:	3304      	adds	r3, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1dfa      	adds	r2, r7, #7
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	0011      	movs	r1, r2
 8001b18:	2203      	movs	r2, #3
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	00d2      	lsls	r2, r2, #3
 8001b1e:	21ff      	movs	r1, #255	@ 0xff
 8001b20:	4091      	lsls	r1, r2
 8001b22:	000a      	movs	r2, r1
 8001b24:	43d2      	mvns	r2, r2
 8001b26:	401a      	ands	r2, r3
 8001b28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	019b      	lsls	r3, r3, #6
 8001b2e:	22ff      	movs	r2, #255	@ 0xff
 8001b30:	401a      	ands	r2, r3
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	0018      	movs	r0, r3
 8001b38:	2303      	movs	r3, #3
 8001b3a:	4003      	ands	r3, r0
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b40:	4809      	ldr	r0, [pc, #36]	@ (8001b68 <__NVIC_SetPriority+0xd8>)
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	001c      	movs	r4, r3
 8001b48:	230f      	movs	r3, #15
 8001b4a:	4023      	ands	r3, r4
 8001b4c:	3b08      	subs	r3, #8
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	430a      	orrs	r2, r1
 8001b52:	3306      	adds	r3, #6
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	18c3      	adds	r3, r0, r3
 8001b58:	3304      	adds	r3, #4
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	46c0      	nop			@ (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b003      	add	sp, #12
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	1e5a      	subs	r2, r3, #1
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	045b      	lsls	r3, r3, #17
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d301      	bcc.n	8001b84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b80:	2301      	movs	r3, #1
 8001b82:	e010      	b.n	8001ba6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <SysTick_Config+0x44>)
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	3a01      	subs	r2, #1
 8001b8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	425b      	negs	r3, r3
 8001b90:	2103      	movs	r1, #3
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7ff ff7c 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <SysTick_Config+0x44>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <SysTick_Config+0x44>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b002      	add	sp, #8
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	1c02      	adds	r2, r0, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	0011      	movs	r1, r2
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b004      	add	sp, #16
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	0002      	movs	r2, r0
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff ff33 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff ffaf 	bl	8001b6c <SysTick_Config>
 8001c0e:	0003      	movs	r3, r0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e036      	b.n	8001c9c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2221      	movs	r2, #33	@ 0x21
 8001c32:	2102      	movs	r1, #2
 8001c34:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4a18      	ldr	r2, [pc, #96]	@ (8001ca4 <HAL_DMA_Init+0x8c>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f000 f8b4 	bl	8001dec <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2221      	movs	r2, #33	@ 0x21
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2220      	movs	r2, #32
 8001c96:	2100      	movs	r1, #0
 8001c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b004      	add	sp, #16
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	ffffc00f 	.word	0xffffc00f

08001ca8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d024      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x72>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d020      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d107      	bne.n	8001cf4 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2104      	movs	r1, #4
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	4091      	lsls	r1, r2
 8001d00:	000a      	movs	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d100      	bne.n	8001d0e <HAL_DMA_IRQHandler+0x66>
 8001d0c:	e06a      	b.n	8001de4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	0010      	movs	r0, r2
 8001d16:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d18:	e064      	b.n	8001de4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	2202      	movs	r2, #2
 8001d20:	409a      	lsls	r2, r3
 8001d22:	0013      	movs	r3, r2
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4013      	ands	r3, r2
 8001d28:	d02b      	beq.n	8001d82 <HAL_DMA_IRQHandler+0xda>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d027      	beq.n	8001d82 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d10b      	bne.n	8001d56 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	210a      	movs	r1, #10
 8001d4a:	438a      	bics	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2221      	movs	r2, #33	@ 0x21
 8001d52:	2101      	movs	r1, #1
 8001d54:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d5e:	2102      	movs	r1, #2
 8001d60:	4091      	lsls	r1, r2
 8001d62:	000a      	movs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d036      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	0010      	movs	r0, r2
 8001d7e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d80:	e030      	b.n	8001de4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	2208      	movs	r2, #8
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	0013      	movs	r3, r2
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d028      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x13c>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2208      	movs	r2, #8
 8001d96:	4013      	ands	r3, r2
 8001d98:	d024      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	210e      	movs	r1, #14
 8001da6:	438a      	bics	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db2:	2101      	movs	r1, #1
 8001db4:	4091      	lsls	r1, r2
 8001db6:	000a      	movs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2221      	movs	r2, #33	@ 0x21
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	2100      	movs	r1, #0
 8001dce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	0010      	movs	r0, r2
 8001de0:	4798      	blx	r3
    }
  }
}
 8001de2:	e7ff      	b.n	8001de4 <HAL_DMA_IRQHandler+0x13c>
 8001de4:	46c0      	nop			@ (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b004      	add	sp, #16
 8001dea:	bd80      	pop	{r7, pc}

08001dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a08      	ldr	r2, [pc, #32]	@ (8001e1c <DMA_CalcBaseAndBitshift+0x30>)
 8001dfa:	4694      	mov	ip, r2
 8001dfc:	4463      	add	r3, ip
 8001dfe:	2114      	movs	r1, #20
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7fe f981 	bl	8000108 <__udivsi3>
 8001e06:	0003      	movs	r3, r0
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a03      	ldr	r2, [pc, #12]	@ (8001e20 <DMA_CalcBaseAndBitshift+0x34>)
 8001e12:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	bffdfff8 	.word	0xbffdfff8
 8001e20:	40020000 	.word	0x40020000

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e14f      	b.n	80020d4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4091      	lsls	r1, r2
 8001e3e:	000a      	movs	r2, r1
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d100      	bne.n	8001e4c <HAL_GPIO_Init+0x28>
 8001e4a:	e140      	b.n	80020ce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2203      	movs	r2, #3
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d005      	beq.n	8001e64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d130      	bne.n	8001ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	409a      	lsls	r2, r3
 8001e72:	0013      	movs	r3, r2
 8001e74:	43da      	mvns	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	0013      	movs	r3, r2
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	0013      	movs	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d017      	beq.n	8001f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2203      	movs	r2, #3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d123      	bne.n	8001f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	58d3      	ldr	r3, [r2, r3]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2207      	movs	r2, #7
 8001f20:	4013      	ands	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	409a      	lsls	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2107      	movs	r1, #7
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	6939      	ldr	r1, [r7, #16]
 8001f54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	409a      	lsls	r2, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	43da      	mvns	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	401a      	ands	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	23c0      	movs	r3, #192	@ 0xc0
 8001f90:	029b      	lsls	r3, r3, #10
 8001f92:	4013      	ands	r3, r2
 8001f94:	d100      	bne.n	8001f98 <HAL_GPIO_Init+0x174>
 8001f96:	e09a      	b.n	80020ce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f98:	4b54      	ldr	r3, [pc, #336]	@ (80020ec <HAL_GPIO_Init+0x2c8>)
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	4b53      	ldr	r3, [pc, #332]	@ (80020ec <HAL_GPIO_Init+0x2c8>)
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	619a      	str	r2, [r3, #24]
 8001fa4:	4b51      	ldr	r3, [pc, #324]	@ (80020ec <HAL_GPIO_Init+0x2c8>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4013      	ands	r3, r2
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fb0:	4a4f      	ldr	r2, [pc, #316]	@ (80020f0 <HAL_GPIO_Init+0x2cc>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	589b      	ldr	r3, [r3, r2]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	0013      	movs	r3, r2
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	2390      	movs	r3, #144	@ 0x90
 8001fd8:	05db      	lsls	r3, r3, #23
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x1e2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a44      	ldr	r2, [pc, #272]	@ (80020f4 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x1de>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a43      	ldr	r2, [pc, #268]	@ (80020f8 <HAL_GPIO_Init+0x2d4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x1da>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a42      	ldr	r2, [pc, #264]	@ (80020fc <HAL_GPIO_Init+0x2d8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x1d6>
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x1e4>
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x1e4>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x1e4>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x1e4>
 8002006:	2300      	movs	r3, #0
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	2103      	movs	r1, #3
 800200c:	400a      	ands	r2, r1
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	@ (80020f0 <HAL_GPIO_Init+0x2cc>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002026:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <HAL_GPIO_Init+0x2dc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43da      	mvns	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	035b      	lsls	r3, r3, #13
 800203e:	4013      	ands	r3, r2
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800204a:	4b2d      	ldr	r3, [pc, #180]	@ (8002100 <HAL_GPIO_Init+0x2dc>)
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002050:	4b2b      	ldr	r3, [pc, #172]	@ (8002100 <HAL_GPIO_Init+0x2dc>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43da      	mvns	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	039b      	lsls	r3, r3, #14
 8002068:	4013      	ands	r3, r2
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002074:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <HAL_GPIO_Init+0x2dc>)
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800207a:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <HAL_GPIO_Init+0x2dc>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43da      	mvns	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	2380      	movs	r3, #128	@ 0x80
 8002090:	029b      	lsls	r3, r3, #10
 8002092:	4013      	ands	r3, r2
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800209e:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <HAL_GPIO_Init+0x2dc>)
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80020a4:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <HAL_GPIO_Init+0x2dc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43da      	mvns	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	025b      	lsls	r3, r3, #9
 80020bc:	4013      	ands	r3, r2
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <HAL_GPIO_Init+0x2dc>)
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	40da      	lsrs	r2, r3
 80020dc:	1e13      	subs	r3, r2, #0
 80020de:	d000      	beq.n	80020e2 <HAL_GPIO_Init+0x2be>
 80020e0:	e6a8      	b.n	8001e34 <HAL_GPIO_Init+0x10>
  } 
}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	46c0      	nop			@ (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b006      	add	sp, #24
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010000 	.word	0x40010000
 80020f4:	48000400 	.word	0x48000400
 80020f8:	48000800 	.word	0x48000800
 80020fc:	48000c00 	.word	0x48000c00
 8002100:	40010400 	.word	0x40010400

08002104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	0008      	movs	r0, r1
 800210e:	0011      	movs	r1, r2
 8002110:	1cbb      	adds	r3, r7, #2
 8002112:	1c02      	adds	r2, r0, #0
 8002114:	801a      	strh	r2, [r3, #0]
 8002116:	1c7b      	adds	r3, r7, #1
 8002118:	1c0a      	adds	r2, r1, #0
 800211a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800211c:	1c7b      	adds	r3, r7, #1
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002124:	1cbb      	adds	r3, r7, #2
 8002126:	881a      	ldrh	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800212c:	e003      	b.n	8002136 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212e:	1cbb      	adds	r3, r7, #2
 8002130:	881a      	ldrh	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b002      	add	sp, #8
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	0002      	movs	r2, r0
 8002148:	1dbb      	adds	r3, r7, #6
 800214a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	1dba      	adds	r2, r7, #6
 8002152:	8812      	ldrh	r2, [r2, #0]
 8002154:	4013      	ands	r3, r2
 8002156:	d008      	beq.n	800216a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800215a:	1dba      	adds	r2, r7, #6
 800215c:	8812      	ldrh	r2, [r2, #0]
 800215e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002160:	1dbb      	adds	r3, r7, #6
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff f9fd 	bl	8001564 <HAL_GPIO_EXTI_Callback>
  }
}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b002      	add	sp, #8
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e08f      	b.n	80022aa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2241      	movs	r2, #65	@ 0x41
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d107      	bne.n	80021a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2240      	movs	r2, #64	@ 0x40
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff fa19 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2241      	movs	r2, #65	@ 0x41
 80021aa:	2124      	movs	r1, #36	@ 0x24
 80021ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2101      	movs	r1, #1
 80021ba:	438a      	bics	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	493b      	ldr	r1, [pc, #236]	@ (80022b4 <HAL_I2C_Init+0x13c>)
 80021c8:	400a      	ands	r2, r1
 80021ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4938      	ldr	r1, [pc, #224]	@ (80022b8 <HAL_I2C_Init+0x140>)
 80021d8:	400a      	ands	r2, r1
 80021da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d108      	bne.n	80021f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2180      	movs	r1, #128	@ 0x80
 80021ee:	0209      	lsls	r1, r1, #8
 80021f0:	430a      	orrs	r2, r1
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e007      	b.n	8002206 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2184      	movs	r1, #132	@ 0x84
 8002200:	0209      	lsls	r1, r1, #8
 8002202:	430a      	orrs	r2, r1
 8002204:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d109      	bne.n	8002222 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2180      	movs	r1, #128	@ 0x80
 800221a:	0109      	lsls	r1, r1, #4
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	e007      	b.n	8002232 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4923      	ldr	r1, [pc, #140]	@ (80022bc <HAL_I2C_Init+0x144>)
 800222e:	400a      	ands	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4920      	ldr	r1, [pc, #128]	@ (80022c0 <HAL_I2C_Init+0x148>)
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	491a      	ldr	r1, [pc, #104]	@ (80022b8 <HAL_I2C_Init+0x140>)
 800224e:	400a      	ands	r2, r1
 8002250:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	431a      	orrs	r2, r3
 800225c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69d9      	ldr	r1, [r3, #28]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2241      	movs	r2, #65	@ 0x41
 8002296:	2120      	movs	r1, #32
 8002298:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2242      	movs	r2, #66	@ 0x42
 80022a4:	2100      	movs	r1, #0
 80022a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	f0ffffff 	.word	0xf0ffffff
 80022b8:	ffff7fff 	.word	0xffff7fff
 80022bc:	fffff7ff 	.word	0xfffff7ff
 80022c0:	02008000 	.word	0x02008000

080022c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2241      	movs	r2, #65	@ 0x41
 80022d2:	5c9b      	ldrb	r3, [r3, r2]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d138      	bne.n	800234c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2240      	movs	r2, #64	@ 0x40
 80022de:	5c9b      	ldrb	r3, [r3, r2]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e032      	b.n	800234e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2240      	movs	r2, #64	@ 0x40
 80022ec:	2101      	movs	r1, #1
 80022ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2241      	movs	r2, #65	@ 0x41
 80022f4:	2124      	movs	r1, #36	@ 0x24
 80022f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4911      	ldr	r1, [pc, #68]	@ (8002358 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002314:	400a      	ands	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6819      	ldr	r1, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2101      	movs	r1, #1
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2241      	movs	r2, #65	@ 0x41
 800233c:	2120      	movs	r1, #32
 800233e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2240      	movs	r2, #64	@ 0x40
 8002344:	2100      	movs	r1, #0
 8002346:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	ffffefff 	.word	0xffffefff

0800235c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2241      	movs	r2, #65	@ 0x41
 800236a:	5c9b      	ldrb	r3, [r3, r2]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b20      	cmp	r3, #32
 8002370:	d139      	bne.n	80023e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2240      	movs	r2, #64	@ 0x40
 8002376:	5c9b      	ldrb	r3, [r3, r2]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800237c:	2302      	movs	r3, #2
 800237e:	e033      	b.n	80023e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2240      	movs	r2, #64	@ 0x40
 8002384:	2101      	movs	r1, #1
 8002386:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2241      	movs	r2, #65	@ 0x41
 800238c:	2124      	movs	r1, #36	@ 0x24
 800238e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2101      	movs	r1, #1
 800239c:	438a      	bics	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a11      	ldr	r2, [pc, #68]	@ (80023f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2241      	movs	r2, #65	@ 0x41
 80023d6:	2120      	movs	r1, #32
 80023d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2240      	movs	r2, #64	@ 0x40
 80023de:	2100      	movs	r1, #0
 80023e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
  }
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	fffff0ff 	.word	0xfffff0ff

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e301      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <HAL_RCC_OscConfig+0x1e>
 8002410:	e08d      	b.n	800252e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002412:	4bc3      	ldr	r3, [pc, #780]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	220c      	movs	r2, #12
 8002418:	4013      	ands	r3, r2
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00e      	beq.n	800243c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800241e:	4bc0      	ldr	r3, [pc, #768]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	220c      	movs	r2, #12
 8002424:	4013      	ands	r3, r2
 8002426:	2b08      	cmp	r3, #8
 8002428:	d116      	bne.n	8002458 <HAL_RCC_OscConfig+0x64>
 800242a:	4bbd      	ldr	r3, [pc, #756]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	025b      	lsls	r3, r3, #9
 8002432:	401a      	ands	r2, r3
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	025b      	lsls	r3, r3, #9
 8002438:	429a      	cmp	r2, r3
 800243a:	d10d      	bne.n	8002458 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	4bb8      	ldr	r3, [pc, #736]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	4013      	ands	r3, r2
 8002446:	d100      	bne.n	800244a <HAL_RCC_OscConfig+0x56>
 8002448:	e070      	b.n	800252c <HAL_RCC_OscConfig+0x138>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d000      	beq.n	8002454 <HAL_RCC_OscConfig+0x60>
 8002452:	e06b      	b.n	800252c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e2d8      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <HAL_RCC_OscConfig+0x7c>
 8002460:	4baf      	ldr	r3, [pc, #700]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4bae      	ldr	r3, [pc, #696]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002466:	2180      	movs	r1, #128	@ 0x80
 8002468:	0249      	lsls	r1, r1, #9
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e02f      	b.n	80024d0 <HAL_RCC_OscConfig+0xdc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10c      	bne.n	8002492 <HAL_RCC_OscConfig+0x9e>
 8002478:	4ba9      	ldr	r3, [pc, #676]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4ba8      	ldr	r3, [pc, #672]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800247e:	49a9      	ldr	r1, [pc, #676]	@ (8002724 <HAL_RCC_OscConfig+0x330>)
 8002480:	400a      	ands	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	4ba6      	ldr	r3, [pc, #664]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4ba5      	ldr	r3, [pc, #660]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800248a:	49a7      	ldr	r1, [pc, #668]	@ (8002728 <HAL_RCC_OscConfig+0x334>)
 800248c:	400a      	ands	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e01e      	b.n	80024d0 <HAL_RCC_OscConfig+0xdc>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b05      	cmp	r3, #5
 8002498:	d10e      	bne.n	80024b8 <HAL_RCC_OscConfig+0xc4>
 800249a:	4ba1      	ldr	r3, [pc, #644]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4ba0      	ldr	r3, [pc, #640]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80024a0:	2180      	movs	r1, #128	@ 0x80
 80024a2:	02c9      	lsls	r1, r1, #11
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b9c      	ldr	r3, [pc, #624]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	0249      	lsls	r1, r1, #9
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xdc>
 80024b8:	4b99      	ldr	r3, [pc, #612]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b98      	ldr	r3, [pc, #608]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80024be:	4999      	ldr	r1, [pc, #612]	@ (8002724 <HAL_RCC_OscConfig+0x330>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	4b96      	ldr	r3, [pc, #600]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b95      	ldr	r3, [pc, #596]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	4997      	ldr	r1, [pc, #604]	@ (8002728 <HAL_RCC_OscConfig+0x334>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d014      	beq.n	8002502 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fab6 	bl	8001a48 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e2:	f7ff fab1 	bl	8001a48 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b64      	cmp	r3, #100	@ 0x64
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e28a      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	029b      	lsls	r3, r3, #10
 80024fc:	4013      	ands	r3, r2
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0xee>
 8002500:	e015      	b.n	800252e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7ff faa1 	bl	8001a48 <HAL_GetTick>
 8002506:	0003      	movs	r3, r0
 8002508:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff fa9c 	bl	8001a48 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	@ 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e275      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	4b80      	ldr	r3, [pc, #512]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	@ 0x80
 8002524:	029b      	lsls	r3, r3, #10
 8002526:	4013      	ands	r3, r2
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x118>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2202      	movs	r2, #2
 8002534:	4013      	ands	r3, r2
 8002536:	d100      	bne.n	800253a <HAL_RCC_OscConfig+0x146>
 8002538:	e069      	b.n	800260e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800253a:	4b79      	ldr	r3, [pc, #484]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	220c      	movs	r2, #12
 8002540:	4013      	ands	r3, r2
 8002542:	d00b      	beq.n	800255c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002544:	4b76      	ldr	r3, [pc, #472]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	220c      	movs	r2, #12
 800254a:	4013      	ands	r3, r2
 800254c:	2b08      	cmp	r3, #8
 800254e:	d11c      	bne.n	800258a <HAL_RCC_OscConfig+0x196>
 8002550:	4b73      	ldr	r3, [pc, #460]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	4013      	ands	r3, r2
 800255a:	d116      	bne.n	800258a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255c:	4b70      	ldr	r3, [pc, #448]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2202      	movs	r2, #2
 8002562:	4013      	ands	r3, r2
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x17e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e24b      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b6b      	ldr	r3, [pc, #428]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	22f8      	movs	r2, #248	@ 0xf8
 8002578:	4393      	bics	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	00da      	lsls	r2, r3, #3
 8002582:	4b67      	ldr	r3, [pc, #412]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002588:	e041      	b.n	800260e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d024      	beq.n	80025dc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002592:	4b63      	ldr	r3, [pc, #396]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b62      	ldr	r3, [pc, #392]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002598:	2101      	movs	r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff fa53 	bl	8001a48 <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a8:	f7ff fa4e 	bl	8001a48 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e227      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	4b59      	ldr	r3, [pc, #356]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2202      	movs	r2, #2
 80025c0:	4013      	ands	r3, r2
 80025c2:	d0f1      	beq.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b56      	ldr	r3, [pc, #344]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	22f8      	movs	r2, #248	@ 0xf8
 80025ca:	4393      	bics	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00da      	lsls	r2, r3, #3
 80025d4:	4b52      	ldr	r3, [pc, #328]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e018      	b.n	800260e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025dc:	4b50      	ldr	r3, [pc, #320]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	438a      	bics	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff fa2e 	bl	8001a48 <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f2:	f7ff fa29 	bl	8001a48 <HAL_GetTick>
 80025f6:	0002      	movs	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e202      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002604:	4b46      	ldr	r3, [pc, #280]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2202      	movs	r2, #2
 800260a:	4013      	ands	r3, r2
 800260c:	d1f1      	bne.n	80025f2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2208      	movs	r2, #8
 8002614:	4013      	ands	r3, r2
 8002616:	d036      	beq.n	8002686 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d019      	beq.n	8002654 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002620:	4b3f      	ldr	r3, [pc, #252]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002622:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002624:	4b3e      	ldr	r3, [pc, #248]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002626:	2101      	movs	r1, #1
 8002628:	430a      	orrs	r2, r1
 800262a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7ff fa0c 	bl	8001a48 <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002636:	f7ff fa07 	bl	8001a48 <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e1e0      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002648:	4b35      	ldr	r3, [pc, #212]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	2202      	movs	r2, #2
 800264e:	4013      	ands	r3, r2
 8002650:	d0f1      	beq.n	8002636 <HAL_RCC_OscConfig+0x242>
 8002652:	e018      	b.n	8002686 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b32      	ldr	r3, [pc, #200]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002656:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002658:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800265a:	2101      	movs	r1, #1
 800265c:	438a      	bics	r2, r1
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7ff f9f2 	bl	8001a48 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266a:	f7ff f9ed 	bl	8001a48 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1c6      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d1f1      	bne.n	800266a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2204      	movs	r2, #4
 800268c:	4013      	ands	r3, r2
 800268e:	d100      	bne.n	8002692 <HAL_RCC_OscConfig+0x29e>
 8002690:	e0b4      	b.n	80027fc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	201f      	movs	r0, #31
 8002694:	183b      	adds	r3, r7, r0
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4b21      	ldr	r3, [pc, #132]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	2380      	movs	r3, #128	@ 0x80
 80026a0:	055b      	lsls	r3, r3, #21
 80026a2:	4013      	ands	r3, r2
 80026a4:	d110      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80026ac:	2180      	movs	r1, #128	@ 0x80
 80026ae:	0549      	lsls	r1, r1, #21
 80026b0:	430a      	orrs	r2, r1
 80026b2:	61da      	str	r2, [r3, #28]
 80026b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026c2:	183b      	adds	r3, r7, r0
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b18      	ldr	r3, [pc, #96]	@ (800272c <HAL_RCC_OscConfig+0x338>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4013      	ands	r3, r2
 80026d2:	d11a      	bne.n	800270a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d4:	4b15      	ldr	r3, [pc, #84]	@ (800272c <HAL_RCC_OscConfig+0x338>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <HAL_RCC_OscConfig+0x338>)
 80026da:	2180      	movs	r1, #128	@ 0x80
 80026dc:	0049      	lsls	r1, r1, #1
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e2:	f7ff f9b1 	bl	8001a48 <HAL_GetTick>
 80026e6:	0003      	movs	r3, r0
 80026e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ec:	f7ff f9ac 	bl	8001a48 <HAL_GetTick>
 80026f0:	0002      	movs	r2, r0
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	@ 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e185      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_RCC_OscConfig+0x338>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	2380      	movs	r3, #128	@ 0x80
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4013      	ands	r3, r2
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d10e      	bne.n	8002730 <HAL_RCC_OscConfig+0x33c>
 8002712:	4b03      	ldr	r3, [pc, #12]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	4b02      	ldr	r3, [pc, #8]	@ (8002720 <HAL_RCC_OscConfig+0x32c>)
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	621a      	str	r2, [r3, #32]
 800271e:	e035      	b.n	800278c <HAL_RCC_OscConfig+0x398>
 8002720:	40021000 	.word	0x40021000
 8002724:	fffeffff 	.word	0xfffeffff
 8002728:	fffbffff 	.word	0xfffbffff
 800272c:	40007000 	.word	0x40007000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10c      	bne.n	8002752 <HAL_RCC_OscConfig+0x35e>
 8002738:	4bb6      	ldr	r3, [pc, #728]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800273a:	6a1a      	ldr	r2, [r3, #32]
 800273c:	4bb5      	ldr	r3, [pc, #724]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800273e:	2101      	movs	r1, #1
 8002740:	438a      	bics	r2, r1
 8002742:	621a      	str	r2, [r3, #32]
 8002744:	4bb3      	ldr	r3, [pc, #716]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002746:	6a1a      	ldr	r2, [r3, #32]
 8002748:	4bb2      	ldr	r3, [pc, #712]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800274a:	2104      	movs	r1, #4
 800274c:	438a      	bics	r2, r1
 800274e:	621a      	str	r2, [r3, #32]
 8002750:	e01c      	b.n	800278c <HAL_RCC_OscConfig+0x398>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x380>
 800275a:	4bae      	ldr	r3, [pc, #696]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800275c:	6a1a      	ldr	r2, [r3, #32]
 800275e:	4bad      	ldr	r3, [pc, #692]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002760:	2104      	movs	r1, #4
 8002762:	430a      	orrs	r2, r1
 8002764:	621a      	str	r2, [r3, #32]
 8002766:	4bab      	ldr	r3, [pc, #684]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002768:	6a1a      	ldr	r2, [r3, #32]
 800276a:	4baa      	ldr	r3, [pc, #680]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800276c:	2101      	movs	r1, #1
 800276e:	430a      	orrs	r2, r1
 8002770:	621a      	str	r2, [r3, #32]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0x398>
 8002774:	4ba7      	ldr	r3, [pc, #668]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002776:	6a1a      	ldr	r2, [r3, #32]
 8002778:	4ba6      	ldr	r3, [pc, #664]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800277a:	2101      	movs	r1, #1
 800277c:	438a      	bics	r2, r1
 800277e:	621a      	str	r2, [r3, #32]
 8002780:	4ba4      	ldr	r3, [pc, #656]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002782:	6a1a      	ldr	r2, [r3, #32]
 8002784:	4ba3      	ldr	r3, [pc, #652]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002786:	2104      	movs	r1, #4
 8002788:	438a      	bics	r2, r1
 800278a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d014      	beq.n	80027be <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002794:	f7ff f958 	bl	8001a48 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	e009      	b.n	80027b2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7ff f953 	bl	8001a48 <HAL_GetTick>
 80027a2:	0002      	movs	r2, r0
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	4a9b      	ldr	r2, [pc, #620]	@ (8002a18 <HAL_RCC_OscConfig+0x624>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e12b      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	4b98      	ldr	r3, [pc, #608]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x3aa>
 80027bc:	e013      	b.n	80027e6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7ff f943 	bl	8001a48 <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c6:	e009      	b.n	80027dc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7ff f93e 	bl	8001a48 <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	4a91      	ldr	r2, [pc, #580]	@ (8002a18 <HAL_RCC_OscConfig+0x624>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e116      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	2202      	movs	r2, #2
 80027e2:	4013      	ands	r3, r2
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027e6:	231f      	movs	r3, #31
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	4b87      	ldr	r3, [pc, #540]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80027f6:	4989      	ldr	r1, [pc, #548]	@ (8002a1c <HAL_RCC_OscConfig+0x628>)
 80027f8:	400a      	ands	r2, r1
 80027fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2210      	movs	r2, #16
 8002802:	4013      	ands	r3, r2
 8002804:	d063      	beq.n	80028ce <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d12a      	bne.n	8002864 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800280e:	4b81      	ldr	r3, [pc, #516]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002812:	4b80      	ldr	r3, [pc, #512]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002814:	2104      	movs	r1, #4
 8002816:	430a      	orrs	r2, r1
 8002818:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800281a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800281c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800281e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002820:	2101      	movs	r1, #1
 8002822:	430a      	orrs	r2, r1
 8002824:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7ff f90f 	bl	8001a48 <HAL_GetTick>
 800282a:	0003      	movs	r3, r0
 800282c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002830:	f7ff f90a 	bl	8001a48 <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0e3      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002842:	4b74      	ldr	r3, [pc, #464]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002846:	2202      	movs	r2, #2
 8002848:	4013      	ands	r3, r2
 800284a:	d0f1      	beq.n	8002830 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800284c:	4b71      	ldr	r3, [pc, #452]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800284e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002850:	22f8      	movs	r2, #248	@ 0xf8
 8002852:	4393      	bics	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	00da      	lsls	r2, r3, #3
 800285c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800285e:	430a      	orrs	r2, r1
 8002860:	635a      	str	r2, [r3, #52]	@ 0x34
 8002862:	e034      	b.n	80028ce <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	3305      	adds	r3, #5
 800286a:	d111      	bne.n	8002890 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800286c:	4b69      	ldr	r3, [pc, #420]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800286e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002870:	4b68      	ldr	r3, [pc, #416]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002872:	2104      	movs	r1, #4
 8002874:	438a      	bics	r2, r1
 8002876:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002878:	4b66      	ldr	r3, [pc, #408]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800287a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287c:	22f8      	movs	r2, #248	@ 0xf8
 800287e:	4393      	bics	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	00da      	lsls	r2, r3, #3
 8002888:	4b62      	ldr	r3, [pc, #392]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800288a:	430a      	orrs	r2, r1
 800288c:	635a      	str	r2, [r3, #52]	@ 0x34
 800288e:	e01e      	b.n	80028ce <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002890:	4b60      	ldr	r3, [pc, #384]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002894:	4b5f      	ldr	r3, [pc, #380]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002896:	2104      	movs	r1, #4
 8002898:	430a      	orrs	r2, r1
 800289a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800289c:	4b5d      	ldr	r3, [pc, #372]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800289e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80028a2:	2101      	movs	r1, #1
 80028a4:	438a      	bics	r2, r1
 80028a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7ff f8ce 	bl	8001a48 <HAL_GetTick>
 80028ac:	0003      	movs	r3, r0
 80028ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028b2:	f7ff f8c9 	bl	8001a48 <HAL_GetTick>
 80028b6:	0002      	movs	r2, r0
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0a2      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028c4:	4b53      	ldr	r3, [pc, #332]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80028c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c8:	2202      	movs	r2, #2
 80028ca:	4013      	ands	r3, r2
 80028cc:	d1f1      	bne.n	80028b2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d100      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4e4>
 80028d6:	e097      	b.n	8002a08 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	220c      	movs	r2, #12
 80028de:	4013      	ands	r3, r2
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d100      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4f2>
 80028e4:	e06b      	b.n	80029be <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d14c      	bne.n	8002988 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b49      	ldr	r3, [pc, #292]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b48      	ldr	r3, [pc, #288]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80028f4:	494a      	ldr	r1, [pc, #296]	@ (8002a20 <HAL_RCC_OscConfig+0x62c>)
 80028f6:	400a      	ands	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7ff f8a5 	bl	8001a48 <HAL_GetTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002904:	f7ff f8a0 	bl	8001a48 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e079      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002916:	4b3f      	ldr	r3, [pc, #252]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	049b      	lsls	r3, r3, #18
 800291e:	4013      	ands	r3, r2
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002922:	4b3c      	ldr	r3, [pc, #240]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002926:	220f      	movs	r2, #15
 8002928:	4393      	bics	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002930:	4b38      	ldr	r3, [pc, #224]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002932:	430a      	orrs	r2, r1
 8002934:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002936:	4b37      	ldr	r3, [pc, #220]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a24 <HAL_RCC_OscConfig+0x630>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	431a      	orrs	r2, r3
 800294a:	4b32      	ldr	r3, [pc, #200]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002950:	4b30      	ldr	r3, [pc, #192]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b2f      	ldr	r3, [pc, #188]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 8002956:	2180      	movs	r1, #128	@ 0x80
 8002958:	0449      	lsls	r1, r1, #17
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7ff f873 	bl	8001a48 <HAL_GetTick>
 8002962:	0003      	movs	r3, r0
 8002964:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002968:	f7ff f86e 	bl	8001a48 <HAL_GetTick>
 800296c:	0002      	movs	r2, r0
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e047      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800297a:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	049b      	lsls	r3, r3, #18
 8002982:	4013      	ands	r3, r2
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x574>
 8002986:	e03f      	b.n	8002a08 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002988:	4b22      	ldr	r3, [pc, #136]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b21      	ldr	r3, [pc, #132]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 800298e:	4924      	ldr	r1, [pc, #144]	@ (8002a20 <HAL_RCC_OscConfig+0x62c>)
 8002990:	400a      	ands	r2, r1
 8002992:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7ff f858 	bl	8001a48 <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299e:	f7ff f853 	bl	8001a48 <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e02c      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	4b18      	ldr	r3, [pc, #96]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	049b      	lsls	r3, r3, #18
 80029b8:	4013      	ands	r3, r2
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x5aa>
 80029bc:	e024      	b.n	8002a08 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01f      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029ca:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029d0:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_RCC_OscConfig+0x620>)
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	2380      	movs	r3, #128	@ 0x80
 80029da:	025b      	lsls	r3, r3, #9
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d10e      	bne.n	8002a04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	220f      	movs	r2, #15
 80029ea:	401a      	ands	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	23f0      	movs	r3, #240	@ 0xf0
 80029f8:	039b      	lsls	r3, r3, #14
 80029fa:	401a      	ands	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b008      	add	sp, #32
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	40021000 	.word	0x40021000
 8002a18:	00001388 	.word	0x00001388
 8002a1c:	efffffff 	.word	0xefffffff
 8002a20:	feffffff 	.word	0xfeffffff
 8002a24:	ffc2ffff 	.word	0xffc2ffff

08002a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0b3      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b5b      	ldr	r3, [pc, #364]	@ (8002bac <HAL_RCC_ClockConfig+0x184>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d911      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b58      	ldr	r3, [pc, #352]	@ (8002bac <HAL_RCC_ClockConfig+0x184>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4393      	bics	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	4b55      	ldr	r3, [pc, #340]	@ (8002bac <HAL_RCC_ClockConfig+0x184>)
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5c:	4b53      	ldr	r3, [pc, #332]	@ (8002bac <HAL_RCC_ClockConfig+0x184>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2201      	movs	r2, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e09a      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2202      	movs	r2, #2
 8002a74:	4013      	ands	r3, r2
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d006      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a82:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002a88:	21e0      	movs	r1, #224	@ 0xe0
 8002a8a:	00c9      	lsls	r1, r1, #3
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	22f0      	movs	r2, #240	@ 0xf0
 8002a96:	4393      	bics	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	4b44      	ldr	r3, [pc, #272]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d040      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	029b      	lsls	r3, r3, #10
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d114      	bne.n	8002aec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e06e      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b38      	ldr	r3, [pc, #224]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	@ 0x80
 8002ad4:	049b      	lsls	r3, r3, #18
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d108      	bne.n	8002aec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e062      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e05b      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aec:	4b30      	ldr	r3, [pc, #192]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2203      	movs	r2, #3
 8002af2:	4393      	bics	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fe ffa2 	bl	8001a48 <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b08:	e009      	b.n	8002b1e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0a:	f7fe ff9d 	bl	8001a48 <HAL_GetTick>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	4a27      	ldr	r2, [pc, #156]	@ (8002bb4 <HAL_RCC_ClockConfig+0x18c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e042      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	220c      	movs	r2, #12
 8002b24:	401a      	ands	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1ec      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <HAL_RCC_ClockConfig+0x184>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2201      	movs	r2, #1
 8002b36:	4013      	ands	r3, r2
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d211      	bcs.n	8002b62 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_ClockConfig+0x184>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4393      	bics	r3, r2
 8002b46:	0019      	movs	r1, r3
 8002b48:	4b18      	ldr	r3, [pc, #96]	@ (8002bac <HAL_RCC_ClockConfig+0x184>)
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b50:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <HAL_RCC_ClockConfig+0x184>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	4013      	ands	r3, r2
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e020      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2204      	movs	r2, #4
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6c:	4b10      	ldr	r3, [pc, #64]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a11      	ldr	r2, [pc, #68]	@ (8002bb8 <HAL_RCC_ClockConfig+0x190>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b80:	f000 f820 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b84:	0001      	movs	r1, r0
 8002b86:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <HAL_RCC_ClockConfig+0x188>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	4013      	ands	r3, r2
 8002b90:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <HAL_RCC_ClockConfig+0x194>)
 8002b92:	5cd3      	ldrb	r3, [r2, r3]
 8002b94:	000a      	movs	r2, r1
 8002b96:	40da      	lsrs	r2, r3
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x198>)
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	f7fe ff0d 	bl	80019bc <HAL_InitTick>
  
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	00001388 	.word	0x00001388
 8002bb8:	fffff8ff 	.word	0xfffff8ff
 8002bbc:	08004208 	.word	0x08004208
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	220c      	movs	r2, #12
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d002      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x30>
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x36>
 8002bf2:	e02c      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bf6:	613b      	str	r3, [r7, #16]
      break;
 8002bf8:	e02c      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	0c9b      	lsrs	r3, r3, #18
 8002bfe:	220f      	movs	r2, #15
 8002c00:	4013      	ands	r3, r2
 8002c02:	4a19      	ldr	r2, [pc, #100]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c04:	5cd3      	ldrb	r3, [r2, r3]
 8002c06:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c08:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	220f      	movs	r2, #15
 8002c0e:	4013      	ands	r3, r2
 8002c10:	4a16      	ldr	r2, [pc, #88]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	025b      	lsls	r3, r3, #9
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	4810      	ldr	r0, [pc, #64]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c24:	f7fd fa70 	bl	8000108 <__udivsi3>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4353      	muls	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e009      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	000a      	movs	r2, r1
 8002c38:	0152      	lsls	r2, r2, #5
 8002c3a:	1a52      	subs	r2, r2, r1
 8002c3c:	0193      	lsls	r3, r2, #6
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	185b      	adds	r3, r3, r1
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
      break;
 8002c4c:	e002      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c50:	613b      	str	r3, [r7, #16]
      break;
 8002c52:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c54:	693b      	ldr	r3, [r7, #16]
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b006      	add	sp, #24
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	40021000 	.word	0x40021000
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	08004220 	.word	0x08004220
 8002c6c:	08004230 	.word	0x08004230
 8002c70:	007a1200 	.word	0x007a1200

08002c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c78:	4b02      	ldr	r3, [pc, #8]	@ (8002c84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	20000004 	.word	0x20000004

08002c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002c8c:	f7ff fff2 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002c90:	0001      	movs	r1, r0
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	2207      	movs	r2, #7
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ca0:	40d9      	lsrs	r1, r3
 8002ca2:	000b      	movs	r3, r1
}    
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08004218 	.word	0x08004218

08002cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	025b      	lsls	r3, r3, #9
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002cd0:	e08e      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	2017      	movs	r0, #23
 8002cd4:	183b      	adds	r3, r7, r0
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b57      	ldr	r3, [pc, #348]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	055b      	lsls	r3, r3, #21
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d110      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b54      	ldr	r3, [pc, #336]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	4b53      	ldr	r3, [pc, #332]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cec:	2180      	movs	r1, #128	@ 0x80
 8002cee:	0549      	lsls	r1, r1, #21
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	61da      	str	r2, [r3, #28]
 8002cf4:	4b50      	ldr	r3, [pc, #320]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	2380      	movs	r3, #128	@ 0x80
 8002cfa:	055b      	lsls	r3, r3, #21
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d02:	183b      	adds	r3, r7, r0
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b4c      	ldr	r3, [pc, #304]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	d11a      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d14:	4b49      	ldr	r3, [pc, #292]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b48      	ldr	r3, [pc, #288]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d1a:	2180      	movs	r1, #128	@ 0x80
 8002d1c:	0049      	lsls	r1, r1, #1
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fe91 	bl	8001a48 <HAL_GetTick>
 8002d26:	0003      	movs	r3, r0
 8002d28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	e008      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fe fe8c 	bl	8001a48 <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	@ 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e077      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d4c:	6a1a      	ldr	r2, [r3, #32]
 8002d4e:	23c0      	movs	r3, #192	@ 0xc0
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d034      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	23c0      	movs	r3, #192	@ 0xc0
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4013      	ands	r3, r2
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d02c      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d6c:	4b32      	ldr	r3, [pc, #200]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a33      	ldr	r2, [pc, #204]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d76:	4b30      	ldr	r3, [pc, #192]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d7c:	2180      	movs	r1, #128	@ 0x80
 8002d7e:	0249      	lsls	r1, r1, #9
 8002d80:	430a      	orrs	r2, r1
 8002d82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d84:	4b2c      	ldr	r3, [pc, #176]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	4b2b      	ldr	r3, [pc, #172]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d8a:	492e      	ldr	r1, [pc, #184]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d90:	4b29      	ldr	r3, [pc, #164]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fe53 	bl	8001a48 <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	e009      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7fe fe4e 	bl	8001a48 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	4a25      	ldr	r2, [pc, #148]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e038      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a1d      	ldr	r2, [pc, #116]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4b18      	ldr	r3, [pc, #96]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dda:	2317      	movs	r3, #23
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de4:	4b14      	ldr	r3, [pc, #80]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	4b13      	ldr	r3, [pc, #76]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dea:	4918      	ldr	r1, [pc, #96]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2201      	movs	r2, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	2203      	movs	r2, #3
 8002e00:	4393      	bics	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2220      	movs	r2, #32
 8002e14:	4013      	ands	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e18:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	4393      	bics	r3, r2
 8002e20:	0019      	movs	r1, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b006      	add	sp, #24
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	fffffcff 	.word	0xfffffcff
 8002e44:	fffeffff 	.word	0xfffeffff
 8002e48:	00001388 	.word	0x00001388
 8002e4c:	efffffff 	.word	0xefffffff

08002e50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0a8      	b.n	8002fb4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	2382      	movs	r3, #130	@ 0x82
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d009      	beq.n	8002e8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	61da      	str	r2, [r3, #28]
 8002e7c:	e005      	b.n	8002e8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	225d      	movs	r2, #93	@ 0x5d
 8002e94:	5c9b      	ldrb	r3, [r3, r2]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	225c      	movs	r2, #92	@ 0x5c
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7fe fbe4 	bl	8001674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	225d      	movs	r2, #93	@ 0x5d
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2140      	movs	r1, #64	@ 0x40
 8002ec0:	438a      	bics	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	23e0      	movs	r3, #224	@ 0xe0
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d902      	bls.n	8002ed6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e002      	b.n	8002edc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	015b      	lsls	r3, r3, #5
 8002eda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	23f0      	movs	r3, #240	@ 0xf0
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d008      	beq.n	8002efa <HAL_SPI_Init+0xaa>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	23e0      	movs	r3, #224	@ 0xe0
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	2382      	movs	r3, #130	@ 0x82
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6899      	ldr	r1, [r3, #8]
 8002f08:	2384      	movs	r3, #132	@ 0x84
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2102      	movs	r1, #2
 8002f16:	400b      	ands	r3, r1
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	2101      	movs	r1, #1
 8002f20:	400b      	ands	r3, r1
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6999      	ldr	r1, [r3, #24]
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2138      	movs	r1, #56	@ 0x38
 8002f36:	400b      	ands	r3, r1
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	2180      	movs	r1, #128	@ 0x80
 8002f40:	400b      	ands	r3, r1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	0011      	movs	r1, r2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	019b      	lsls	r3, r3, #6
 8002f4e:	401a      	ands	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	2204      	movs	r2, #4
 8002f60:	401a      	ands	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	2110      	movs	r1, #16
 8002f68:	400b      	ands	r3, r1
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f70:	2108      	movs	r1, #8
 8002f72:	400b      	ands	r3, r1
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68d9      	ldr	r1, [r3, #12]
 8002f7a:	23f0      	movs	r3, #240	@ 0xf0
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	400b      	ands	r3, r1
 8002f80:	431a      	orrs	r2, r3
 8002f82:	0011      	movs	r1, r2
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	2380      	movs	r3, #128	@ 0x80
 8002f88:	015b      	lsls	r3, r3, #5
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4907      	ldr	r1, [pc, #28]	@ (8002fbc <HAL_SPI_Init+0x16c>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	225d      	movs	r2, #93	@ 0x5d
 8002fae:	2101      	movs	r1, #1
 8002fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b004      	add	sp, #16
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	fffff7ff 	.word	0xfffff7ff

08002fc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b089      	sub	sp, #36	@ 0x24
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	1dbb      	adds	r3, r7, #6
 8002fce:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fd0:	2117      	movs	r1, #23
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	225d      	movs	r2, #93	@ 0x5d
 8002fdc:	5c9b      	ldrb	r3, [r3, r2]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d003      	beq.n	8002fec <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fea:	e12b      	b.n	8003244 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	2382      	movs	r3, #130	@ 0x82
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x60>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10f      	bne.n	8003020 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	225d      	movs	r2, #93	@ 0x5d
 8003004:	2104      	movs	r1, #4
 8003006:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	881c      	ldrh	r4, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	0023      	movs	r3, r4
 8003018:	f000 f924 	bl	8003264 <HAL_SPI_TransmitReceive>
 800301c:	0003      	movs	r3, r0
 800301e:	e118      	b.n	8003252 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	225c      	movs	r2, #92	@ 0x5c
 8003024:	5c9b      	ldrb	r3, [r3, r2]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_SPI_Receive+0x6e>
 800302a:	2302      	movs	r3, #2
 800302c:	e111      	b.n	8003252 <HAL_SPI_Receive+0x292>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	225c      	movs	r2, #92	@ 0x5c
 8003032:	2101      	movs	r1, #1
 8003034:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003036:	f7fe fd07 	bl	8001a48 <HAL_GetTick>
 800303a:	0003      	movs	r3, r0
 800303c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_SPI_Receive+0x8c>
 8003044:	1dbb      	adds	r3, r7, #6
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d104      	bne.n	8003056 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800304c:	2317      	movs	r3, #23
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	2201      	movs	r2, #1
 8003052:	701a      	strb	r2, [r3, #0]
    goto error;
 8003054:	e0f6      	b.n	8003244 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	225d      	movs	r2, #93	@ 0x5d
 800305a:	2104      	movs	r1, #4
 800305c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1dba      	adds	r2, r7, #6
 800306e:	2144      	movs	r1, #68	@ 0x44
 8003070:	8812      	ldrh	r2, [r2, #0]
 8003072:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1dba      	adds	r2, r7, #6
 8003078:	2146      	movs	r1, #70	@ 0x46
 800307a:	8812      	ldrh	r2, [r2, #0]
 800307c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	23e0      	movs	r3, #224	@ 0xe0
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d908      	bls.n	80030ba <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	496a      	ldr	r1, [pc, #424]	@ (800325c <HAL_SPI_Receive+0x29c>)
 80030b4:	400a      	ands	r2, r1
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	e008      	b.n	80030cc <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2180      	movs	r1, #128	@ 0x80
 80030c6:	0149      	lsls	r1, r1, #5
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	2380      	movs	r3, #128	@ 0x80
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d10f      	bne.n	80030f8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2140      	movs	r1, #64	@ 0x40
 80030e4:	438a      	bics	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	495b      	ldr	r1, [pc, #364]	@ (8003260 <HAL_SPI_Receive+0x2a0>)
 80030f4:	400a      	ands	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2240      	movs	r2, #64	@ 0x40
 8003100:	4013      	ands	r3, r2
 8003102:	2b40      	cmp	r3, #64	@ 0x40
 8003104:	d007      	beq.n	8003116 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2140      	movs	r1, #64	@ 0x40
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	23e0      	movs	r3, #224	@ 0xe0
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	429a      	cmp	r2, r3
 8003120:	d900      	bls.n	8003124 <HAL_SPI_Receive+0x164>
 8003122:	e071      	b.n	8003208 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003124:	e035      	b.n	8003192 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
 8003130:	2b01      	cmp	r3, #1
 8003132:	d117      	bne.n	8003164 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	001a      	movs	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2246      	movs	r2, #70	@ 0x46
 8003154:	5a9b      	ldrh	r3, [r3, r2]
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b299      	uxth	r1, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2246      	movs	r2, #70	@ 0x46
 8003160:	5299      	strh	r1, [r3, r2]
 8003162:	e016      	b.n	8003192 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003164:	f7fe fc70 	bl	8001a48 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d802      	bhi.n	800317a <HAL_SPI_Receive+0x1ba>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_SPI_Receive+0x1c0>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d108      	bne.n	8003192 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8003180:	2317      	movs	r3, #23
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2203      	movs	r2, #3
 8003186:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	225d      	movs	r2, #93	@ 0x5d
 800318c:	2101      	movs	r1, #1
 800318e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003190:	e058      	b.n	8003244 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2246      	movs	r2, #70	@ 0x46
 8003196:	5a9b      	ldrh	r3, [r3, r2]
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1c3      	bne.n	8003126 <HAL_SPI_Receive+0x166>
 800319e:	e039      	b.n	8003214 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2201      	movs	r2, #1
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d115      	bne.n	80031da <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	b292      	uxth	r2, r2
 80031ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	1c9a      	adds	r2, r3, #2
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2246      	movs	r2, #70	@ 0x46
 80031ca:	5a9b      	ldrh	r3, [r3, r2]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b299      	uxth	r1, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2246      	movs	r2, #70	@ 0x46
 80031d6:	5299      	strh	r1, [r3, r2]
 80031d8:	e016      	b.n	8003208 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031da:	f7fe fc35 	bl	8001a48 <HAL_GetTick>
 80031de:	0002      	movs	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d802      	bhi.n	80031f0 <HAL_SPI_Receive+0x230>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	d102      	bne.n	80031f6 <HAL_SPI_Receive+0x236>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80031f6:	2317      	movs	r3, #23
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	2203      	movs	r2, #3
 80031fc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	225d      	movs	r2, #93	@ 0x5d
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]
          goto error;
 8003206:	e01d      	b.n	8003244 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2246      	movs	r2, #70	@ 0x46
 800320c:	5a9b      	ldrh	r3, [r3, r2]
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1c5      	bne.n	80031a0 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	6839      	ldr	r1, [r7, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	0018      	movs	r0, r3
 800321c:	f000 fb34 	bl	8003888 <SPI_EndRxTransaction>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d002      	beq.n	800322a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8003232:	2317      	movs	r3, #23
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	e003      	b.n	8003244 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	225d      	movs	r2, #93	@ 0x5d
 8003240:	2101      	movs	r1, #1
 8003242:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	225c      	movs	r2, #92	@ 0x5c
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800324c:	2317      	movs	r3, #23
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	781b      	ldrb	r3, [r3, #0]
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	b007      	add	sp, #28
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	ffffefff 	.word	0xffffefff
 8003260:	ffffbfff 	.word	0xffffbfff

08003264 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	@ 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	001a      	movs	r2, r3
 8003272:	1cbb      	adds	r3, r7, #2
 8003274:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003276:	2301      	movs	r3, #1
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800327a:	2323      	movs	r3, #35	@ 0x23
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	225c      	movs	r2, #92	@ 0x5c
 8003286:	5c9b      	ldrb	r3, [r3, r2]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x2c>
 800328c:	2302      	movs	r3, #2
 800328e:	e1c4      	b.n	800361a <HAL_SPI_TransmitReceive+0x3b6>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	225c      	movs	r2, #92	@ 0x5c
 8003294:	2101      	movs	r1, #1
 8003296:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003298:	f7fe fbd6 	bl	8001a48 <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032a0:	201b      	movs	r0, #27
 80032a2:	183b      	adds	r3, r7, r0
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	215d      	movs	r1, #93	@ 0x5d
 80032a8:	5c52      	ldrb	r2, [r2, r1]
 80032aa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80032b2:	2312      	movs	r3, #18
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	1cba      	adds	r2, r7, #2
 80032b8:	8812      	ldrh	r2, [r2, #0]
 80032ba:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032bc:	183b      	adds	r3, r7, r0
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d011      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x84>
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	2382      	movs	r3, #130	@ 0x82
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d107      	bne.n	80032de <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d103      	bne.n	80032de <HAL_SPI_TransmitReceive+0x7a>
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d004      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80032de:	2323      	movs	r3, #35	@ 0x23
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	2202      	movs	r2, #2
 80032e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80032e6:	e191      	b.n	800360c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x98>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x98>
 80032f4:	1cbb      	adds	r3, r7, #2
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80032fc:	2323      	movs	r3, #35	@ 0x23
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
    goto error;
 8003304:	e182      	b.n	800360c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	225d      	movs	r2, #93	@ 0x5d
 800330a:	5c9b      	ldrb	r3, [r3, r2]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b04      	cmp	r3, #4
 8003310:	d003      	beq.n	800331a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	225d      	movs	r2, #93	@ 0x5d
 8003316:	2105      	movs	r1, #5
 8003318:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1cba      	adds	r2, r7, #2
 800332a:	2146      	movs	r1, #70	@ 0x46
 800332c:	8812      	ldrh	r2, [r2, #0]
 800332e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1cba      	adds	r2, r7, #2
 8003334:	2144      	movs	r1, #68	@ 0x44
 8003336:	8812      	ldrh	r2, [r2, #0]
 8003338:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1cba      	adds	r2, r7, #2
 8003344:	8812      	ldrh	r2, [r2, #0]
 8003346:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1cba      	adds	r2, r7, #2
 800334c:	8812      	ldrh	r2, [r2, #0]
 800334e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	23e0      	movs	r3, #224	@ 0xe0
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	429a      	cmp	r2, r3
 8003366:	d908      	bls.n	800337a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	49ac      	ldr	r1, [pc, #688]	@ (8003624 <HAL_SPI_TransmitReceive+0x3c0>)
 8003374:	400a      	ands	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	e008      	b.n	800338c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2180      	movs	r1, #128	@ 0x80
 8003386:	0149      	lsls	r1, r1, #5
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2240      	movs	r2, #64	@ 0x40
 8003394:	4013      	ands	r3, r2
 8003396:	2b40      	cmp	r3, #64	@ 0x40
 8003398:	d007      	beq.n	80033aa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2140      	movs	r1, #64	@ 0x40
 80033a6:	430a      	orrs	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	23e0      	movs	r3, #224	@ 0xe0
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d800      	bhi.n	80033b8 <HAL_SPI_TransmitReceive+0x154>
 80033b6:	e083      	b.n	80034c0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x168>
 80033c0:	2312      	movs	r3, #18
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d000      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x168>
 80033ca:	e06d      	b.n	80034a8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033dc:	1c9a      	adds	r2, r3, #2
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033f0:	e05a      	b.n	80034a8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2202      	movs	r2, #2
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d11b      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x1d4>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x1d4>
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	2b01      	cmp	r3, #1
 800340e:	d113      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	881a      	ldrh	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2201      	movs	r2, #1
 8003440:	4013      	ands	r3, r2
 8003442:	2b01      	cmp	r3, #1
 8003444:	d11c      	bne.n	8003480 <HAL_SPI_TransmitReceive+0x21c>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2246      	movs	r2, #70	@ 0x46
 800344a:	5a9b      	ldrh	r3, [r3, r2]
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d016      	beq.n	8003480 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	b292      	uxth	r2, r2
 800345e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	1c9a      	adds	r2, r3, #2
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2246      	movs	r2, #70	@ 0x46
 800346e:	5a9b      	ldrh	r3, [r3, r2]
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b299      	uxth	r1, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2246      	movs	r2, #70	@ 0x46
 800347a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800347c:	2301      	movs	r3, #1
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003480:	f7fe fae2 	bl	8001a48 <HAL_GetTick>
 8003484:	0002      	movs	r2, r0
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800348c:	429a      	cmp	r2, r3
 800348e:	d80b      	bhi.n	80034a8 <HAL_SPI_TransmitReceive+0x244>
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	3301      	adds	r3, #1
 8003494:	d008      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003496:	2323      	movs	r3, #35	@ 0x23
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	2203      	movs	r2, #3
 800349c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	225d      	movs	r2, #93	@ 0x5d
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
        goto error;
 80034a6:	e0b1      	b.n	800360c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d19f      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x18e>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2246      	movs	r2, #70	@ 0x46
 80034b6:	5a9b      	ldrh	r3, [r3, r2]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d199      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x18e>
 80034be:	e089      	b.n	80035d4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x270>
 80034c8:	2312      	movs	r3, #18
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d000      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x270>
 80034d2:	e074      	b.n	80035be <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	7812      	ldrb	r2, [r2, #0]
 80034e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fa:	e060      	b.n	80035be <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2202      	movs	r2, #2
 8003504:	4013      	ands	r3, r2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d11c      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x2e0>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d017      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x2e0>
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	2b01      	cmp	r3, #1
 8003518:	d114      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	7812      	ldrb	r2, [r2, #0]
 8003526:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2201      	movs	r2, #1
 800354c:	4013      	ands	r3, r2
 800354e:	2b01      	cmp	r3, #1
 8003550:	d11e      	bne.n	8003590 <HAL_SPI_TransmitReceive+0x32c>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2246      	movs	r2, #70	@ 0x46
 8003556:	5a9b      	ldrh	r3, [r3, r2]
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d018      	beq.n	8003590 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	001a      	movs	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	7812      	ldrb	r2, [r2, #0]
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2246      	movs	r2, #70	@ 0x46
 800357e:	5a9b      	ldrh	r3, [r3, r2]
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b299      	uxth	r1, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2246      	movs	r2, #70	@ 0x46
 800358a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800358c:	2301      	movs	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003590:	f7fe fa5a 	bl	8001a48 <HAL_GetTick>
 8003594:	0002      	movs	r2, r0
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800359c:	429a      	cmp	r2, r3
 800359e:	d802      	bhi.n	80035a6 <HAL_SPI_TransmitReceive+0x342>
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	3301      	adds	r3, #1
 80035a4:	d102      	bne.n	80035ac <HAL_SPI_TransmitReceive+0x348>
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80035ac:	2323      	movs	r3, #35	@ 0x23
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	2203      	movs	r2, #3
 80035b2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	225d      	movs	r2, #93	@ 0x5d
 80035b8:	2101      	movs	r1, #1
 80035ba:	5499      	strb	r1, [r3, r2]
        goto error;
 80035bc:	e026      	b.n	800360c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d199      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x298>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2246      	movs	r2, #70	@ 0x46
 80035cc:	5a9b      	ldrh	r3, [r3, r2]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d193      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f9b2 	bl	8003944 <SPI_EndRxTxTransaction>
 80035e0:	1e03      	subs	r3, r0, #0
 80035e2:	d006      	beq.n	80035f2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80035e4:	2323      	movs	r3, #35	@ 0x23
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d004      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80035fa:	2323      	movs	r3, #35	@ 0x23
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	e003      	b.n	800360c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	225d      	movs	r2, #93	@ 0x5d
 8003608:	2101      	movs	r1, #1
 800360a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	225c      	movs	r2, #92	@ 0x5c
 8003610:	2100      	movs	r1, #0
 8003612:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003614:	2323      	movs	r3, #35	@ 0x23
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	781b      	ldrb	r3, [r3, #0]
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b00a      	add	sp, #40	@ 0x28
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	ffffefff 	.word	0xffffefff

08003628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	1dfb      	adds	r3, r7, #7
 8003636:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003638:	f7fe fa06 	bl	8001a48 <HAL_GetTick>
 800363c:	0002      	movs	r2, r0
 800363e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	18d3      	adds	r3, r2, r3
 8003646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003648:	f7fe f9fe 	bl	8001a48 <HAL_GetTick>
 800364c:	0003      	movs	r3, r0
 800364e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003650:	4b3a      	ldr	r3, [pc, #232]	@ (800373c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	015b      	lsls	r3, r3, #5
 8003656:	0d1b      	lsrs	r3, r3, #20
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	4353      	muls	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800365e:	e058      	b.n	8003712 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	d055      	beq.n	8003712 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003666:	f7fe f9ef 	bl	8001a48 <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	429a      	cmp	r2, r3
 8003674:	d902      	bls.n	800367c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d142      	bne.n	8003702 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	21e0      	movs	r1, #224	@ 0xe0
 8003688:	438a      	bics	r2, r1
 800368a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	2382      	movs	r3, #130	@ 0x82
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	429a      	cmp	r2, r3
 8003696:	d113      	bne.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	2380      	movs	r3, #128	@ 0x80
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d005      	beq.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	2380      	movs	r3, #128	@ 0x80
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d107      	bne.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2140      	movs	r1, #64	@ 0x40
 80036bc:	438a      	bics	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	019b      	lsls	r3, r3, #6
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d110      	bne.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	491a      	ldr	r1, [pc, #104]	@ (8003740 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80036d8:	400a      	ands	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2180      	movs	r1, #128	@ 0x80
 80036e8:	0189      	lsls	r1, r1, #6
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	225d      	movs	r2, #93	@ 0x5d
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	225c      	movs	r2, #92	@ 0x5c
 80036fa:	2100      	movs	r1, #0
 80036fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e017      	b.n	8003732 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3b01      	subs	r3, #1
 8003710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	425a      	negs	r2, r3
 8003722:	4153      	adcs	r3, r2
 8003724:	b2db      	uxtb	r3, r3
 8003726:	001a      	movs	r2, r3
 8003728:	1dfb      	adds	r3, r7, #7
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d197      	bne.n	8003660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b008      	add	sp, #32
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	20000004 	.word	0x20000004
 8003740:	ffffdfff 	.word	0xffffdfff

08003744 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	@ 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003752:	2317      	movs	r3, #23
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800375a:	f7fe f975 	bl	8001a48 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	18d3      	adds	r3, r2, r3
 8003768:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800376a:	f7fe f96d 	bl	8001a48 <HAL_GetTick>
 800376e:	0003      	movs	r3, r0
 8003770:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	330c      	adds	r3, #12
 8003778:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800377a:	4b41      	ldr	r3, [pc, #260]	@ (8003880 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	0013      	movs	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	189b      	adds	r3, r3, r2
 8003784:	00da      	lsls	r2, r3, #3
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	0d1b      	lsrs	r3, r3, #20
 800378a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378c:	4353      	muls	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003790:	e068      	b.n	8003864 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	23c0      	movs	r3, #192	@ 0xc0
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	429a      	cmp	r2, r3
 800379a:	d10a      	bne.n	80037b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d107      	bne.n	80037b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	2117      	movs	r1, #23
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	d055      	beq.n	8003864 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037b8:	f7fe f946 	bl	8001a48 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d902      	bls.n	80037ce <SPI_WaitFifoStateUntilTimeout+0x8a>
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d142      	bne.n	8003854 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	21e0      	movs	r1, #224	@ 0xe0
 80037da:	438a      	bics	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	2382      	movs	r3, #130	@ 0x82
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d113      	bne.n	8003812 <SPI_WaitFifoStateUntilTimeout+0xce>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	2380      	movs	r3, #128	@ 0x80
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d005      	beq.n	8003802 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	2380      	movs	r3, #128	@ 0x80
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	429a      	cmp	r2, r3
 8003800:	d107      	bne.n	8003812 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2140      	movs	r1, #64	@ 0x40
 800380e:	438a      	bics	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003816:	2380      	movs	r3, #128	@ 0x80
 8003818:	019b      	lsls	r3, r3, #6
 800381a:	429a      	cmp	r2, r3
 800381c:	d110      	bne.n	8003840 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4916      	ldr	r1, [pc, #88]	@ (8003884 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800382a:	400a      	ands	r2, r1
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2180      	movs	r1, #128	@ 0x80
 800383a:	0189      	lsls	r1, r1, #6
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	225d      	movs	r2, #93	@ 0x5d
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	225c      	movs	r2, #92	@ 0x5c
 800384c:	2100      	movs	r1, #0
 800384e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e010      	b.n	8003876 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	3b01      	subs	r3, #1
 8003862:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	4013      	ands	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	d18e      	bne.n	8003792 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b00a      	add	sp, #40	@ 0x28
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	20000004 	.word	0x20000004
 8003884:	ffffdfff 	.word	0xffffdfff

08003888 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	2382      	movs	r3, #130	@ 0x82
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	429a      	cmp	r2, r3
 800389e:	d113      	bne.n	80038c8 <SPI_EndRxTransaction+0x40>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	2380      	movs	r3, #128	@ 0x80
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d005      	beq.n	80038b8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	2380      	movs	r3, #128	@ 0x80
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d107      	bne.n	80038c8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2140      	movs	r1, #64	@ 0x40
 80038c4:	438a      	bics	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	0013      	movs	r3, r2
 80038d2:	2200      	movs	r2, #0
 80038d4:	2180      	movs	r1, #128	@ 0x80
 80038d6:	f7ff fea7 	bl	8003628 <SPI_WaitFlagStateUntilTimeout>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d007      	beq.n	80038ee <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e2:	2220      	movs	r2, #32
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e026      	b.n	800393c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	2382      	movs	r3, #130	@ 0x82
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d11f      	bne.n	800393a <SPI_EndRxTransaction+0xb2>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	429a      	cmp	r2, r3
 8003904:	d005      	beq.n	8003912 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	429a      	cmp	r2, r3
 8003910:	d113      	bne.n	800393a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	23c0      	movs	r3, #192	@ 0xc0
 8003916:	00d9      	lsls	r1, r3, #3
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	0013      	movs	r3, r2
 8003920:	2200      	movs	r2, #0
 8003922:	f7ff ff0f 	bl	8003744 <SPI_WaitFifoStateUntilTimeout>
 8003926:	1e03      	subs	r3, r0, #0
 8003928:	d007      	beq.n	800393a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392e:	2220      	movs	r2, #32
 8003930:	431a      	orrs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e000      	b.n	800393c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}

08003944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	23c0      	movs	r3, #192	@ 0xc0
 8003954:	0159      	lsls	r1, r3, #5
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	0013      	movs	r3, r2
 800395e:	2200      	movs	r2, #0
 8003960:	f7ff fef0 	bl	8003744 <SPI_WaitFifoStateUntilTimeout>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d007      	beq.n	8003978 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396c:	2220      	movs	r2, #32
 800396e:	431a      	orrs	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e027      	b.n	80039c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	0013      	movs	r3, r2
 8003982:	2200      	movs	r2, #0
 8003984:	2180      	movs	r1, #128	@ 0x80
 8003986:	f7ff fe4f 	bl	8003628 <SPI_WaitFlagStateUntilTimeout>
 800398a:	1e03      	subs	r3, r0, #0
 800398c:	d007      	beq.n	800399e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003992:	2220      	movs	r2, #32
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e014      	b.n	80039c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	23c0      	movs	r3, #192	@ 0xc0
 80039a2:	00d9      	lsls	r1, r3, #3
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	0013      	movs	r3, r2
 80039ac:	2200      	movs	r2, #0
 80039ae:	f7ff fec9 	bl	8003744 <SPI_WaitFifoStateUntilTimeout>
 80039b2:	1e03      	subs	r3, r0, #0
 80039b4:	d007      	beq.n	80039c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	2220      	movs	r2, #32
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e000      	b.n	80039c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b004      	add	sp, #16
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e044      	b.n	8003a6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2278      	movs	r2, #120	@ 0x78
 80039ee:	2100      	movs	r1, #0
 80039f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7fd ff1b 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2224      	movs	r2, #36	@ 0x24
 80039fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f000 f96c 	bl	8003cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 f828 	bl	8003a78 <UART_SetConfig>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e01c      	b.n	8003a6c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	490d      	ldr	r1, [pc, #52]	@ (8003a74 <HAL_UART_Init+0xa4>)
 8003a3e:	400a      	ands	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2108      	movs	r1, #8
 8003a4e:	438a      	bics	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 f9fb 	bl	8003e60 <UART_CheckIdleState>
 8003a6a:	0003      	movs	r3, r0
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	fffff7ff 	.word	0xfffff7ff

08003a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a80:	231e      	movs	r3, #30
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a8d      	ldr	r2, [pc, #564]	@ (8003cdc <UART_SetConfig+0x264>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a88      	ldr	r2, [pc, #544]	@ (8003ce0 <UART_SetConfig+0x268>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ce4 <UART_SetConfig+0x26c>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a7b      	ldr	r2, [pc, #492]	@ (8003ce8 <UART_SetConfig+0x270>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d127      	bne.n	8003b4e <UART_SetConfig+0xd6>
 8003afe:	4b7b      	ldr	r3, [pc, #492]	@ (8003cec <UART_SetConfig+0x274>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	2203      	movs	r2, #3
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d00d      	beq.n	8003b26 <UART_SetConfig+0xae>
 8003b0a:	d81b      	bhi.n	8003b44 <UART_SetConfig+0xcc>
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d014      	beq.n	8003b3a <UART_SetConfig+0xc2>
 8003b10:	d818      	bhi.n	8003b44 <UART_SetConfig+0xcc>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <UART_SetConfig+0xa4>
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d00a      	beq.n	8003b30 <UART_SetConfig+0xb8>
 8003b1a:	e013      	b.n	8003b44 <UART_SetConfig+0xcc>
 8003b1c:	231f      	movs	r3, #31
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	e021      	b.n	8003b6a <UART_SetConfig+0xf2>
 8003b26:	231f      	movs	r3, #31
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	e01c      	b.n	8003b6a <UART_SetConfig+0xf2>
 8003b30:	231f      	movs	r3, #31
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	2204      	movs	r2, #4
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	e017      	b.n	8003b6a <UART_SetConfig+0xf2>
 8003b3a:	231f      	movs	r3, #31
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	2208      	movs	r2, #8
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e012      	b.n	8003b6a <UART_SetConfig+0xf2>
 8003b44:	231f      	movs	r3, #31
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	2210      	movs	r2, #16
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e00d      	b.n	8003b6a <UART_SetConfig+0xf2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a67      	ldr	r2, [pc, #412]	@ (8003cf0 <UART_SetConfig+0x278>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d104      	bne.n	8003b62 <UART_SetConfig+0xea>
 8003b58:	231f      	movs	r3, #31
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	e003      	b.n	8003b6a <UART_SetConfig+0xf2>
 8003b62:	231f      	movs	r3, #31
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	2210      	movs	r2, #16
 8003b68:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d15c      	bne.n	8003c30 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003b76:	231f      	movs	r3, #31
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d015      	beq.n	8003bac <UART_SetConfig+0x134>
 8003b80:	dc18      	bgt.n	8003bb4 <UART_SetConfig+0x13c>
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d00d      	beq.n	8003ba2 <UART_SetConfig+0x12a>
 8003b86:	dc15      	bgt.n	8003bb4 <UART_SetConfig+0x13c>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <UART_SetConfig+0x11a>
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d005      	beq.n	8003b9c <UART_SetConfig+0x124>
 8003b90:	e010      	b.n	8003bb4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b92:	f7ff f879 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 8003b96:	0003      	movs	r3, r0
 8003b98:	61bb      	str	r3, [r7, #24]
        break;
 8003b9a:	e012      	b.n	8003bc2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b9c:	4b55      	ldr	r3, [pc, #340]	@ (8003cf4 <UART_SetConfig+0x27c>)
 8003b9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ba0:	e00f      	b.n	8003bc2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba2:	f7ff f80f 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	61bb      	str	r3, [r7, #24]
        break;
 8003baa:	e00a      	b.n	8003bc2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	61bb      	str	r3, [r7, #24]
        break;
 8003bb2:	e006      	b.n	8003bc2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bb8:	231e      	movs	r3, #30
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
        break;
 8003bc0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d100      	bne.n	8003bca <UART_SetConfig+0x152>
 8003bc8:	e07a      	b.n	8003cc0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	005a      	lsls	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	18d2      	adds	r2, r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	0019      	movs	r1, r3
 8003bdc:	0010      	movs	r0, r2
 8003bde:	f7fc fa93 	bl	8000108 <__udivsi3>
 8003be2:	0003      	movs	r3, r0
 8003be4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b0f      	cmp	r3, #15
 8003bea:	d91c      	bls.n	8003c26 <UART_SetConfig+0x1ae>
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	2380      	movs	r3, #128	@ 0x80
 8003bf0:	025b      	lsls	r3, r3, #9
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d217      	bcs.n	8003c26 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	200e      	movs	r0, #14
 8003bfc:	183b      	adds	r3, r7, r0
 8003bfe:	210f      	movs	r1, #15
 8003c00:	438a      	bics	r2, r1
 8003c02:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2207      	movs	r2, #7
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	b299      	uxth	r1, r3
 8003c10:	183b      	adds	r3, r7, r0
 8003c12:	183a      	adds	r2, r7, r0
 8003c14:	8812      	ldrh	r2, [r2, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	183a      	adds	r2, r7, r0
 8003c20:	8812      	ldrh	r2, [r2, #0]
 8003c22:	60da      	str	r2, [r3, #12]
 8003c24:	e04c      	b.n	8003cc0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003c26:	231e      	movs	r3, #30
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e047      	b.n	8003cc0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c30:	231f      	movs	r3, #31
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d015      	beq.n	8003c66 <UART_SetConfig+0x1ee>
 8003c3a:	dc18      	bgt.n	8003c6e <UART_SetConfig+0x1f6>
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d00d      	beq.n	8003c5c <UART_SetConfig+0x1e4>
 8003c40:	dc15      	bgt.n	8003c6e <UART_SetConfig+0x1f6>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <UART_SetConfig+0x1d4>
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d005      	beq.n	8003c56 <UART_SetConfig+0x1de>
 8003c4a:	e010      	b.n	8003c6e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f7ff f81c 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 8003c50:	0003      	movs	r3, r0
 8003c52:	61bb      	str	r3, [r7, #24]
        break;
 8003c54:	e012      	b.n	8003c7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c56:	4b27      	ldr	r3, [pc, #156]	@ (8003cf4 <UART_SetConfig+0x27c>)
 8003c58:	61bb      	str	r3, [r7, #24]
        break;
 8003c5a:	e00f      	b.n	8003c7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5c:	f7fe ffb2 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003c60:	0003      	movs	r3, r0
 8003c62:	61bb      	str	r3, [r7, #24]
        break;
 8003c64:	e00a      	b.n	8003c7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c66:	2380      	movs	r3, #128	@ 0x80
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	61bb      	str	r3, [r7, #24]
        break;
 8003c6c:	e006      	b.n	8003c7c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c72:	231e      	movs	r3, #30
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
        break;
 8003c7a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01e      	beq.n	8003cc0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	085a      	lsrs	r2, r3, #1
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	18d2      	adds	r2, r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	0019      	movs	r1, r3
 8003c92:	0010      	movs	r0, r2
 8003c94:	f7fc fa38 	bl	8000108 <__udivsi3>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b0f      	cmp	r3, #15
 8003ca0:	d90a      	bls.n	8003cb8 <UART_SetConfig+0x240>
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	2380      	movs	r3, #128	@ 0x80
 8003ca6:	025b      	lsls	r3, r3, #9
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d205      	bcs.n	8003cb8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	e003      	b.n	8003cc0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb8:	231e      	movs	r3, #30
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ccc:	231e      	movs	r3, #30
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	781b      	ldrb	r3, [r3, #0]
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b008      	add	sp, #32
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	ffff69f3 	.word	0xffff69f3
 8003ce0:	ffffcfff 	.word	0xffffcfff
 8003ce4:	fffff4ff 	.word	0xfffff4ff
 8003ce8:	40013800 	.word	0x40013800
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40004400 	.word	0x40004400
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	2208      	movs	r2, #8
 8003d06:	4013      	ands	r3, r2
 8003d08:	d00b      	beq.n	8003d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a4a      	ldr	r2, [pc, #296]	@ (8003e3c <UART_AdvFeatureConfig+0x144>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	2201      	movs	r2, #1
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4a43      	ldr	r2, [pc, #268]	@ (8003e40 <UART_AdvFeatureConfig+0x148>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	0019      	movs	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	2202      	movs	r2, #2
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d00b      	beq.n	8003d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4a3b      	ldr	r2, [pc, #236]	@ (8003e44 <UART_AdvFeatureConfig+0x14c>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	0019      	movs	r1, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4a34      	ldr	r2, [pc, #208]	@ (8003e48 <UART_AdvFeatureConfig+0x150>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	2210      	movs	r2, #16
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d00b      	beq.n	8003daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a2c      	ldr	r2, [pc, #176]	@ (8003e4c <UART_AdvFeatureConfig+0x154>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	2220      	movs	r2, #32
 8003db0:	4013      	ands	r3, r2
 8003db2:	d00b      	beq.n	8003dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	4a25      	ldr	r2, [pc, #148]	@ (8003e50 <UART_AdvFeatureConfig+0x158>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	2240      	movs	r2, #64	@ 0x40
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e54 <UART_AdvFeatureConfig+0x15c>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	0019      	movs	r1, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003df2:	2380      	movs	r3, #128	@ 0x80
 8003df4:	035b      	lsls	r3, r3, #13
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d10b      	bne.n	8003e12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4a15      	ldr	r2, [pc, #84]	@ (8003e58 <UART_AdvFeatureConfig+0x160>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	0019      	movs	r1, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	2280      	movs	r2, #128	@ 0x80
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4a0e      	ldr	r2, [pc, #56]	@ (8003e5c <UART_AdvFeatureConfig+0x164>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	0019      	movs	r1, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b002      	add	sp, #8
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	ffff7fff 	.word	0xffff7fff
 8003e40:	fffdffff 	.word	0xfffdffff
 8003e44:	fffeffff 	.word	0xfffeffff
 8003e48:	fffbffff 	.word	0xfffbffff
 8003e4c:	ffffefff 	.word	0xffffefff
 8003e50:	ffffdfff 	.word	0xffffdfff
 8003e54:	ffefffff 	.word	0xffefffff
 8003e58:	ff9fffff 	.word	0xff9fffff
 8003e5c:	fff7ffff 	.word	0xfff7ffff

08003e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b092      	sub	sp, #72	@ 0x48
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2284      	movs	r2, #132	@ 0x84
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e70:	f7fd fdea 	bl	8001a48 <HAL_GetTick>
 8003e74:	0003      	movs	r3, r0
 8003e76:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2208      	movs	r2, #8
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d12c      	bne.n	8003ee0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e88:	2280      	movs	r2, #128	@ 0x80
 8003e8a:	0391      	lsls	r1, r2, #14
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4a46      	ldr	r2, [pc, #280]	@ (8003fa8 <UART_CheckIdleState+0x148>)
 8003e90:	9200      	str	r2, [sp, #0]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f000 f88c 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 8003e98:	1e03      	subs	r3, r0, #0
 8003e9a:	d021      	beq.n	8003ee0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eac:	f383 8810 	msr	PRIMASK, r3
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2180      	movs	r1, #128	@ 0x80
 8003ebe:	438a      	bics	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec8:	f383 8810 	msr	PRIMASK, r3
}
 8003ecc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2278      	movs	r2, #120	@ 0x78
 8003ed8:	2100      	movs	r1, #0
 8003eda:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e05f      	b.n	8003fa0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d146      	bne.n	8003f7c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef0:	2280      	movs	r2, #128	@ 0x80
 8003ef2:	03d1      	lsls	r1, r2, #15
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa8 <UART_CheckIdleState+0x148>)
 8003ef8:	9200      	str	r2, [sp, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f000 f858 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 8003f00:	1e03      	subs	r3, r0, #0
 8003f02:	d03b      	beq.n	8003f7c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f04:	f3ef 8310 	mrs	r3, PRIMASK
 8003f08:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f0e:	2301      	movs	r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f383 8810 	msr	PRIMASK, r3
}
 8003f18:	46c0      	nop			@ (mov r8, r8)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4921      	ldr	r1, [pc, #132]	@ (8003fac <UART_CheckIdleState+0x14c>)
 8003f26:	400a      	ands	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f383 8810 	msr	PRIMASK, r3
}
 8003f34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f36:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f3c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f40:	2301      	movs	r3, #1
 8003f42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f383 8810 	msr	PRIMASK, r3
}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2101      	movs	r1, #1
 8003f58:	438a      	bics	r2, r1
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f383 8810 	msr	PRIMASK, r3
}
 8003f66:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2280      	movs	r2, #128	@ 0x80
 8003f6c:	2120      	movs	r1, #32
 8003f6e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2278      	movs	r2, #120	@ 0x78
 8003f74:	2100      	movs	r1, #0
 8003f76:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e011      	b.n	8003fa0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2280      	movs	r2, #128	@ 0x80
 8003f86:	2120      	movs	r1, #32
 8003f88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2278      	movs	r2, #120	@ 0x78
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b010      	add	sp, #64	@ 0x40
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	01ffffff 	.word	0x01ffffff
 8003fac:	fffffedf 	.word	0xfffffedf

08003fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	1dfb      	adds	r3, r7, #7
 8003fbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc0:	e051      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	d04e      	beq.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc8:	f7fd fd3e 	bl	8001a48 <HAL_GetTick>
 8003fcc:	0002      	movs	r2, r0
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d302      	bcc.n	8003fde <UART_WaitOnFlagUntilTimeout+0x2e>
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e051      	b.n	8004086 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	4013      	ands	r3, r2
 8003fec:	d03b      	beq.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b80      	cmp	r3, #128	@ 0x80
 8003ff2:	d038      	beq.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b40      	cmp	r3, #64	@ 0x40
 8003ff8:	d035      	beq.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	2208      	movs	r2, #8
 8004002:	4013      	ands	r3, r2
 8004004:	2b08      	cmp	r3, #8
 8004006:	d111      	bne.n	800402c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2208      	movs	r2, #8
 800400e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	0018      	movs	r0, r3
 8004014:	f000 f83c 	bl	8004090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2284      	movs	r2, #132	@ 0x84
 800401c:	2108      	movs	r1, #8
 800401e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2278      	movs	r2, #120	@ 0x78
 8004024:	2100      	movs	r1, #0
 8004026:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e02c      	b.n	8004086 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	2380      	movs	r3, #128	@ 0x80
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	401a      	ands	r2, r3
 8004038:	2380      	movs	r3, #128	@ 0x80
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	429a      	cmp	r2, r3
 800403e:	d112      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2280      	movs	r2, #128	@ 0x80
 8004046:	0112      	lsls	r2, r2, #4
 8004048:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	0018      	movs	r0, r3
 800404e:	f000 f81f 	bl	8004090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2284      	movs	r2, #132	@ 0x84
 8004056:	2120      	movs	r1, #32
 8004058:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2278      	movs	r2, #120	@ 0x78
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e00f      	b.n	8004086 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	425a      	negs	r2, r3
 8004076:	4153      	adcs	r3, r2
 8004078:	b2db      	uxtb	r3, r3
 800407a:	001a      	movs	r2, r3
 800407c:	1dfb      	adds	r3, r7, #7
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d09e      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	b004      	add	sp, #16
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08e      	sub	sp, #56	@ 0x38
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004098:	f3ef 8310 	mrs	r3, PRIMASK
 800409c:	617b      	str	r3, [r7, #20]
  return(result);
 800409e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80040a2:	2301      	movs	r3, #1
 80040a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f383 8810 	msr	PRIMASK, r3
}
 80040ac:	46c0      	nop			@ (mov r8, r8)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4926      	ldr	r1, [pc, #152]	@ (8004154 <UART_EndRxTransfer+0xc4>)
 80040ba:	400a      	ands	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f383 8810 	msr	PRIMASK, r3
}
 80040c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ca:	f3ef 8310 	mrs	r3, PRIMASK
 80040ce:	623b      	str	r3, [r7, #32]
  return(result);
 80040d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80040d4:	2301      	movs	r3, #1
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2101      	movs	r1, #1
 80040ec:	438a      	bics	r2, r1
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004100:	2b01      	cmp	r3, #1
 8004102:	d118      	bne.n	8004136 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004104:	f3ef 8310 	mrs	r3, PRIMASK
 8004108:	60bb      	str	r3, [r7, #8]
  return(result);
 800410a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800410e:	2301      	movs	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			@ (mov r8, r8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2110      	movs	r1, #16
 8004126:	438a      	bics	r2, r1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f383 8810 	msr	PRIMASK, r3
}
 8004134:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2280      	movs	r2, #128	@ 0x80
 800413a:	2120      	movs	r1, #32
 800413c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	b00e      	add	sp, #56	@ 0x38
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	fffffedf 	.word	0xfffffedf

08004158 <memset>:
 8004158:	0003      	movs	r3, r0
 800415a:	1882      	adds	r2, r0, r2
 800415c:	4293      	cmp	r3, r2
 800415e:	d100      	bne.n	8004162 <memset+0xa>
 8004160:	4770      	bx	lr
 8004162:	7019      	strb	r1, [r3, #0]
 8004164:	3301      	adds	r3, #1
 8004166:	e7f9      	b.n	800415c <memset+0x4>

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	2600      	movs	r6, #0
 800416c:	4c0c      	ldr	r4, [pc, #48]	@ (80041a0 <__libc_init_array+0x38>)
 800416e:	4d0d      	ldr	r5, [pc, #52]	@ (80041a4 <__libc_init_array+0x3c>)
 8004170:	1b64      	subs	r4, r4, r5
 8004172:	10a4      	asrs	r4, r4, #2
 8004174:	42a6      	cmp	r6, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	2600      	movs	r6, #0
 800417a:	f000 f819 	bl	80041b0 <_init>
 800417e:	4c0a      	ldr	r4, [pc, #40]	@ (80041a8 <__libc_init_array+0x40>)
 8004180:	4d0a      	ldr	r5, [pc, #40]	@ (80041ac <__libc_init_array+0x44>)
 8004182:	1b64      	subs	r4, r4, r5
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	42a6      	cmp	r6, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	00b3      	lsls	r3, r6, #2
 800418e:	58eb      	ldr	r3, [r5, r3]
 8004190:	4798      	blx	r3
 8004192:	3601      	adds	r6, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	00b3      	lsls	r3, r6, #2
 8004198:	58eb      	ldr	r3, [r5, r3]
 800419a:	4798      	blx	r3
 800419c:	3601      	adds	r6, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	08004240 	.word	0x08004240
 80041a4:	08004240 	.word	0x08004240
 80041a8:	08004244 	.word	0x08004244
 80041ac:	08004240 	.word	0x08004240

080041b0 <_init>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b6:	bc08      	pop	{r3}
 80041b8:	469e      	mov	lr, r3
 80041ba:	4770      	bx	lr

080041bc <_fini>:
 80041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c2:	bc08      	pop	{r3}
 80041c4:	469e      	mov	lr, r3
 80041c6:	4770      	bx	lr
